// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_browse.proto

#include "play_browse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace browse {
PROTOBUF_CONSTEXPR BrowseResponse::BrowseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_)*/{}
  , /*decltype(_impl_.breadcrumb_)*/{}
  , /*decltype(_impl_.quicklink_)*/{}
  , /*decltype(_impl_.browsetab_)*/{}
  , /*decltype(_impl_.contentsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.promourl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backendid_)*/0
  , /*decltype(_impl_.landingtabindex_)*/0
  , /*decltype(_impl_.quicklinktabindex_)*/0
  , /*decltype(_impl_.quicklinkfallbacktabindex_)*/0
  , /*decltype(_impl_.isfamilysafe_)*/false
  , /*decltype(_impl_.tabstyle_)*/0} {}
struct BrowseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrowseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrowseResponseDefaultTypeInternal() {}
  union {
    BrowseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrowseResponseDefaultTypeInternal _BrowseResponse_default_instance_;
PROTOBUF_CONSTEXPR BrowseTab::BrowseTab(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_)*/{}
  , /*decltype(_impl_.quicklink_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quicklinktitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.categoriestitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.highlightsbannerurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entertainmenttabbubble_)*/nullptr
  , /*decltype(_impl_.backendid_)*/0} {}
struct BrowseTabDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrowseTabDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrowseTabDefaultTypeInternal() {}
  union {
    BrowseTab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrowseTabDefaultTypeInternal _BrowseTab_default_instance_;
PROTOBUF_CONSTEXPR BrowseLink::BrowseLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_)*/nullptr} {}
struct BrowseLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrowseLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrowseLinkDefaultTypeInternal() {}
  union {
    BrowseLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrowseLinkDefaultTypeInternal _BrowseLink_default_instance_;
PROTOBUF_CONSTEXPR QuickLink::QuickLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.link_)*/nullptr
  , /*decltype(_impl_.displayrequired_)*/false
  , /*decltype(_impl_.prismstyle_)*/false
  , /*decltype(_impl_.backendid_)*/0} {}
struct QuickLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuickLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuickLinkDefaultTypeInternal() {}
  union {
    QuickLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuickLinkDefaultTypeInternal _QuickLink_default_instance_;
PROTOBUF_CONSTEXPR TabBubble::TabBubble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TabBubbleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabBubbleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabBubbleDefaultTypeInternal() {}
  union {
    TabBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabBubbleDefaultTypeInternal _TabBubble_default_instance_;
}  // namespace browse
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fbrowse_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fbrowse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fbrowse_2eproto = nullptr;

const uint32_t TableStruct_play_5fbrowse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.contentsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.promourl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.breadcrumb_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.quicklink_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.backendid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.browsetab_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.landingtabindex_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.quicklinktabindex_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.quicklinkfallbacktabindex_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.isfamilysafe_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseResponse, _impl_.tabstyle_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.listurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.quicklink_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.quicklinktitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.categoriestitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.backendid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.highlightsbannerurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseTab, _impl_.entertainmenttabbubble_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  7,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseLink, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseLink, _impl_.dataurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseLink, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::BrowseLink, _impl_.image_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.link_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.displayrequired_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.backendid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::QuickLink, _impl_.prismstyle_),
  0,
  2,
  3,
  4,
  1,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::TabBubble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::TabBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::browse::TabBubble, _impl_.text_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::playapi::proto::finsky::browse::BrowseResponse)},
  { 34, 50, -1, sizeof(::playapi::proto::finsky::browse::BrowseTab)},
  { 60, 70, -1, sizeof(::playapi::proto::finsky::browse::BrowseLink)},
  { 74, 87, -1, sizeof(::playapi::proto::finsky::browse::QuickLink)},
  { 94, 101, -1, sizeof(::playapi::proto::finsky::browse::TabBubble)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::browse::_BrowseResponse_default_instance_._instance,
  &::playapi::proto::finsky::browse::_BrowseTab_default_instance_._instance,
  &::playapi::proto::finsky::browse::_BrowseLink_default_instance_._instance,
  &::playapi::proto::finsky::browse::_QuickLink_default_instance_._instance,
  &::playapi::proto::finsky::browse::_TabBubble_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fbrowse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021play_browse.proto\022\033playapi.proto.finsk"
  "y.browse\032\021play_common.proto\032\017play_link.p"
  "roto\"\340\003\n\016BrowseResponse\022\023\n\013contentsUrl\030\001"
  " \001(\t\022\020\n\010promoUrl\030\002 \001(\t\0229\n\010category\030\003 \003(\013"
  "2\'.playapi.proto.finsky.browse.BrowseLin"
  "k\022;\n\nbreadcrumb\030\004 \003(\0132\'.playapi.proto.fi"
  "nsky.browse.BrowseLink\0229\n\tquickLink\030\005 \003("
  "\0132&.playapi.proto.finsky.browse.QuickLin"
  "k\022\030\n\020serverLogsCookie\030\006 \001(\014\022\r\n\005title\030\007 \001"
  "(\t\022\021\n\tbackendId\030\010 \001(\005\0229\n\tbrowseTab\030\t \003(\013"
  "2&.playapi.proto.finsky.browse.BrowseTab"
  "\022\027\n\017landingTabIndex\030\n \001(\005\022\031\n\021quickLinkTa"
  "bIndex\030\013 \001(\005\022!\n\031quickLinkFallbackTabInde"
  "x\030\014 \001(\005\022\024\n\014isFamilySafe\030\016 \001(\010\022\020\n\010tabStyl"
  "e\030\017 \001(\005\"\344\002\n\tBrowseTab\022\r\n\005title\030\001 \001(\t\022\030\n\020"
  "serverLogsCookie\030\002 \001(\014\022\017\n\007listUrl\030\003 \001(\t\022"
  "9\n\010category\030\004 \003(\0132\'.playapi.proto.finsky"
  ".browse.BrowseLink\0229\n\tquickLink\030\005 \003(\0132&."
  "playapi.proto.finsky.browse.QuickLink\022\026\n"
  "\016quickLinkTitle\030\006 \001(\t\022\027\n\017categoriesTitle"
  "\030\007 \001(\t\022\021\n\tbackendId\030\010 \001(\005\022\033\n\023highlightsB"
  "annerUrl\030\t \001(\t\022F\n\026entertainmentTabBubble"
  "\030\n \001(\0132&.playapi.proto.finsky.browse.Tab"
  "Bubble\"q\n\nBrowseLink\022\014\n\004name\030\001 \001(\t\022\017\n\007da"
  "taUrl\030\003 \001(\t\022\030\n\020serverLogsCookie\030\004 \001(\014\022*\n"
  "\005image\030\005 \001(\0132\033.playapi.proto.finsky.Imag"
  "e\"\326\001\n\tQuickLink\022\014\n\004name\030\001 \001(\t\022*\n\005image\030\002"
  " \001(\0132\033.playapi.proto.finsky.Image\0225\n\004lin"
  "k\030\003 \001(\0132\'.playapi.proto.finsky.link.Reso"
  "lvedLink\022\027\n\017displayRequired\030\004 \001(\010\022\030\n\020ser"
  "verLogsCookie\030\005 \001(\014\022\021\n\tbackendId\030\006 \001(\005\022\022"
  "\n\nprismStyle\030\007 \001(\010\"\031\n\tTabBubble\022\014\n\004text\030"
  "\001 \001(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fbrowse_2eproto_deps[2] = {
  &::descriptor_table_play_5fcommon_2eproto,
  &::descriptor_table_play_5flink_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fbrowse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fbrowse_2eproto = {
    false, false, 1285, descriptor_table_protodef_play_5fbrowse_2eproto,
    "play_browse.proto",
    &descriptor_table_play_5fbrowse_2eproto_once, descriptor_table_play_5fbrowse_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_play_5fbrowse_2eproto::offsets,
    file_level_metadata_play_5fbrowse_2eproto, file_level_enum_descriptors_play_5fbrowse_2eproto,
    file_level_service_descriptors_play_5fbrowse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fbrowse_2eproto_getter() {
  return &descriptor_table_play_5fbrowse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fbrowse_2eproto(&descriptor_table_play_5fbrowse_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace browse {

// ===================================================================

class BrowseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BrowseResponse>()._impl_._has_bits_);
  static void set_has_contentsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_promourl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_backendid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_landingtabindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_quicklinktabindex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_quicklinkfallbacktabindex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isfamilysafe(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tabstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

BrowseResponse::BrowseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.browse.BrowseResponse)
}
BrowseResponse::BrowseResponse(const BrowseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrowseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_){from._impl_.category_}
    , decltype(_impl_.breadcrumb_){from._impl_.breadcrumb_}
    , decltype(_impl_.quicklink_){from._impl_.quicklink_}
    , decltype(_impl_.browsetab_){from._impl_.browsetab_}
    , decltype(_impl_.contentsurl_){}
    , decltype(_impl_.promourl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.backendid_){}
    , decltype(_impl_.landingtabindex_){}
    , decltype(_impl_.quicklinktabindex_){}
    , decltype(_impl_.quicklinkfallbacktabindex_){}
    , decltype(_impl_.isfamilysafe_){}
    , decltype(_impl_.tabstyle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contentsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contentsurl()) {
    _this->_impl_.contentsurl_.Set(from._internal_contentsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.promourl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.promourl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_promourl()) {
    _this->_impl_.promourl_.Set(from._internal_promourl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.backendid_, &from._impl_.backendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tabstyle_) -
    reinterpret_cast<char*>(&_impl_.backendid_)) + sizeof(_impl_.tabstyle_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.browse.BrowseResponse)
}

inline void BrowseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_){arena}
    , decltype(_impl_.breadcrumb_){arena}
    , decltype(_impl_.quicklink_){arena}
    , decltype(_impl_.browsetab_){arena}
    , decltype(_impl_.contentsurl_){}
    , decltype(_impl_.promourl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.backendid_){0}
    , decltype(_impl_.landingtabindex_){0}
    , decltype(_impl_.quicklinktabindex_){0}
    , decltype(_impl_.quicklinkfallbacktabindex_){0}
    , decltype(_impl_.isfamilysafe_){false}
    , decltype(_impl_.tabstyle_){0}
  };
  _impl_.contentsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.promourl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.promourl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BrowseResponse::~BrowseResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.browse.BrowseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrowseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.~RepeatedPtrField();
  _impl_.breadcrumb_.~RepeatedPtrField();
  _impl_.quicklink_.~RepeatedPtrField();
  _impl_.browsetab_.~RepeatedPtrField();
  _impl_.contentsurl_.Destroy();
  _impl_.promourl_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  _impl_.title_.Destroy();
}

void BrowseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrowseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.browse.BrowseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.Clear();
  _impl_.breadcrumb_.Clear();
  _impl_.quicklink_.Clear();
  _impl_.browsetab_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.contentsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.promourl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.backendid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quicklinkfallbacktabindex_) -
        reinterpret_cast<char*>(&_impl_.backendid_)) + sizeof(_impl_.quicklinkfallbacktabindex_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.isfamilysafe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tabstyle_) -
        reinterpret_cast<char*>(&_impl_.isfamilysafe_)) + sizeof(_impl_.tabstyle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrowseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string contentsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contentsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseResponse.contentsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string promoUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_promourl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseResponse.promoUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.browse.BrowseLink category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.browse.BrowseLink breadcrumb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_breadcrumb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quicklink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseResponse.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 backendId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_backendid(&has_bits);
          _impl_.backendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.browse.BrowseTab browseTab = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_browsetab(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 landingTabIndex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_landingtabindex(&has_bits);
          _impl_.landingtabindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quickLinkTabIndex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_quicklinktabindex(&has_bits);
          _impl_.quicklinktabindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quickLinkFallbackTabIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_quicklinkfallbacktabindex(&has_bits);
          _impl_.quicklinkfallbacktabindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isFamilySafe = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_isfamilysafe(&has_bits);
          _impl_.isfamilysafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tabStyle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tabstyle(&has_bits);
          _impl_.tabstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrowseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.browse.BrowseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string contentsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contentsurl().data(), static_cast<int>(this->_internal_contentsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseResponse.contentsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contentsurl(), target);
  }

  // optional string promoUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_promourl().data(), static_cast<int>(this->_internal_promourl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseResponse.promoUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_promourl(), target);
  }

  // repeated .playapi.proto.finsky.browse.BrowseLink category = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_size()); i < n; i++) {
    const auto& repfield = this->_internal_category(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.browse.BrowseLink breadcrumb = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_breadcrumb_size()); i < n; i++) {
    const auto& repfield = this->_internal_breadcrumb(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quicklink_size()); i < n; i++) {
    const auto& repfield = this->_internal_quicklink(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes serverLogsCookie = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_serverlogscookie(), target);
  }

  // optional string title = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseResponse.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // optional int32 backendId = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_backendid(), target);
  }

  // repeated .playapi.proto.finsky.browse.BrowseTab browseTab = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_browsetab_size()); i < n; i++) {
    const auto& repfield = this->_internal_browsetab(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 landingTabIndex = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_landingtabindex(), target);
  }

  // optional int32 quickLinkTabIndex = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_quicklinktabindex(), target);
  }

  // optional int32 quickLinkFallbackTabIndex = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_quicklinkfallbacktabindex(), target);
  }

  // optional bool isFamilySafe = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_isfamilysafe(), target);
  }

  // optional int32 tabStyle = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_tabstyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.browse.BrowseResponse)
  return target;
}

size_t BrowseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.browse.BrowseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.browse.BrowseLink category = 3;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->_impl_.category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.browse.BrowseLink breadcrumb = 4;
  total_size += 1UL * this->_internal_breadcrumb_size();
  for (const auto& msg : this->_impl_.breadcrumb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
  total_size += 1UL * this->_internal_quicklink_size();
  for (const auto& msg : this->_impl_.quicklink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.browse.BrowseTab browseTab = 9;
  total_size += 1UL * this->_internal_browsetab_size();
  for (const auto& msg : this->_impl_.browsetab_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contentsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentsurl());
    }

    // optional string promoUrl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_promourl());
    }

    // optional bytes serverLogsCookie = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional string title = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional int32 backendId = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backendid());
    }

    // optional int32 landingTabIndex = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_landingtabindex());
    }

    // optional int32 quickLinkTabIndex = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quicklinktabindex());
    }

    // optional int32 quickLinkFallbackTabIndex = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quicklinkfallbacktabindex());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool isFamilySafe = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 tabStyle = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tabstyle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrowseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrowseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrowseResponse::GetClassData() const { return &_class_data_; }


void BrowseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrowseResponse*>(&to_msg);
  auto& from = static_cast<const BrowseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.browse.BrowseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.category_.MergeFrom(from._impl_.category_);
  _this->_impl_.breadcrumb_.MergeFrom(from._impl_.breadcrumb_);
  _this->_impl_.quicklink_.MergeFrom(from._impl_.quicklink_);
  _this->_impl_.browsetab_.MergeFrom(from._impl_.browsetab_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_contentsurl(from._internal_contentsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_promourl(from._internal_promourl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.backendid_ = from._impl_.backendid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.landingtabindex_ = from._impl_.landingtabindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.quicklinktabindex_ = from._impl_.quicklinktabindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.quicklinkfallbacktabindex_ = from._impl_.quicklinkfallbacktabindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.isfamilysafe_ = from._impl_.isfamilysafe_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tabstyle_ = from._impl_.tabstyle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrowseResponse::CopyFrom(const BrowseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.browse.BrowseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseResponse::IsInitialized() const {
  return true;
}

void BrowseResponse::InternalSwap(BrowseResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.category_.InternalSwap(&other->_impl_.category_);
  _impl_.breadcrumb_.InternalSwap(&other->_impl_.breadcrumb_);
  _impl_.quicklink_.InternalSwap(&other->_impl_.quicklink_);
  _impl_.browsetab_.InternalSwap(&other->_impl_.browsetab_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contentsurl_, lhs_arena,
      &other->_impl_.contentsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.promourl_, lhs_arena,
      &other->_impl_.promourl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrowseResponse, _impl_.tabstyle_)
      + sizeof(BrowseResponse::_impl_.tabstyle_)
      - PROTOBUF_FIELD_OFFSET(BrowseResponse, _impl_.backendid_)>(
          reinterpret_cast<char*>(&_impl_.backendid_),
          reinterpret_cast<char*>(&other->_impl_.backendid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrowseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fbrowse_2eproto_getter, &descriptor_table_play_5fbrowse_2eproto_once,
      file_level_metadata_play_5fbrowse_2eproto[0]);
}

// ===================================================================

class BrowseTab::_Internal {
 public:
  using HasBits = decltype(std::declval<BrowseTab>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_listurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quicklinktitle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_categoriestitle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_backendid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_highlightsbannerurl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::playapi::proto::finsky::browse::TabBubble& entertainmenttabbubble(const BrowseTab* msg);
  static void set_has_entertainmenttabbubble(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::playapi::proto::finsky::browse::TabBubble&
BrowseTab::_Internal::entertainmenttabbubble(const BrowseTab* msg) {
  return *msg->_impl_.entertainmenttabbubble_;
}
BrowseTab::BrowseTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.browse.BrowseTab)
}
BrowseTab::BrowseTab(const BrowseTab& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrowseTab* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_){from._impl_.category_}
    , decltype(_impl_.quicklink_){from._impl_.quicklink_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.listurl_){}
    , decltype(_impl_.quicklinktitle_){}
    , decltype(_impl_.categoriestitle_){}
    , decltype(_impl_.highlightsbannerurl_){}
    , decltype(_impl_.entertainmenttabbubble_){nullptr}
    , decltype(_impl_.backendid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_listurl()) {
    _this->_impl_.listurl_.Set(from._internal_listurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quicklinktitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quicklinktitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_quicklinktitle()) {
    _this->_impl_.quicklinktitle_.Set(from._internal_quicklinktitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.categoriestitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.categoriestitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_categoriestitle()) {
    _this->_impl_.categoriestitle_.Set(from._internal_categoriestitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.highlightsbannerurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.highlightsbannerurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_highlightsbannerurl()) {
    _this->_impl_.highlightsbannerurl_.Set(from._internal_highlightsbannerurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_entertainmenttabbubble()) {
    _this->_impl_.entertainmenttabbubble_ = new ::playapi::proto::finsky::browse::TabBubble(*from._impl_.entertainmenttabbubble_);
  }
  _this->_impl_.backendid_ = from._impl_.backendid_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.browse.BrowseTab)
}

inline void BrowseTab::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_){arena}
    , decltype(_impl_.quicklink_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.listurl_){}
    , decltype(_impl_.quicklinktitle_){}
    , decltype(_impl_.categoriestitle_){}
    , decltype(_impl_.highlightsbannerurl_){}
    , decltype(_impl_.entertainmenttabbubble_){nullptr}
    , decltype(_impl_.backendid_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quicklinktitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quicklinktitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.categoriestitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.categoriestitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.highlightsbannerurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.highlightsbannerurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BrowseTab::~BrowseTab() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.browse.BrowseTab)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrowseTab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.~RepeatedPtrField();
  _impl_.quicklink_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  _impl_.listurl_.Destroy();
  _impl_.quicklinktitle_.Destroy();
  _impl_.categoriestitle_.Destroy();
  _impl_.highlightsbannerurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.entertainmenttabbubble_;
}

void BrowseTab::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrowseTab::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.browse.BrowseTab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.Clear();
  _impl_.quicklink_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.listurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.quicklinktitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.categoriestitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.highlightsbannerurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.entertainmenttabbubble_ != nullptr);
      _impl_.entertainmenttabbubble_->Clear();
    }
  }
  _impl_.backendid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrowseTab::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseTab.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string listUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_listurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseTab.listUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.browse.BrowseLink category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quicklink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string quickLinkTitle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_quicklinktitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseTab.quickLinkTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string categoriesTitle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_categoriestitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseTab.categoriesTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 backendId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_backendid(&has_bits);
          _impl_.backendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string highlightsBannerUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_highlightsbannerurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.browse.TabBubble entertainmentTabBubble = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_entertainmenttabbubble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrowseTab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.browse.BrowseTab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseTab.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional bytes serverLogsCookie = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serverlogscookie(), target);
  }

  // optional string listUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_listurl().data(), static_cast<int>(this->_internal_listurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseTab.listUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_listurl(), target);
  }

  // repeated .playapi.proto.finsky.browse.BrowseLink category = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_size()); i < n; i++) {
    const auto& repfield = this->_internal_category(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quicklink_size()); i < n; i++) {
    const auto& repfield = this->_internal_quicklink(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string quickLinkTitle = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_quicklinktitle().data(), static_cast<int>(this->_internal_quicklinktitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseTab.quickLinkTitle");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_quicklinktitle(), target);
  }

  // optional string categoriesTitle = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_categoriestitle().data(), static_cast<int>(this->_internal_categoriestitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseTab.categoriesTitle");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_categoriestitle(), target);
  }

  // optional int32 backendId = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_backendid(), target);
  }

  // optional string highlightsBannerUrl = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_highlightsbannerurl().data(), static_cast<int>(this->_internal_highlightsbannerurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_highlightsbannerurl(), target);
  }

  // optional .playapi.proto.finsky.browse.TabBubble entertainmentTabBubble = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::entertainmenttabbubble(this),
        _Internal::entertainmenttabbubble(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.browse.BrowseTab)
  return target;
}

size_t BrowseTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.browse.BrowseTab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.browse.BrowseLink category = 4;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->_impl_.category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
  total_size += 1UL * this->_internal_quicklink_size();
  for (const auto& msg : this->_impl_.quicklink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes serverLogsCookie = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional string listUrl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_listurl());
    }

    // optional string quickLinkTitle = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_quicklinktitle());
    }

    // optional string categoriesTitle = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_categoriestitle());
    }

    // optional string highlightsBannerUrl = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_highlightsbannerurl());
    }

    // optional .playapi.proto.finsky.browse.TabBubble entertainmentTabBubble = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entertainmenttabbubble_);
    }

    // optional int32 backendId = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backendid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrowseTab::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrowseTab::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrowseTab::GetClassData() const { return &_class_data_; }


void BrowseTab::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrowseTab*>(&to_msg);
  auto& from = static_cast<const BrowseTab&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.browse.BrowseTab)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.category_.MergeFrom(from._impl_.category_);
  _this->_impl_.quicklink_.MergeFrom(from._impl_.quicklink_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_listurl(from._internal_listurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_quicklinktitle(from._internal_quicklinktitle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_categoriestitle(from._internal_categoriestitle());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_highlightsbannerurl(from._internal_highlightsbannerurl());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_entertainmenttabbubble()->::playapi::proto::finsky::browse::TabBubble::MergeFrom(
          from._internal_entertainmenttabbubble());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.backendid_ = from._impl_.backendid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrowseTab::CopyFrom(const BrowseTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.browse.BrowseTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseTab::IsInitialized() const {
  return true;
}

void BrowseTab::InternalSwap(BrowseTab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.category_.InternalSwap(&other->_impl_.category_);
  _impl_.quicklink_.InternalSwap(&other->_impl_.quicklink_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listurl_, lhs_arena,
      &other->_impl_.listurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quicklinktitle_, lhs_arena,
      &other->_impl_.quicklinktitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.categoriestitle_, lhs_arena,
      &other->_impl_.categoriestitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.highlightsbannerurl_, lhs_arena,
      &other->_impl_.highlightsbannerurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrowseTab, _impl_.backendid_)
      + sizeof(BrowseTab::_impl_.backendid_)
      - PROTOBUF_FIELD_OFFSET(BrowseTab, _impl_.entertainmenttabbubble_)>(
          reinterpret_cast<char*>(&_impl_.entertainmenttabbubble_),
          reinterpret_cast<char*>(&other->_impl_.entertainmenttabbubble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrowseTab::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fbrowse_2eproto_getter, &descriptor_table_play_5fbrowse_2eproto_once,
      file_level_metadata_play_5fbrowse_2eproto[1]);
}

// ===================================================================

class BrowseLink::_Internal {
 public:
  using HasBits = decltype(std::declval<BrowseLink>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dataurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::Image& image(const BrowseLink* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::playapi::proto::finsky::Image&
BrowseLink::_Internal::image(const BrowseLink* msg) {
  return *msg->_impl_.image_;
}
void BrowseLink::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
BrowseLink::BrowseLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.browse.BrowseLink)
}
BrowseLink::BrowseLink(const BrowseLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrowseLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.dataurl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.image_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dataurl()) {
    _this->_impl_.dataurl_.Set(from._internal_dataurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::playapi::proto::finsky::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.browse.BrowseLink)
}

inline void BrowseLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.dataurl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.image_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BrowseLink::~BrowseLink() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.browse.BrowseLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrowseLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.dataurl_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  if (this != internal_default_instance()) delete _impl_.image_;
}

void BrowseLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrowseLink::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.browse.BrowseLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.dataurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrowseLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseLink.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dataUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dataurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.BrowseLink.dataUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrowseLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.browse.BrowseLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseLink.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string dataUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dataurl().data(), static_cast<int>(this->_internal_dataurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.BrowseLink.dataUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataurl(), target);
  }

  // optional bytes serverLogsCookie = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serverlogscookie(), target);
  }

  // optional .playapi.proto.finsky.Image image = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.browse.BrowseLink)
  return target;
}

size_t BrowseLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.browse.BrowseLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string dataUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dataurl());
    }

    // optional bytes serverLogsCookie = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional .playapi.proto.finsky.Image image = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrowseLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrowseLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrowseLink::GetClassData() const { return &_class_data_; }


void BrowseLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrowseLink*>(&to_msg);
  auto& from = static_cast<const BrowseLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.browse.BrowseLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_dataurl(from._internal_dataurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_image()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_image());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrowseLink::CopyFrom(const BrowseLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.browse.BrowseLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseLink::IsInitialized() const {
  return true;
}

void BrowseLink::InternalSwap(BrowseLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataurl_, lhs_arena,
      &other->_impl_.dataurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrowseLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fbrowse_2eproto_getter, &descriptor_table_play_5fbrowse_2eproto_once,
      file_level_metadata_play_5fbrowse_2eproto[2]);
}

// ===================================================================

class QuickLink::_Internal {
 public:
  using HasBits = decltype(std::declval<QuickLink>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::Image& image(const QuickLink* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::link::ResolvedLink& link(const QuickLink* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_displayrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backendid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prismstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::playapi::proto::finsky::Image&
QuickLink::_Internal::image(const QuickLink* msg) {
  return *msg->_impl_.image_;
}
const ::playapi::proto::finsky::link::ResolvedLink&
QuickLink::_Internal::link(const QuickLink* msg) {
  return *msg->_impl_.link_;
}
void QuickLink::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void QuickLink::clear_link() {
  if (_impl_.link_ != nullptr) _impl_.link_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
QuickLink::QuickLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.browse.QuickLink)
}
QuickLink::QuickLink(const QuickLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuickLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.link_){nullptr}
    , decltype(_impl_.displayrequired_){}
    , decltype(_impl_.prismstyle_){}
    , decltype(_impl_.backendid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::playapi::proto::finsky::Image(*from._impl_.image_);
  }
  if (from._internal_has_link()) {
    _this->_impl_.link_ = new ::playapi::proto::finsky::link::ResolvedLink(*from._impl_.link_);
  }
  ::memcpy(&_impl_.displayrequired_, &from._impl_.displayrequired_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.backendid_) -
    reinterpret_cast<char*>(&_impl_.displayrequired_)) + sizeof(_impl_.backendid_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.browse.QuickLink)
}

inline void QuickLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.link_){nullptr}
    , decltype(_impl_.displayrequired_){false}
    , decltype(_impl_.prismstyle_){false}
    , decltype(_impl_.backendid_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuickLink::~QuickLink() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.browse.QuickLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuickLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.link_;
}

void QuickLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuickLink::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.browse.QuickLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.link_ != nullptr);
      _impl_.link_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.displayrequired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.backendid_) -
        reinterpret_cast<char*>(&_impl_.displayrequired_)) + sizeof(_impl_.backendid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuickLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.QuickLink.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.ResolvedLink link = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool displayRequired = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_displayrequired(&has_bits);
          _impl_.displayrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 backendId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_backendid(&has_bits);
          _impl_.backendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prismStyle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_prismstyle(&has_bits);
          _impl_.prismstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuickLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.browse.QuickLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.QuickLink.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .playapi.proto.finsky.Image image = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.link.ResolvedLink link = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  // optional bool displayRequired = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_displayrequired(), target);
  }

  // optional bytes serverLogsCookie = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_serverlogscookie(), target);
  }

  // optional int32 backendId = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_backendid(), target);
  }

  // optional bool prismStyle = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_prismstyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.browse.QuickLink)
  return target;
}

size_t QuickLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.browse.QuickLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes serverLogsCookie = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional .playapi.proto.finsky.Image image = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

    // optional .playapi.proto.finsky.link.ResolvedLink link = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_);
    }

    // optional bool displayRequired = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool prismStyle = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 backendId = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backendid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuickLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuickLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuickLink::GetClassData() const { return &_class_data_; }


void QuickLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuickLink*>(&to_msg);
  auto& from = static_cast<const QuickLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.browse.QuickLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_image()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_image());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_link()->::playapi::proto::finsky::link::ResolvedLink::MergeFrom(
          from._internal_link());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.displayrequired_ = from._impl_.displayrequired_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.prismstyle_ = from._impl_.prismstyle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.backendid_ = from._impl_.backendid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuickLink::CopyFrom(const QuickLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.browse.QuickLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickLink::IsInitialized() const {
  return true;
}

void QuickLink::InternalSwap(QuickLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuickLink, _impl_.backendid_)
      + sizeof(QuickLink::_impl_.backendid_)
      - PROTOBUF_FIELD_OFFSET(QuickLink, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuickLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fbrowse_2eproto_getter, &descriptor_table_play_5fbrowse_2eproto_once,
      file_level_metadata_play_5fbrowse_2eproto[3]);
}

// ===================================================================

class TabBubble::_Internal {
 public:
  using HasBits = decltype(std::declval<TabBubble>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TabBubble::TabBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.browse.TabBubble)
}
TabBubble::TabBubble(const TabBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabBubble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.browse.TabBubble)
}

inline void TabBubble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TabBubble::~TabBubble() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.browse.TabBubble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void TabBubble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.browse.TabBubble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabBubble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.browse.TabBubble.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabBubble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.browse.TabBubble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.browse.TabBubble.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.browse.TabBubble)
  return target;
}

size_t TabBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.browse.TabBubble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabBubble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabBubble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabBubble::GetClassData() const { return &_class_data_; }


void TabBubble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabBubble*>(&to_msg);
  auto& from = static_cast<const TabBubble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.browse.TabBubble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabBubble::CopyFrom(const TabBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.browse.TabBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabBubble::IsInitialized() const {
  return true;
}

void TabBubble::InternalSwap(TabBubble* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TabBubble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fbrowse_2eproto_getter, &descriptor_table_play_5fbrowse_2eproto_once,
      file_level_metadata_play_5fbrowse_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace browse
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::browse::BrowseResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::browse::BrowseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::browse::BrowseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::browse::BrowseTab*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::browse::BrowseTab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::browse::BrowseTab >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::browse::BrowseLink*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::browse::BrowseLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::browse::BrowseLink >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::browse::QuickLink*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::browse::QuickLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::browse::QuickLink >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::browse::TabBubble*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::browse::TabBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::browse::TabBubble >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
