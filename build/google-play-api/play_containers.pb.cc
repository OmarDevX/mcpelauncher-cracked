// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_containers.proto

#include "play_containers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace containers {
PROTOBUF_CONSTEXPR ContainerMetadata::ContainerMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.containerview_)*/{}
  , /*decltype(_impl_.browseurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nextpageurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.analyticscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lefticon_)*/nullptr
  , /*decltype(_impl_.relevance_)*/0
  , /*decltype(_impl_.estimatedresults_)*/int64_t{0}
  , /*decltype(_impl_.ordered_)*/false} {}
struct ContainerMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerMetadataDefaultTypeInternal() {}
  union {
    ContainerMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerMetadataDefaultTypeInternal _ContainerMetadata_default_instance_;
PROTOBUF_CONSTEXPR ContainerView::ContainerView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selected_)*/false} {}
struct ContainerViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerViewDefaultTypeInternal() {}
  union {
    ContainerView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerViewDefaultTypeInternal _ContainerView_default_instance_;
}  // namespace containers
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fcontainers_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fcontainers_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fcontainers_2eproto = nullptr;

const uint32_t TableStruct_play_5fcontainers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.browseurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.nextpageurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.relevance_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.estimatedresults_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.analyticscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.ordered_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.containerview_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerMetadata, _impl_.lefticon_),
  0,
  1,
  4,
  5,
  2,
  6,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerView, _impl_.selected_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerView, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerView, _impl_.listurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::containers::ContainerView, _impl_.serverlogscookie_),
  3,
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::playapi::proto::finsky::containers::ContainerMetadata)},
  { 22, 32, -1, sizeof(::playapi::proto::finsky::containers::ContainerView)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::containers::_ContainerMetadata_default_instance_._instance,
  &::playapi::proto::finsky::containers::_ContainerView_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fcontainers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025play_containers.proto\022\037playapi.proto.f"
  "insky.containers\032\021play_common.proto\"\210\002\n\021"
  "ContainerMetadata\022\021\n\tbrowseUrl\030\001 \001(\t\022\023\n\013"
  "nextPageUrl\030\002 \001(\t\022\021\n\trelevance\030\003 \001(\001\022\030\n\020"
  "estimatedResults\030\004 \001(\003\022\027\n\017analyticsCooki"
  "e\030\005 \001(\t\022\017\n\007ordered\030\006 \001(\010\022E\n\rcontainerVie"
  "w\030\007 \003(\0132..playapi.proto.finsky.container"
  "s.ContainerView\022-\n\010leftIcon\030\010 \001(\0132\033.play"
  "api.proto.finsky.Image\"[\n\rContainerView\022"
  "\020\n\010selected\030\001 \001(\010\022\r\n\005title\030\002 \001(\t\022\017\n\007list"
  "Url\030\003 \001(\t\022\030\n\020serverLogsCookie\030\004 \001(\014"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fcontainers_2eproto_deps[1] = {
  &::descriptor_table_play_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fcontainers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fcontainers_2eproto = {
    false, false, 435, descriptor_table_protodef_play_5fcontainers_2eproto,
    "play_containers.proto",
    &descriptor_table_play_5fcontainers_2eproto_once, descriptor_table_play_5fcontainers_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_play_5fcontainers_2eproto::offsets,
    file_level_metadata_play_5fcontainers_2eproto, file_level_enum_descriptors_play_5fcontainers_2eproto,
    file_level_service_descriptors_play_5fcontainers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fcontainers_2eproto_getter() {
  return &descriptor_table_play_5fcontainers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fcontainers_2eproto(&descriptor_table_play_5fcontainers_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace containers {

// ===================================================================

class ContainerMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerMetadata>()._impl_._has_bits_);
  static void set_has_browseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nextpageurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relevance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_estimatedresults(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_analyticscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordered(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::playapi::proto::finsky::Image& lefticon(const ContainerMetadata* msg);
  static void set_has_lefticon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::playapi::proto::finsky::Image&
ContainerMetadata::_Internal::lefticon(const ContainerMetadata* msg) {
  return *msg->_impl_.lefticon_;
}
void ContainerMetadata::clear_lefticon() {
  if (_impl_.lefticon_ != nullptr) _impl_.lefticon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ContainerMetadata::ContainerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.containers.ContainerMetadata)
}
ContainerMetadata::ContainerMetadata(const ContainerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containerview_){from._impl_.containerview_}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.nextpageurl_){}
    , decltype(_impl_.analyticscookie_){}
    , decltype(_impl_.lefticon_){nullptr}
    , decltype(_impl_.relevance_){}
    , decltype(_impl_.estimatedresults_){}
    , decltype(_impl_.ordered_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_browseurl()) {
    _this->_impl_.browseurl_.Set(from._internal_browseurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nextpageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nextpageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nextpageurl()) {
    _this->_impl_.nextpageurl_.Set(from._internal_nextpageurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.analyticscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyticscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_analyticscookie()) {
    _this->_impl_.analyticscookie_.Set(from._internal_analyticscookie(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lefticon()) {
    _this->_impl_.lefticon_ = new ::playapi::proto::finsky::Image(*from._impl_.lefticon_);
  }
  ::memcpy(&_impl_.relevance_, &from._impl_.relevance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ordered_) -
    reinterpret_cast<char*>(&_impl_.relevance_)) + sizeof(_impl_.ordered_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.containers.ContainerMetadata)
}

inline void ContainerMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containerview_){arena}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.nextpageurl_){}
    , decltype(_impl_.analyticscookie_){}
    , decltype(_impl_.lefticon_){nullptr}
    , decltype(_impl_.relevance_){0}
    , decltype(_impl_.estimatedresults_){int64_t{0}}
    , decltype(_impl_.ordered_){false}
  };
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nextpageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nextpageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.analyticscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyticscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContainerMetadata::~ContainerMetadata() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.containers.ContainerMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.containerview_.~RepeatedPtrField();
  _impl_.browseurl_.Destroy();
  _impl_.nextpageurl_.Destroy();
  _impl_.analyticscookie_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lefticon_;
}

void ContainerMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.containers.ContainerMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.containerview_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.browseurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nextpageurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.analyticscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lefticon_ != nullptr);
      _impl_.lefticon_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.relevance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ordered_) -
        reinterpret_cast<char*>(&_impl_.relevance_)) + sizeof(_impl_.ordered_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string browseUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_browseurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.containers.ContainerMetadata.browseUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string nextPageUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nextpageurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double relevance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_relevance(&has_bits);
          _impl_.relevance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 estimatedResults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_estimatedresults(&has_bits);
          _impl_.estimatedresults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string analyticsCookie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_analyticscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool ordered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ordered(&has_bits);
          _impl_.ordered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.containers.ContainerView containerView = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containerview(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image leftIcon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefticon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.containers.ContainerMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string browseUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_browseurl().data(), static_cast<int>(this->_internal_browseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.containers.ContainerMetadata.browseUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_browseurl(), target);
  }

  // optional string nextPageUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nextpageurl().data(), static_cast<int>(this->_internal_nextpageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nextpageurl(), target);
  }

  // optional double relevance = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_relevance(), target);
  }

  // optional int64 estimatedResults = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_estimatedresults(), target);
  }

  // optional string analyticsCookie = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_analyticscookie().data(), static_cast<int>(this->_internal_analyticscookie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_analyticscookie(), target);
  }

  // optional bool ordered = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ordered(), target);
  }

  // repeated .playapi.proto.finsky.containers.ContainerView containerView = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_containerview_size()); i < n; i++) {
    const auto& repfield = this->_internal_containerview(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.Image leftIcon = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::lefticon(this),
        _Internal::lefticon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.containers.ContainerMetadata)
  return target;
}

size_t ContainerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.containers.ContainerMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.containers.ContainerView containerView = 7;
  total_size += 1UL * this->_internal_containerview_size();
  for (const auto& msg : this->_impl_.containerview_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string browseUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_browseurl());
    }

    // optional string nextPageUrl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nextpageurl());
    }

    // optional string analyticsCookie = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_analyticscookie());
    }

    // optional .playapi.proto.finsky.Image leftIcon = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lefticon_);
    }

    // optional double relevance = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int64 estimatedResults = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_estimatedresults());
    }

    // optional bool ordered = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerMetadata::GetClassData() const { return &_class_data_; }


void ContainerMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerMetadata*>(&to_msg);
  auto& from = static_cast<const ContainerMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.containers.ContainerMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.containerview_.MergeFrom(from._impl_.containerview_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_browseurl(from._internal_browseurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_nextpageurl(from._internal_nextpageurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_analyticscookie(from._internal_analyticscookie());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lefticon()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_lefticon());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.relevance_ = from._impl_.relevance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.estimatedresults_ = from._impl_.estimatedresults_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ordered_ = from._impl_.ordered_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerMetadata::CopyFrom(const ContainerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.containers.ContainerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerMetadata::IsInitialized() const {
  return true;
}

void ContainerMetadata::InternalSwap(ContainerMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.containerview_.InternalSwap(&other->_impl_.containerview_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browseurl_, lhs_arena,
      &other->_impl_.browseurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nextpageurl_, lhs_arena,
      &other->_impl_.nextpageurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.analyticscookie_, lhs_arena,
      &other->_impl_.analyticscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerMetadata, _impl_.ordered_)
      + sizeof(ContainerMetadata::_impl_.ordered_)
      - PROTOBUF_FIELD_OFFSET(ContainerMetadata, _impl_.lefticon_)>(
          reinterpret_cast<char*>(&_impl_.lefticon_),
          reinterpret_cast<char*>(&other->_impl_.lefticon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fcontainers_2eproto_getter, &descriptor_table_play_5fcontainers_2eproto_once,
      file_level_metadata_play_5fcontainers_2eproto[0]);
}

// ===================================================================

class ContainerView::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerView>()._impl_._has_bits_);
  static void set_has_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_listurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContainerView::ContainerView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.containers.ContainerView)
}
ContainerView::ContainerView(const ContainerView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.listurl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.selected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_listurl()) {
    _this->_impl_.listurl_.Set(from._internal_listurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.selected_ = from._impl_.selected_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.containers.ContainerView)
}

inline void ContainerView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.listurl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.selected_){false}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContainerView::~ContainerView() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.containers.ContainerView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.listurl_.Destroy();
  _impl_.serverlogscookie_.Destroy();
}

void ContainerView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerView::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.containers.ContainerView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.listurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.selected_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool selected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_selected(&has_bits);
          _impl_.selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.containers.ContainerView.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string listUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_listurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.containers.ContainerView.listUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.containers.ContainerView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool selected = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_selected(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.containers.ContainerView.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string listUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_listurl().data(), static_cast<int>(this->_internal_listurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.containers.ContainerView.listUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_listurl(), target);
  }

  // optional bytes serverLogsCookie = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serverlogscookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.containers.ContainerView)
  return target;
}

size_t ContainerView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.containers.ContainerView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string listUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_listurl());
    }

    // optional bytes serverLogsCookie = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional bool selected = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerView::GetClassData() const { return &_class_data_; }


void ContainerView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerView*>(&to_msg);
  auto& from = static_cast<const ContainerView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.containers.ContainerView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_listurl(from._internal_listurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.selected_ = from._impl_.selected_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerView::CopyFrom(const ContainerView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.containers.ContainerView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerView::IsInitialized() const {
  return true;
}

void ContainerView::InternalSwap(ContainerView* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listurl_, lhs_arena,
      &other->_impl_.listurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  swap(_impl_.selected_, other->_impl_.selected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fcontainers_2eproto_getter, &descriptor_table_play_5fcontainers_2eproto_once,
      file_level_metadata_play_5fcontainers_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace containers
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::containers::ContainerMetadata*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::containers::ContainerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::containers::ContainerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::containers::ContainerView*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::containers::ContainerView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::containers::ContainerView >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
