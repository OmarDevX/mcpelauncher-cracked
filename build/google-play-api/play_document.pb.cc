// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_document.proto

#include "play_document.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace document {
PROTOBUF_CONSTEXPR DocV2::DocV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.offer_)*/{}
  , /*decltype(_impl_.image_)*/{}
  , /*decltype(_impl_.child_)*/{}
  , /*decltype(_impl_.tip_)*/{}
  , /*decltype(_impl_.docid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backenddocid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descriptionhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shareurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reviewsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backendurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.purchasedetailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translateddescriptionhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.promotionaldescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.snippetsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.availability_)*/nullptr
  , /*decltype(_impl_.containermetadata_)*/nullptr
  , /*decltype(_impl_.details_)*/nullptr
  , /*decltype(_impl_.aggregaterating_)*/nullptr
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_.productdetails_)*/nullptr
  , /*decltype(_impl_.doctype_)*/0
  , /*decltype(_impl_.backendid_)*/0
  , /*decltype(_impl_.detailsreusable_)*/false
  , /*decltype(_impl_.mature_)*/false
  , /*decltype(_impl_.availableforpreregistration_)*/false
  , /*decltype(_impl_.forceshareability_)*/false
  , /*decltype(_impl_.usewishlistasprimaryaction_)*/false} {}
struct DocV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocV2DefaultTypeInternal() {}
  union {
    DocV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocV2DefaultTypeInternal _DocV2_default_instance_;
PROTOBUF_CONSTEXPR Annotations::Annotations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.warning_)*/{}
  , /*decltype(_impl_.badgeforcreator_)*/{}
  , /*decltype(_impl_.badgefordoc_)*/{}
  , /*decltype(_impl_.promoteddoc_)*/{}
  , /*decltype(_impl_.subscription_)*/{}
  , /*decltype(_impl_.docbadgecontainer_)*/{}
  , /*decltype(_impl_.overflowlink_)*/{}
  , /*decltype(_impl_.voucherinfo_)*/{}
  , /*decltype(_impl_.detailspagecluster_)*/{}
  , /*decltype(_impl_.featurebadge_)*/{}
  , /*decltype(_impl_.offernote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privacypolicyurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attributionhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.applicablevoucherdescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sectionrelated_)*/nullptr
  , /*decltype(_impl_.sectionmoreby_)*/nullptr
  , /*decltype(_impl_.plusonedata_)*/nullptr
  , /*decltype(_impl_.sectionbodyofwork_)*/nullptr
  , /*decltype(_impl_.sectioncorecontent_)*/nullptr
  , /*decltype(_impl_.link_)*/nullptr
  , /*decltype(_impl_.sectioncrosssell_)*/nullptr
  , /*decltype(_impl_.sectionrelateddoctype_)*/nullptr
  , /*decltype(_impl_.obsoletereason_)*/nullptr
  , /*decltype(_impl_.optimaldeviceclasswarning_)*/nullptr
  , /*decltype(_impl_.sectionsuggestforrating_)*/nullptr
  , /*decltype(_impl_.sectionpurchasecrosssell_)*/nullptr
  , /*decltype(_impl_.creatordoc_)*/nullptr
  , /*decltype(_impl_.purchasehistorydetails_)*/nullptr
  , /*decltype(_impl_.badgeforcontentrating_)*/nullptr
  , /*decltype(_impl_.sectionfeaturedapps_)*/nullptr
  , /*decltype(_impl_.videoannotations_)*/nullptr
  , /*decltype(_impl_.sectionpurchaserelatedtopics_)*/nullptr
  , /*decltype(_impl_.mysubscriptiondetails_)*/nullptr
  , /*decltype(_impl_.myrewarddetails_)*/nullptr
  , /*decltype(_impl_.selectedchild_)*/nullptr
  , /*decltype(_impl_.purchasedetails_)*/nullptr
  , /*decltype(_impl_.snippet_)*/nullptr} {}
struct AnnotationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationsDefaultTypeInternal() {}
  union {
    Annotations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationsDefaultTypeInternal _Annotations_default_instance_;
PROTOBUF_CONSTEXPR PlusOneData::PlusOneData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obsoletecirclesprofiles_)*/{}
  , /*decltype(_impl_.circleperson_)*/{}
  , /*decltype(_impl_.total_)*/int64_t{0}
  , /*decltype(_impl_.circlestotal_)*/int64_t{0}
  , /*decltype(_impl_.setbyuser_)*/false} {}
struct PlusOneDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlusOneDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlusOneDataDefaultTypeInternal() {}
  union {
    PlusOneData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlusOneDataDefaultTypeInternal _PlusOneData_default_instance_;
PROTOBUF_CONSTEXPR OBSOLETE_PlusProfile::OBSOLETE_PlusProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profileimageurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profileimage_)*/nullptr} {}
struct OBSOLETE_PlusProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OBSOLETE_PlusProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OBSOLETE_PlusProfileDefaultTypeInternal() {}
  union {
    OBSOLETE_PlusProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OBSOLETE_PlusProfileDefaultTypeInternal _OBSOLETE_PlusProfile_default_instance_;
PROTOBUF_CONSTEXPR SectionMetadata::SectionMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.browseurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descriptionhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SectionMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionMetadataDefaultTypeInternal() {}
  union {
    SectionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionMetadataDefaultTypeInternal _SectionMetadata_default_instance_;
PROTOBUF_CONSTEXPR Warning::Warning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localizedmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.showicon_)*/false} {}
struct WarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WarningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WarningDefaultTypeInternal() {}
  union {
    Warning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WarningDefaultTypeInternal _Warning_default_instance_;
PROTOBUF_CONSTEXPR Badge::Badge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.browseurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textintitlesection_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expandedbadgeimage_)*/nullptr} {}
struct BadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BadgeDefaultTypeInternal() {}
  union {
    Badge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadgeDefaultTypeInternal _Badge_default_instance_;
PROTOBUF_CONSTEXPR BadgeContainer::BadgeContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_)*/{}
  , /*decltype(_impl_.badge_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BadgeContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BadgeContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BadgeContainerDefaultTypeInternal() {}
  union {
    BadgeContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadgeContainerDefaultTypeInternal _BadgeContainer_default_instance_;
PROTOBUF_CONSTEXPR PurchaseDetails::PurchaseDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.legaldocumentbrokerid_)*/int64_t{0}
  , /*decltype(_impl_.showageconfirmationprompt_)*/false
  , /*decltype(_impl_.purchaseauthenticationrequired_)*/false} {}
struct PurchaseDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PurchaseDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PurchaseDetailsDefaultTypeInternal() {}
  union {
    PurchaseDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PurchaseDetailsDefaultTypeInternal _PurchaseDetails_default_instance_;
PROTOBUF_CONSTEXPR PurchaseHistoryDetails::PurchaseHistoryDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.purchasedetailshtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.purchasestatus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.titlebylinehtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientrefundcontext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offer_)*/nullptr
  , /*decltype(_impl_.purchasedetailsimage_)*/nullptr
  , /*decltype(_impl_.purchasetimestampmsec_)*/int64_t{0}} {}
struct PurchaseHistoryDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PurchaseHistoryDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PurchaseHistoryDetailsDefaultTypeInternal() {}
  union {
    PurchaseHistoryDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PurchaseHistoryDetailsDefaultTypeInternal _PurchaseHistoryDetails_default_instance_;
PROTOBUF_CONSTEXPR OBSOLETE_Reason::OBSOLETE_Reason(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.briefreason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obsoletedetailedreason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uniqueid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct OBSOLETE_ReasonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OBSOLETE_ReasonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OBSOLETE_ReasonDefaultTypeInternal() {}
  union {
    OBSOLETE_Reason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OBSOLETE_ReasonDefaultTypeInternal _OBSOLETE_Reason_default_instance_;
PROTOBUF_CONSTEXPR VoucherInfo::VoucherInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.offer_)*/{}
  , /*decltype(_impl_.doc_)*/nullptr} {}
struct VoucherInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoucherInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoucherInfoDefaultTypeInternal() {}
  union {
    VoucherInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoucherInfoDefaultTypeInternal _VoucherInfo_default_instance_;
PROTOBUF_CONSTEXPR VideoAnnotations::VideoAnnotations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bundledocid_)*/{}
  , /*decltype(_impl_.bundlecontentlisturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extrascontentlisturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alsoavailableinlisturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_)*/false} {}
struct VideoAnnotationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoAnnotationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoAnnotationsDefaultTypeInternal() {}
  union {
    VideoAnnotations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoAnnotationsDefaultTypeInternal _VideoAnnotations_default_instance_;
PROTOBUF_CONSTEXPR MySubscriptionDetails::MySubscriptionDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subscriptionstatushtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.titlebylinehtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formattedprice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pricebylinehtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paymentdeclinedlearnmorelink_)*/nullptr
  , /*decltype(_impl_.titlebylineicon_)*/nullptr
  , /*decltype(_impl_.cancelsubscription_)*/false
  , /*decltype(_impl_.intrialperiod_)*/false} {}
struct MySubscriptionDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MySubscriptionDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MySubscriptionDetailsDefaultTypeInternal() {}
  union {
    MySubscriptionDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MySubscriptionDetailsDefaultTypeInternal _MySubscriptionDetails_default_instance_;
PROTOBUF_CONSTEXPR MyRewardDetails::MyRewardDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expirationdescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttonlabel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkaction_)*/nullptr
  , /*decltype(_impl_.expirationtimemillis_)*/int64_t{0}} {}
struct MyRewardDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyRewardDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyRewardDetailsDefaultTypeInternal() {}
  union {
    MyRewardDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyRewardDetailsDefaultTypeInternal _MyRewardDetails_default_instance_;
PROTOBUF_CONSTEXPR SelectedChild::SelectedChild(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.docid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selectedchild_)*/nullptr} {}
struct SelectedChildDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectedChildDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectedChildDefaultTypeInternal() {}
  union {
    SelectedChild _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectedChildDefaultTypeInternal _SelectedChild_default_instance_;
PROTOBUF_CONSTEXPR Snippet::Snippet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.snippethtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SnippetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnippetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnippetDefaultTypeInternal() {}
  union {
    Snippet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnippetDefaultTypeInternal _Snippet_default_instance_;
PROTOBUF_CONSTEXPR ProductDetails::ProductDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.section_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProductDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductDetailsDefaultTypeInternal() {}
  union {
    ProductDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductDetailsDefaultTypeInternal _ProductDetails_default_instance_;
PROTOBUF_CONSTEXPR ProductDetailsSection::ProductDetailsSection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.description_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProductDetailsSectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductDetailsSectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductDetailsSectionDefaultTypeInternal() {}
  union {
    ProductDetailsSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductDetailsSectionDefaultTypeInternal _ProductDetailsSection_default_instance_;
PROTOBUF_CONSTEXPR ProductDetailsDescription::ProductDetailsDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_)*/nullptr} {}
struct ProductDetailsDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductDetailsDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductDetailsDescriptionDefaultTypeInternal() {}
  union {
    ProductDetailsDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductDetailsDescriptionDefaultTypeInternal _ProductDetailsDescription_default_instance_;
PROTOBUF_CONSTEXPR PromotedDoc::PromotedDoc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descriptionhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PromotedDocDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PromotedDocDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PromotedDocDefaultTypeInternal() {}
  union {
    PromotedDoc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PromotedDocDefaultTypeInternal _PromotedDoc_default_instance_;
PROTOBUF_CONSTEXPR DocumentDetails::DocumentDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appdetails_)*/nullptr
  , /*decltype(_impl_.albumdetails_)*/nullptr
  , /*decltype(_impl_.artistdetails_)*/nullptr
  , /*decltype(_impl_.songdetails_)*/nullptr
  , /*decltype(_impl_.bookdetails_)*/nullptr
  , /*decltype(_impl_.videodetails_)*/nullptr
  , /*decltype(_impl_.subscriptiondetails_)*/nullptr
  , /*decltype(_impl_.magazinedetails_)*/nullptr
  , /*decltype(_impl_.tvshowdetails_)*/nullptr
  , /*decltype(_impl_.tvseasondetails_)*/nullptr
  , /*decltype(_impl_.tvepisodedetails_)*/nullptr
  , /*decltype(_impl_.persondetails_)*/nullptr
  , /*decltype(_impl_.talentdetails_)*/nullptr
  , /*decltype(_impl_.developerdetails_)*/nullptr
  , /*decltype(_impl_.bookseriesdetails_)*/nullptr} {}
struct DocumentDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentDetailsDefaultTypeInternal() {}
  union {
    DocumentDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentDetailsDefaultTypeInternal _DocumentDetails_default_instance_;
PROTOBUF_CONSTEXPR AppDetails::AppDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appcategory_)*/{}
  , /*decltype(_impl_.permission_)*/{}
  , /*decltype(_impl_.file_)*/{}
  , /*decltype(_impl_.certificatehash_)*/{}
  , /*decltype(_impl_.certificateset_)*/{}
  , /*decltype(_impl_.autoacquirefreeappifhigherversionavailabletag_)*/{}
  , /*decltype(_impl_.splitid_)*/{}
  , /*decltype(_impl_.developername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.versionstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.developeremail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.developerwebsite_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numdownloads_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packagename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recentchangeshtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uploaddate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apptype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.installnotes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preregistrationpromocode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.installdetails_)*/nullptr
  , /*decltype(_impl_.testingprograminfo_)*/nullptr
  , /*decltype(_impl_.majorversionnumber_)*/0
  , /*decltype(_impl_.versioncode_)*/0
  , /*decltype(_impl_.installationsize_)*/int64_t{0}
  , /*decltype(_impl_.contentrating_)*/0
  , /*decltype(_impl_.variesbyaccount_)*/false
  , /*decltype(_impl_.declaresiab_)*/false
  , /*decltype(_impl_.gamepadrequired_)*/false
  , /*decltype(_impl_.externallyhosted_)*/false
  , /*decltype(_impl_.everexternallyhosted_)*/false
  , /*decltype(_impl_.installlocation_)*/0
  , /*decltype(_impl_.targetsdkversion_)*/0} {}
struct AppDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppDetailsDefaultTypeInternal() {}
  union {
    AppDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppDetailsDefaultTypeInternal _AppDetails_default_instance_;
PROTOBUF_CONSTEXPR TestingProgramInfo::TestingProgramInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subscribed_)*/false
  , /*decltype(_impl_.subscribed1_)*/false} {}
struct TestingProgramInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestingProgramInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestingProgramInfoDefaultTypeInternal() {}
  union {
    TestingProgramInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestingProgramInfoDefaultTypeInternal _TestingProgramInfo_default_instance_;
PROTOBUF_CONSTEXPR AlbumDetails::AlbumDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/nullptr
  , /*decltype(_impl_.displayartist_)*/nullptr} {}
struct AlbumDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlbumDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlbumDetailsDefaultTypeInternal() {}
  union {
    AlbumDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlbumDetailsDefaultTypeInternal _AlbumDetails_default_instance_;
PROTOBUF_CONSTEXPR MusicDetails::MusicDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.artist_)*/{}
  , /*decltype(_impl_.genre_)*/{}
  , /*decltype(_impl_.releasetype_)*/{}
  , /*decltype(_impl_.originalreleasedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.releasedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.censoring_)*/0
  , /*decltype(_impl_.durationsec_)*/0} {}
struct MusicDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MusicDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MusicDetailsDefaultTypeInternal() {}
  union {
    MusicDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MusicDetailsDefaultTypeInternal _MusicDetails_default_instance_;
PROTOBUF_CONSTEXPR ArtistDetails::ArtistDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.externallinks_)*/nullptr} {}
struct ArtistDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArtistDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArtistDetailsDefaultTypeInternal() {}
  union {
    ArtistDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArtistDetailsDefaultTypeInternal _ArtistDetails_default_instance_;
PROTOBUF_CONSTEXPR ArtistExternalLinks::ArtistExternalLinks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.websiteurl_)*/{}
  , /*decltype(_impl_.googleplusprofileurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.youtubechannelurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ArtistExternalLinksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArtistExternalLinksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArtistExternalLinksDefaultTypeInternal() {}
  union {
    ArtistExternalLinks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArtistExternalLinksDefaultTypeInternal _ArtistExternalLinks_default_instance_;
PROTOBUF_CONSTEXPR SongDetails::SongDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.albumname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.previewurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/nullptr
  , /*decltype(_impl_.displayartist_)*/nullptr
  , /*decltype(_impl_.badge_)*/nullptr
  , /*decltype(_impl_.tracknumber_)*/0} {}
struct SongDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongDetailsDefaultTypeInternal() {}
  union {
    SongDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongDetailsDefaultTypeInternal _SongDetails_default_instance_;
PROTOBUF_CONSTEXPR BookDetails::BookDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publisher_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.publicationdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isbn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abouttheauthor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seriesline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.concisetitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shorttitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seriestitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numberofpages_)*/0
  , /*decltype(_impl_.booktype_)*/0} {}
struct BookDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookDetailsDefaultTypeInternal() {}
  union {
    BookDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookDetailsDefaultTypeInternal _BookDetails_default_instance_;
PROTOBUF_CONSTEXPR VideoDetails::VideoDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.credit_)*/{}
  , /*decltype(_impl_.genre_)*/{}
  , /*decltype(_impl_.trailer_)*/{}
  , /*decltype(_impl_.rentalterm_)*/{}
  , /*decltype(_impl_.audiolanguage_)*/{}
  , /*decltype(_impl_.captionlanguage_)*/{}
  , /*decltype(_impl_.duration_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.releasedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contentrating_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.likes_)*/int64_t{0}
  , /*decltype(_impl_.dislikes_)*/int64_t{0}} {}
struct VideoDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoDetailsDefaultTypeInternal() {}
  union {
    VideoDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoDetailsDefaultTypeInternal _VideoDetails_default_instance_;
PROTOBUF_CONSTEXPR VideoCredit::VideoCredit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{}
  , /*decltype(_impl_.credit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credittype_)*/0} {}
struct VideoCreditDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoCreditDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoCreditDefaultTypeInternal() {}
  union {
    VideoCredit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoCreditDefaultTypeInternal _VideoCredit_default_instance_;
PROTOBUF_CONSTEXPR Trailer::Trailer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trailerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.watchurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrailerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrailerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrailerDefaultTypeInternal() {}
  union {
    Trailer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrailerDefaultTypeInternal _Trailer_default_instance_;
PROTOBUF_CONSTEXPR VideoRentalTerm_Term::VideoRentalTerm_Term(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct VideoRentalTerm_TermDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoRentalTerm_TermDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoRentalTerm_TermDefaultTypeInternal() {}
  union {
    VideoRentalTerm_Term _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoRentalTerm_TermDefaultTypeInternal _VideoRentalTerm_Term_default_instance_;
PROTOBUF_CONSTEXPR VideoRentalTerm::VideoRentalTerm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.term_)*/{}
  , /*decltype(_impl_.offerabbreviation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rentalheader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offertype_)*/0} {}
struct VideoRentalTermDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoRentalTermDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoRentalTermDefaultTypeInternal() {}
  union {
    VideoRentalTerm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoRentalTermDefaultTypeInternal _VideoRentalTerm_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionDetails::SubscriptionDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subscriptionperiod_)*/0} {}
struct SubscriptionDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionDetailsDefaultTypeInternal() {}
  union {
    SubscriptionDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionDetailsDefaultTypeInternal _SubscriptionDetails_default_instance_;
PROTOBUF_CONSTEXPR MagazineDetails::MagazineDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parentdetailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceavailabilitydescriptionhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.psvdescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deliveryfrequencydescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MagazineDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagazineDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagazineDetailsDefaultTypeInternal() {}
  union {
    MagazineDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagazineDetailsDefaultTypeInternal _MagazineDetails_default_instance_;
PROTOBUF_CONSTEXPR TvShowDetails::TvShowDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.broadcaster_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seasoncount_)*/0
  , /*decltype(_impl_.startyear_)*/0
  , /*decltype(_impl_.endyear_)*/0} {}
struct TvShowDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TvShowDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TvShowDetailsDefaultTypeInternal() {}
  union {
    TvShowDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TvShowDetailsDefaultTypeInternal _TvShowDetails_default_instance_;
PROTOBUF_CONSTEXPR TvSeasonDetails::TvSeasonDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parentdetailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.releasedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcaster_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seasonindex_)*/0
  , /*decltype(_impl_.episodecount_)*/0
  , /*decltype(_impl_.expectedepisodecount_)*/0
  , /*decltype(_impl_.inprogress_)*/false} {}
struct TvSeasonDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TvSeasonDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TvSeasonDetailsDefaultTypeInternal() {}
  union {
    TvSeasonDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TvSeasonDetailsDefaultTypeInternal _TvSeasonDetails_default_instance_;
PROTOBUF_CONSTEXPR TvEpisodeDetails::TvEpisodeDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parentdetailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.releasedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.episodeindex_)*/0} {}
struct TvEpisodeDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TvEpisodeDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TvEpisodeDetailsDefaultTypeInternal() {}
  union {
    TvEpisodeDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TvEpisodeDetailsDefaultTypeInternal _TvEpisodeDetails_default_instance_;
PROTOBUF_CONSTEXPR PersonDetails::PersonDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.personisrequester_)*/false
  , /*decltype(_impl_.isgplususer_)*/false} {}
struct PersonDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonDetailsDefaultTypeInternal() {}
  union {
    PersonDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonDetailsDefaultTypeInternal _PersonDetails_default_instance_;
PROTOBUF_CONSTEXPR TalentDetails::TalentDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.externallinks_)*/nullptr
  , /*decltype(_impl_.primaryroleid_)*/0} {}
struct TalentDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TalentDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TalentDetailsDefaultTypeInternal() {}
  union {
    TalentDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TalentDetailsDefaultTypeInternal _TalentDetails_default_instance_;
PROTOBUF_CONSTEXPR TalentExternalLinks::TalentExternalLinks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.websiteurl_)*/{}
  , /*decltype(_impl_.googleplusprofileurl_)*/nullptr
  , /*decltype(_impl_.youtubechannelurl_)*/nullptr} {}
struct TalentExternalLinksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TalentExternalLinksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TalentExternalLinksDefaultTypeInternal() {}
  union {
    TalentExternalLinks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TalentExternalLinksDefaultTypeInternal _TalentExternalLinks_default_instance_;
PROTOBUF_CONSTEXPR DeveloperDetails::DeveloperDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.websiteurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DeveloperDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeveloperDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeveloperDetailsDefaultTypeInternal() {}
  union {
    DeveloperDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeveloperDetailsDefaultTypeInternal _DeveloperDetails_default_instance_;
PROTOBUF_CONSTEXPR BookSeriesDetails::BookSeriesDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publisher_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seriescomposition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seriescardcomposition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BookSeriesDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookSeriesDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookSeriesDetailsDefaultTypeInternal() {}
  union {
    BookSeriesDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookSeriesDetailsDefaultTypeInternal _BookSeriesDetails_default_instance_;
PROTOBUF_CONSTEXPR AggregateRating::AggregateRating(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tip_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.starrating_)*/0
  , /*decltype(_impl_.ratingscount_)*/int64_t{0}
  , /*decltype(_impl_.onestarratings_)*/int64_t{0}
  , /*decltype(_impl_.twostarratings_)*/int64_t{0}
  , /*decltype(_impl_.threestarratings_)*/int64_t{0}
  , /*decltype(_impl_.fourstarratings_)*/int64_t{0}
  , /*decltype(_impl_.fivestarratings_)*/int64_t{0}
  , /*decltype(_impl_.thumbsupcount_)*/int64_t{0}
  , /*decltype(_impl_.thumbsdowncount_)*/int64_t{0}
  , /*decltype(_impl_.commentcount_)*/int64_t{0}
  , /*decltype(_impl_.bayesianmeanrating_)*/0} {}
struct AggregateRatingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRatingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRatingDefaultTypeInternal() {}
  union {
    AggregateRating _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRatingDefaultTypeInternal _AggregateRating_default_instance_;
PROTOBUF_CONSTEXPR AggregateRatingTip::AggregateRatingTip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.snippetreviewid_)*/{}
  , /*decltype(_impl_.tipid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reviewcount_)*/int64_t{0}
  , /*decltype(_impl_.polarity_)*/0} {}
struct AggregateRatingTipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRatingTipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRatingTipDefaultTypeInternal() {}
  union {
    AggregateRatingTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRatingTipDefaultTypeInternal _AggregateRatingTip_default_instance_;
PROTOBUF_CONSTEXPR Review::Review(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.documentversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.commentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obsoleteplusprofile_)*/nullptr
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_.sentiment_)*/nullptr
  , /*decltype(_impl_.timestampmsec_)*/int64_t{0}
  , /*decltype(_impl_.starrating_)*/0
  , /*decltype(_impl_.helpfulcount_)*/0
  , /*decltype(_impl_.replytimestampmsec_)*/int64_t{0}
  , /*decltype(_impl_.thumbsupcount_)*/int64_t{0}} {}
struct ReviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReviewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReviewDefaultTypeInternal() {}
  union {
    Review _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReviewDefaultTypeInternal _Review_default_instance_;
PROTOBUF_CONSTEXPR ReviewTip::ReviewTip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tipurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reviewcount_)*/int64_t{0}
  , /*decltype(_impl_.polarity_)*/0} {}
struct ReviewTipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReviewTipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReviewTipDefaultTypeInternal() {}
  union {
    ReviewTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReviewTipDefaultTypeInternal _ReviewTip_default_instance_;
}  // namespace document
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fdocument_2eproto[49];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fdocument_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fdocument_2eproto = nullptr;

const uint32_t TableStruct_play_5fdocument_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.docid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.backenddocid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.doctype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.backendid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.creator_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.descriptionhtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.availability_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.containermetadata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.aggregaterating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.detailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.shareurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.reviewsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.backendurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.purchasedetailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.detailsreusable_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.subtitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.translateddescriptionhtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.productdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.mature_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.promotionaldescription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.availableforpreregistration_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.tip_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.snippetsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.forceshareability_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocV2, _impl_.usewishlistasprimaryaction_),
  0,
  1,
  21,
  22,
  2,
  3,
  4,
  ~0u,
  15,
  ~0u,
  ~0u,
  16,
  17,
  18,
  19,
  5,
  6,
  7,
  8,
  9,
  23,
  10,
  11,
  12,
  20,
  24,
  13,
  25,
  ~0u,
  14,
  26,
  27,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionrelated_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionmoreby_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.plusonedata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.warning_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionbodyofwork_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectioncorecontent_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.badgeforcreator_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.badgefordoc_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.link_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectioncrosssell_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionrelateddoctype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.promoteddoc_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.offernote_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.subscription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.obsoletereason_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.privacypolicyurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.optimaldeviceclasswarning_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.docbadgecontainer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionsuggestforrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionpurchasecrosssell_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.overflowlink_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.creatordoc_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.attributionhtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.purchasehistorydetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.badgeforcontentrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.voucherinfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionfeaturedapps_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.applicablevoucherdescription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.detailspagecluster_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.videoannotations_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.sectionpurchaserelatedtopics_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.mysubscriptiondetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.myrewarddetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.featurebadge_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.selectedchild_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.purchasedetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Annotations, _impl_.snippet_),
  4,
  5,
  6,
  ~0u,
  7,
  8,
  ~0u,
  ~0u,
  9,
  10,
  11,
  ~0u,
  0,
  ~0u,
  12,
  1,
  13,
  ~0u,
  14,
  15,
  ~0u,
  16,
  2,
  17,
  18,
  ~0u,
  19,
  3,
  ~0u,
  20,
  21,
  22,
  23,
  ~0u,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _impl_.setbyuser_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _impl_.circlestotal_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _impl_.obsoletecirclesprofiles_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PlusOneData, _impl_.circleperson_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_PlusProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_PlusProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_PlusProfile, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_PlusProfile, _impl_.profileimageurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_PlusProfile, _impl_.profileimage_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SectionMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SectionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SectionMetadata, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SectionMetadata, _impl_.listurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SectionMetadata, _impl_.browseurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SectionMetadata, _impl_.descriptionhtml_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Warning, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Warning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Warning, _impl_.localizedmessage_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Warning, _impl_.showicon_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_.browseurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_.textintitlesection_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Badge, _impl_.expandedbadgeimage_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BadgeContainer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BadgeContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BadgeContainer, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BadgeContainer, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BadgeContainer, _impl_.badge_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseDetails, _impl_.legaldocumentbrokerid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseDetails, _impl_.showageconfirmationprompt_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseDetails, _impl_.purchaseauthenticationrequired_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.purchasetimestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.purchasedetailshtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.purchasestatus_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.titlebylinehtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.clientrefundcontext_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PurchaseHistoryDetails, _impl_.purchasedetailsimage_),
  6,
  0,
  4,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_Reason, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_Reason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_Reason, _impl_.briefreason_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_Reason, _impl_.obsoletedetailedreason_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::OBSOLETE_Reason, _impl_.uniqueid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VoucherInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VoucherInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VoucherInfo, _impl_.doc_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VoucherInfo, _impl_.offer_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _impl_.bundle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _impl_.bundlecontentlisturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _impl_.extrascontentlisturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _impl_.alsoavailableinlisturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoAnnotations, _impl_.bundledocid_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.subscriptionstatushtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.titlebylinehtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.formattedprice_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.pricebylinehtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.cancelsubscription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.paymentdeclinedlearnmorelink_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.intrialperiod_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MySubscriptionDetails, _impl_.titlebylineicon_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MyRewardDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MyRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MyRewardDetails, _impl_.expirationtimemillis_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MyRewardDetails, _impl_.expirationdescription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MyRewardDetails, _impl_.buttonlabel_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MyRewardDetails, _impl_.linkaction_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SelectedChild, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SelectedChild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SelectedChild, _impl_.docid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SelectedChild, _impl_.selectedchild_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Snippet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Snippet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Snippet, _impl_.snippethtml_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetails, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetails, _impl_.section_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsSection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsSection, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsSection, _impl_.description_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsDescription, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsDescription, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ProductDetailsDescription, _impl_.description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _impl_.subtitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _impl_.descriptionhtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PromotedDoc, _impl_.detailsurl_),
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.appdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.albumdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.artistdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.songdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.bookdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.videodetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.subscriptiondetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.magazinedetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.tvshowdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.tvseasondetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.tvepisodedetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.persondetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.talentdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.developerdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DocumentDetails, _impl_.bookseriesdetails_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.developername_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.majorversionnumber_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.versioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.versionstring_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.appcategory_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.contentrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.installationsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.developeremail_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.developerwebsite_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.numdownloads_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.packagename_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.recentchangeshtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.uploaddate_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.file_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.apptype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.certificatehash_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.variesbyaccount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.certificateset_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.autoacquirefreeappifhigherversionavailabletag_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.declaresiab_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.splitid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.gamepadrequired_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.externallyhosted_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.everexternallyhosted_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.installnotes_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.installlocation_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.targetsdkversion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.preregistrationpromocode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.installdetails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AppDetails, _impl_.testingprograminfo_),
  0,
  14,
  15,
  1,
  2,
  ~0u,
  17,
  16,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  ~0u,
  18,
  ~0u,
  ~0u,
  19,
  ~0u,
  20,
  21,
  22,
  10,
  23,
  24,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TestingProgramInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TestingProgramInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TestingProgramInfo, _impl_.subscribed_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TestingProgramInfo, _impl_.subscribed1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AlbumDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AlbumDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AlbumDetails, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AlbumDetails, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AlbumDetails, _impl_.displayartist_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.censoring_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.durationsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.originalreleasedate_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.artist_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.genre_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.releasedate_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MusicDetails, _impl_.releasetype_),
  3,
  4,
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistDetails, _impl_.detailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistDetails, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistDetails, _impl_.externallinks_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistExternalLinks, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistExternalLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistExternalLinks, _impl_.websiteurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistExternalLinks, _impl_.googleplusprofileurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ArtistExternalLinks, _impl_.youtubechannelurl_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.albumname_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.tracknumber_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.previewurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.displayartist_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SongDetails, _impl_.badge_),
  0,
  3,
  1,
  6,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.publisher_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.publicationdate_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.isbn_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.numberofpages_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.abouttheauthor_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.booktype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.seriesline_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.concisetitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.shorttitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookDetails, _impl_.seriestitle_),
  0,
  1,
  2,
  8,
  3,
  9,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.credit_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.releasedate_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.contentrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.likes_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.dislikes_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.genre_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.trailer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.rentalterm_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.audiolanguage_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoDetails, _impl_.captionlanguage_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoCredit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoCredit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoCredit, _impl_.credittype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoCredit, _impl_.credit_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoCredit, _impl_.name_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _impl_.trailerid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _impl_.thumbnailurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _impl_.watchurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Trailer, _impl_.duration_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm_Term, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm_Term, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm_Term, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm_Term, _impl_.body_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm, _impl_.offertype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm, _impl_.offerabbreviation_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm, _impl_.rentalheader_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::VideoRentalTerm, _impl_.term_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SubscriptionDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SubscriptionDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::SubscriptionDetails, _impl_.subscriptionperiod_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MagazineDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MagazineDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MagazineDetails, _impl_.parentdetailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MagazineDetails, _impl_.deviceavailabilitydescriptionhtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MagazineDetails, _impl_.psvdescription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::MagazineDetails, _impl_.deliveryfrequencydescription_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvShowDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvShowDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvShowDetails, _impl_.seasoncount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvShowDetails, _impl_.startyear_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvShowDetails, _impl_.endyear_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvShowDetails, _impl_.broadcaster_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.parentdetailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.seasonindex_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.releasedate_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.broadcaster_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.episodecount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.expectedepisodecount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvSeasonDetails, _impl_.inprogress_),
  0,
  3,
  1,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvEpisodeDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvEpisodeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvEpisodeDetails, _impl_.parentdetailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvEpisodeDetails, _impl_.episodeindex_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TvEpisodeDetails, _impl_.releasedate_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PersonDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PersonDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PersonDetails, _impl_.personisrequester_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::PersonDetails, _impl_.isgplususer_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentDetails, _impl_.externallinks_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentDetails, _impl_.primaryroleid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentExternalLinks, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentExternalLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentExternalLinks, _impl_.websiteurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentExternalLinks, _impl_.googleplusprofileurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::TalentExternalLinks, _impl_.youtubechannelurl_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DeveloperDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DeveloperDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::DeveloperDetails, _impl_.websiteurl_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookSeriesDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookSeriesDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookSeriesDetails, _impl_.publisher_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookSeriesDetails, _impl_.seriescomposition_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::BookSeriesDetails, _impl_.seriescardcomposition_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.starrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.ratingscount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.onestarratings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.twostarratings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.threestarratings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.fourstarratings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.fivestarratings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.thumbsupcount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.thumbsdowncount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.commentcount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.bayesianmeanrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRating, _impl_.tip_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_.tipid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_.polarity_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_.reviewcount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::AggregateRatingTip, _impl_.snippetreviewid_),
  0,
  1,
  4,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.authorname_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.documentversion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.timestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.starrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.commentid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.devicename_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.replytext_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.replytimestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.obsoleteplusprofile_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.sentiment_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.helpfulcount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::Review, _impl_.thumbsupcount_),
  0,
  1,
  2,
  3,
  12,
  13,
  4,
  5,
  6,
  7,
  8,
  15,
  9,
  10,
  11,
  14,
  16,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ReviewTip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ReviewTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ReviewTip, _impl_.tipurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ReviewTip, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ReviewTip, _impl_.polarity_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::document::ReviewTip, _impl_.reviewcount_),
  0,
  1,
  3,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 38, -1, sizeof(::playapi::proto::finsky::document::DocV2)},
  { 70, 113, -1, sizeof(::playapi::proto::finsky::document::Annotations)},
  { 150, 161, -1, sizeof(::playapi::proto::finsky::document::PlusOneData)},
  { 166, 175, -1, sizeof(::playapi::proto::finsky::document::OBSOLETE_PlusProfile)},
  { 178, 188, -1, sizeof(::playapi::proto::finsky::document::SectionMetadata)},
  { 192, 200, -1, sizeof(::playapi::proto::finsky::document::Warning)},
  { 202, 214, -1, sizeof(::playapi::proto::finsky::document::Badge)},
  { 220, 229, -1, sizeof(::playapi::proto::finsky::document::BadgeContainer)},
  { 232, 241, -1, sizeof(::playapi::proto::finsky::document::PurchaseDetails)},
  { 244, 257, -1, sizeof(::playapi::proto::finsky::document::PurchaseHistoryDetails)},
  { 264, 273, -1, sizeof(::playapi::proto::finsky::document::OBSOLETE_Reason)},
  { 276, 284, -1, sizeof(::playapi::proto::finsky::document::VoucherInfo)},
  { 286, 297, -1, sizeof(::playapi::proto::finsky::document::VideoAnnotations)},
  { 302, 317, -1, sizeof(::playapi::proto::finsky::document::MySubscriptionDetails)},
  { 326, 336, -1, sizeof(::playapi::proto::finsky::document::MyRewardDetails)},
  { 340, 348, -1, sizeof(::playapi::proto::finsky::document::SelectedChild)},
  { 350, 357, -1, sizeof(::playapi::proto::finsky::document::Snippet)},
  { 358, 366, -1, sizeof(::playapi::proto::finsky::document::ProductDetails)},
  { 368, 376, -1, sizeof(::playapi::proto::finsky::document::ProductDetailsSection)},
  { 378, 386, -1, sizeof(::playapi::proto::finsky::document::ProductDetailsDescription)},
  { 388, 399, -1, sizeof(::playapi::proto::finsky::document::PromotedDoc)},
  { 404, 425, -1, sizeof(::playapi::proto::finsky::document::DocumentDetails)},
  { 440, 478, -1, sizeof(::playapi::proto::finsky::document::AppDetails)},
  { 510, 518, -1, sizeof(::playapi::proto::finsky::document::TestingProgramInfo)},
  { 520, 529, -1, sizeof(::playapi::proto::finsky::document::AlbumDetails)},
  { 532, 546, -1, sizeof(::playapi::proto::finsky::document::MusicDetails)},
  { 554, 563, -1, sizeof(::playapi::proto::finsky::document::ArtistDetails)},
  { 566, 575, -1, sizeof(::playapi::proto::finsky::document::ArtistExternalLinks)},
  { 578, 591, -1, sizeof(::playapi::proto::finsky::document::SongDetails)},
  { 598, 614, -1, sizeof(::playapi::proto::finsky::document::BookDetails)},
  { 624, 641, -1, sizeof(::playapi::proto::finsky::document::VideoDetails)},
  { 652, 661, -1, sizeof(::playapi::proto::finsky::document::VideoCredit)},
  { 664, 675, -1, sizeof(::playapi::proto::finsky::document::Trailer)},
  { 680, 688, -1, sizeof(::playapi::proto::finsky::document::VideoRentalTerm_Term)},
  { 690, 700, -1, sizeof(::playapi::proto::finsky::document::VideoRentalTerm)},
  { 704, 711, -1, sizeof(::playapi::proto::finsky::document::SubscriptionDetails)},
  { 712, 722, -1, sizeof(::playapi::proto::finsky::document::MagazineDetails)},
  { 726, 736, -1, sizeof(::playapi::proto::finsky::document::TvShowDetails)},
  { 740, 753, -1, sizeof(::playapi::proto::finsky::document::TvSeasonDetails)},
  { 760, 769, -1, sizeof(::playapi::proto::finsky::document::TvEpisodeDetails)},
  { 772, 780, -1, sizeof(::playapi::proto::finsky::document::PersonDetails)},
  { 782, 790, -1, sizeof(::playapi::proto::finsky::document::TalentDetails)},
  { 792, 801, -1, sizeof(::playapi::proto::finsky::document::TalentExternalLinks)},
  { 804, 811, -1, sizeof(::playapi::proto::finsky::document::DeveloperDetails)},
  { 812, 821, -1, sizeof(::playapi::proto::finsky::document::BookSeriesDetails)},
  { 824, 843, -1, sizeof(::playapi::proto::finsky::document::AggregateRating)},
  { 856, 868, -1, sizeof(::playapi::proto::finsky::document::AggregateRatingTip)},
  { 874, 897, -1, sizeof(::playapi::proto::finsky::document::Review)},
  { 914, 924, -1, sizeof(::playapi::proto::finsky::document::ReviewTip)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::document::_DocV2_default_instance_._instance,
  &::playapi::proto::finsky::document::_Annotations_default_instance_._instance,
  &::playapi::proto::finsky::document::_PlusOneData_default_instance_._instance,
  &::playapi::proto::finsky::document::_OBSOLETE_PlusProfile_default_instance_._instance,
  &::playapi::proto::finsky::document::_SectionMetadata_default_instance_._instance,
  &::playapi::proto::finsky::document::_Warning_default_instance_._instance,
  &::playapi::proto::finsky::document::_Badge_default_instance_._instance,
  &::playapi::proto::finsky::document::_BadgeContainer_default_instance_._instance,
  &::playapi::proto::finsky::document::_PurchaseDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_PurchaseHistoryDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_OBSOLETE_Reason_default_instance_._instance,
  &::playapi::proto::finsky::document::_VoucherInfo_default_instance_._instance,
  &::playapi::proto::finsky::document::_VideoAnnotations_default_instance_._instance,
  &::playapi::proto::finsky::document::_MySubscriptionDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_MyRewardDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_SelectedChild_default_instance_._instance,
  &::playapi::proto::finsky::document::_Snippet_default_instance_._instance,
  &::playapi::proto::finsky::document::_ProductDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_ProductDetailsSection_default_instance_._instance,
  &::playapi::proto::finsky::document::_ProductDetailsDescription_default_instance_._instance,
  &::playapi::proto::finsky::document::_PromotedDoc_default_instance_._instance,
  &::playapi::proto::finsky::document::_DocumentDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_AppDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_TestingProgramInfo_default_instance_._instance,
  &::playapi::proto::finsky::document::_AlbumDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_MusicDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_ArtistDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_ArtistExternalLinks_default_instance_._instance,
  &::playapi::proto::finsky::document::_SongDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_BookDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_VideoDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_VideoCredit_default_instance_._instance,
  &::playapi::proto::finsky::document::_Trailer_default_instance_._instance,
  &::playapi::proto::finsky::document::_VideoRentalTerm_Term_default_instance_._instance,
  &::playapi::proto::finsky::document::_VideoRentalTerm_default_instance_._instance,
  &::playapi::proto::finsky::document::_SubscriptionDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_MagazineDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_TvShowDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_TvSeasonDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_TvEpisodeDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_PersonDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_TalentDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_TalentExternalLinks_default_instance_._instance,
  &::playapi::proto::finsky::document::_DeveloperDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_BookSeriesDetails_default_instance_._instance,
  &::playapi::proto::finsky::document::_AggregateRating_default_instance_._instance,
  &::playapi::proto::finsky::document::_AggregateRatingTip_default_instance_._instance,
  &::playapi::proto::finsky::document::_Review_default_instance_._instance,
  &::playapi::proto::finsky::document::_ReviewTip_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fdocument_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023play_document.proto\022\035playapi.proto.fin"
  "sky.document\032\021play_common.proto\032\025play_co"
  "ntainers.proto\032\027play_filter_rules.proto\032"
  "\017play_link.proto\032\023play_download.proto\"\360\010"
  "\n\005DocV2\022\r\n\005docid\030\001 \001(\t\022\024\n\014backendDocid\030\002"
  " \001(\t\022\017\n\007docType\030\003 \001(\005\022\021\n\tbackendId\030\004 \001(\005"
  "\022\r\n\005title\030\005 \001(\t\022\017\n\007creator\030\006 \001(\t\022\027\n\017desc"
  "riptionHtml\030\007 \001(\t\022*\n\005offer\030\010 \003(\0132\033.playa"
  "pi.proto.finsky.Offer\022E\n\014availability\030\t "
  "\001(\0132/.playapi.proto.finsky.filter_rules."
  "Availability\022*\n\005image\030\n \003(\0132\033.playapi.pr"
  "oto.finsky.Image\0223\n\005child\030\013 \003(\0132$.playap"
  "i.proto.finsky.document.DocV2\022M\n\021contain"
  "erMetadata\030\014 \001(\01322.playapi.proto.finsky."
  "containers.ContainerMetadata\022\?\n\007details\030"
  "\r \001(\0132..playapi.proto.finsky.document.Do"
  "cumentDetails\022G\n\017aggregateRating\030\016 \001(\0132."
  ".playapi.proto.finsky.document.Aggregate"
  "Rating\022\?\n\013annotations\030\017 \001(\0132*.playapi.pr"
  "oto.finsky.document.Annotations\022\022\n\ndetai"
  "lsUrl\030\020 \001(\t\022\020\n\010shareUrl\030\021 \001(\t\022\022\n\nreviews"
  "Url\030\022 \001(\t\022\022\n\nbackendUrl\030\023 \001(\t\022\032\n\022purchas"
  "eDetailsUrl\030\024 \001(\t\022\027\n\017detailsReusable\030\025 \001"
  "(\010\022\020\n\010subtitle\030\026 \001(\t\022!\n\031translatedDescri"
  "ptionHtml\030\027 \001(\t\022\030\n\020serverLogsCookie\030\030 \001("
  "\014\022E\n\016productDetails\030\031 \001(\0132-.playapi.prot"
  "o.finsky.document.ProductDetails\022\016\n\006matu"
  "re\030\032 \001(\010\022\036\n\026promotionalDescription\030\033 \001(\t"
  "\022#\n\033availableForPreregistration\030\035 \001(\010\0225\n"
  "\003tip\030\036 \003(\0132(.playapi.proto.finsky.docume"
  "nt.ReviewTip\022\023\n\013snippetsUrl\030\037 \001(\t\022\031\n\021for"
  "ceShareability\030  \001(\010\022\"\n\032useWishlistAsPri"
  "maryAction\030! \001(\010\"\211\023\n\013Annotations\022F\n\016sect"
  "ionRelated\030\001 \001(\0132..playapi.proto.finsky."
  "document.SectionMetadata\022E\n\rsectionMoreB"
  "y\030\002 \001(\0132..playapi.proto.finsky.document."
  "SectionMetadata\022\?\n\013plusOneData\030\003 \001(\0132*.p"
  "layapi.proto.finsky.document.PlusOneData"
  "\0227\n\007warning\030\004 \003(\0132&.playapi.proto.finsky"
  ".document.Warning\022I\n\021sectionBodyOfWork\030\005"
  " \001(\0132..playapi.proto.finsky.document.Sec"
  "tionMetadata\022J\n\022sectionCoreContent\030\006 \001(\013"
  "2..playapi.proto.finsky.document.Section"
  "Metadata\022=\n\017badgeForCreator\030\010 \003(\0132$.play"
  "api.proto.finsky.document.Badge\0229\n\013badge"
  "ForDoc\030\t \003(\0132$.playapi.proto.finsky.docu"
  "ment.Badge\022-\n\004link\030\n \001(\0132\037.playapi.proto"
  ".finsky.link.Link\022H\n\020sectionCrossSell\030\013 "
  "\001(\0132..playapi.proto.finsky.document.Sect"
  "ionMetadata\022M\n\025sectionRelatedDocType\030\014 \001"
  "(\0132..playapi.proto.finsky.document.Secti"
  "onMetadata\022\?\n\013promotedDoc\030\r \003(\0132*.playap"
  "i.proto.finsky.document.PromotedDoc\022\021\n\to"
  "fferNote\030\016 \001(\t\022:\n\014subscription\030\020 \003(\0132$.p"
  "layapi.proto.finsky.document.DocV2\022F\n\016OB"
  "SOLETEReason\030\021 \001(\0132..playapi.proto.finsk"
  "y.document.OBSOLETE_Reason\022\030\n\020privacyPol"
  "icyUrl\030\022 \001(\t\022I\n\031optimalDeviceClassWarnin"
  "g\030\024 \001(\0132&.playapi.proto.finsky.document."
  "Warning\022H\n\021docBadgeContainer\030\025 \003(\0132-.pla"
  "yapi.proto.finsky.document.BadgeContaine"
  "r\022O\n\027sectionSuggestForRating\030\026 \001(\0132..pla"
  "yapi.proto.finsky.document.SectionMetada"
  "ta\022P\n\030sectionPurchaseCrossSell\030\030 \001(\0132..p"
  "layapi.proto.finsky.document.SectionMeta"
  "data\022=\n\014overflowLink\030\031 \003(\0132\'.playapi.pro"
  "to.finsky.link.OverflowLink\0228\n\ncreatorDo"
  "c\030\032 \001(\0132$.playapi.proto.finsky.document."
  "DocV2\022\027\n\017attributionHtml\030\033 \001(\t\022U\n\026purcha"
  "seHistoryDetails\030\034 \001(\01325.playapi.proto.f"
  "insky.document.PurchaseHistoryDetails\022C\n"
  "\025badgeForContentRating\030\035 \001(\0132$.playapi.p"
  "roto.finsky.document.Badge\022\?\n\013voucherInf"
  "o\030\036 \003(\0132*.playapi.proto.finsky.document."
  "VoucherInfo\022K\n\023sectionFeaturedApps\030  \001(\013"
  "2..playapi.proto.finsky.document.Section"
  "Metadata\022$\n\034applicableVoucherDescription"
  "\030! \001(\t\022J\n\022detailsPageCluster\030\" \003(\0132..pla"
  "yapi.proto.finsky.document.SectionMetada"
  "ta\022I\n\020videoAnnotations\030# \001(\0132/.playapi.p"
  "roto.finsky.document.VideoAnnotations\022T\n"
  "\034sectionPurchaseRelatedTopics\030$ \001(\0132..pl"
  "ayapi.proto.finsky.document.SectionMetad"
  "ata\022S\n\025mySubscriptionDetails\030% \001(\01324.pla"
  "yapi.proto.finsky.document.MySubscriptio"
  "nDetails\022G\n\017myRewardDetails\030& \001(\0132..play"
  "api.proto.finsky.document.MyRewardDetail"
  "s\022:\n\014featureBadge\030\' \003(\0132$.playapi.proto."
  "finsky.document.Badge\022C\n\rselectedChild\030("
  " \001(\0132,.playapi.proto.finsky.document.Sel"
  "ectedChild\022G\n\017purchaseDetails\030) \001(\0132..pl"
  "ayapi.proto.finsky.document.PurchaseDeta"
  "ils\0227\n\007snippet\030* \001(\0132&.playapi.proto.fin"
  "sky.document.Snippet\"\327\001\n\013PlusOneData\022\021\n\t"
  "setByUser\030\001 \001(\010\022\r\n\005total\030\002 \001(\003\022\024\n\014circle"
  "sTotal\030\003 \001(\003\022T\n\027OBSOLETECirclesProfiles\030"
  "\004 \003(\01323.playapi.proto.finsky.document.OB"
  "SOLETE_PlusProfile\022:\n\014circlePerson\030\005 \003(\013"
  "2$.playapi.proto.finsky.document.DocV2\"w"
  "\n\024OBSOLETE_PlusProfile\022\023\n\013displayName\030\002 "
  "\001(\t\022\027\n\017profileImageUrl\030\004 \001(\t\0221\n\014profileI"
  "mage\030\005 \001(\0132\033.playapi.proto.finsky.Image\""
  "^\n\017SectionMetadata\022\016\n\006header\030\001 \001(\t\022\017\n\007li"
  "stUrl\030\002 \001(\t\022\021\n\tbrowseUrl\030\003 \001(\t\022\027\n\017descri"
  "ptionHtml\030\004 \001(\t\"5\n\007Warning\022\030\n\020localizedM"
  "essage\030\001 \001(\t\022\020\n\010showIcon\030\002 \001(\010\"\277\001\n\005Badge"
  "\022\r\n\005title\030\001 \001(\t\022*\n\005image\030\002 \003(\0132\033.playapi"
  ".proto.finsky.Image\022\021\n\tbrowseUrl\030\003 \001(\t\022\023"
  "\n\013description\030\004 \001(\t\022\032\n\022textInTitleSectio"
  "n\030\005 \001(\t\0227\n\022expandedBadgeImage\030\006 \001(\0132\033.pl"
  "ayapi.proto.finsky.Image\"\200\001\n\016BadgeContai"
  "ner\022\r\n\005title\030\001 \001(\t\022*\n\005image\030\002 \003(\0132\033.play"
  "api.proto.finsky.Image\0223\n\005badge\030\003 \003(\0132$."
  "playapi.proto.finsky.document.Badge\"{\n\017P"
  "urchaseDetails\022\035\n\025legalDocumentBrokerId\030"
  "\001 \001(\003\022!\n\031showAgeConfirmationPrompt\030! \001(\010"
  "\022&\n\036purchaseAuthenticationRequired\030\" \001(\010"
  "\"\211\002\n\026PurchaseHistoryDetails\022\035\n\025purchaseT"
  "imestampMsec\030\002 \001(\003\022\033\n\023purchaseDetailsHtm"
  "l\030\003 \001(\t\022*\n\005offer\030\005 \001(\0132\033.playapi.proto.f"
  "insky.Offer\022\026\n\016purchaseStatus\030\006 \001(\t\022\027\n\017t"
  "itleBylineHtml\030\007 \001(\t\022\033\n\023clientRefundCont"
  "ext\030\010 \001(\014\0229\n\024purchaseDetailsImage\030\t \001(\0132"
  "\033.playapi.proto.finsky.Image\"X\n\017OBSOLETE"
  "_Reason\022\023\n\013briefReason\030\001 \001(\t\022\036\n\026OBSOLETE"
  "DetailedReason\030\002 \001(\t\022\020\n\010uniqueId\030\003 \001(\t\"l"
  "\n\013VoucherInfo\0221\n\003doc\030\001 \001(\0132$.playapi.pro"
  "to.finsky.document.DocV2\022*\n\005offer\030\002 \003(\0132"
  "\033.playapi.proto.finsky.Offer\"\260\001\n\020VideoAn"
  "notations\022\016\n\006bundle\030\001 \001(\010\022\034\n\024bundleConte"
  "ntListUrl\030\002 \001(\t\022\034\n\024extrasContentListUrl\030"
  "\003 \001(\t\022\036\n\026alsoAvailableInListUrl\030\004 \001(\t\0220\n"
  "\013bundleDocid\030\005 \003(\0132\033.playapi.proto.finsk"
  "y.Docid\"\300\002\n\025MySubscriptionDetails\022\036\n\026sub"
  "scriptionStatusHtml\030\001 \001(\t\022\r\n\005title\030\002 \001(\t"
  "\022\027\n\017titleBylineHtml\030\003 \001(\t\022\026\n\016formattedPr"
  "ice\030\004 \001(\t\022\027\n\017priceBylineHtml\030\005 \001(\t\022\032\n\022ca"
  "ncelSubscription\030\006 \001(\010\022E\n\034paymentDecline"
  "dLearnMoreLink\030\007 \001(\0132\037.playapi.proto.fin"
  "sky.link.Link\022\025\n\rinTrialPeriod\030\010 \001(\010\0224\n\017"
  "titleBylineIcon\030\t \001(\0132\033.playapi.proto.fi"
  "nsky.Image\"\230\001\n\017MyRewardDetails\022\034\n\024expira"
  "tionTimeMillis\030\001 \001(\003\022\035\n\025expirationDescri"
  "ption\030\002 \001(\t\022\023\n\013buttonLabel\030\003 \001(\t\0223\n\nlink"
  "Action\030\004 \001(\0132\037.playapi.proto.finsky.link"
  ".Link\"c\n\rSelectedChild\022\r\n\005docid\030\001 \001(\t\022C\n"
  "\rselectedChild\030\002 \001(\0132,.playapi.proto.fin"
  "sky.document.SelectedChild\"\036\n\007Snippet\022\023\n"
  "\013snippetHtml\030\001 \001(\t\"f\n\016ProductDetails\022\r\n\005"
  "title\030\001 \001(\t\022E\n\007section\030\002 \003(\01324.playapi.p"
  "roto.finsky.document.ProductDetailsSecti"
  "on\"u\n\025ProductDetailsSection\022\r\n\005title\030\001 \001"
  "(\t\022M\n\013description\030\003 \003(\01328.playapi.proto."
  "finsky.document.ProductDetailsDescriptio"
  "n\"\\\n\031ProductDetailsDescription\022*\n\005image\030"
  "\001 \001(\0132\033.playapi.proto.finsky.Image\022\023\n\013de"
  "scription\030\002 \001(\t\"\207\001\n\013PromotedDoc\022\r\n\005title"
  "\030\001 \001(\t\022\020\n\010subtitle\030\002 \001(\t\022*\n\005image\030\003 \003(\0132"
  "\033.playapi.proto.finsky.Image\022\027\n\017descript"
  "ionHtml\030\004 \001(\t\022\022\n\ndetailsUrl\030\005 \001(\t\"\262\010\n\017Do"
  "cumentDetails\022=\n\nappDetails\030\001 \001(\0132).play"
  "api.proto.finsky.document.AppDetails\022A\n\014"
  "albumDetails\030\002 \001(\0132+.playapi.proto.finsk"
  "y.document.AlbumDetails\022C\n\rartistDetails"
  "\030\003 \001(\0132,.playapi.proto.finsky.document.A"
  "rtistDetails\022\?\n\013songDetails\030\004 \001(\0132*.play"
  "api.proto.finsky.document.SongDetails\022\?\n"
  "\013bookDetails\030\005 \001(\0132*.playapi.proto.finsk"
  "y.document.BookDetails\022A\n\014videoDetails\030\006"
  " \001(\0132+.playapi.proto.finsky.document.Vid"
  "eoDetails\022O\n\023subscriptionDetails\030\007 \001(\01322"
  ".playapi.proto.finsky.document.Subscript"
  "ionDetails\022G\n\017magazineDetails\030\010 \001(\0132..pl"
  "ayapi.proto.finsky.document.MagazineDeta"
  "ils\022C\n\rtvShowDetails\030\t \001(\0132,.playapi.pro"
  "to.finsky.document.TvShowDetails\022G\n\017tvSe"
  "asonDetails\030\n \001(\0132..playapi.proto.finsky"
  ".document.TvSeasonDetails\022I\n\020tvEpisodeDe"
  "tails\030\013 \001(\0132/.playapi.proto.finsky.docum"
  "ent.TvEpisodeDetails\022C\n\rpersonDetails\030\014 "
  "\001(\0132,.playapi.proto.finsky.document.Pers"
  "onDetails\022C\n\rtalentDetails\030\r \001(\0132,.playa"
  "pi.proto.finsky.document.TalentDetails\022I"
  "\n\020developerDetails\030\016 \001(\0132/.playapi.proto"
  ".finsky.document.DeveloperDetails\022K\n\021boo"
  "kSeriesDetails\030\017 \001(\01320.playapi.proto.fin"
  "sky.document.BookSeriesDetails\"\313\007\n\nAppDe"
  "tails\022\025\n\rdeveloperName\030\001 \001(\t\022\032\n\022majorVer"
  "sionNumber\030\002 \001(\005\022\023\n\013versionCode\030\003 \001(\005\022\025\n"
  "\rversionString\030\004 \001(\t\022\r\n\005title\030\005 \001(\t\022\023\n\013a"
  "ppCategory\030\007 \003(\t\022\025\n\rcontentRating\030\010 \001(\005\022"
  "\030\n\020installationSize\030\t \001(\003\022\022\n\npermission\030"
  "\n \003(\t\022\026\n\016developerEmail\030\013 \001(\t\022\030\n\020develop"
  "erWebsite\030\014 \001(\t\022\024\n\014numDownloads\030\r \001(\t\022\023\n"
  "\013packageName\030\016 \001(\t\022\031\n\021recentChangesHtml\030"
  "\017 \001(\t\022\022\n\nuploadDate\030\020 \001(\t\0229\n\004file\030\021 \003(\0132"
  "+.playapi.proto.finsky.download.FileMeta"
  "data\022\017\n\007appType\030\022 \001(\t\022\027\n\017certificateHash"
  "\030\023 \003(\t\022\027\n\017variesByAccount\030\025 \001(\010\022<\n\016certi"
  "ficateSet\030\026 \003(\0132$.playapi.proto.finsky.C"
  "ertificateSet\0225\n-autoAcquireFreeAppIfHig"
  "herVersionAvailableTag\030\027 \003(\t\022\023\n\013declares"
  "Iab\030\030 \001(\010\022\017\n\007splitId\030\031 \003(\t\022\027\n\017gamepadReq"
  "uired\030\032 \001(\010\022\030\n\020externallyHosted\030\033 \001(\010\022\034\n"
  "\024everExternallyHosted\030\034 \001(\010\022\024\n\014installNo"
  "tes\030\036 \001(\t\022\027\n\017installLocation\030\037 \001(\005\022\030\n\020ta"
  "rgetSdkVersion\030  \001(\005\022 \n\030preregistrationP"
  "romoCode\030! \001(\t\022E\n\016installDetails\030\" \001(\0132-"
  ".playapi.proto.finsky.download.InstallDe"
  "tails\022M\n\022testingProgramInfo\030# \001(\01321.play"
  "api.proto.finsky.document.TestingProgram"
  "Info\"=\n\022TestingProgramInfo\022\022\n\nsubscribed"
  "\030\002 \001(\010\022\023\n\013subscribed1\030\003 \001(\010\"\237\001\n\014AlbumDet"
  "ails\022\014\n\004name\030\001 \001(\t\022<\n\007details\030\002 \001(\0132+.pl"
  "ayapi.proto.finsky.document.MusicDetails"
  "\022C\n\rdisplayArtist\030\003 \001(\0132,.playapi.proto."
  "finsky.document.ArtistDetails\"\331\001\n\014MusicD"
  "etails\022\021\n\tcensoring\030\001 \001(\005\022\023\n\013durationSec"
  "\030\002 \001(\005\022\033\n\023originalReleaseDate\030\003 \001(\t\022\r\n\005l"
  "abel\030\004 \001(\t\022<\n\006artist\030\005 \003(\0132,.playapi.pro"
  "to.finsky.document.ArtistDetails\022\r\n\005genr"
  "e\030\006 \003(\t\022\023\n\013releaseDate\030\007 \001(\t\022\023\n\013releaseT"
  "ype\030\010 \003(\005\"|\n\rArtistDetails\022\022\n\ndetailsUrl"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022I\n\rexternalLinks\030\003 "
  "\001(\01322.playapi.proto.finsky.document.Arti"
  "stExternalLinks\"b\n\023ArtistExternalLinks\022\022"
  "\n\nwebsiteUrl\030\001 \003(\t\022\034\n\024googlePlusProfileU"
  "rl\030\002 \001(\t\022\031\n\021youtubeChannelUrl\030\003 \001(\t\"\217\002\n\013"
  "SongDetails\022\014\n\004name\030\001 \001(\t\022<\n\007details\030\002 \001"
  "(\0132+.playapi.proto.finsky.document.Music"
  "Details\022\021\n\talbumName\030\003 \001(\t\022\023\n\013trackNumbe"
  "r\030\004 \001(\005\022\022\n\npreviewUrl\030\005 \001(\t\022C\n\rdisplayAr"
  "tist\030\006 \001(\0132,.playapi.proto.finsky.docume"
  "nt.ArtistDetails\0223\n\005badge\030\007 \001(\0132$.playap"
  "i.proto.finsky.document.Badge\"\333\001\n\013BookDe"
  "tails\022\021\n\tpublisher\030\004 \001(\t\022\027\n\017publicationD"
  "ate\030\005 \001(\t\022\014\n\004isbn\030\006 \001(\t\022\025\n\rnumberOfPages"
  "\030\007 \001(\005\022\026\n\016aboutTheAuthor\030\021 \001(\t\022\020\n\010bookTy"
  "pe\030\033 \001(\005\022\022\n\nseriesLine\030\034 \001(\t\022\024\n\014conciseT"
  "itle\030\035 \001(\t\022\022\n\nshortTitle\030\036 \001(\t\022\023\n\013series"
  "Title\030\037 \001(\t\"\345\002\n\014VideoDetails\022:\n\006credit\030\001"
  " \003(\0132*.playapi.proto.finsky.document.Vid"
  "eoCredit\022\020\n\010duration\030\002 \001(\t\022\023\n\013releaseDat"
  "e\030\003 \001(\t\022\025\n\rcontentRating\030\004 \001(\t\022\r\n\005likes\030"
  "\005 \001(\003\022\020\n\010dislikes\030\006 \001(\003\022\r\n\005genre\030\007 \003(\t\0227"
  "\n\007trailer\030\010 \003(\0132&.playapi.proto.finsky.d"
  "ocument.Trailer\022B\n\nrentalTerm\030\t \003(\0132..pl"
  "ayapi.proto.finsky.document.VideoRentalT"
  "erm\022\025\n\raudioLanguage\030\n \003(\t\022\027\n\017captionLan"
  "guage\030\013 \003(\t\"\?\n\013VideoCredit\022\022\n\ncreditType"
  "\030\001 \001(\005\022\016\n\006credit\030\002 \001(\t\022\014\n\004name\030\003 \003(\t\"e\n\007"
  "Trailer\022\021\n\ttrailerId\030\001 \001(\t\022\r\n\005title\030\002 \001("
  "\t\022\024\n\014thumbnailUrl\030\003 \001(\t\022\020\n\010watchUrl\030\004 \001("
  "\t\022\020\n\010duration\030\005 \001(\t\"\276\001\n\017VideoRentalTerm\022"
  "\021\n\tofferType\030\001 \001(\005\022\031\n\021offerAbbreviation\030"
  "\002 \001(\t\022\024\n\014rentalHeader\030\003 \001(\t\022A\n\004term\030\004 \003("
  "\n23.playapi.proto.finsky.document.VideoR"
  "entalTerm.Term\032$\n\004Term\022\016\n\006header\030\005 \001(\t\022\014"
  "\n\004body\030\006 \001(\t\"1\n\023SubscriptionDetails\022\032\n\022s"
  "ubscriptionPeriod\030\001 \001(\005\"\224\001\n\017MagazineDeta"
  "ils\022\030\n\020parentDetailsUrl\030\001 \001(\t\022)\n!deviceA"
  "vailabilityDescriptionHtml\030\002 \001(\t\022\026\n\016psvD"
  "escription\030\003 \001(\t\022$\n\034deliveryFrequencyDes"
  "cription\030\004 \001(\t\"]\n\rTvShowDetails\022\023\n\013seaso"
  "nCount\030\001 \001(\005\022\021\n\tstartYear\030\002 \001(\005\022\017\n\007endYe"
  "ar\030\003 \001(\005\022\023\n\013broadcaster\030\004 \001(\t\"\262\001\n\017TvSeas"
  "onDetails\022\030\n\020parentDetailsUrl\030\001 \001(\t\022\023\n\013s"
  "easonIndex\030\002 \001(\005\022\023\n\013releaseDate\030\003 \001(\t\022\023\n"
  "\013broadcaster\030\004 \001(\t\022\024\n\014episodeCount\030\005 \001(\005"
  "\022\034\n\024expectedEpisodeCount\030\006 \001(\005\022\022\n\ninProg"
  "ress\030\007 \001(\010\"W\n\020TvEpisodeDetails\022\030\n\020parent"
  "DetailsUrl\030\001 \001(\t\022\024\n\014episodeIndex\030\002 \001(\005\022\023"
  "\n\013releaseDate\030\003 \001(\t\"\?\n\rPersonDetails\022\031\n\021"
  "personIsRequester\030\001 \001(\010\022\023\n\013isGplusUser\030\002"
  " \001(\010\"q\n\rTalentDetails\022I\n\rexternalLinks\030\001"
  " \001(\01322.playapi.proto.finsky.document.Tal"
  "entExternalLinks\022\025\n\rprimaryRoleId\030\002 \001(\005\""
  "\305\001\n\023TalentExternalLinks\0223\n\nwebsiteUrl\030\001 "
  "\003(\0132\037.playapi.proto.finsky.link.Link\022=\n\024"
  "googlePlusProfileUrl\030\002 \001(\0132\037.playapi.pro"
  "to.finsky.link.Link\022:\n\021youtubeChannelUrl"
  "\030\003 \001(\0132\037.playapi.proto.finsky.link.Link\""
  "&\n\020DeveloperDetails\022\022\n\nwebsiteUrl\030\001 \001(\t\""
  "`\n\021BookSeriesDetails\022\021\n\tpublisher\030\001 \001(\t\022"
  "\031\n\021seriesComposition\030\002 \001(\t\022\035\n\025seriesCard"
  "Composition\030\003 \001(\t\"\347\002\n\017AggregateRating\022\014\n"
  "\004type\030\001 \001(\005\022\022\n\nstarRating\030\002 \001(\002\022\024\n\014ratin"
  "gsCount\030\003 \001(\003\022\026\n\016oneStarRatings\030\004 \001(\003\022\026\n"
  "\016twoStarRatings\030\005 \001(\003\022\030\n\020threeStarRating"
  "s\030\006 \001(\003\022\027\n\017fourStarRatings\030\007 \001(\003\022\027\n\017five"
  "StarRatings\030\010 \001(\003\022\025\n\rthumbsUpCount\030\t \001(\003"
  "\022\027\n\017thumbsDownCount\030\n \001(\003\022\024\n\014commentCoun"
  "t\030\013 \001(\003\022\032\n\022bayesianMeanRating\030\014 \001(\001\022>\n\003t"
  "ip\030\r \003(\01321.playapi.proto.finsky.document"
  ".AggregateRatingTip\"\203\001\n\022AggregateRatingT"
  "ip\022\r\n\005tipId\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022\020\n\010polar"
  "ity\030\003 \001(\005\022\023\n\013reviewCount\030\004 \001(\003\022\020\n\010langua"
  "ge\030\005 \001(\t\022\027\n\017snippetReviewId\030\006 \003(\t\"\330\003\n\006Re"
  "view\022\022\n\nauthorName\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\016\n"
  "\006source\030\003 \001(\t\022\027\n\017documentVersion\030\004 \001(\t\022\025"
  "\n\rtimestampMsec\030\005 \001(\003\022\022\n\nstarRating\030\006 \001("
  "\005\022\r\n\005title\030\007 \001(\t\022\017\n\007comment\030\010 \001(\t\022\021\n\tcom"
  "mentId\030\t \001(\t\022\022\n\ndeviceName\030\023 \001(\t\022\021\n\trepl"
  "yText\030\035 \001(\t\022\032\n\022replyTimestampMsec\030\036 \001(\003\022"
  "P\n\023OBSOLETEPlusProfile\030\037 \001(\01323.playapi.p"
  "roto.finsky.document.OBSOLETE_PlusProfil"
  "e\0224\n\006author\030! \001(\0132$.playapi.proto.finsky"
  ".document.DocV2\022.\n\tsentiment\030\" \001(\0132\033.pla"
  "yapi.proto.finsky.Image\022\024\n\014helpfulCount\030"
  "# \001(\005\022\025\n\rthumbsUpCount\030& \001(\003\"P\n\tReviewTi"
  "p\022\016\n\006tipUrl\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022\020\n\010polar"
  "ity\030\003 \001(\005\022\023\n\013reviewCount\030\004 \001(\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fdocument_2eproto_deps[5] = {
  &::descriptor_table_play_5fcommon_2eproto,
  &::descriptor_table_play_5fcontainers_2eproto,
  &::descriptor_table_play_5fdownload_2eproto,
  &::descriptor_table_play_5ffilter_5frules_2eproto,
  &::descriptor_table_play_5flink_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fdocument_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fdocument_2eproto = {
    false, false, 12470, descriptor_table_protodef_play_5fdocument_2eproto,
    "play_document.proto",
    &descriptor_table_play_5fdocument_2eproto_once, descriptor_table_play_5fdocument_2eproto_deps, 5, 49,
    schemas, file_default_instances, TableStruct_play_5fdocument_2eproto::offsets,
    file_level_metadata_play_5fdocument_2eproto, file_level_enum_descriptors_play_5fdocument_2eproto,
    file_level_service_descriptors_play_5fdocument_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fdocument_2eproto_getter() {
  return &descriptor_table_play_5fdocument_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fdocument_2eproto(&descriptor_table_play_5fdocument_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace document {

// ===================================================================

class DocV2::_Internal {
 public:
  using HasBits = decltype(std::declval<DocV2>()._impl_._has_bits_);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_backenddocid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_doctype(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_backendid(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_descriptionhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::filter_rules::Availability& availability(const DocV2* msg);
  static void set_has_availability(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::playapi::proto::finsky::containers::ContainerMetadata& containermetadata(const DocV2* msg);
  static void set_has_containermetadata(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::playapi::proto::finsky::document::DocumentDetails& details(const DocV2* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::playapi::proto::finsky::document::AggregateRating& aggregaterating(const DocV2* msg);
  static void set_has_aggregaterating(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::playapi::proto::finsky::document::Annotations& annotations(const DocV2* msg);
  static void set_has_annotations(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_detailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shareurl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reviewsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_backendurl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_purchasedetailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_detailsreusable(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_translateddescriptionhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::playapi::proto::finsky::document::ProductDetails& productdetails(const DocV2* msg);
  static void set_has_productdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_mature(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_promotionaldescription(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_availableforpreregistration(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_snippetsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_forceshareability(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_usewishlistasprimaryaction(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
};

const ::playapi::proto::finsky::filter_rules::Availability&
DocV2::_Internal::availability(const DocV2* msg) {
  return *msg->_impl_.availability_;
}
const ::playapi::proto::finsky::containers::ContainerMetadata&
DocV2::_Internal::containermetadata(const DocV2* msg) {
  return *msg->_impl_.containermetadata_;
}
const ::playapi::proto::finsky::document::DocumentDetails&
DocV2::_Internal::details(const DocV2* msg) {
  return *msg->_impl_.details_;
}
const ::playapi::proto::finsky::document::AggregateRating&
DocV2::_Internal::aggregaterating(const DocV2* msg) {
  return *msg->_impl_.aggregaterating_;
}
const ::playapi::proto::finsky::document::Annotations&
DocV2::_Internal::annotations(const DocV2* msg) {
  return *msg->_impl_.annotations_;
}
const ::playapi::proto::finsky::document::ProductDetails&
DocV2::_Internal::productdetails(const DocV2* msg) {
  return *msg->_impl_.productdetails_;
}
void DocV2::clear_offer() {
  _impl_.offer_.Clear();
}
void DocV2::clear_availability() {
  if (_impl_.availability_ != nullptr) _impl_.availability_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void DocV2::clear_image() {
  _impl_.image_.Clear();
}
void DocV2::clear_containermetadata() {
  if (_impl_.containermetadata_ != nullptr) _impl_.containermetadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
DocV2::DocV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.DocV2)
}
DocV2::DocV2(const DocV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offer_){from._impl_.offer_}
    , decltype(_impl_.image_){from._impl_.image_}
    , decltype(_impl_.child_){from._impl_.child_}
    , decltype(_impl_.tip_){from._impl_.tip_}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.backenddocid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.creator_){}
    , decltype(_impl_.descriptionhtml_){}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.shareurl_){}
    , decltype(_impl_.reviewsurl_){}
    , decltype(_impl_.backendurl_){}
    , decltype(_impl_.purchasedetailsurl_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.translateddescriptionhtml_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.promotionaldescription_){}
    , decltype(_impl_.snippetsurl_){}
    , decltype(_impl_.availability_){nullptr}
    , decltype(_impl_.containermetadata_){nullptr}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.aggregaterating_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , decltype(_impl_.productdetails_){nullptr}
    , decltype(_impl_.doctype_){}
    , decltype(_impl_.backendid_){}
    , decltype(_impl_.detailsreusable_){}
    , decltype(_impl_.mature_){}
    , decltype(_impl_.availableforpreregistration_){}
    , decltype(_impl_.forceshareability_){}
    , decltype(_impl_.usewishlistasprimaryaction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docid()) {
    _this->_impl_.docid_.Set(from._internal_docid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backenddocid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backenddocid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_backenddocid()) {
    _this->_impl_.backenddocid_.Set(from._internal_backenddocid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creator()) {
    _this->_impl_.creator_.Set(from._internal_creator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.descriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_descriptionhtml()) {
    _this->_impl_.descriptionhtml_.Set(from._internal_descriptionhtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailsurl()) {
    _this->_impl_.detailsurl_.Set(from._internal_detailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shareurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shareurl()) {
    _this->_impl_.shareurl_.Set(from._internal_shareurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reviewsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reviewsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reviewsurl()) {
    _this->_impl_.reviewsurl_.Set(from._internal_reviewsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backendurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backendurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_backendurl()) {
    _this->_impl_.backendurl_.Set(from._internal_backendurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.purchasedetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasedetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_purchasedetailsurl()) {
    _this->_impl_.purchasedetailsurl_.Set(from._internal_purchasedetailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subtitle()) {
    _this->_impl_.subtitle_.Set(from._internal_subtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.translateddescriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translateddescriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_translateddescriptionhtml()) {
    _this->_impl_.translateddescriptionhtml_.Set(from._internal_translateddescriptionhtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _impl_.promotionaldescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.promotionaldescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_promotionaldescription()) {
    _this->_impl_.promotionaldescription_.Set(from._internal_promotionaldescription(), 
      _this->GetArenaForAllocation());
  }
  _impl_.snippetsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snippetsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_snippetsurl()) {
    _this->_impl_.snippetsurl_.Set(from._internal_snippetsurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_availability()) {
    _this->_impl_.availability_ = new ::playapi::proto::finsky::filter_rules::Availability(*from._impl_.availability_);
  }
  if (from._internal_has_containermetadata()) {
    _this->_impl_.containermetadata_ = new ::playapi::proto::finsky::containers::ContainerMetadata(*from._impl_.containermetadata_);
  }
  if (from._internal_has_details()) {
    _this->_impl_.details_ = new ::playapi::proto::finsky::document::DocumentDetails(*from._impl_.details_);
  }
  if (from._internal_has_aggregaterating()) {
    _this->_impl_.aggregaterating_ = new ::playapi::proto::finsky::document::AggregateRating(*from._impl_.aggregaterating_);
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::playapi::proto::finsky::document::Annotations(*from._impl_.annotations_);
  }
  if (from._internal_has_productdetails()) {
    _this->_impl_.productdetails_ = new ::playapi::proto::finsky::document::ProductDetails(*from._impl_.productdetails_);
  }
  ::memcpy(&_impl_.doctype_, &from._impl_.doctype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usewishlistasprimaryaction_) -
    reinterpret_cast<char*>(&_impl_.doctype_)) + sizeof(_impl_.usewishlistasprimaryaction_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.DocV2)
}

inline void DocV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offer_){arena}
    , decltype(_impl_.image_){arena}
    , decltype(_impl_.child_){arena}
    , decltype(_impl_.tip_){arena}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.backenddocid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.creator_){}
    , decltype(_impl_.descriptionhtml_){}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.shareurl_){}
    , decltype(_impl_.reviewsurl_){}
    , decltype(_impl_.backendurl_){}
    , decltype(_impl_.purchasedetailsurl_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.translateddescriptionhtml_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.promotionaldescription_){}
    , decltype(_impl_.snippetsurl_){}
    , decltype(_impl_.availability_){nullptr}
    , decltype(_impl_.containermetadata_){nullptr}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.aggregaterating_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , decltype(_impl_.productdetails_){nullptr}
    , decltype(_impl_.doctype_){0}
    , decltype(_impl_.backendid_){0}
    , decltype(_impl_.detailsreusable_){false}
    , decltype(_impl_.mature_){false}
    , decltype(_impl_.availableforpreregistration_){false}
    , decltype(_impl_.forceshareability_){false}
    , decltype(_impl_.usewishlistasprimaryaction_){false}
  };
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backenddocid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backenddocid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.descriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shareurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reviewsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reviewsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backendurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backendurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.purchasedetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasedetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.translateddescriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translateddescriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.promotionaldescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.promotionaldescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.snippetsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snippetsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocV2::~DocV2() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.DocV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.offer_.~RepeatedPtrField();
  _impl_.image_.~RepeatedPtrField();
  _impl_.child_.~RepeatedPtrField();
  _impl_.tip_.~RepeatedPtrField();
  _impl_.docid_.Destroy();
  _impl_.backenddocid_.Destroy();
  _impl_.title_.Destroy();
  _impl_.creator_.Destroy();
  _impl_.descriptionhtml_.Destroy();
  _impl_.detailsurl_.Destroy();
  _impl_.shareurl_.Destroy();
  _impl_.reviewsurl_.Destroy();
  _impl_.backendurl_.Destroy();
  _impl_.purchasedetailsurl_.Destroy();
  _impl_.subtitle_.Destroy();
  _impl_.translateddescriptionhtml_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  _impl_.promotionaldescription_.Destroy();
  _impl_.snippetsurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.availability_;
  if (this != internal_default_instance()) delete _impl_.containermetadata_;
  if (this != internal_default_instance()) delete _impl_.details_;
  if (this != internal_default_instance()) delete _impl_.aggregaterating_;
  if (this != internal_default_instance()) delete _impl_.annotations_;
  if (this != internal_default_instance()) delete _impl_.productdetails_;
}

void DocV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocV2::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.DocV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offer_.Clear();
  _impl_.image_.Clear();
  _impl_.child_.Clear();
  _impl_.tip_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.docid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.backenddocid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.creator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.descriptionhtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.detailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.shareurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.reviewsurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.backendurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.purchasedetailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.subtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.translateddescriptionhtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.promotionaldescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.snippetsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.availability_ != nullptr);
      _impl_.availability_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.containermetadata_ != nullptr);
      _impl_.containermetadata_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.details_ != nullptr);
      _impl_.details_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.aggregaterating_ != nullptr);
      _impl_.aggregaterating_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.annotations_ != nullptr);
      _impl_.annotations_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.productdetails_ != nullptr);
      _impl_.productdetails_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&_impl_.doctype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.detailsreusable_) -
        reinterpret_cast<char*>(&_impl_.doctype_)) + sizeof(_impl_.detailsreusable_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.mature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usewishlistasprimaryaction_) -
        reinterpret_cast<char*>(&_impl_.mature_)) + sizeof(_impl_.usewishlistasprimaryaction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string docid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_docid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.docid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string backendDocid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_backenddocid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.backendDocid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 docType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_doctype(&has_bits);
          _impl_.doctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 backendId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_backendid(&has_bits);
          _impl_.backendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string creator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.creator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string descriptionHtml = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_descriptionhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.descriptionHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Offer offer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.filter_rules.Availability availability = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_availability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Image image = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.DocV2 child = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.containers.ContainerMetadata containerMetadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_containermetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DocumentDetails details = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.AggregateRating aggregateRating = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregaterating(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.Annotations annotations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string detailsUrl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_detailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.detailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string shareUrl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_shareurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.shareUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string reviewsUrl = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_reviewsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.reviewsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string backendUrl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_backendurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.backendUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string purchaseDetailsUrl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_purchasedetailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.purchaseDetailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool detailsReusable = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_detailsreusable(&has_bits);
          _impl_.detailsreusable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string subtitle = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.subtitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string translatedDescriptionHtml = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_translateddescriptionhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.translatedDescriptionHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.ProductDetails productDetails = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_productdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mature = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_mature(&has_bits);
          _impl_.mature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string promotionalDescription = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_promotionaldescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.promotionalDescription");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool availableForPreregistration = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_availableforpreregistration(&has_bits);
          _impl_.availableforpreregistration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.ReviewTip tip = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string snippetsUrl = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_snippetsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DocV2.snippetsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool forceShareability = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_forceshareability(&has_bits);
          _impl_.forceshareability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool useWishlistAsPrimaryAction = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_usewishlistasprimaryaction(&has_bits);
          _impl_.usewishlistasprimaryaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.DocV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docid().data(), static_cast<int>(this->_internal_docid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.docid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docid(), target);
  }

  // optional string backendDocid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_backenddocid().data(), static_cast<int>(this->_internal_backenddocid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.backendDocid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_backenddocid(), target);
  }

  // optional int32 docType = 3;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_doctype(), target);
  }

  // optional int32 backendId = 4;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_backendid(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional string creator = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.creator");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_creator(), target);
  }

  // optional string descriptionHtml = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_descriptionhtml().data(), static_cast<int>(this->_internal_descriptionhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.descriptionHtml");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_descriptionhtml(), target);
  }

  // repeated .playapi.proto.finsky.Offer offer = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_offer_size()); i < n; i++) {
    const auto& repfield = this->_internal_offer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.filter_rules.Availability availability = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::availability(this),
        _Internal::availability(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.Image image = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_size()); i < n; i++) {
    const auto& repfield = this->_internal_image(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.DocV2 child = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_size()); i < n; i++) {
    const auto& repfield = this->_internal_child(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.containers.ContainerMetadata containerMetadata = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::containermetadata(this),
        _Internal::containermetadata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.DocumentDetails details = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.AggregateRating aggregateRating = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::aggregaterating(this),
        _Internal::aggregaterating(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.Annotations annotations = 15;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  // optional string detailsUrl = 16;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailsurl().data(), static_cast<int>(this->_internal_detailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.detailsUrl");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_detailsurl(), target);
  }

  // optional string shareUrl = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shareurl().data(), static_cast<int>(this->_internal_shareurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.shareUrl");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_shareurl(), target);
  }

  // optional string reviewsUrl = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reviewsurl().data(), static_cast<int>(this->_internal_reviewsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.reviewsUrl");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_reviewsurl(), target);
  }

  // optional string backendUrl = 19;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_backendurl().data(), static_cast<int>(this->_internal_backendurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.backendUrl");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_backendurl(), target);
  }

  // optional string purchaseDetailsUrl = 20;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purchasedetailsurl().data(), static_cast<int>(this->_internal_purchasedetailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.purchaseDetailsUrl");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_purchasedetailsurl(), target);
  }

  // optional bool detailsReusable = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_detailsreusable(), target);
  }

  // optional string subtitle = 22;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.subtitle");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_subtitle(), target);
  }

  // optional string translatedDescriptionHtml = 23;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_translateddescriptionhtml().data(), static_cast<int>(this->_internal_translateddescriptionhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.translatedDescriptionHtml");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_translateddescriptionhtml(), target);
  }

  // optional bytes serverLogsCookie = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_serverlogscookie(), target);
  }

  // optional .playapi.proto.finsky.document.ProductDetails productDetails = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::productdetails(this),
        _Internal::productdetails(this).GetCachedSize(), target, stream);
  }

  // optional bool mature = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_mature(), target);
  }

  // optional string promotionalDescription = 27;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_promotionaldescription().data(), static_cast<int>(this->_internal_promotionaldescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.promotionalDescription");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_promotionaldescription(), target);
  }

  // optional bool availableForPreregistration = 29;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_availableforpreregistration(), target);
  }

  // repeated .playapi.proto.finsky.document.ReviewTip tip = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tip_size()); i < n; i++) {
    const auto& repfield = this->_internal_tip(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string snippetsUrl = 31;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snippetsurl().data(), static_cast<int>(this->_internal_snippetsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DocV2.snippetsUrl");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_snippetsurl(), target);
  }

  // optional bool forceShareability = 32;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_forceshareability(), target);
  }

  // optional bool useWishlistAsPrimaryAction = 33;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_usewishlistasprimaryaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.DocV2)
  return target;
}

size_t DocV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.DocV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.Offer offer = 8;
  total_size += 1UL * this->_internal_offer_size();
  for (const auto& msg : this->_impl_.offer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.Image image = 10;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->_impl_.image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.DocV2 child = 11;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->_impl_.child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.ReviewTip tip = 30;
  total_size += 2UL * this->_internal_tip_size();
  for (const auto& msg : this->_impl_.tip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string docid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docid());
    }

    // optional string backendDocid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backenddocid());
    }

    // optional string title = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string creator = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creator());
    }

    // optional string descriptionHtml = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_descriptionhtml());
    }

    // optional string detailsUrl = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailsurl());
    }

    // optional string shareUrl = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shareurl());
    }

    // optional string reviewsUrl = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reviewsurl());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string backendUrl = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backendurl());
    }

    // optional string purchaseDetailsUrl = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purchasedetailsurl());
    }

    // optional string subtitle = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtitle());
    }

    // optional string translatedDescriptionHtml = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_translateddescriptionhtml());
    }

    // optional bytes serverLogsCookie = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional string promotionalDescription = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_promotionaldescription());
    }

    // optional string snippetsUrl = 31;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_snippetsurl());
    }

    // optional .playapi.proto.finsky.filter_rules.Availability availability = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.availability_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .playapi.proto.finsky.containers.ContainerMetadata containerMetadata = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.containermetadata_);
    }

    // optional .playapi.proto.finsky.document.DocumentDetails details = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.details_);
    }

    // optional .playapi.proto.finsky.document.AggregateRating aggregateRating = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggregaterating_);
    }

    // optional .playapi.proto.finsky.document.Annotations annotations = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotations_);
    }

    // optional .playapi.proto.finsky.document.ProductDetails productDetails = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.productdetails_);
    }

    // optional int32 docType = 3;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_doctype());
    }

    // optional int32 backendId = 4;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backendid());
    }

    // optional bool detailsReusable = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional bool mature = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool availableForPreregistration = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool forceShareability = 32;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool useWishlistAsPrimaryAction = 33;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocV2::GetClassData() const { return &_class_data_; }


void DocV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocV2*>(&to_msg);
  auto& from = static_cast<const DocV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.DocV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.offer_.MergeFrom(from._impl_.offer_);
  _this->_impl_.image_.MergeFrom(from._impl_.image_);
  _this->_impl_.child_.MergeFrom(from._impl_.child_);
  _this->_impl_.tip_.MergeFrom(from._impl_.tip_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_docid(from._internal_docid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_backenddocid(from._internal_backenddocid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_creator(from._internal_creator());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_descriptionhtml(from._internal_descriptionhtml());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_detailsurl(from._internal_detailsurl());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_shareurl(from._internal_shareurl());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_reviewsurl(from._internal_reviewsurl());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_backendurl(from._internal_backendurl());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_purchasedetailsurl(from._internal_purchasedetailsurl());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_subtitle(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_translateddescriptionhtml(from._internal_translateddescriptionhtml());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_promotionaldescription(from._internal_promotionaldescription());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_snippetsurl(from._internal_snippetsurl());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_availability()->::playapi::proto::finsky::filter_rules::Availability::MergeFrom(
          from._internal_availability());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_containermetadata()->::playapi::proto::finsky::containers::ContainerMetadata::MergeFrom(
          from._internal_containermetadata());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_details()->::playapi::proto::finsky::document::DocumentDetails::MergeFrom(
          from._internal_details());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_aggregaterating()->::playapi::proto::finsky::document::AggregateRating::MergeFrom(
          from._internal_aggregaterating());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_annotations()->::playapi::proto::finsky::document::Annotations::MergeFrom(
          from._internal_annotations());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_productdetails()->::playapi::proto::finsky::document::ProductDetails::MergeFrom(
          from._internal_productdetails());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.doctype_ = from._impl_.doctype_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.backendid_ = from._impl_.backendid_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.detailsreusable_ = from._impl_.detailsreusable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.mature_ = from._impl_.mature_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.availableforpreregistration_ = from._impl_.availableforpreregistration_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.forceshareability_ = from._impl_.forceshareability_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.usewishlistasprimaryaction_ = from._impl_.usewishlistasprimaryaction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocV2::CopyFrom(const DocV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.DocV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocV2::IsInitialized() const {
  return true;
}

void DocV2::InternalSwap(DocV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.offer_.InternalSwap(&other->_impl_.offer_);
  _impl_.image_.InternalSwap(&other->_impl_.image_);
  _impl_.child_.InternalSwap(&other->_impl_.child_);
  _impl_.tip_.InternalSwap(&other->_impl_.tip_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docid_, lhs_arena,
      &other->_impl_.docid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backenddocid_, lhs_arena,
      &other->_impl_.backenddocid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_, lhs_arena,
      &other->_impl_.creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descriptionhtml_, lhs_arena,
      &other->_impl_.descriptionhtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailsurl_, lhs_arena,
      &other->_impl_.detailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shareurl_, lhs_arena,
      &other->_impl_.shareurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reviewsurl_, lhs_arena,
      &other->_impl_.reviewsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backendurl_, lhs_arena,
      &other->_impl_.backendurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.purchasedetailsurl_, lhs_arena,
      &other->_impl_.purchasedetailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subtitle_, lhs_arena,
      &other->_impl_.subtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translateddescriptionhtml_, lhs_arena,
      &other->_impl_.translateddescriptionhtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.promotionaldescription_, lhs_arena,
      &other->_impl_.promotionaldescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snippetsurl_, lhs_arena,
      &other->_impl_.snippetsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocV2, _impl_.usewishlistasprimaryaction_)
      + sizeof(DocV2::_impl_.usewishlistasprimaryaction_)
      - PROTOBUF_FIELD_OFFSET(DocV2, _impl_.availability_)>(
          reinterpret_cast<char*>(&_impl_.availability_),
          reinterpret_cast<char*>(&other->_impl_.availability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[0]);
}

// ===================================================================

class Annotations::_Internal {
 public:
  using HasBits = decltype(std::declval<Annotations>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionrelated(const Annotations* msg);
  static void set_has_sectionrelated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionmoreby(const Annotations* msg);
  static void set_has_sectionmoreby(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::playapi::proto::finsky::document::PlusOneData& plusonedata(const Annotations* msg);
  static void set_has_plusonedata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionbodyofwork(const Annotations* msg);
  static void set_has_sectionbodyofwork(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectioncorecontent(const Annotations* msg);
  static void set_has_sectioncorecontent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::finsky::link::Link& link(const Annotations* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectioncrosssell(const Annotations* msg);
  static void set_has_sectioncrosssell(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionrelateddoctype(const Annotations* msg);
  static void set_has_sectionrelateddoctype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_offernote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::document::OBSOLETE_Reason& obsoletereason(const Annotations* msg);
  static void set_has_obsoletereason(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_privacypolicyurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::document::Warning& optimaldeviceclasswarning(const Annotations* msg);
  static void set_has_optimaldeviceclasswarning(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionsuggestforrating(const Annotations* msg);
  static void set_has_sectionsuggestforrating(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionpurchasecrosssell(const Annotations* msg);
  static void set_has_sectionpurchasecrosssell(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::playapi::proto::finsky::document::DocV2& creatordoc(const Annotations* msg);
  static void set_has_creatordoc(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_attributionhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::document::PurchaseHistoryDetails& purchasehistorydetails(const Annotations* msg);
  static void set_has_purchasehistorydetails(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::playapi::proto::finsky::document::Badge& badgeforcontentrating(const Annotations* msg);
  static void set_has_badgeforcontentrating(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionfeaturedapps(const Annotations* msg);
  static void set_has_sectionfeaturedapps(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_applicablevoucherdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::document::VideoAnnotations& videoannotations(const Annotations* msg);
  static void set_has_videoannotations(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::playapi::proto::finsky::document::SectionMetadata& sectionpurchaserelatedtopics(const Annotations* msg);
  static void set_has_sectionpurchaserelatedtopics(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::playapi::proto::finsky::document::MySubscriptionDetails& mysubscriptiondetails(const Annotations* msg);
  static void set_has_mysubscriptiondetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::playapi::proto::finsky::document::MyRewardDetails& myrewarddetails(const Annotations* msg);
  static void set_has_myrewarddetails(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::playapi::proto::finsky::document::SelectedChild& selectedchild(const Annotations* msg);
  static void set_has_selectedchild(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::playapi::proto::finsky::document::PurchaseDetails& purchasedetails(const Annotations* msg);
  static void set_has_purchasedetails(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::playapi::proto::finsky::document::Snippet& snippet(const Annotations* msg);
  static void set_has_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionrelated(const Annotations* msg) {
  return *msg->_impl_.sectionrelated_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionmoreby(const Annotations* msg) {
  return *msg->_impl_.sectionmoreby_;
}
const ::playapi::proto::finsky::document::PlusOneData&
Annotations::_Internal::plusonedata(const Annotations* msg) {
  return *msg->_impl_.plusonedata_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionbodyofwork(const Annotations* msg) {
  return *msg->_impl_.sectionbodyofwork_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectioncorecontent(const Annotations* msg) {
  return *msg->_impl_.sectioncorecontent_;
}
const ::playapi::proto::finsky::link::Link&
Annotations::_Internal::link(const Annotations* msg) {
  return *msg->_impl_.link_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectioncrosssell(const Annotations* msg) {
  return *msg->_impl_.sectioncrosssell_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionrelateddoctype(const Annotations* msg) {
  return *msg->_impl_.sectionrelateddoctype_;
}
const ::playapi::proto::finsky::document::OBSOLETE_Reason&
Annotations::_Internal::obsoletereason(const Annotations* msg) {
  return *msg->_impl_.obsoletereason_;
}
const ::playapi::proto::finsky::document::Warning&
Annotations::_Internal::optimaldeviceclasswarning(const Annotations* msg) {
  return *msg->_impl_.optimaldeviceclasswarning_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionsuggestforrating(const Annotations* msg) {
  return *msg->_impl_.sectionsuggestforrating_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionpurchasecrosssell(const Annotations* msg) {
  return *msg->_impl_.sectionpurchasecrosssell_;
}
const ::playapi::proto::finsky::document::DocV2&
Annotations::_Internal::creatordoc(const Annotations* msg) {
  return *msg->_impl_.creatordoc_;
}
const ::playapi::proto::finsky::document::PurchaseHistoryDetails&
Annotations::_Internal::purchasehistorydetails(const Annotations* msg) {
  return *msg->_impl_.purchasehistorydetails_;
}
const ::playapi::proto::finsky::document::Badge&
Annotations::_Internal::badgeforcontentrating(const Annotations* msg) {
  return *msg->_impl_.badgeforcontentrating_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionfeaturedapps(const Annotations* msg) {
  return *msg->_impl_.sectionfeaturedapps_;
}
const ::playapi::proto::finsky::document::VideoAnnotations&
Annotations::_Internal::videoannotations(const Annotations* msg) {
  return *msg->_impl_.videoannotations_;
}
const ::playapi::proto::finsky::document::SectionMetadata&
Annotations::_Internal::sectionpurchaserelatedtopics(const Annotations* msg) {
  return *msg->_impl_.sectionpurchaserelatedtopics_;
}
const ::playapi::proto::finsky::document::MySubscriptionDetails&
Annotations::_Internal::mysubscriptiondetails(const Annotations* msg) {
  return *msg->_impl_.mysubscriptiondetails_;
}
const ::playapi::proto::finsky::document::MyRewardDetails&
Annotations::_Internal::myrewarddetails(const Annotations* msg) {
  return *msg->_impl_.myrewarddetails_;
}
const ::playapi::proto::finsky::document::SelectedChild&
Annotations::_Internal::selectedchild(const Annotations* msg) {
  return *msg->_impl_.selectedchild_;
}
const ::playapi::proto::finsky::document::PurchaseDetails&
Annotations::_Internal::purchasedetails(const Annotations* msg) {
  return *msg->_impl_.purchasedetails_;
}
const ::playapi::proto::finsky::document::Snippet&
Annotations::_Internal::snippet(const Annotations* msg) {
  return *msg->_impl_.snippet_;
}
void Annotations::clear_link() {
  if (_impl_.link_ != nullptr) _impl_.link_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Annotations::clear_overflowlink() {
  _impl_.overflowlink_.Clear();
}
Annotations::Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.Annotations)
}
Annotations::Annotations(const Annotations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Annotations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.warning_){from._impl_.warning_}
    , decltype(_impl_.badgeforcreator_){from._impl_.badgeforcreator_}
    , decltype(_impl_.badgefordoc_){from._impl_.badgefordoc_}
    , decltype(_impl_.promoteddoc_){from._impl_.promoteddoc_}
    , decltype(_impl_.subscription_){from._impl_.subscription_}
    , decltype(_impl_.docbadgecontainer_){from._impl_.docbadgecontainer_}
    , decltype(_impl_.overflowlink_){from._impl_.overflowlink_}
    , decltype(_impl_.voucherinfo_){from._impl_.voucherinfo_}
    , decltype(_impl_.detailspagecluster_){from._impl_.detailspagecluster_}
    , decltype(_impl_.featurebadge_){from._impl_.featurebadge_}
    , decltype(_impl_.offernote_){}
    , decltype(_impl_.privacypolicyurl_){}
    , decltype(_impl_.attributionhtml_){}
    , decltype(_impl_.applicablevoucherdescription_){}
    , decltype(_impl_.sectionrelated_){nullptr}
    , decltype(_impl_.sectionmoreby_){nullptr}
    , decltype(_impl_.plusonedata_){nullptr}
    , decltype(_impl_.sectionbodyofwork_){nullptr}
    , decltype(_impl_.sectioncorecontent_){nullptr}
    , decltype(_impl_.link_){nullptr}
    , decltype(_impl_.sectioncrosssell_){nullptr}
    , decltype(_impl_.sectionrelateddoctype_){nullptr}
    , decltype(_impl_.obsoletereason_){nullptr}
    , decltype(_impl_.optimaldeviceclasswarning_){nullptr}
    , decltype(_impl_.sectionsuggestforrating_){nullptr}
    , decltype(_impl_.sectionpurchasecrosssell_){nullptr}
    , decltype(_impl_.creatordoc_){nullptr}
    , decltype(_impl_.purchasehistorydetails_){nullptr}
    , decltype(_impl_.badgeforcontentrating_){nullptr}
    , decltype(_impl_.sectionfeaturedapps_){nullptr}
    , decltype(_impl_.videoannotations_){nullptr}
    , decltype(_impl_.sectionpurchaserelatedtopics_){nullptr}
    , decltype(_impl_.mysubscriptiondetails_){nullptr}
    , decltype(_impl_.myrewarddetails_){nullptr}
    , decltype(_impl_.selectedchild_){nullptr}
    , decltype(_impl_.purchasedetails_){nullptr}
    , decltype(_impl_.snippet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.offernote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offernote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_offernote()) {
    _this->_impl_.offernote_.Set(from._internal_offernote(), 
      _this->GetArenaForAllocation());
  }
  _impl_.privacypolicyurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privacypolicyurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_privacypolicyurl()) {
    _this->_impl_.privacypolicyurl_.Set(from._internal_privacypolicyurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attributionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attributionhtml()) {
    _this->_impl_.attributionhtml_.Set(from._internal_attributionhtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.applicablevoucherdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.applicablevoucherdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_applicablevoucherdescription()) {
    _this->_impl_.applicablevoucherdescription_.Set(from._internal_applicablevoucherdescription(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sectionrelated()) {
    _this->_impl_.sectionrelated_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionrelated_);
  }
  if (from._internal_has_sectionmoreby()) {
    _this->_impl_.sectionmoreby_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionmoreby_);
  }
  if (from._internal_has_plusonedata()) {
    _this->_impl_.plusonedata_ = new ::playapi::proto::finsky::document::PlusOneData(*from._impl_.plusonedata_);
  }
  if (from._internal_has_sectionbodyofwork()) {
    _this->_impl_.sectionbodyofwork_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionbodyofwork_);
  }
  if (from._internal_has_sectioncorecontent()) {
    _this->_impl_.sectioncorecontent_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectioncorecontent_);
  }
  if (from._internal_has_link()) {
    _this->_impl_.link_ = new ::playapi::proto::finsky::link::Link(*from._impl_.link_);
  }
  if (from._internal_has_sectioncrosssell()) {
    _this->_impl_.sectioncrosssell_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectioncrosssell_);
  }
  if (from._internal_has_sectionrelateddoctype()) {
    _this->_impl_.sectionrelateddoctype_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionrelateddoctype_);
  }
  if (from._internal_has_obsoletereason()) {
    _this->_impl_.obsoletereason_ = new ::playapi::proto::finsky::document::OBSOLETE_Reason(*from._impl_.obsoletereason_);
  }
  if (from._internal_has_optimaldeviceclasswarning()) {
    _this->_impl_.optimaldeviceclasswarning_ = new ::playapi::proto::finsky::document::Warning(*from._impl_.optimaldeviceclasswarning_);
  }
  if (from._internal_has_sectionsuggestforrating()) {
    _this->_impl_.sectionsuggestforrating_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionsuggestforrating_);
  }
  if (from._internal_has_sectionpurchasecrosssell()) {
    _this->_impl_.sectionpurchasecrosssell_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionpurchasecrosssell_);
  }
  if (from._internal_has_creatordoc()) {
    _this->_impl_.creatordoc_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.creatordoc_);
  }
  if (from._internal_has_purchasehistorydetails()) {
    _this->_impl_.purchasehistorydetails_ = new ::playapi::proto::finsky::document::PurchaseHistoryDetails(*from._impl_.purchasehistorydetails_);
  }
  if (from._internal_has_badgeforcontentrating()) {
    _this->_impl_.badgeforcontentrating_ = new ::playapi::proto::finsky::document::Badge(*from._impl_.badgeforcontentrating_);
  }
  if (from._internal_has_sectionfeaturedapps()) {
    _this->_impl_.sectionfeaturedapps_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionfeaturedapps_);
  }
  if (from._internal_has_videoannotations()) {
    _this->_impl_.videoannotations_ = new ::playapi::proto::finsky::document::VideoAnnotations(*from._impl_.videoannotations_);
  }
  if (from._internal_has_sectionpurchaserelatedtopics()) {
    _this->_impl_.sectionpurchaserelatedtopics_ = new ::playapi::proto::finsky::document::SectionMetadata(*from._impl_.sectionpurchaserelatedtopics_);
  }
  if (from._internal_has_mysubscriptiondetails()) {
    _this->_impl_.mysubscriptiondetails_ = new ::playapi::proto::finsky::document::MySubscriptionDetails(*from._impl_.mysubscriptiondetails_);
  }
  if (from._internal_has_myrewarddetails()) {
    _this->_impl_.myrewarddetails_ = new ::playapi::proto::finsky::document::MyRewardDetails(*from._impl_.myrewarddetails_);
  }
  if (from._internal_has_selectedchild()) {
    _this->_impl_.selectedchild_ = new ::playapi::proto::finsky::document::SelectedChild(*from._impl_.selectedchild_);
  }
  if (from._internal_has_purchasedetails()) {
    _this->_impl_.purchasedetails_ = new ::playapi::proto::finsky::document::PurchaseDetails(*from._impl_.purchasedetails_);
  }
  if (from._internal_has_snippet()) {
    _this->_impl_.snippet_ = new ::playapi::proto::finsky::document::Snippet(*from._impl_.snippet_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.Annotations)
}

inline void Annotations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.warning_){arena}
    , decltype(_impl_.badgeforcreator_){arena}
    , decltype(_impl_.badgefordoc_){arena}
    , decltype(_impl_.promoteddoc_){arena}
    , decltype(_impl_.subscription_){arena}
    , decltype(_impl_.docbadgecontainer_){arena}
    , decltype(_impl_.overflowlink_){arena}
    , decltype(_impl_.voucherinfo_){arena}
    , decltype(_impl_.detailspagecluster_){arena}
    , decltype(_impl_.featurebadge_){arena}
    , decltype(_impl_.offernote_){}
    , decltype(_impl_.privacypolicyurl_){}
    , decltype(_impl_.attributionhtml_){}
    , decltype(_impl_.applicablevoucherdescription_){}
    , decltype(_impl_.sectionrelated_){nullptr}
    , decltype(_impl_.sectionmoreby_){nullptr}
    , decltype(_impl_.plusonedata_){nullptr}
    , decltype(_impl_.sectionbodyofwork_){nullptr}
    , decltype(_impl_.sectioncorecontent_){nullptr}
    , decltype(_impl_.link_){nullptr}
    , decltype(_impl_.sectioncrosssell_){nullptr}
    , decltype(_impl_.sectionrelateddoctype_){nullptr}
    , decltype(_impl_.obsoletereason_){nullptr}
    , decltype(_impl_.optimaldeviceclasswarning_){nullptr}
    , decltype(_impl_.sectionsuggestforrating_){nullptr}
    , decltype(_impl_.sectionpurchasecrosssell_){nullptr}
    , decltype(_impl_.creatordoc_){nullptr}
    , decltype(_impl_.purchasehistorydetails_){nullptr}
    , decltype(_impl_.badgeforcontentrating_){nullptr}
    , decltype(_impl_.sectionfeaturedapps_){nullptr}
    , decltype(_impl_.videoannotations_){nullptr}
    , decltype(_impl_.sectionpurchaserelatedtopics_){nullptr}
    , decltype(_impl_.mysubscriptiondetails_){nullptr}
    , decltype(_impl_.myrewarddetails_){nullptr}
    , decltype(_impl_.selectedchild_){nullptr}
    , decltype(_impl_.purchasedetails_){nullptr}
    , decltype(_impl_.snippet_){nullptr}
  };
  _impl_.offernote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offernote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.privacypolicyurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privacypolicyurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attributionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.applicablevoucherdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.applicablevoucherdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Annotations::~Annotations() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.Annotations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Annotations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.warning_.~RepeatedPtrField();
  _impl_.badgeforcreator_.~RepeatedPtrField();
  _impl_.badgefordoc_.~RepeatedPtrField();
  _impl_.promoteddoc_.~RepeatedPtrField();
  _impl_.subscription_.~RepeatedPtrField();
  _impl_.docbadgecontainer_.~RepeatedPtrField();
  _impl_.overflowlink_.~RepeatedPtrField();
  _impl_.voucherinfo_.~RepeatedPtrField();
  _impl_.detailspagecluster_.~RepeatedPtrField();
  _impl_.featurebadge_.~RepeatedPtrField();
  _impl_.offernote_.Destroy();
  _impl_.privacypolicyurl_.Destroy();
  _impl_.attributionhtml_.Destroy();
  _impl_.applicablevoucherdescription_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sectionrelated_;
  if (this != internal_default_instance()) delete _impl_.sectionmoreby_;
  if (this != internal_default_instance()) delete _impl_.plusonedata_;
  if (this != internal_default_instance()) delete _impl_.sectionbodyofwork_;
  if (this != internal_default_instance()) delete _impl_.sectioncorecontent_;
  if (this != internal_default_instance()) delete _impl_.link_;
  if (this != internal_default_instance()) delete _impl_.sectioncrosssell_;
  if (this != internal_default_instance()) delete _impl_.sectionrelateddoctype_;
  if (this != internal_default_instance()) delete _impl_.obsoletereason_;
  if (this != internal_default_instance()) delete _impl_.optimaldeviceclasswarning_;
  if (this != internal_default_instance()) delete _impl_.sectionsuggestforrating_;
  if (this != internal_default_instance()) delete _impl_.sectionpurchasecrosssell_;
  if (this != internal_default_instance()) delete _impl_.creatordoc_;
  if (this != internal_default_instance()) delete _impl_.purchasehistorydetails_;
  if (this != internal_default_instance()) delete _impl_.badgeforcontentrating_;
  if (this != internal_default_instance()) delete _impl_.sectionfeaturedapps_;
  if (this != internal_default_instance()) delete _impl_.videoannotations_;
  if (this != internal_default_instance()) delete _impl_.sectionpurchaserelatedtopics_;
  if (this != internal_default_instance()) delete _impl_.mysubscriptiondetails_;
  if (this != internal_default_instance()) delete _impl_.myrewarddetails_;
  if (this != internal_default_instance()) delete _impl_.selectedchild_;
  if (this != internal_default_instance()) delete _impl_.purchasedetails_;
  if (this != internal_default_instance()) delete _impl_.snippet_;
}

void Annotations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Annotations::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.Annotations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.warning_.Clear();
  _impl_.badgeforcreator_.Clear();
  _impl_.badgefordoc_.Clear();
  _impl_.promoteddoc_.Clear();
  _impl_.subscription_.Clear();
  _impl_.docbadgecontainer_.Clear();
  _impl_.overflowlink_.Clear();
  _impl_.voucherinfo_.Clear();
  _impl_.detailspagecluster_.Clear();
  _impl_.featurebadge_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.offernote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.privacypolicyurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.attributionhtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.applicablevoucherdescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.sectionrelated_ != nullptr);
      _impl_.sectionrelated_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.sectionmoreby_ != nullptr);
      _impl_.sectionmoreby_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.plusonedata_ != nullptr);
      _impl_.plusonedata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.sectionbodyofwork_ != nullptr);
      _impl_.sectionbodyofwork_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.sectioncorecontent_ != nullptr);
      _impl_.sectioncorecontent_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.link_ != nullptr);
      _impl_.link_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.sectioncrosssell_ != nullptr);
      _impl_.sectioncrosssell_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.sectionrelateddoctype_ != nullptr);
      _impl_.sectionrelateddoctype_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.obsoletereason_ != nullptr);
      _impl_.obsoletereason_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.optimaldeviceclasswarning_ != nullptr);
      _impl_.optimaldeviceclasswarning_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.sectionsuggestforrating_ != nullptr);
      _impl_.sectionsuggestforrating_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.sectionpurchasecrosssell_ != nullptr);
      _impl_.sectionpurchasecrosssell_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.creatordoc_ != nullptr);
      _impl_.creatordoc_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.purchasehistorydetails_ != nullptr);
      _impl_.purchasehistorydetails_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.badgeforcontentrating_ != nullptr);
      _impl_.badgeforcontentrating_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.sectionfeaturedapps_ != nullptr);
      _impl_.sectionfeaturedapps_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.videoannotations_ != nullptr);
      _impl_.videoannotations_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.sectionpurchaserelatedtopics_ != nullptr);
      _impl_.sectionpurchaserelatedtopics_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.mysubscriptiondetails_ != nullptr);
      _impl_.mysubscriptiondetails_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.myrewarddetails_ != nullptr);
      _impl_.myrewarddetails_->Clear();
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.selectedchild_ != nullptr);
      _impl_.selectedchild_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.purchasedetails_ != nullptr);
      _impl_.purchasedetails_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.snippet_ != nullptr);
      _impl_.snippet_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.document.SectionMetadata sectionRelated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionrelated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionMoreBy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionmoreby(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.PlusOneData plusOneData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plusonedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.Warning warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_warning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionBodyOfWork = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionbodyofwork(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionCoreContent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectioncorecontent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.Badge badgeForCreator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_badgeforcreator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.Badge badgeForDoc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_badgefordoc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link link = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionCrossSell = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectioncrosssell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionRelatedDocType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionrelateddoctype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.PromotedDoc promotedDoc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_promoteddoc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string offerNote = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_offernote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Annotations.offerNote");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.DocV2 subscription = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_subscription(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.OBSOLETE_Reason OBSOLETEReason = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsoletereason(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string privacyPolicyUrl = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_privacypolicyurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Annotations.privacyPolicyUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.Warning optimalDeviceClassWarning = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimaldeviceclasswarning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.BadgeContainer docBadgeContainer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_docbadgecontainer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionSuggestForRating = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionsuggestforrating(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionPurchaseCrossSell = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionpurchasecrosssell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.link.OverflowLink overflowLink = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_overflowlink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DocV2 creatorDoc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_creatordoc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string attributionHtml = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_attributionhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Annotations.attributionHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.PurchaseHistoryDetails purchaseHistoryDetails = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchasehistorydetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.Badge badgeForContentRating = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_badgeforcontentrating(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.VoucherInfo voucherInfo = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_voucherinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionFeaturedApps = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionfeaturedapps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string applicableVoucherDescription = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_applicablevoucherdescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Annotations.applicableVoucherDescription");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.SectionMetadata detailsPageCluster = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_detailspagecluster(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.VideoAnnotations videoAnnotations = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_videoannotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SectionMetadata sectionPurchaseRelatedTopics = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionpurchaserelatedtopics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.MySubscriptionDetails mySubscriptionDetails = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysubscriptiondetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.MyRewardDetails myRewardDetails = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_myrewarddetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.Badge featureBadge = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_featurebadge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SelectedChild selectedChild = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedchild(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.PurchaseDetails purchaseDetails = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchasedetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.Snippet snippet = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_snippet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Annotations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.Annotations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.document.SectionMetadata sectionRelated = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sectionrelated(this),
        _Internal::sectionrelated(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionMoreBy = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sectionmoreby(this),
        _Internal::sectionmoreby(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.PlusOneData plusOneData = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::plusonedata(this),
        _Internal::plusonedata(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.Warning warning = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_warning_size()); i < n; i++) {
    const auto& repfield = this->_internal_warning(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionBodyOfWork = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sectionbodyofwork(this),
        _Internal::sectionbodyofwork(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionCoreContent = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sectioncorecontent(this),
        _Internal::sectioncorecontent(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.Badge badgeForCreator = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_badgeforcreator_size()); i < n; i++) {
    const auto& repfield = this->_internal_badgeforcreator(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.Badge badgeForDoc = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_badgefordoc_size()); i < n; i++) {
    const auto& repfield = this->_internal_badgefordoc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.link.Link link = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionCrossSell = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::sectioncrosssell(this),
        _Internal::sectioncrosssell(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionRelatedDocType = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::sectionrelateddoctype(this),
        _Internal::sectionrelateddoctype(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.PromotedDoc promotedDoc = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_promoteddoc_size()); i < n; i++) {
    const auto& repfield = this->_internal_promoteddoc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string offerNote = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_offernote().data(), static_cast<int>(this->_internal_offernote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Annotations.offerNote");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_offernote(), target);
  }

  // repeated .playapi.proto.finsky.document.DocV2 subscription = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscription_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscription(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.OBSOLETE_Reason OBSOLETEReason = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::obsoletereason(this),
        _Internal::obsoletereason(this).GetCachedSize(), target, stream);
  }

  // optional string privacyPolicyUrl = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_privacypolicyurl().data(), static_cast<int>(this->_internal_privacypolicyurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Annotations.privacyPolicyUrl");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_privacypolicyurl(), target);
  }

  // optional .playapi.proto.finsky.document.Warning optimalDeviceClassWarning = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::optimaldeviceclasswarning(this),
        _Internal::optimaldeviceclasswarning(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.BadgeContainer docBadgeContainer = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_docbadgecontainer_size()); i < n; i++) {
    const auto& repfield = this->_internal_docbadgecontainer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionSuggestForRating = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::sectionsuggestforrating(this),
        _Internal::sectionsuggestforrating(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionPurchaseCrossSell = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::sectionpurchasecrosssell(this),
        _Internal::sectionpurchasecrosssell(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.link.OverflowLink overflowLink = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overflowlink_size()); i < n; i++) {
    const auto& repfield = this->_internal_overflowlink(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.DocV2 creatorDoc = 26;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::creatordoc(this),
        _Internal::creatordoc(this).GetCachedSize(), target, stream);
  }

  // optional string attributionHtml = 27;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attributionhtml().data(), static_cast<int>(this->_internal_attributionhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Annotations.attributionHtml");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_attributionhtml(), target);
  }

  // optional .playapi.proto.finsky.document.PurchaseHistoryDetails purchaseHistoryDetails = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::purchasehistorydetails(this),
        _Internal::purchasehistorydetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.Badge badgeForContentRating = 29;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::badgeforcontentrating(this),
        _Internal::badgeforcontentrating(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.VoucherInfo voucherInfo = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_voucherinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_voucherinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionFeaturedApps = 32;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::sectionfeaturedapps(this),
        _Internal::sectionfeaturedapps(this).GetCachedSize(), target, stream);
  }

  // optional string applicableVoucherDescription = 33;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applicablevoucherdescription().data(), static_cast<int>(this->_internal_applicablevoucherdescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Annotations.applicableVoucherDescription");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_applicablevoucherdescription(), target);
  }

  // repeated .playapi.proto.finsky.document.SectionMetadata detailsPageCluster = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detailspagecluster_size()); i < n; i++) {
    const auto& repfield = this->_internal_detailspagecluster(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.VideoAnnotations videoAnnotations = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::videoannotations(this),
        _Internal::videoannotations(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SectionMetadata sectionPurchaseRelatedTopics = 36;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::sectionpurchaserelatedtopics(this),
        _Internal::sectionpurchaserelatedtopics(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.MySubscriptionDetails mySubscriptionDetails = 37;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::mysubscriptiondetails(this),
        _Internal::mysubscriptiondetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.MyRewardDetails myRewardDetails = 38;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::myrewarddetails(this),
        _Internal::myrewarddetails(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.Badge featureBadge = 39;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_featurebadge_size()); i < n; i++) {
    const auto& repfield = this->_internal_featurebadge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SelectedChild selectedChild = 40;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::selectedchild(this),
        _Internal::selectedchild(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.PurchaseDetails purchaseDetails = 41;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::purchasedetails(this),
        _Internal::purchasedetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.Snippet snippet = 42;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::snippet(this),
        _Internal::snippet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.Annotations)
  return target;
}

size_t Annotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.Annotations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.Warning warning = 4;
  total_size += 1UL * this->_internal_warning_size();
  for (const auto& msg : this->_impl_.warning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.Badge badgeForCreator = 8;
  total_size += 1UL * this->_internal_badgeforcreator_size();
  for (const auto& msg : this->_impl_.badgeforcreator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.Badge badgeForDoc = 9;
  total_size += 1UL * this->_internal_badgefordoc_size();
  for (const auto& msg : this->_impl_.badgefordoc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.PromotedDoc promotedDoc = 13;
  total_size += 1UL * this->_internal_promoteddoc_size();
  for (const auto& msg : this->_impl_.promoteddoc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.DocV2 subscription = 16;
  total_size += 2UL * this->_internal_subscription_size();
  for (const auto& msg : this->_impl_.subscription_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.BadgeContainer docBadgeContainer = 21;
  total_size += 2UL * this->_internal_docbadgecontainer_size();
  for (const auto& msg : this->_impl_.docbadgecontainer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.link.OverflowLink overflowLink = 25;
  total_size += 2UL * this->_internal_overflowlink_size();
  for (const auto& msg : this->_impl_.overflowlink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.VoucherInfo voucherInfo = 30;
  total_size += 2UL * this->_internal_voucherinfo_size();
  for (const auto& msg : this->_impl_.voucherinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.SectionMetadata detailsPageCluster = 34;
  total_size += 2UL * this->_internal_detailspagecluster_size();
  for (const auto& msg : this->_impl_.detailspagecluster_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.Badge featureBadge = 39;
  total_size += 2UL * this->_internal_featurebadge_size();
  for (const auto& msg : this->_impl_.featurebadge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string offerNote = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_offernote());
    }

    // optional string privacyPolicyUrl = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_privacypolicyurl());
    }

    // optional string attributionHtml = 27;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributionhtml());
    }

    // optional string applicableVoucherDescription = 33;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_applicablevoucherdescription());
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionRelated = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionrelated_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionMoreBy = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionmoreby_);
    }

    // optional .playapi.proto.finsky.document.PlusOneData plusOneData = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plusonedata_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionBodyOfWork = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionbodyofwork_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .playapi.proto.finsky.document.SectionMetadata sectionCoreContent = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectioncorecontent_);
    }

    // optional .playapi.proto.finsky.link.Link link = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionCrossSell = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectioncrosssell_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionRelatedDocType = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionrelateddoctype_);
    }

    // optional .playapi.proto.finsky.document.OBSOLETE_Reason OBSOLETEReason = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obsoletereason_);
    }

    // optional .playapi.proto.finsky.document.Warning optimalDeviceClassWarning = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optimaldeviceclasswarning_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionSuggestForRating = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionsuggestforrating_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionPurchaseCrossSell = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionpurchasecrosssell_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .playapi.proto.finsky.document.DocV2 creatorDoc = 26;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.creatordoc_);
    }

    // optional .playapi.proto.finsky.document.PurchaseHistoryDetails purchaseHistoryDetails = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.purchasehistorydetails_);
    }

    // optional .playapi.proto.finsky.document.Badge badgeForContentRating = 29;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.badgeforcontentrating_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionFeaturedApps = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionfeaturedapps_);
    }

    // optional .playapi.proto.finsky.document.VideoAnnotations videoAnnotations = 35;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.videoannotations_);
    }

    // optional .playapi.proto.finsky.document.SectionMetadata sectionPurchaseRelatedTopics = 36;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sectionpurchaserelatedtopics_);
    }

    // optional .playapi.proto.finsky.document.MySubscriptionDetails mySubscriptionDetails = 37;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mysubscriptiondetails_);
    }

    // optional .playapi.proto.finsky.document.MyRewardDetails myRewardDetails = 38;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.myrewarddetails_);
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional .playapi.proto.finsky.document.SelectedChild selectedChild = 40;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selectedchild_);
    }

    // optional .playapi.proto.finsky.document.PurchaseDetails purchaseDetails = 41;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.purchasedetails_);
    }

    // optional .playapi.proto.finsky.document.Snippet snippet = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.snippet_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Annotations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Annotations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Annotations::GetClassData() const { return &_class_data_; }


void Annotations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Annotations*>(&to_msg);
  auto& from = static_cast<const Annotations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.Annotations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.warning_.MergeFrom(from._impl_.warning_);
  _this->_impl_.badgeforcreator_.MergeFrom(from._impl_.badgeforcreator_);
  _this->_impl_.badgefordoc_.MergeFrom(from._impl_.badgefordoc_);
  _this->_impl_.promoteddoc_.MergeFrom(from._impl_.promoteddoc_);
  _this->_impl_.subscription_.MergeFrom(from._impl_.subscription_);
  _this->_impl_.docbadgecontainer_.MergeFrom(from._impl_.docbadgecontainer_);
  _this->_impl_.overflowlink_.MergeFrom(from._impl_.overflowlink_);
  _this->_impl_.voucherinfo_.MergeFrom(from._impl_.voucherinfo_);
  _this->_impl_.detailspagecluster_.MergeFrom(from._impl_.detailspagecluster_);
  _this->_impl_.featurebadge_.MergeFrom(from._impl_.featurebadge_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_offernote(from._internal_offernote());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_privacypolicyurl(from._internal_privacypolicyurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_attributionhtml(from._internal_attributionhtml());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_applicablevoucherdescription(from._internal_applicablevoucherdescription());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_sectionrelated()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionrelated());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_sectionmoreby()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionmoreby());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_plusonedata()->::playapi::proto::finsky::document::PlusOneData::MergeFrom(
          from._internal_plusonedata());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_sectionbodyofwork()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionbodyofwork());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_sectioncorecontent()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectioncorecontent());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_link()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_link());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_sectioncrosssell()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectioncrosssell());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_sectionrelateddoctype()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionrelateddoctype());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_obsoletereason()->::playapi::proto::finsky::document::OBSOLETE_Reason::MergeFrom(
          from._internal_obsoletereason());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_optimaldeviceclasswarning()->::playapi::proto::finsky::document::Warning::MergeFrom(
          from._internal_optimaldeviceclasswarning());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_sectionsuggestforrating()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionsuggestforrating());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_sectionpurchasecrosssell()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionpurchasecrosssell());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_creatordoc()->::playapi::proto::finsky::document::DocV2::MergeFrom(
          from._internal_creatordoc());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_purchasehistorydetails()->::playapi::proto::finsky::document::PurchaseHistoryDetails::MergeFrom(
          from._internal_purchasehistorydetails());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_badgeforcontentrating()->::playapi::proto::finsky::document::Badge::MergeFrom(
          from._internal_badgeforcontentrating());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_sectionfeaturedapps()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionfeaturedapps());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_videoannotations()->::playapi::proto::finsky::document::VideoAnnotations::MergeFrom(
          from._internal_videoannotations());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_sectionpurchaserelatedtopics()->::playapi::proto::finsky::document::SectionMetadata::MergeFrom(
          from._internal_sectionpurchaserelatedtopics());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_mysubscriptiondetails()->::playapi::proto::finsky::document::MySubscriptionDetails::MergeFrom(
          from._internal_mysubscriptiondetails());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_myrewarddetails()->::playapi::proto::finsky::document::MyRewardDetails::MergeFrom(
          from._internal_myrewarddetails());
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_selectedchild()->::playapi::proto::finsky::document::SelectedChild::MergeFrom(
          from._internal_selectedchild());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_purchasedetails()->::playapi::proto::finsky::document::PurchaseDetails::MergeFrom(
          from._internal_purchasedetails());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_snippet()->::playapi::proto::finsky::document::Snippet::MergeFrom(
          from._internal_snippet());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Annotations::CopyFrom(const Annotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.Annotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotations::IsInitialized() const {
  return true;
}

void Annotations::InternalSwap(Annotations* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.warning_.InternalSwap(&other->_impl_.warning_);
  _impl_.badgeforcreator_.InternalSwap(&other->_impl_.badgeforcreator_);
  _impl_.badgefordoc_.InternalSwap(&other->_impl_.badgefordoc_);
  _impl_.promoteddoc_.InternalSwap(&other->_impl_.promoteddoc_);
  _impl_.subscription_.InternalSwap(&other->_impl_.subscription_);
  _impl_.docbadgecontainer_.InternalSwap(&other->_impl_.docbadgecontainer_);
  _impl_.overflowlink_.InternalSwap(&other->_impl_.overflowlink_);
  _impl_.voucherinfo_.InternalSwap(&other->_impl_.voucherinfo_);
  _impl_.detailspagecluster_.InternalSwap(&other->_impl_.detailspagecluster_);
  _impl_.featurebadge_.InternalSwap(&other->_impl_.featurebadge_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offernote_, lhs_arena,
      &other->_impl_.offernote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.privacypolicyurl_, lhs_arena,
      &other->_impl_.privacypolicyurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attributionhtml_, lhs_arena,
      &other->_impl_.attributionhtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.applicablevoucherdescription_, lhs_arena,
      &other->_impl_.applicablevoucherdescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Annotations, _impl_.snippet_)
      + sizeof(Annotations::_impl_.snippet_)
      - PROTOBUF_FIELD_OFFSET(Annotations, _impl_.sectionrelated_)>(
          reinterpret_cast<char*>(&_impl_.sectionrelated_),
          reinterpret_cast<char*>(&other->_impl_.sectionrelated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[1]);
}

// ===================================================================

class PlusOneData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlusOneData>()._impl_._has_bits_);
  static void set_has_setbyuser(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_circlestotal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlusOneData::PlusOneData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.PlusOneData)
}
PlusOneData::PlusOneData(const PlusOneData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlusOneData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obsoletecirclesprofiles_){from._impl_.obsoletecirclesprofiles_}
    , decltype(_impl_.circleperson_){from._impl_.circleperson_}
    , decltype(_impl_.total_){}
    , decltype(_impl_.circlestotal_){}
    , decltype(_impl_.setbyuser_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_, &from._impl_.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.setbyuser_) -
    reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.setbyuser_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.PlusOneData)
}

inline void PlusOneData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obsoletecirclesprofiles_){arena}
    , decltype(_impl_.circleperson_){arena}
    , decltype(_impl_.total_){int64_t{0}}
    , decltype(_impl_.circlestotal_){int64_t{0}}
    , decltype(_impl_.setbyuser_){false}
  };
}

PlusOneData::~PlusOneData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.PlusOneData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlusOneData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obsoletecirclesprofiles_.~RepeatedPtrField();
  _impl_.circleperson_.~RepeatedPtrField();
}

void PlusOneData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlusOneData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.PlusOneData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obsoletecirclesprofiles_.Clear();
  _impl_.circleperson_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.setbyuser_) -
        reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.setbyuser_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlusOneData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool setByUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_setbyuser(&has_bits);
          _impl_.setbyuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total(&has_bits);
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 circlesTotal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_circlestotal(&has_bits);
          _impl_.circlestotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.OBSOLETE_PlusProfile OBSOLETECirclesProfiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsoletecirclesprofiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.DocV2 circlePerson = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_circleperson(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlusOneData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.PlusOneData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool setByUser = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_setbyuser(), target);
  }

  // optional int64 total = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // optional int64 circlesTotal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_circlestotal(), target);
  }

  // repeated .playapi.proto.finsky.document.OBSOLETE_PlusProfile OBSOLETECirclesProfiles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obsoletecirclesprofiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_obsoletecirclesprofiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.DocV2 circlePerson = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_circleperson_size()); i < n; i++) {
    const auto& repfield = this->_internal_circleperson(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.PlusOneData)
  return target;
}

size_t PlusOneData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.PlusOneData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.OBSOLETE_PlusProfile OBSOLETECirclesProfiles = 4;
  total_size += 1UL * this->_internal_obsoletecirclesprofiles_size();
  for (const auto& msg : this->_impl_.obsoletecirclesprofiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.DocV2 circlePerson = 5;
  total_size += 1UL * this->_internal_circleperson_size();
  for (const auto& msg : this->_impl_.circleperson_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total());
    }

    // optional int64 circlesTotal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_circlestotal());
    }

    // optional bool setByUser = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlusOneData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlusOneData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlusOneData::GetClassData() const { return &_class_data_; }


void PlusOneData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlusOneData*>(&to_msg);
  auto& from = static_cast<const PlusOneData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.PlusOneData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obsoletecirclesprofiles_.MergeFrom(from._impl_.obsoletecirclesprofiles_);
  _this->_impl_.circleperson_.MergeFrom(from._impl_.circleperson_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.total_ = from._impl_.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.circlestotal_ = from._impl_.circlestotal_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.setbyuser_ = from._impl_.setbyuser_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlusOneData::CopyFrom(const PlusOneData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.PlusOneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlusOneData::IsInitialized() const {
  return true;
}

void PlusOneData::InternalSwap(PlusOneData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obsoletecirclesprofiles_.InternalSwap(&other->_impl_.obsoletecirclesprofiles_);
  _impl_.circleperson_.InternalSwap(&other->_impl_.circleperson_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlusOneData, _impl_.setbyuser_)
      + sizeof(PlusOneData::_impl_.setbyuser_)
      - PROTOBUF_FIELD_OFFSET(PlusOneData, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlusOneData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[2]);
}

// ===================================================================

class OBSOLETE_PlusProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_PlusProfile>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_profileimageurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::Image& profileimage(const OBSOLETE_PlusProfile* msg);
  static void set_has_profileimage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::Image&
OBSOLETE_PlusProfile::_Internal::profileimage(const OBSOLETE_PlusProfile* msg) {
  return *msg->_impl_.profileimage_;
}
void OBSOLETE_PlusProfile::clear_profileimage() {
  if (_impl_.profileimage_ != nullptr) _impl_.profileimage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
OBSOLETE_PlusProfile::OBSOLETE_PlusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
}
OBSOLETE_PlusProfile::OBSOLETE_PlusProfile(const OBSOLETE_PlusProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OBSOLETE_PlusProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.profileimageurl_){}
    , decltype(_impl_.profileimage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profileimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profileimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profileimageurl()) {
    _this->_impl_.profileimageurl_.Set(from._internal_profileimageurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_profileimage()) {
    _this->_impl_.profileimage_ = new ::playapi::proto::finsky::Image(*from._impl_.profileimage_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
}

inline void OBSOLETE_PlusProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.profileimageurl_){}
    , decltype(_impl_.profileimage_){nullptr}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profileimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profileimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OBSOLETE_PlusProfile::~OBSOLETE_PlusProfile() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OBSOLETE_PlusProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displayname_.Destroy();
  _impl_.profileimageurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.profileimage_;
}

void OBSOLETE_PlusProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OBSOLETE_PlusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.profileimageurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.profileimage_ != nullptr);
      _impl_.profileimage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBSOLETE_PlusProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.OBSOLETE_PlusProfile.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string profileImageUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_profileimageurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.OBSOLETE_PlusProfile.profileImageUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image profileImage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_profileimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OBSOLETE_PlusProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.OBSOLETE_PlusProfile.displayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayname(), target);
  }

  // optional string profileImageUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profileimageurl().data(), static_cast<int>(this->_internal_profileimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.OBSOLETE_PlusProfile.profileImageUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_profileimageurl(), target);
  }

  // optional .playapi.proto.finsky.Image profileImage = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::profileimage(this),
        _Internal::profileimage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  return target;
}

size_t OBSOLETE_PlusProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string displayName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string profileImageUrl = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profileimageurl());
    }

    // optional .playapi.proto.finsky.Image profileImage = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.profileimage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OBSOLETE_PlusProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OBSOLETE_PlusProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OBSOLETE_PlusProfile::GetClassData() const { return &_class_data_; }


void OBSOLETE_PlusProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OBSOLETE_PlusProfile*>(&to_msg);
  auto& from = static_cast<const OBSOLETE_PlusProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_profileimageurl(from._internal_profileimageurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_profileimage()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_profileimage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OBSOLETE_PlusProfile::CopyFrom(const OBSOLETE_PlusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.OBSOLETE_PlusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_PlusProfile::IsInitialized() const {
  return true;
}

void OBSOLETE_PlusProfile::InternalSwap(OBSOLETE_PlusProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profileimageurl_, lhs_arena,
      &other->_impl_.profileimageurl_, rhs_arena
  );
  swap(_impl_.profileimage_, other->_impl_.profileimage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OBSOLETE_PlusProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[3]);
}

// ===================================================================

class SectionMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionMetadata>()._impl_._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_listurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_browseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_descriptionhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SectionMetadata::SectionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.SectionMetadata)
}
SectionMetadata::SectionMetadata(const SectionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){}
    , decltype(_impl_.listurl_){}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.descriptionhtml_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_header()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_listurl()) {
    _this->_impl_.listurl_.Set(from._internal_listurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_browseurl()) {
    _this->_impl_.browseurl_.Set(from._internal_browseurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.descriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_descriptionhtml()) {
    _this->_impl_.descriptionhtml_.Set(from._internal_descriptionhtml(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.SectionMetadata)
}

inline void SectionMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){}
    , decltype(_impl_.listurl_){}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.descriptionhtml_){}
  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.descriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SectionMetadata::~SectionMetadata() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.SectionMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destroy();
  _impl_.listurl_.Destroy();
  _impl_.browseurl_.Destroy();
  _impl_.descriptionhtml_.Destroy();
}

void SectionMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.SectionMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.listurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.browseurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.descriptionhtml_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SectionMetadata.header");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string listUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_listurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SectionMetadata.listUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string browseUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_browseurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SectionMetadata.browseUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string descriptionHtml = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_descriptionhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SectionMetadata.descriptionHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.SectionMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SectionMetadata.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // optional string listUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_listurl().data(), static_cast<int>(this->_internal_listurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SectionMetadata.listUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_listurl(), target);
  }

  // optional string browseUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_browseurl().data(), static_cast<int>(this->_internal_browseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SectionMetadata.browseUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_browseurl(), target);
  }

  // optional string descriptionHtml = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_descriptionhtml().data(), static_cast<int>(this->_internal_descriptionhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SectionMetadata.descriptionHtml");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_descriptionhtml(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.SectionMetadata)
  return target;
}

size_t SectionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.SectionMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header());
    }

    // optional string listUrl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_listurl());
    }

    // optional string browseUrl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_browseurl());
    }

    // optional string descriptionHtml = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_descriptionhtml());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionMetadata::GetClassData() const { return &_class_data_; }


void SectionMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionMetadata*>(&to_msg);
  auto& from = static_cast<const SectionMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.SectionMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_listurl(from._internal_listurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_browseurl(from._internal_browseurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_descriptionhtml(from._internal_descriptionhtml());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionMetadata::CopyFrom(const SectionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.SectionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionMetadata::IsInitialized() const {
  return true;
}

void SectionMetadata::InternalSwap(SectionMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listurl_, lhs_arena,
      &other->_impl_.listurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browseurl_, lhs_arena,
      &other->_impl_.browseurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descriptionhtml_, lhs_arena,
      &other->_impl_.descriptionhtml_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[4]);
}

// ===================================================================

class Warning::_Internal {
 public:
  using HasBits = decltype(std::declval<Warning>()._impl_._has_bits_);
  static void set_has_localizedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showicon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Warning::Warning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.Warning)
}
Warning::Warning(const Warning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Warning* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localizedmessage_){}
    , decltype(_impl_.showicon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localizedmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localizedmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localizedmessage()) {
    _this->_impl_.localizedmessage_.Set(from._internal_localizedmessage(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.showicon_ = from._impl_.showicon_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.Warning)
}

inline void Warning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localizedmessage_){}
    , decltype(_impl_.showicon_){false}
  };
  _impl_.localizedmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localizedmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Warning::~Warning() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.Warning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Warning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localizedmessage_.Destroy();
}

void Warning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Warning::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.Warning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.localizedmessage_.ClearNonDefaultToEmpty();
  }
  _impl_.showicon_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Warning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string localizedMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_localizedmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Warning.localizedMessage");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool showIcon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_showicon(&has_bits);
          _impl_.showicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Warning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.Warning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string localizedMessage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localizedmessage().data(), static_cast<int>(this->_internal_localizedmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Warning.localizedMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_localizedmessage(), target);
  }

  // optional bool showIcon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_showicon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.Warning)
  return target;
}

size_t Warning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.Warning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string localizedMessage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localizedmessage());
    }

    // optional bool showIcon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Warning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Warning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Warning::GetClassData() const { return &_class_data_; }


void Warning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Warning*>(&to_msg);
  auto& from = static_cast<const Warning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.Warning)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_localizedmessage(from._internal_localizedmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showicon_ = from._impl_.showicon_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Warning::CopyFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.Warning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {
  return true;
}

void Warning::InternalSwap(Warning* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localizedmessage_, lhs_arena,
      &other->_impl_.localizedmessage_, rhs_arena
  );
  swap(_impl_.showicon_, other->_impl_.showicon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Warning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[5]);
}

// ===================================================================

class Badge::_Internal {
 public:
  using HasBits = decltype(std::declval<Badge>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_browseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_textintitlesection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::Image& expandedbadgeimage(const Badge* msg);
  static void set_has_expandedbadgeimage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::playapi::proto::finsky::Image&
Badge::_Internal::expandedbadgeimage(const Badge* msg) {
  return *msg->_impl_.expandedbadgeimage_;
}
void Badge::clear_image() {
  _impl_.image_.Clear();
}
void Badge::clear_expandedbadgeimage() {
  if (_impl_.expandedbadgeimage_ != nullptr) _impl_.expandedbadgeimage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Badge::Badge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.Badge)
}
Badge::Badge(const Badge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Badge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){from._impl_.image_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.textintitlesection_){}
    , decltype(_impl_.expandedbadgeimage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_browseurl()) {
    _this->_impl_.browseurl_.Set(from._internal_browseurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.textintitlesection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textintitlesection_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textintitlesection()) {
    _this->_impl_.textintitlesection_.Set(from._internal_textintitlesection(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_expandedbadgeimage()) {
    _this->_impl_.expandedbadgeimage_ = new ::playapi::proto::finsky::Image(*from._impl_.expandedbadgeimage_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.Badge)
}

inline void Badge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.textintitlesection_){}
    , decltype(_impl_.expandedbadgeimage_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textintitlesection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textintitlesection_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Badge::~Badge() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.Badge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Badge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.browseurl_.Destroy();
  _impl_.description_.Destroy();
  _impl_.textintitlesection_.Destroy();
  if (this != internal_default_instance()) delete _impl_.expandedbadgeimage_;
}

void Badge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Badge::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.Badge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.browseurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.textintitlesection_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.expandedbadgeimage_ != nullptr);
      _impl_.expandedbadgeimage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Badge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Badge.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string browseUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_browseurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Badge.browseUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Badge.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string textInTitleSection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_textintitlesection();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Badge.textInTitleSection");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image expandedBadgeImage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expandedbadgeimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Badge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.Badge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Badge.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .playapi.proto.finsky.Image image = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_size()); i < n; i++) {
    const auto& repfield = this->_internal_image(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string browseUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_browseurl().data(), static_cast<int>(this->_internal_browseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Badge.browseUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_browseurl(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Badge.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional string textInTitleSection = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_textintitlesection().data(), static_cast<int>(this->_internal_textintitlesection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Badge.textInTitleSection");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_textintitlesection(), target);
  }

  // optional .playapi.proto.finsky.Image expandedBadgeImage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::expandedbadgeimage(this),
        _Internal::expandedbadgeimage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.Badge)
  return target;
}

size_t Badge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.Badge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.Image image = 2;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->_impl_.image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string browseUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_browseurl());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string textInTitleSection = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textintitlesection());
    }

    // optional .playapi.proto.finsky.Image expandedBadgeImage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expandedbadgeimage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Badge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Badge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Badge::GetClassData() const { return &_class_data_; }


void Badge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Badge*>(&to_msg);
  auto& from = static_cast<const Badge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.Badge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_.MergeFrom(from._impl_.image_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_browseurl(from._internal_browseurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_textintitlesection(from._internal_textintitlesection());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_expandedbadgeimage()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_expandedbadgeimage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Badge::CopyFrom(const Badge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Badge::IsInitialized() const {
  return true;
}

void Badge::InternalSwap(Badge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_.InternalSwap(&other->_impl_.image_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browseurl_, lhs_arena,
      &other->_impl_.browseurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textintitlesection_, lhs_arena,
      &other->_impl_.textintitlesection_, rhs_arena
  );
  swap(_impl_.expandedbadgeimage_, other->_impl_.expandedbadgeimage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Badge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[6]);
}

// ===================================================================

class BadgeContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<BadgeContainer>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void BadgeContainer::clear_image() {
  _impl_.image_.Clear();
}
BadgeContainer::BadgeContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.BadgeContainer)
}
BadgeContainer::BadgeContainer(const BadgeContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BadgeContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){from._impl_.image_}
    , decltype(_impl_.badge_){from._impl_.badge_}
    , decltype(_impl_.title_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.BadgeContainer)
}

inline void BadgeContainer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){arena}
    , decltype(_impl_.badge_){arena}
    , decltype(_impl_.title_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BadgeContainer::~BadgeContainer() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.BadgeContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BadgeContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.~RepeatedPtrField();
  _impl_.badge_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void BadgeContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BadgeContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.BadgeContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.Clear();
  _impl_.badge_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BadgeContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BadgeContainer.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.Badge badge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_badge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BadgeContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.BadgeContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BadgeContainer.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .playapi.proto.finsky.Image image = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_size()); i < n; i++) {
    const auto& repfield = this->_internal_image(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.Badge badge = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_badge_size()); i < n; i++) {
    const auto& repfield = this->_internal_badge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.BadgeContainer)
  return target;
}

size_t BadgeContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.BadgeContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.Image image = 2;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->_impl_.image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.Badge badge = 3;
  total_size += 1UL * this->_internal_badge_size();
  for (const auto& msg : this->_impl_.badge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BadgeContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BadgeContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BadgeContainer::GetClassData() const { return &_class_data_; }


void BadgeContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BadgeContainer*>(&to_msg);
  auto& from = static_cast<const BadgeContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.BadgeContainer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_.MergeFrom(from._impl_.image_);
  _this->_impl_.badge_.MergeFrom(from._impl_.badge_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BadgeContainer::CopyFrom(const BadgeContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.BadgeContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BadgeContainer::IsInitialized() const {
  return true;
}

void BadgeContainer::InternalSwap(BadgeContainer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_.InternalSwap(&other->_impl_.image_);
  _impl_.badge_.InternalSwap(&other->_impl_.badge_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BadgeContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[7]);
}

// ===================================================================

class PurchaseDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PurchaseDetails>()._impl_._has_bits_);
  static void set_has_legaldocumentbrokerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showageconfirmationprompt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_purchaseauthenticationrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PurchaseDetails::PurchaseDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.PurchaseDetails)
}
PurchaseDetails::PurchaseDetails(const PurchaseDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PurchaseDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legaldocumentbrokerid_){}
    , decltype(_impl_.showageconfirmationprompt_){}
    , decltype(_impl_.purchaseauthenticationrequired_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.legaldocumentbrokerid_, &from._impl_.legaldocumentbrokerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.purchaseauthenticationrequired_) -
    reinterpret_cast<char*>(&_impl_.legaldocumentbrokerid_)) + sizeof(_impl_.purchaseauthenticationrequired_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.PurchaseDetails)
}

inline void PurchaseDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legaldocumentbrokerid_){int64_t{0}}
    , decltype(_impl_.showageconfirmationprompt_){false}
    , decltype(_impl_.purchaseauthenticationrequired_){false}
  };
}

PurchaseDetails::~PurchaseDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.PurchaseDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PurchaseDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PurchaseDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PurchaseDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.PurchaseDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.legaldocumentbrokerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.purchaseauthenticationrequired_) -
        reinterpret_cast<char*>(&_impl_.legaldocumentbrokerid_)) + sizeof(_impl_.purchaseauthenticationrequired_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 legalDocumentBrokerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_legaldocumentbrokerid(&has_bits);
          _impl_.legaldocumentbrokerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool showAgeConfirmationPrompt = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_showageconfirmationprompt(&has_bits);
          _impl_.showageconfirmationprompt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool purchaseAuthenticationRequired = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchaseauthenticationrequired(&has_bits);
          _impl_.purchaseauthenticationrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PurchaseDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.PurchaseDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 legalDocumentBrokerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_legaldocumentbrokerid(), target);
  }

  // optional bool showAgeConfirmationPrompt = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_showageconfirmationprompt(), target);
  }

  // optional bool purchaseAuthenticationRequired = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_purchaseauthenticationrequired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.PurchaseDetails)
  return target;
}

size_t PurchaseDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.PurchaseDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 legalDocumentBrokerId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_legaldocumentbrokerid());
    }

    // optional bool showAgeConfirmationPrompt = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool purchaseAuthenticationRequired = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PurchaseDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PurchaseDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PurchaseDetails::GetClassData() const { return &_class_data_; }


void PurchaseDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PurchaseDetails*>(&to_msg);
  auto& from = static_cast<const PurchaseDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.PurchaseDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.legaldocumentbrokerid_ = from._impl_.legaldocumentbrokerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showageconfirmationprompt_ = from._impl_.showageconfirmationprompt_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.purchaseauthenticationrequired_ = from._impl_.purchaseauthenticationrequired_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PurchaseDetails::CopyFrom(const PurchaseDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.PurchaseDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseDetails::IsInitialized() const {
  return true;
}

void PurchaseDetails::InternalSwap(PurchaseDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PurchaseDetails, _impl_.purchaseauthenticationrequired_)
      + sizeof(PurchaseDetails::_impl_.purchaseauthenticationrequired_)
      - PROTOBUF_FIELD_OFFSET(PurchaseDetails, _impl_.legaldocumentbrokerid_)>(
          reinterpret_cast<char*>(&_impl_.legaldocumentbrokerid_),
          reinterpret_cast<char*>(&other->_impl_.legaldocumentbrokerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[8]);
}

// ===================================================================

class PurchaseHistoryDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PurchaseHistoryDetails>()._impl_._has_bits_);
  static void set_has_purchasetimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_purchasedetailshtml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::Offer& offer(const PurchaseHistoryDetails* msg);
  static void set_has_offer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_purchasestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_titlebylinehtml(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clientrefundcontext(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::Image& purchasedetailsimage(const PurchaseHistoryDetails* msg);
  static void set_has_purchasedetailsimage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::playapi::proto::finsky::Offer&
PurchaseHistoryDetails::_Internal::offer(const PurchaseHistoryDetails* msg) {
  return *msg->_impl_.offer_;
}
const ::playapi::proto::finsky::Image&
PurchaseHistoryDetails::_Internal::purchasedetailsimage(const PurchaseHistoryDetails* msg) {
  return *msg->_impl_.purchasedetailsimage_;
}
void PurchaseHistoryDetails::clear_offer() {
  if (_impl_.offer_ != nullptr) _impl_.offer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void PurchaseHistoryDetails::clear_purchasedetailsimage() {
  if (_impl_.purchasedetailsimage_ != nullptr) _impl_.purchasedetailsimage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
PurchaseHistoryDetails::PurchaseHistoryDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.PurchaseHistoryDetails)
}
PurchaseHistoryDetails::PurchaseHistoryDetails(const PurchaseHistoryDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PurchaseHistoryDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.purchasedetailshtml_){}
    , decltype(_impl_.purchasestatus_){}
    , decltype(_impl_.titlebylinehtml_){}
    , decltype(_impl_.clientrefundcontext_){}
    , decltype(_impl_.offer_){nullptr}
    , decltype(_impl_.purchasedetailsimage_){nullptr}
    , decltype(_impl_.purchasetimestampmsec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.purchasedetailshtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasedetailshtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_purchasedetailshtml()) {
    _this->_impl_.purchasedetailshtml_.Set(from._internal_purchasedetailshtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.purchasestatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasestatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_purchasestatus()) {
    _this->_impl_.purchasestatus_.Set(from._internal_purchasestatus(), 
      _this->GetArenaForAllocation());
  }
  _impl_.titlebylinehtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.titlebylinehtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_titlebylinehtml()) {
    _this->_impl_.titlebylinehtml_.Set(from._internal_titlebylinehtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientrefundcontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientrefundcontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clientrefundcontext()) {
    _this->_impl_.clientrefundcontext_.Set(from._internal_clientrefundcontext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_offer()) {
    _this->_impl_.offer_ = new ::playapi::proto::finsky::Offer(*from._impl_.offer_);
  }
  if (from._internal_has_purchasedetailsimage()) {
    _this->_impl_.purchasedetailsimage_ = new ::playapi::proto::finsky::Image(*from._impl_.purchasedetailsimage_);
  }
  _this->_impl_.purchasetimestampmsec_ = from._impl_.purchasetimestampmsec_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.PurchaseHistoryDetails)
}

inline void PurchaseHistoryDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.purchasedetailshtml_){}
    , decltype(_impl_.purchasestatus_){}
    , decltype(_impl_.titlebylinehtml_){}
    , decltype(_impl_.clientrefundcontext_){}
    , decltype(_impl_.offer_){nullptr}
    , decltype(_impl_.purchasedetailsimage_){nullptr}
    , decltype(_impl_.purchasetimestampmsec_){int64_t{0}}
  };
  _impl_.purchasedetailshtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasedetailshtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.purchasestatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasestatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.titlebylinehtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.titlebylinehtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientrefundcontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientrefundcontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PurchaseHistoryDetails::~PurchaseHistoryDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.PurchaseHistoryDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PurchaseHistoryDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.purchasedetailshtml_.Destroy();
  _impl_.purchasestatus_.Destroy();
  _impl_.titlebylinehtml_.Destroy();
  _impl_.clientrefundcontext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.offer_;
  if (this != internal_default_instance()) delete _impl_.purchasedetailsimage_;
}

void PurchaseHistoryDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PurchaseHistoryDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.PurchaseHistoryDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.purchasedetailshtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.purchasestatus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.titlebylinehtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clientrefundcontext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.offer_ != nullptr);
      _impl_.offer_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.purchasedetailsimage_ != nullptr);
      _impl_.purchasedetailsimage_->Clear();
    }
  }
  _impl_.purchasetimestampmsec_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseHistoryDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 purchaseTimestampMsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchasetimestampmsec(&has_bits);
          _impl_.purchasetimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string purchaseDetailsHtml = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_purchasedetailshtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PurchaseHistoryDetails.purchaseDetailsHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Offer offer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string purchaseStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_purchasestatus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PurchaseHistoryDetails.purchaseStatus");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string titleBylineHtml = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_titlebylinehtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PurchaseHistoryDetails.titleBylineHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes clientRefundContext = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_clientrefundcontext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image purchaseDetailsImage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchasedetailsimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PurchaseHistoryDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.PurchaseHistoryDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 purchaseTimestampMsec = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_purchasetimestampmsec(), target);
  }

  // optional string purchaseDetailsHtml = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purchasedetailshtml().data(), static_cast<int>(this->_internal_purchasedetailshtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PurchaseHistoryDetails.purchaseDetailsHtml");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_purchasedetailshtml(), target);
  }

  // optional .playapi.proto.finsky.Offer offer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::offer(this),
        _Internal::offer(this).GetCachedSize(), target, stream);
  }

  // optional string purchaseStatus = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purchasestatus().data(), static_cast<int>(this->_internal_purchasestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PurchaseHistoryDetails.purchaseStatus");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_purchasestatus(), target);
  }

  // optional string titleBylineHtml = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_titlebylinehtml().data(), static_cast<int>(this->_internal_titlebylinehtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PurchaseHistoryDetails.titleBylineHtml");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_titlebylinehtml(), target);
  }

  // optional bytes clientRefundContext = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_clientrefundcontext(), target);
  }

  // optional .playapi.proto.finsky.Image purchaseDetailsImage = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::purchasedetailsimage(this),
        _Internal::purchasedetailsimage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.PurchaseHistoryDetails)
  return target;
}

size_t PurchaseHistoryDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.PurchaseHistoryDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string purchaseDetailsHtml = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purchasedetailshtml());
    }

    // optional string purchaseStatus = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purchasestatus());
    }

    // optional string titleBylineHtml = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_titlebylinehtml());
    }

    // optional bytes clientRefundContext = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_clientrefundcontext());
    }

    // optional .playapi.proto.finsky.Offer offer = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.offer_);
    }

    // optional .playapi.proto.finsky.Image purchaseDetailsImage = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.purchasedetailsimage_);
    }

    // optional int64 purchaseTimestampMsec = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_purchasetimestampmsec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PurchaseHistoryDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PurchaseHistoryDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PurchaseHistoryDetails::GetClassData() const { return &_class_data_; }


void PurchaseHistoryDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PurchaseHistoryDetails*>(&to_msg);
  auto& from = static_cast<const PurchaseHistoryDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.PurchaseHistoryDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_purchasedetailshtml(from._internal_purchasedetailshtml());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_purchasestatus(from._internal_purchasestatus());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_titlebylinehtml(from._internal_titlebylinehtml());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_clientrefundcontext(from._internal_clientrefundcontext());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_offer()->::playapi::proto::finsky::Offer::MergeFrom(
          from._internal_offer());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_purchasedetailsimage()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_purchasedetailsimage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.purchasetimestampmsec_ = from._impl_.purchasetimestampmsec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PurchaseHistoryDetails::CopyFrom(const PurchaseHistoryDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.PurchaseHistoryDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseHistoryDetails::IsInitialized() const {
  return true;
}

void PurchaseHistoryDetails::InternalSwap(PurchaseHistoryDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.purchasedetailshtml_, lhs_arena,
      &other->_impl_.purchasedetailshtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.purchasestatus_, lhs_arena,
      &other->_impl_.purchasestatus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.titlebylinehtml_, lhs_arena,
      &other->_impl_.titlebylinehtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientrefundcontext_, lhs_arena,
      &other->_impl_.clientrefundcontext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PurchaseHistoryDetails, _impl_.purchasetimestampmsec_)
      + sizeof(PurchaseHistoryDetails::_impl_.purchasetimestampmsec_)
      - PROTOBUF_FIELD_OFFSET(PurchaseHistoryDetails, _impl_.offer_)>(
          reinterpret_cast<char*>(&_impl_.offer_),
          reinterpret_cast<char*>(&other->_impl_.offer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseHistoryDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[9]);
}

// ===================================================================

class OBSOLETE_Reason::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_Reason>()._impl_._has_bits_);
  static void set_has_briefreason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsoletedetailedreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OBSOLETE_Reason::OBSOLETE_Reason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.OBSOLETE_Reason)
}
OBSOLETE_Reason::OBSOLETE_Reason(const OBSOLETE_Reason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OBSOLETE_Reason* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.briefreason_){}
    , decltype(_impl_.obsoletedetailedreason_){}
    , decltype(_impl_.uniqueid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.briefreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.briefreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_briefreason()) {
    _this->_impl_.briefreason_.Set(from._internal_briefreason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.obsoletedetailedreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obsoletedetailedreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obsoletedetailedreason()) {
    _this->_impl_.obsoletedetailedreason_.Set(from._internal_obsoletedetailedreason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uniqueid()) {
    _this->_impl_.uniqueid_.Set(from._internal_uniqueid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.OBSOLETE_Reason)
}

inline void OBSOLETE_Reason::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.briefreason_){}
    , decltype(_impl_.obsoletedetailedreason_){}
    , decltype(_impl_.uniqueid_){}
  };
  _impl_.briefreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.briefreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.obsoletedetailedreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obsoletedetailedreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OBSOLETE_Reason::~OBSOLETE_Reason() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.OBSOLETE_Reason)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OBSOLETE_Reason::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.briefreason_.Destroy();
  _impl_.obsoletedetailedreason_.Destroy();
  _impl_.uniqueid_.Destroy();
}

void OBSOLETE_Reason::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OBSOLETE_Reason::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.OBSOLETE_Reason)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.briefreason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.obsoletedetailedreason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.uniqueid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBSOLETE_Reason::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string briefReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_briefreason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.OBSOLETE_Reason.briefReason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string OBSOLETEDetailedReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_obsoletedetailedreason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.OBSOLETE_Reason.OBSOLETEDetailedReason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uniqueId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uniqueid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.OBSOLETE_Reason.uniqueId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OBSOLETE_Reason::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.OBSOLETE_Reason)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string briefReason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_briefreason().data(), static_cast<int>(this->_internal_briefreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.OBSOLETE_Reason.briefReason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_briefreason(), target);
  }

  // optional string OBSOLETEDetailedReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obsoletedetailedreason().data(), static_cast<int>(this->_internal_obsoletedetailedreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.OBSOLETE_Reason.OBSOLETEDetailedReason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_obsoletedetailedreason(), target);
  }

  // optional string uniqueId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uniqueid().data(), static_cast<int>(this->_internal_uniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.OBSOLETE_Reason.uniqueId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uniqueid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.OBSOLETE_Reason)
  return target;
}

size_t OBSOLETE_Reason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.OBSOLETE_Reason)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string briefReason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_briefreason());
    }

    // optional string OBSOLETEDetailedReason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsoletedetailedreason());
    }

    // optional string uniqueId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uniqueid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OBSOLETE_Reason::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OBSOLETE_Reason::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OBSOLETE_Reason::GetClassData() const { return &_class_data_; }


void OBSOLETE_Reason::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OBSOLETE_Reason*>(&to_msg);
  auto& from = static_cast<const OBSOLETE_Reason&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.OBSOLETE_Reason)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_briefreason(from._internal_briefreason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_obsoletedetailedreason(from._internal_obsoletedetailedreason());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_uniqueid(from._internal_uniqueid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OBSOLETE_Reason::CopyFrom(const OBSOLETE_Reason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.OBSOLETE_Reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_Reason::IsInitialized() const {
  return true;
}

void OBSOLETE_Reason::InternalSwap(OBSOLETE_Reason* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.briefreason_, lhs_arena,
      &other->_impl_.briefreason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obsoletedetailedreason_, lhs_arena,
      &other->_impl_.obsoletedetailedreason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uniqueid_, lhs_arena,
      &other->_impl_.uniqueid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OBSOLETE_Reason::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[10]);
}

// ===================================================================

class VoucherInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VoucherInfo>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::document::DocV2& doc(const VoucherInfo* msg);
  static void set_has_doc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::document::DocV2&
VoucherInfo::_Internal::doc(const VoucherInfo* msg) {
  return *msg->_impl_.doc_;
}
void VoucherInfo::clear_offer() {
  _impl_.offer_.Clear();
}
VoucherInfo::VoucherInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.VoucherInfo)
}
VoucherInfo::VoucherInfo(const VoucherInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoucherInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offer_){from._impl_.offer_}
    , decltype(_impl_.doc_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_doc()) {
    _this->_impl_.doc_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.doc_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.VoucherInfo)
}

inline void VoucherInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offer_){arena}
    , decltype(_impl_.doc_){nullptr}
  };
}

VoucherInfo::~VoucherInfo() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.VoucherInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoucherInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.offer_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.doc_;
}

void VoucherInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoucherInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.VoucherInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offer_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.doc_ != nullptr);
    _impl_.doc_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoucherInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.document.DocV2 doc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Offer offer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoucherInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.VoucherInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.document.DocV2 doc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::doc(this),
        _Internal::doc(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.Offer offer = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_offer_size()); i < n; i++) {
    const auto& repfield = this->_internal_offer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.VoucherInfo)
  return target;
}

size_t VoucherInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.VoucherInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.Offer offer = 2;
  total_size += 1UL * this->_internal_offer_size();
  for (const auto& msg : this->_impl_.offer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .playapi.proto.finsky.document.DocV2 doc = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.doc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoucherInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoucherInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoucherInfo::GetClassData() const { return &_class_data_; }


void VoucherInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoucherInfo*>(&to_msg);
  auto& from = static_cast<const VoucherInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.VoucherInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.offer_.MergeFrom(from._impl_.offer_);
  if (from._internal_has_doc()) {
    _this->_internal_mutable_doc()->::playapi::proto::finsky::document::DocV2::MergeFrom(
        from._internal_doc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoucherInfo::CopyFrom(const VoucherInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.VoucherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoucherInfo::IsInitialized() const {
  return true;
}

void VoucherInfo::InternalSwap(VoucherInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.offer_.InternalSwap(&other->_impl_.offer_);
  swap(_impl_.doc_, other->_impl_.doc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoucherInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[11]);
}

// ===================================================================

class VideoAnnotations::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoAnnotations>()._impl_._has_bits_);
  static void set_has_bundle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bundlecontentlisturl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extrascontentlisturl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alsoavailableinlisturl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void VideoAnnotations::clear_bundledocid() {
  _impl_.bundledocid_.Clear();
}
VideoAnnotations::VideoAnnotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.VideoAnnotations)
}
VideoAnnotations::VideoAnnotations(const VideoAnnotations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoAnnotations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bundledocid_){from._impl_.bundledocid_}
    , decltype(_impl_.bundlecontentlisturl_){}
    , decltype(_impl_.extrascontentlisturl_){}
    , decltype(_impl_.alsoavailableinlisturl_){}
    , decltype(_impl_.bundle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bundlecontentlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bundlecontentlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bundlecontentlisturl()) {
    _this->_impl_.bundlecontentlisturl_.Set(from._internal_bundlecontentlisturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extrascontentlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extrascontentlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extrascontentlisturl()) {
    _this->_impl_.extrascontentlisturl_.Set(from._internal_extrascontentlisturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alsoavailableinlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alsoavailableinlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alsoavailableinlisturl()) {
    _this->_impl_.alsoavailableinlisturl_.Set(from._internal_alsoavailableinlisturl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bundle_ = from._impl_.bundle_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.VideoAnnotations)
}

inline void VideoAnnotations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bundledocid_){arena}
    , decltype(_impl_.bundlecontentlisturl_){}
    , decltype(_impl_.extrascontentlisturl_){}
    , decltype(_impl_.alsoavailableinlisturl_){}
    , decltype(_impl_.bundle_){false}
  };
  _impl_.bundlecontentlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bundlecontentlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extrascontentlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extrascontentlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alsoavailableinlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alsoavailableinlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoAnnotations::~VideoAnnotations() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.VideoAnnotations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoAnnotations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bundledocid_.~RepeatedPtrField();
  _impl_.bundlecontentlisturl_.Destroy();
  _impl_.extrascontentlisturl_.Destroy();
  _impl_.alsoavailableinlisturl_.Destroy();
}

void VideoAnnotations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoAnnotations::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.VideoAnnotations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bundledocid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bundlecontentlisturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.extrascontentlisturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.alsoavailableinlisturl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.bundle_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoAnnotations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bundle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bundle(&has_bits);
          _impl_.bundle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bundleContentListUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bundlecontentlisturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoAnnotations.bundleContentListUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string extrasContentListUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_extrascontentlisturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoAnnotations.extrasContentListUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string alsoAvailableInListUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alsoavailableinlisturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoAnnotations.alsoAvailableInListUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Docid bundleDocid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bundledocid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoAnnotations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.VideoAnnotations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bundle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bundle(), target);
  }

  // optional string bundleContentListUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bundlecontentlisturl().data(), static_cast<int>(this->_internal_bundlecontentlisturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoAnnotations.bundleContentListUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bundlecontentlisturl(), target);
  }

  // optional string extrasContentListUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extrascontentlisturl().data(), static_cast<int>(this->_internal_extrascontentlisturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoAnnotations.extrasContentListUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extrascontentlisturl(), target);
  }

  // optional string alsoAvailableInListUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_alsoavailableinlisturl().data(), static_cast<int>(this->_internal_alsoavailableinlisturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoAnnotations.alsoAvailableInListUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alsoavailableinlisturl(), target);
  }

  // repeated .playapi.proto.finsky.Docid bundleDocid = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bundledocid_size()); i < n; i++) {
    const auto& repfield = this->_internal_bundledocid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.VideoAnnotations)
  return target;
}

size_t VideoAnnotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.VideoAnnotations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.Docid bundleDocid = 5;
  total_size += 1UL * this->_internal_bundledocid_size();
  for (const auto& msg : this->_impl_.bundledocid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string bundleContentListUrl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bundlecontentlisturl());
    }

    // optional string extrasContentListUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extrascontentlisturl());
    }

    // optional string alsoAvailableInListUrl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alsoavailableinlisturl());
    }

    // optional bool bundle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoAnnotations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoAnnotations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoAnnotations::GetClassData() const { return &_class_data_; }


void VideoAnnotations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoAnnotations*>(&to_msg);
  auto& from = static_cast<const VideoAnnotations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.VideoAnnotations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bundledocid_.MergeFrom(from._impl_.bundledocid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bundlecontentlisturl(from._internal_bundlecontentlisturl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_extrascontentlisturl(from._internal_extrascontentlisturl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_alsoavailableinlisturl(from._internal_alsoavailableinlisturl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bundle_ = from._impl_.bundle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoAnnotations::CopyFrom(const VideoAnnotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.VideoAnnotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAnnotations::IsInitialized() const {
  return true;
}

void VideoAnnotations::InternalSwap(VideoAnnotations* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bundledocid_.InternalSwap(&other->_impl_.bundledocid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bundlecontentlisturl_, lhs_arena,
      &other->_impl_.bundlecontentlisturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extrascontentlisturl_, lhs_arena,
      &other->_impl_.extrascontentlisturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alsoavailableinlisturl_, lhs_arena,
      &other->_impl_.alsoavailableinlisturl_, rhs_arena
  );
  swap(_impl_.bundle_, other->_impl_.bundle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoAnnotations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[12]);
}

// ===================================================================

class MySubscriptionDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<MySubscriptionDetails>()._impl_._has_bits_);
  static void set_has_subscriptionstatushtml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_titlebylinehtml(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_formattedprice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pricebylinehtml(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cancelsubscription(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::link::Link& paymentdeclinedlearnmorelink(const MySubscriptionDetails* msg);
  static void set_has_paymentdeclinedlearnmorelink(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_intrialperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::finsky::Image& titlebylineicon(const MySubscriptionDetails* msg);
  static void set_has_titlebylineicon(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::playapi::proto::finsky::link::Link&
MySubscriptionDetails::_Internal::paymentdeclinedlearnmorelink(const MySubscriptionDetails* msg) {
  return *msg->_impl_.paymentdeclinedlearnmorelink_;
}
const ::playapi::proto::finsky::Image&
MySubscriptionDetails::_Internal::titlebylineicon(const MySubscriptionDetails* msg) {
  return *msg->_impl_.titlebylineicon_;
}
void MySubscriptionDetails::clear_paymentdeclinedlearnmorelink() {
  if (_impl_.paymentdeclinedlearnmorelink_ != nullptr) _impl_.paymentdeclinedlearnmorelink_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void MySubscriptionDetails::clear_titlebylineicon() {
  if (_impl_.titlebylineicon_ != nullptr) _impl_.titlebylineicon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
MySubscriptionDetails::MySubscriptionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.MySubscriptionDetails)
}
MySubscriptionDetails::MySubscriptionDetails(const MySubscriptionDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MySubscriptionDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscriptionstatushtml_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.titlebylinehtml_){}
    , decltype(_impl_.formattedprice_){}
    , decltype(_impl_.pricebylinehtml_){}
    , decltype(_impl_.paymentdeclinedlearnmorelink_){nullptr}
    , decltype(_impl_.titlebylineicon_){nullptr}
    , decltype(_impl_.cancelsubscription_){}
    , decltype(_impl_.intrialperiod_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriptionstatushtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriptionstatushtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subscriptionstatushtml()) {
    _this->_impl_.subscriptionstatushtml_.Set(from._internal_subscriptionstatushtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.titlebylinehtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.titlebylinehtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_titlebylinehtml()) {
    _this->_impl_.titlebylinehtml_.Set(from._internal_titlebylinehtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.formattedprice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formattedprice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_formattedprice()) {
    _this->_impl_.formattedprice_.Set(from._internal_formattedprice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pricebylinehtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pricebylinehtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pricebylinehtml()) {
    _this->_impl_.pricebylinehtml_.Set(from._internal_pricebylinehtml(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_paymentdeclinedlearnmorelink()) {
    _this->_impl_.paymentdeclinedlearnmorelink_ = new ::playapi::proto::finsky::link::Link(*from._impl_.paymentdeclinedlearnmorelink_);
  }
  if (from._internal_has_titlebylineicon()) {
    _this->_impl_.titlebylineicon_ = new ::playapi::proto::finsky::Image(*from._impl_.titlebylineicon_);
  }
  ::memcpy(&_impl_.cancelsubscription_, &from._impl_.cancelsubscription_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intrialperiod_) -
    reinterpret_cast<char*>(&_impl_.cancelsubscription_)) + sizeof(_impl_.intrialperiod_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.MySubscriptionDetails)
}

inline void MySubscriptionDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscriptionstatushtml_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.titlebylinehtml_){}
    , decltype(_impl_.formattedprice_){}
    , decltype(_impl_.pricebylinehtml_){}
    , decltype(_impl_.paymentdeclinedlearnmorelink_){nullptr}
    , decltype(_impl_.titlebylineicon_){nullptr}
    , decltype(_impl_.cancelsubscription_){false}
    , decltype(_impl_.intrialperiod_){false}
  };
  _impl_.subscriptionstatushtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriptionstatushtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.titlebylinehtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.titlebylinehtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.formattedprice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formattedprice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pricebylinehtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pricebylinehtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MySubscriptionDetails::~MySubscriptionDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.MySubscriptionDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MySubscriptionDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriptionstatushtml_.Destroy();
  _impl_.title_.Destroy();
  _impl_.titlebylinehtml_.Destroy();
  _impl_.formattedprice_.Destroy();
  _impl_.pricebylinehtml_.Destroy();
  if (this != internal_default_instance()) delete _impl_.paymentdeclinedlearnmorelink_;
  if (this != internal_default_instance()) delete _impl_.titlebylineicon_;
}

void MySubscriptionDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MySubscriptionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.MySubscriptionDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.subscriptionstatushtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.titlebylinehtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.formattedprice_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pricebylinehtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.paymentdeclinedlearnmorelink_ != nullptr);
      _impl_.paymentdeclinedlearnmorelink_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.titlebylineicon_ != nullptr);
      _impl_.titlebylineicon_->Clear();
    }
  }
  _impl_.cancelsubscription_ = false;
  _impl_.intrialperiod_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MySubscriptionDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string subscriptionStatusHtml = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriptionstatushtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MySubscriptionDetails.subscriptionStatusHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MySubscriptionDetails.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string titleBylineHtml = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_titlebylinehtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MySubscriptionDetails.titleBylineHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string formattedPrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_formattedprice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MySubscriptionDetails.formattedPrice");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string priceBylineHtml = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pricebylinehtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MySubscriptionDetails.priceBylineHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool cancelSubscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cancelsubscription(&has_bits);
          _impl_.cancelsubscription_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link paymentDeclinedLearnMoreLink = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_paymentdeclinedlearnmorelink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inTrialPeriod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_intrialperiod(&has_bits);
          _impl_.intrialperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image titleBylineIcon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_titlebylineicon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MySubscriptionDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.MySubscriptionDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string subscriptionStatusHtml = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subscriptionstatushtml().data(), static_cast<int>(this->_internal_subscriptionstatushtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MySubscriptionDetails.subscriptionStatusHtml");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscriptionstatushtml(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MySubscriptionDetails.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string titleBylineHtml = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_titlebylinehtml().data(), static_cast<int>(this->_internal_titlebylinehtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MySubscriptionDetails.titleBylineHtml");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_titlebylinehtml(), target);
  }

  // optional string formattedPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_formattedprice().data(), static_cast<int>(this->_internal_formattedprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MySubscriptionDetails.formattedPrice");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_formattedprice(), target);
  }

  // optional string priceBylineHtml = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pricebylinehtml().data(), static_cast<int>(this->_internal_pricebylinehtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MySubscriptionDetails.priceBylineHtml");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pricebylinehtml(), target);
  }

  // optional bool cancelSubscription = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cancelsubscription(), target);
  }

  // optional .playapi.proto.finsky.link.Link paymentDeclinedLearnMoreLink = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::paymentdeclinedlearnmorelink(this),
        _Internal::paymentdeclinedlearnmorelink(this).GetCachedSize(), target, stream);
  }

  // optional bool inTrialPeriod = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_intrialperiod(), target);
  }

  // optional .playapi.proto.finsky.Image titleBylineIcon = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::titlebylineicon(this),
        _Internal::titlebylineicon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.MySubscriptionDetails)
  return target;
}

size_t MySubscriptionDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.MySubscriptionDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string subscriptionStatusHtml = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subscriptionstatushtml());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string titleBylineHtml = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_titlebylinehtml());
    }

    // optional string formattedPrice = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_formattedprice());
    }

    // optional string priceBylineHtml = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pricebylinehtml());
    }

    // optional .playapi.proto.finsky.link.Link paymentDeclinedLearnMoreLink = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paymentdeclinedlearnmorelink_);
    }

    // optional .playapi.proto.finsky.Image titleBylineIcon = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titlebylineicon_);
    }

    // optional bool cancelSubscription = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool inTrialPeriod = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MySubscriptionDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MySubscriptionDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MySubscriptionDetails::GetClassData() const { return &_class_data_; }


void MySubscriptionDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MySubscriptionDetails*>(&to_msg);
  auto& from = static_cast<const MySubscriptionDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.MySubscriptionDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_subscriptionstatushtml(from._internal_subscriptionstatushtml());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_titlebylinehtml(from._internal_titlebylinehtml());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_formattedprice(from._internal_formattedprice());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_pricebylinehtml(from._internal_pricebylinehtml());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_paymentdeclinedlearnmorelink()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_paymentdeclinedlearnmorelink());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_titlebylineicon()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_titlebylineicon());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cancelsubscription_ = from._impl_.cancelsubscription_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_intrialperiod(from._internal_intrialperiod());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MySubscriptionDetails::CopyFrom(const MySubscriptionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.MySubscriptionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySubscriptionDetails::IsInitialized() const {
  return true;
}

void MySubscriptionDetails::InternalSwap(MySubscriptionDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriptionstatushtml_, lhs_arena,
      &other->_impl_.subscriptionstatushtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.titlebylinehtml_, lhs_arena,
      &other->_impl_.titlebylinehtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.formattedprice_, lhs_arena,
      &other->_impl_.formattedprice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pricebylinehtml_, lhs_arena,
      &other->_impl_.pricebylinehtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MySubscriptionDetails, _impl_.intrialperiod_)
      + sizeof(MySubscriptionDetails::_impl_.intrialperiod_)
      - PROTOBUF_FIELD_OFFSET(MySubscriptionDetails, _impl_.paymentdeclinedlearnmorelink_)>(
          reinterpret_cast<char*>(&_impl_.paymentdeclinedlearnmorelink_),
          reinterpret_cast<char*>(&other->_impl_.paymentdeclinedlearnmorelink_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MySubscriptionDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[13]);
}

// ===================================================================

class MyRewardDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<MyRewardDetails>()._impl_._has_bits_);
  static void set_has_expirationtimemillis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expirationdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buttonlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::link::Link& linkaction(const MyRewardDetails* msg);
  static void set_has_linkaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::link::Link&
MyRewardDetails::_Internal::linkaction(const MyRewardDetails* msg) {
  return *msg->_impl_.linkaction_;
}
void MyRewardDetails::clear_linkaction() {
  if (_impl_.linkaction_ != nullptr) _impl_.linkaction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MyRewardDetails::MyRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.MyRewardDetails)
}
MyRewardDetails::MyRewardDetails(const MyRewardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyRewardDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expirationdescription_){}
    , decltype(_impl_.buttonlabel_){}
    , decltype(_impl_.linkaction_){nullptr}
    , decltype(_impl_.expirationtimemillis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.expirationdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expirationdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_expirationdescription()) {
    _this->_impl_.expirationdescription_.Set(from._internal_expirationdescription(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buttonlabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonlabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttonlabel()) {
    _this->_impl_.buttonlabel_.Set(from._internal_buttonlabel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_linkaction()) {
    _this->_impl_.linkaction_ = new ::playapi::proto::finsky::link::Link(*from._impl_.linkaction_);
  }
  _this->_impl_.expirationtimemillis_ = from._impl_.expirationtimemillis_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.MyRewardDetails)
}

inline void MyRewardDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expirationdescription_){}
    , decltype(_impl_.buttonlabel_){}
    , decltype(_impl_.linkaction_){nullptr}
    , decltype(_impl_.expirationtimemillis_){int64_t{0}}
  };
  _impl_.expirationdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expirationdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buttonlabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonlabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MyRewardDetails::~MyRewardDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.MyRewardDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyRewardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expirationdescription_.Destroy();
  _impl_.buttonlabel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.linkaction_;
}

void MyRewardDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.MyRewardDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.expirationdescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.buttonlabel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linkaction_ != nullptr);
      _impl_.linkaction_->Clear();
    }
  }
  _impl_.expirationtimemillis_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyRewardDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 expirationTimeMillis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_expirationtimemillis(&has_bits);
          _impl_.expirationtimemillis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string expirationDescription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_expirationdescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MyRewardDetails.expirationDescription");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string buttonLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buttonlabel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MyRewardDetails.buttonLabel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link linkAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyRewardDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.MyRewardDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 expirationTimeMillis = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_expirationtimemillis(), target);
  }

  // optional string expirationDescription = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_expirationdescription().data(), static_cast<int>(this->_internal_expirationdescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MyRewardDetails.expirationDescription");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expirationdescription(), target);
  }

  // optional string buttonLabel = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttonlabel().data(), static_cast<int>(this->_internal_buttonlabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MyRewardDetails.buttonLabel");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buttonlabel(), target);
  }

  // optional .playapi.proto.finsky.link.Link linkAction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::linkaction(this),
        _Internal::linkaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.MyRewardDetails)
  return target;
}

size_t MyRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.MyRewardDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string expirationDescription = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_expirationdescription());
    }

    // optional string buttonLabel = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttonlabel());
    }

    // optional .playapi.proto.finsky.link.Link linkAction = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linkaction_);
    }

    // optional int64 expirationTimeMillis = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirationtimemillis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyRewardDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyRewardDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyRewardDetails::GetClassData() const { return &_class_data_; }


void MyRewardDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyRewardDetails*>(&to_msg);
  auto& from = static_cast<const MyRewardDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.MyRewardDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_expirationdescription(from._internal_expirationdescription());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_buttonlabel(from._internal_buttonlabel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_linkaction()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_linkaction());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.expirationtimemillis_ = from._impl_.expirationtimemillis_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyRewardDetails::CopyFrom(const MyRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.MyRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyRewardDetails::IsInitialized() const {
  return true;
}

void MyRewardDetails::InternalSwap(MyRewardDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expirationdescription_, lhs_arena,
      &other->_impl_.expirationdescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttonlabel_, lhs_arena,
      &other->_impl_.buttonlabel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyRewardDetails, _impl_.expirationtimemillis_)
      + sizeof(MyRewardDetails::_impl_.expirationtimemillis_)
      - PROTOBUF_FIELD_OFFSET(MyRewardDetails, _impl_.linkaction_)>(
          reinterpret_cast<char*>(&_impl_.linkaction_),
          reinterpret_cast<char*>(&other->_impl_.linkaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyRewardDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[14]);
}

// ===================================================================

class SelectedChild::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectedChild>()._impl_._has_bits_);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::document::SelectedChild& selectedchild(const SelectedChild* msg);
  static void set_has_selectedchild(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::document::SelectedChild&
SelectedChild::_Internal::selectedchild(const SelectedChild* msg) {
  return *msg->_impl_.selectedchild_;
}
SelectedChild::SelectedChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.SelectedChild)
}
SelectedChild::SelectedChild(const SelectedChild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectedChild* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.selectedchild_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docid()) {
    _this->_impl_.docid_.Set(from._internal_docid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_selectedchild()) {
    _this->_impl_.selectedchild_ = new ::playapi::proto::finsky::document::SelectedChild(*from._impl_.selectedchild_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.SelectedChild)
}

inline void SelectedChild::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.selectedchild_){nullptr}
  };
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectedChild::~SelectedChild() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.SelectedChild)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectedChild::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.docid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.selectedchild_;
}

void SelectedChild::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectedChild::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.SelectedChild)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.docid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.selectedchild_ != nullptr);
      _impl_.selectedchild_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectedChild::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string docid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_docid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SelectedChild.docid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SelectedChild selectedChild = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedchild(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectedChild::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.SelectedChild)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docid().data(), static_cast<int>(this->_internal_docid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SelectedChild.docid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docid(), target);
  }

  // optional .playapi.proto.finsky.document.SelectedChild selectedChild = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::selectedchild(this),
        _Internal::selectedchild(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.SelectedChild)
  return target;
}

size_t SelectedChild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.SelectedChild)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string docid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docid());
    }

    // optional .playapi.proto.finsky.document.SelectedChild selectedChild = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selectedchild_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectedChild::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectedChild::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectedChild::GetClassData() const { return &_class_data_; }


void SelectedChild::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectedChild*>(&to_msg);
  auto& from = static_cast<const SelectedChild&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.SelectedChild)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_docid(from._internal_docid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_selectedchild()->::playapi::proto::finsky::document::SelectedChild::MergeFrom(
          from._internal_selectedchild());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectedChild::CopyFrom(const SelectedChild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.SelectedChild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedChild::IsInitialized() const {
  return true;
}

void SelectedChild::InternalSwap(SelectedChild* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docid_, lhs_arena,
      &other->_impl_.docid_, rhs_arena
  );
  swap(_impl_.selectedchild_, other->_impl_.selectedchild_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectedChild::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[15]);
}

// ===================================================================

class Snippet::_Internal {
 public:
  using HasBits = decltype(std::declval<Snippet>()._impl_._has_bits_);
  static void set_has_snippethtml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Snippet::Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.Snippet)
}
Snippet::Snippet(const Snippet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snippethtml_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.snippethtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snippethtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_snippethtml()) {
    _this->_impl_.snippethtml_.Set(from._internal_snippethtml(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.Snippet)
}

inline void Snippet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snippethtml_){}
  };
  _impl_.snippethtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snippethtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Snippet::~Snippet() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.Snippet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snippethtml_.Destroy();
}

void Snippet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.Snippet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.snippethtml_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string snippetHtml = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_snippethtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Snippet.snippetHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.Snippet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string snippetHtml = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snippethtml().data(), static_cast<int>(this->_internal_snippethtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Snippet.snippetHtml");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_snippethtml(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.Snippet)
  return target;
}

size_t Snippet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.Snippet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string snippetHtml = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snippethtml());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet::GetClassData() const { return &_class_data_; }


void Snippet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet*>(&to_msg);
  auto& from = static_cast<const Snippet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.Snippet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_snippethtml()) {
    _this->_internal_set_snippethtml(from._internal_snippethtml());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet::CopyFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet::IsInitialized() const {
  return true;
}

void Snippet::InternalSwap(Snippet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snippethtml_, lhs_arena,
      &other->_impl_.snippethtml_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[16]);
}

// ===================================================================

class ProductDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductDetails>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProductDetails::ProductDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.ProductDetails)
}
ProductDetails::ProductDetails(const ProductDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.section_){from._impl_.section_}
    , decltype(_impl_.title_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.ProductDetails)
}

inline void ProductDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.section_){arena}
    , decltype(_impl_.title_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductDetails::~ProductDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.ProductDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.section_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void ProductDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.ProductDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.section_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ProductDetails.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.ProductDetailsSection section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.ProductDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ProductDetails.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .playapi.proto.finsky.document.ProductDetailsSection section = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_section_size()); i < n; i++) {
    const auto& repfield = this->_internal_section(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.ProductDetails)
  return target;
}

size_t ProductDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.ProductDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.ProductDetailsSection section = 2;
  total_size += 1UL * this->_internal_section_size();
  for (const auto& msg : this->_impl_.section_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductDetails::GetClassData() const { return &_class_data_; }


void ProductDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductDetails*>(&to_msg);
  auto& from = static_cast<const ProductDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.ProductDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.section_.MergeFrom(from._impl_.section_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductDetails::CopyFrom(const ProductDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.ProductDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDetails::IsInitialized() const {
  return true;
}

void ProductDetails::InternalSwap(ProductDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.section_.InternalSwap(&other->_impl_.section_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[17]);
}

// ===================================================================

class ProductDetailsSection::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductDetailsSection>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProductDetailsSection::ProductDetailsSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.ProductDetailsSection)
}
ProductDetailsSection::ProductDetailsSection(const ProductDetailsSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductDetailsSection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){from._impl_.description_}
    , decltype(_impl_.title_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.ProductDetailsSection)
}

inline void ProductDetailsSection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){arena}
    , decltype(_impl_.title_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductDetailsSection::~ProductDetailsSection() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.ProductDetailsSection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductDetailsSection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void ProductDetailsSection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductDetailsSection::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.ProductDetailsSection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductDetailsSection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ProductDetailsSection.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.ProductDetailsDescription description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductDetailsSection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.ProductDetailsSection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ProductDetailsSection.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .playapi.proto.finsky.document.ProductDetailsDescription description = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_description_size()); i < n; i++) {
    const auto& repfield = this->_internal_description(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.ProductDetailsSection)
  return target;
}

size_t ProductDetailsSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.ProductDetailsSection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.ProductDetailsDescription description = 3;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->_impl_.description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductDetailsSection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductDetailsSection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductDetailsSection::GetClassData() const { return &_class_data_; }


void ProductDetailsSection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductDetailsSection*>(&to_msg);
  auto& from = static_cast<const ProductDetailsSection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.ProductDetailsSection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.description_.MergeFrom(from._impl_.description_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductDetailsSection::CopyFrom(const ProductDetailsSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.ProductDetailsSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDetailsSection::IsInitialized() const {
  return true;
}

void ProductDetailsSection::InternalSwap(ProductDetailsSection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.description_.InternalSwap(&other->_impl_.description_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductDetailsSection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[18]);
}

// ===================================================================

class ProductDetailsDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductDetailsDescription>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::Image& image(const ProductDetailsDescription* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::Image&
ProductDetailsDescription::_Internal::image(const ProductDetailsDescription* msg) {
  return *msg->_impl_.image_;
}
void ProductDetailsDescription::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ProductDetailsDescription::ProductDetailsDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.ProductDetailsDescription)
}
ProductDetailsDescription::ProductDetailsDescription(const ProductDetailsDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductDetailsDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){}
    , decltype(_impl_.image_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::playapi::proto::finsky::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.ProductDetailsDescription)
}

inline void ProductDetailsDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){}
    , decltype(_impl_.image_){nullptr}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductDetailsDescription::~ProductDetailsDescription() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.ProductDetailsDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductDetailsDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ProductDetailsDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductDetailsDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.ProductDetailsDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductDetailsDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ProductDetailsDescription.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductDetailsDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.ProductDetailsDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.Image image = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ProductDetailsDescription.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.ProductDetailsDescription)
  return target;
}

size_t ProductDetailsDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.ProductDetailsDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .playapi.proto.finsky.Image image = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductDetailsDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductDetailsDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductDetailsDescription::GetClassData() const { return &_class_data_; }


void ProductDetailsDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductDetailsDescription*>(&to_msg);
  auto& from = static_cast<const ProductDetailsDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.ProductDetailsDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_image()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_image());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductDetailsDescription::CopyFrom(const ProductDetailsDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.ProductDetailsDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDetailsDescription::IsInitialized() const {
  return true;
}

void ProductDetailsDescription::InternalSwap(ProductDetailsDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductDetailsDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[19]);
}

// ===================================================================

class PromotedDoc::_Internal {
 public:
  using HasBits = decltype(std::declval<PromotedDoc>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_descriptionhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_detailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void PromotedDoc::clear_image() {
  _impl_.image_.Clear();
}
PromotedDoc::PromotedDoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.PromotedDoc)
}
PromotedDoc::PromotedDoc(const PromotedDoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PromotedDoc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){from._impl_.image_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.descriptionhtml_){}
    , decltype(_impl_.detailsurl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subtitle()) {
    _this->_impl_.subtitle_.Set(from._internal_subtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.descriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_descriptionhtml()) {
    _this->_impl_.descriptionhtml_.Set(from._internal_descriptionhtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailsurl()) {
    _this->_impl_.detailsurl_.Set(from._internal_detailsurl(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.PromotedDoc)
}

inline void PromotedDoc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.descriptionhtml_){}
    , decltype(_impl_.detailsurl_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.descriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PromotedDoc::~PromotedDoc() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.PromotedDoc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PromotedDoc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.subtitle_.Destroy();
  _impl_.descriptionhtml_.Destroy();
  _impl_.detailsurl_.Destroy();
}

void PromotedDoc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PromotedDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.PromotedDoc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.subtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.descriptionhtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.detailsurl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromotedDoc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PromotedDoc.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string subtitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PromotedDoc.subtitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.Image image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string descriptionHtml = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_descriptionhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PromotedDoc.descriptionHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string detailsUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_detailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.PromotedDoc.detailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromotedDoc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.PromotedDoc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PromotedDoc.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string subtitle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PromotedDoc.subtitle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subtitle(), target);
  }

  // repeated .playapi.proto.finsky.Image image = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_size()); i < n; i++) {
    const auto& repfield = this->_internal_image(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string descriptionHtml = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_descriptionhtml().data(), static_cast<int>(this->_internal_descriptionhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PromotedDoc.descriptionHtml");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_descriptionhtml(), target);
  }

  // optional string detailsUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailsurl().data(), static_cast<int>(this->_internal_detailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.PromotedDoc.detailsUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_detailsurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.PromotedDoc)
  return target;
}

size_t PromotedDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.PromotedDoc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.Image image = 3;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->_impl_.image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string subtitle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtitle());
    }

    // optional string descriptionHtml = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_descriptionhtml());
    }

    // optional string detailsUrl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailsurl());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromotedDoc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PromotedDoc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromotedDoc::GetClassData() const { return &_class_data_; }


void PromotedDoc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PromotedDoc*>(&to_msg);
  auto& from = static_cast<const PromotedDoc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.PromotedDoc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_.MergeFrom(from._impl_.image_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_subtitle(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_descriptionhtml(from._internal_descriptionhtml());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_detailsurl(from._internal_detailsurl());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromotedDoc::CopyFrom(const PromotedDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.PromotedDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromotedDoc::IsInitialized() const {
  return true;
}

void PromotedDoc::InternalSwap(PromotedDoc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_.InternalSwap(&other->_impl_.image_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subtitle_, lhs_arena,
      &other->_impl_.subtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descriptionhtml_, lhs_arena,
      &other->_impl_.descriptionhtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailsurl_, lhs_arena,
      &other->_impl_.detailsurl_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PromotedDoc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[20]);
}

// ===================================================================

class DocumentDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentDetails>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::document::AppDetails& appdetails(const DocumentDetails* msg);
  static void set_has_appdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::document::AlbumDetails& albumdetails(const DocumentDetails* msg);
  static void set_has_albumdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::document::ArtistDetails& artistdetails(const DocumentDetails* msg);
  static void set_has_artistdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::document::SongDetails& songdetails(const DocumentDetails* msg);
  static void set_has_songdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::document::BookDetails& bookdetails(const DocumentDetails* msg);
  static void set_has_bookdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::document::VideoDetails& videodetails(const DocumentDetails* msg);
  static void set_has_videodetails(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::playapi::proto::finsky::document::SubscriptionDetails& subscriptiondetails(const DocumentDetails* msg);
  static void set_has_subscriptiondetails(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::playapi::proto::finsky::document::MagazineDetails& magazinedetails(const DocumentDetails* msg);
  static void set_has_magazinedetails(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::document::TvShowDetails& tvshowdetails(const DocumentDetails* msg);
  static void set_has_tvshowdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::finsky::document::TvSeasonDetails& tvseasondetails(const DocumentDetails* msg);
  static void set_has_tvseasondetails(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::playapi::proto::finsky::document::TvEpisodeDetails& tvepisodedetails(const DocumentDetails* msg);
  static void set_has_tvepisodedetails(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::playapi::proto::finsky::document::PersonDetails& persondetails(const DocumentDetails* msg);
  static void set_has_persondetails(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::playapi::proto::finsky::document::TalentDetails& talentdetails(const DocumentDetails* msg);
  static void set_has_talentdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::playapi::proto::finsky::document::DeveloperDetails& developerdetails(const DocumentDetails* msg);
  static void set_has_developerdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::playapi::proto::finsky::document::BookSeriesDetails& bookseriesdetails(const DocumentDetails* msg);
  static void set_has_bookseriesdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::playapi::proto::finsky::document::AppDetails&
DocumentDetails::_Internal::appdetails(const DocumentDetails* msg) {
  return *msg->_impl_.appdetails_;
}
const ::playapi::proto::finsky::document::AlbumDetails&
DocumentDetails::_Internal::albumdetails(const DocumentDetails* msg) {
  return *msg->_impl_.albumdetails_;
}
const ::playapi::proto::finsky::document::ArtistDetails&
DocumentDetails::_Internal::artistdetails(const DocumentDetails* msg) {
  return *msg->_impl_.artistdetails_;
}
const ::playapi::proto::finsky::document::SongDetails&
DocumentDetails::_Internal::songdetails(const DocumentDetails* msg) {
  return *msg->_impl_.songdetails_;
}
const ::playapi::proto::finsky::document::BookDetails&
DocumentDetails::_Internal::bookdetails(const DocumentDetails* msg) {
  return *msg->_impl_.bookdetails_;
}
const ::playapi::proto::finsky::document::VideoDetails&
DocumentDetails::_Internal::videodetails(const DocumentDetails* msg) {
  return *msg->_impl_.videodetails_;
}
const ::playapi::proto::finsky::document::SubscriptionDetails&
DocumentDetails::_Internal::subscriptiondetails(const DocumentDetails* msg) {
  return *msg->_impl_.subscriptiondetails_;
}
const ::playapi::proto::finsky::document::MagazineDetails&
DocumentDetails::_Internal::magazinedetails(const DocumentDetails* msg) {
  return *msg->_impl_.magazinedetails_;
}
const ::playapi::proto::finsky::document::TvShowDetails&
DocumentDetails::_Internal::tvshowdetails(const DocumentDetails* msg) {
  return *msg->_impl_.tvshowdetails_;
}
const ::playapi::proto::finsky::document::TvSeasonDetails&
DocumentDetails::_Internal::tvseasondetails(const DocumentDetails* msg) {
  return *msg->_impl_.tvseasondetails_;
}
const ::playapi::proto::finsky::document::TvEpisodeDetails&
DocumentDetails::_Internal::tvepisodedetails(const DocumentDetails* msg) {
  return *msg->_impl_.tvepisodedetails_;
}
const ::playapi::proto::finsky::document::PersonDetails&
DocumentDetails::_Internal::persondetails(const DocumentDetails* msg) {
  return *msg->_impl_.persondetails_;
}
const ::playapi::proto::finsky::document::TalentDetails&
DocumentDetails::_Internal::talentdetails(const DocumentDetails* msg) {
  return *msg->_impl_.talentdetails_;
}
const ::playapi::proto::finsky::document::DeveloperDetails&
DocumentDetails::_Internal::developerdetails(const DocumentDetails* msg) {
  return *msg->_impl_.developerdetails_;
}
const ::playapi::proto::finsky::document::BookSeriesDetails&
DocumentDetails::_Internal::bookseriesdetails(const DocumentDetails* msg) {
  return *msg->_impl_.bookseriesdetails_;
}
DocumentDetails::DocumentDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.DocumentDetails)
}
DocumentDetails::DocumentDetails(const DocumentDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appdetails_){nullptr}
    , decltype(_impl_.albumdetails_){nullptr}
    , decltype(_impl_.artistdetails_){nullptr}
    , decltype(_impl_.songdetails_){nullptr}
    , decltype(_impl_.bookdetails_){nullptr}
    , decltype(_impl_.videodetails_){nullptr}
    , decltype(_impl_.subscriptiondetails_){nullptr}
    , decltype(_impl_.magazinedetails_){nullptr}
    , decltype(_impl_.tvshowdetails_){nullptr}
    , decltype(_impl_.tvseasondetails_){nullptr}
    , decltype(_impl_.tvepisodedetails_){nullptr}
    , decltype(_impl_.persondetails_){nullptr}
    , decltype(_impl_.talentdetails_){nullptr}
    , decltype(_impl_.developerdetails_){nullptr}
    , decltype(_impl_.bookseriesdetails_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_appdetails()) {
    _this->_impl_.appdetails_ = new ::playapi::proto::finsky::document::AppDetails(*from._impl_.appdetails_);
  }
  if (from._internal_has_albumdetails()) {
    _this->_impl_.albumdetails_ = new ::playapi::proto::finsky::document::AlbumDetails(*from._impl_.albumdetails_);
  }
  if (from._internal_has_artistdetails()) {
    _this->_impl_.artistdetails_ = new ::playapi::proto::finsky::document::ArtistDetails(*from._impl_.artistdetails_);
  }
  if (from._internal_has_songdetails()) {
    _this->_impl_.songdetails_ = new ::playapi::proto::finsky::document::SongDetails(*from._impl_.songdetails_);
  }
  if (from._internal_has_bookdetails()) {
    _this->_impl_.bookdetails_ = new ::playapi::proto::finsky::document::BookDetails(*from._impl_.bookdetails_);
  }
  if (from._internal_has_videodetails()) {
    _this->_impl_.videodetails_ = new ::playapi::proto::finsky::document::VideoDetails(*from._impl_.videodetails_);
  }
  if (from._internal_has_subscriptiondetails()) {
    _this->_impl_.subscriptiondetails_ = new ::playapi::proto::finsky::document::SubscriptionDetails(*from._impl_.subscriptiondetails_);
  }
  if (from._internal_has_magazinedetails()) {
    _this->_impl_.magazinedetails_ = new ::playapi::proto::finsky::document::MagazineDetails(*from._impl_.magazinedetails_);
  }
  if (from._internal_has_tvshowdetails()) {
    _this->_impl_.tvshowdetails_ = new ::playapi::proto::finsky::document::TvShowDetails(*from._impl_.tvshowdetails_);
  }
  if (from._internal_has_tvseasondetails()) {
    _this->_impl_.tvseasondetails_ = new ::playapi::proto::finsky::document::TvSeasonDetails(*from._impl_.tvseasondetails_);
  }
  if (from._internal_has_tvepisodedetails()) {
    _this->_impl_.tvepisodedetails_ = new ::playapi::proto::finsky::document::TvEpisodeDetails(*from._impl_.tvepisodedetails_);
  }
  if (from._internal_has_persondetails()) {
    _this->_impl_.persondetails_ = new ::playapi::proto::finsky::document::PersonDetails(*from._impl_.persondetails_);
  }
  if (from._internal_has_talentdetails()) {
    _this->_impl_.talentdetails_ = new ::playapi::proto::finsky::document::TalentDetails(*from._impl_.talentdetails_);
  }
  if (from._internal_has_developerdetails()) {
    _this->_impl_.developerdetails_ = new ::playapi::proto::finsky::document::DeveloperDetails(*from._impl_.developerdetails_);
  }
  if (from._internal_has_bookseriesdetails()) {
    _this->_impl_.bookseriesdetails_ = new ::playapi::proto::finsky::document::BookSeriesDetails(*from._impl_.bookseriesdetails_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.DocumentDetails)
}

inline void DocumentDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appdetails_){nullptr}
    , decltype(_impl_.albumdetails_){nullptr}
    , decltype(_impl_.artistdetails_){nullptr}
    , decltype(_impl_.songdetails_){nullptr}
    , decltype(_impl_.bookdetails_){nullptr}
    , decltype(_impl_.videodetails_){nullptr}
    , decltype(_impl_.subscriptiondetails_){nullptr}
    , decltype(_impl_.magazinedetails_){nullptr}
    , decltype(_impl_.tvshowdetails_){nullptr}
    , decltype(_impl_.tvseasondetails_){nullptr}
    , decltype(_impl_.tvepisodedetails_){nullptr}
    , decltype(_impl_.persondetails_){nullptr}
    , decltype(_impl_.talentdetails_){nullptr}
    , decltype(_impl_.developerdetails_){nullptr}
    , decltype(_impl_.bookseriesdetails_){nullptr}
  };
}

DocumentDetails::~DocumentDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.DocumentDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.appdetails_;
  if (this != internal_default_instance()) delete _impl_.albumdetails_;
  if (this != internal_default_instance()) delete _impl_.artistdetails_;
  if (this != internal_default_instance()) delete _impl_.songdetails_;
  if (this != internal_default_instance()) delete _impl_.bookdetails_;
  if (this != internal_default_instance()) delete _impl_.videodetails_;
  if (this != internal_default_instance()) delete _impl_.subscriptiondetails_;
  if (this != internal_default_instance()) delete _impl_.magazinedetails_;
  if (this != internal_default_instance()) delete _impl_.tvshowdetails_;
  if (this != internal_default_instance()) delete _impl_.tvseasondetails_;
  if (this != internal_default_instance()) delete _impl_.tvepisodedetails_;
  if (this != internal_default_instance()) delete _impl_.persondetails_;
  if (this != internal_default_instance()) delete _impl_.talentdetails_;
  if (this != internal_default_instance()) delete _impl_.developerdetails_;
  if (this != internal_default_instance()) delete _impl_.bookseriesdetails_;
}

void DocumentDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.DocumentDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.appdetails_ != nullptr);
      _impl_.appdetails_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.albumdetails_ != nullptr);
      _impl_.albumdetails_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.artistdetails_ != nullptr);
      _impl_.artistdetails_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.songdetails_ != nullptr);
      _impl_.songdetails_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.bookdetails_ != nullptr);
      _impl_.bookdetails_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.videodetails_ != nullptr);
      _impl_.videodetails_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.subscriptiondetails_ != nullptr);
      _impl_.subscriptiondetails_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.magazinedetails_ != nullptr);
      _impl_.magazinedetails_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tvshowdetails_ != nullptr);
      _impl_.tvshowdetails_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tvseasondetails_ != nullptr);
      _impl_.tvseasondetails_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tvepisodedetails_ != nullptr);
      _impl_.tvepisodedetails_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.persondetails_ != nullptr);
      _impl_.persondetails_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.talentdetails_ != nullptr);
      _impl_.talentdetails_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.developerdetails_ != nullptr);
      _impl_.developerdetails_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.bookseriesdetails_ != nullptr);
      _impl_.bookseriesdetails_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.document.AppDetails appDetails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_appdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.AlbumDetails albumDetails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_albumdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.ArtistDetails artistDetails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_artistdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SongDetails songDetails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_songdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.BookDetails bookDetails = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.VideoDetails videoDetails = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_videodetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.SubscriptionDetails subscriptionDetails = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptiondetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.MagazineDetails magazineDetails = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_magazinedetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.TvShowDetails tvShowDetails = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tvshowdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.TvSeasonDetails tvSeasonDetails = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tvseasondetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.TvEpisodeDetails tvEpisodeDetails = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tvepisodedetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.PersonDetails personDetails = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_persondetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.TalentDetails talentDetails = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_talentdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DeveloperDetails developerDetails = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_developerdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.BookSeriesDetails bookSeriesDetails = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookseriesdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.DocumentDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.document.AppDetails appDetails = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::appdetails(this),
        _Internal::appdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.AlbumDetails albumDetails = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::albumdetails(this),
        _Internal::albumdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.ArtistDetails artistDetails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::artistdetails(this),
        _Internal::artistdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SongDetails songDetails = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::songdetails(this),
        _Internal::songdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.BookDetails bookDetails = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bookdetails(this),
        _Internal::bookdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.VideoDetails videoDetails = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::videodetails(this),
        _Internal::videodetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.SubscriptionDetails subscriptionDetails = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::subscriptiondetails(this),
        _Internal::subscriptiondetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.MagazineDetails magazineDetails = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::magazinedetails(this),
        _Internal::magazinedetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.TvShowDetails tvShowDetails = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tvshowdetails(this),
        _Internal::tvshowdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.TvSeasonDetails tvSeasonDetails = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tvseasondetails(this),
        _Internal::tvseasondetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.TvEpisodeDetails tvEpisodeDetails = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tvepisodedetails(this),
        _Internal::tvepisodedetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.PersonDetails personDetails = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::persondetails(this),
        _Internal::persondetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.TalentDetails talentDetails = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::talentdetails(this),
        _Internal::talentdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.DeveloperDetails developerDetails = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::developerdetails(this),
        _Internal::developerdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.BookSeriesDetails bookSeriesDetails = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::bookseriesdetails(this),
        _Internal::bookseriesdetails(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.DocumentDetails)
  return target;
}

size_t DocumentDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.DocumentDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .playapi.proto.finsky.document.AppDetails appDetails = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appdetails_);
    }

    // optional .playapi.proto.finsky.document.AlbumDetails albumDetails = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.albumdetails_);
    }

    // optional .playapi.proto.finsky.document.ArtistDetails artistDetails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.artistdetails_);
    }

    // optional .playapi.proto.finsky.document.SongDetails songDetails = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.songdetails_);
    }

    // optional .playapi.proto.finsky.document.BookDetails bookDetails = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bookdetails_);
    }

    // optional .playapi.proto.finsky.document.VideoDetails videoDetails = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.videodetails_);
    }

    // optional .playapi.proto.finsky.document.SubscriptionDetails subscriptionDetails = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subscriptiondetails_);
    }

    // optional .playapi.proto.finsky.document.MagazineDetails magazineDetails = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.magazinedetails_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .playapi.proto.finsky.document.TvShowDetails tvShowDetails = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tvshowdetails_);
    }

    // optional .playapi.proto.finsky.document.TvSeasonDetails tvSeasonDetails = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tvseasondetails_);
    }

    // optional .playapi.proto.finsky.document.TvEpisodeDetails tvEpisodeDetails = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tvepisodedetails_);
    }

    // optional .playapi.proto.finsky.document.PersonDetails personDetails = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.persondetails_);
    }

    // optional .playapi.proto.finsky.document.TalentDetails talentDetails = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.talentdetails_);
    }

    // optional .playapi.proto.finsky.document.DeveloperDetails developerDetails = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.developerdetails_);
    }

    // optional .playapi.proto.finsky.document.BookSeriesDetails bookSeriesDetails = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bookseriesdetails_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentDetails::GetClassData() const { return &_class_data_; }


void DocumentDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentDetails*>(&to_msg);
  auto& from = static_cast<const DocumentDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.DocumentDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_appdetails()->::playapi::proto::finsky::document::AppDetails::MergeFrom(
          from._internal_appdetails());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_albumdetails()->::playapi::proto::finsky::document::AlbumDetails::MergeFrom(
          from._internal_albumdetails());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_artistdetails()->::playapi::proto::finsky::document::ArtistDetails::MergeFrom(
          from._internal_artistdetails());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_songdetails()->::playapi::proto::finsky::document::SongDetails::MergeFrom(
          from._internal_songdetails());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_bookdetails()->::playapi::proto::finsky::document::BookDetails::MergeFrom(
          from._internal_bookdetails());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_videodetails()->::playapi::proto::finsky::document::VideoDetails::MergeFrom(
          from._internal_videodetails());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_subscriptiondetails()->::playapi::proto::finsky::document::SubscriptionDetails::MergeFrom(
          from._internal_subscriptiondetails());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_magazinedetails()->::playapi::proto::finsky::document::MagazineDetails::MergeFrom(
          from._internal_magazinedetails());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tvshowdetails()->::playapi::proto::finsky::document::TvShowDetails::MergeFrom(
          from._internal_tvshowdetails());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tvseasondetails()->::playapi::proto::finsky::document::TvSeasonDetails::MergeFrom(
          from._internal_tvseasondetails());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tvepisodedetails()->::playapi::proto::finsky::document::TvEpisodeDetails::MergeFrom(
          from._internal_tvepisodedetails());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_persondetails()->::playapi::proto::finsky::document::PersonDetails::MergeFrom(
          from._internal_persondetails());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_talentdetails()->::playapi::proto::finsky::document::TalentDetails::MergeFrom(
          from._internal_talentdetails());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_developerdetails()->::playapi::proto::finsky::document::DeveloperDetails::MergeFrom(
          from._internal_developerdetails());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_bookseriesdetails()->::playapi::proto::finsky::document::BookSeriesDetails::MergeFrom(
          from._internal_bookseriesdetails());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentDetails::CopyFrom(const DocumentDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.DocumentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentDetails::IsInitialized() const {
  return true;
}

void DocumentDetails::InternalSwap(DocumentDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentDetails, _impl_.bookseriesdetails_)
      + sizeof(DocumentDetails::_impl_.bookseriesdetails_)
      - PROTOBUF_FIELD_OFFSET(DocumentDetails, _impl_.appdetails_)>(
          reinterpret_cast<char*>(&_impl_.appdetails_),
          reinterpret_cast<char*>(&other->_impl_.appdetails_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[21]);
}

// ===================================================================

class AppDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<AppDetails>()._impl_._has_bits_);
  static void set_has_developername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_majorversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_versioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_versionstring(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contentrating(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_installationsize(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_developeremail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_developerwebsite(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_numdownloads(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packagename(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_recentchangeshtml(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uploaddate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_apptype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_variesbyaccount(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_declaresiab(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gamepadrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_externallyhosted(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_everexternallyhosted(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_installnotes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_installlocation(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_targetsdkversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_preregistrationpromocode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::playapi::proto::finsky::download::InstallDetails& installdetails(const AppDetails* msg);
  static void set_has_installdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::playapi::proto::finsky::document::TestingProgramInfo& testingprograminfo(const AppDetails* msg);
  static void set_has_testingprograminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::playapi::proto::finsky::download::InstallDetails&
AppDetails::_Internal::installdetails(const AppDetails* msg) {
  return *msg->_impl_.installdetails_;
}
const ::playapi::proto::finsky::document::TestingProgramInfo&
AppDetails::_Internal::testingprograminfo(const AppDetails* msg) {
  return *msg->_impl_.testingprograminfo_;
}
void AppDetails::clear_file() {
  _impl_.file_.Clear();
}
void AppDetails::clear_certificateset() {
  _impl_.certificateset_.Clear();
}
void AppDetails::clear_installdetails() {
  if (_impl_.installdetails_ != nullptr) _impl_.installdetails_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
AppDetails::AppDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.AppDetails)
}
AppDetails::AppDetails(const AppDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appcategory_){from._impl_.appcategory_}
    , decltype(_impl_.permission_){from._impl_.permission_}
    , decltype(_impl_.file_){from._impl_.file_}
    , decltype(_impl_.certificatehash_){from._impl_.certificatehash_}
    , decltype(_impl_.certificateset_){from._impl_.certificateset_}
    , decltype(_impl_.autoacquirefreeappifhigherversionavailabletag_){from._impl_.autoacquirefreeappifhigherversionavailabletag_}
    , decltype(_impl_.splitid_){from._impl_.splitid_}
    , decltype(_impl_.developername_){}
    , decltype(_impl_.versionstring_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.developeremail_){}
    , decltype(_impl_.developerwebsite_){}
    , decltype(_impl_.numdownloads_){}
    , decltype(_impl_.packagename_){}
    , decltype(_impl_.recentchangeshtml_){}
    , decltype(_impl_.uploaddate_){}
    , decltype(_impl_.apptype_){}
    , decltype(_impl_.installnotes_){}
    , decltype(_impl_.preregistrationpromocode_){}
    , decltype(_impl_.installdetails_){nullptr}
    , decltype(_impl_.testingprograminfo_){nullptr}
    , decltype(_impl_.majorversionnumber_){}
    , decltype(_impl_.versioncode_){}
    , decltype(_impl_.installationsize_){}
    , decltype(_impl_.contentrating_){}
    , decltype(_impl_.variesbyaccount_){}
    , decltype(_impl_.declaresiab_){}
    , decltype(_impl_.gamepadrequired_){}
    , decltype(_impl_.externallyhosted_){}
    , decltype(_impl_.everexternallyhosted_){}
    , decltype(_impl_.installlocation_){}
    , decltype(_impl_.targetsdkversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.developername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.developername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_developername()) {
    _this->_impl_.developername_.Set(from._internal_developername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.versionstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.versionstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_versionstring()) {
    _this->_impl_.versionstring_.Set(from._internal_versionstring(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.developeremail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.developeremail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_developeremail()) {
    _this->_impl_.developeremail_.Set(from._internal_developeremail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.developerwebsite_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.developerwebsite_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_developerwebsite()) {
    _this->_impl_.developerwebsite_.Set(from._internal_developerwebsite(), 
      _this->GetArenaForAllocation());
  }
  _impl_.numdownloads_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.numdownloads_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_numdownloads()) {
    _this->_impl_.numdownloads_.Set(from._internal_numdownloads(), 
      _this->GetArenaForAllocation());
  }
  _impl_.packagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_packagename()) {
    _this->_impl_.packagename_.Set(from._internal_packagename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recentchangeshtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recentchangeshtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recentchangeshtml()) {
    _this->_impl_.recentchangeshtml_.Set(from._internal_recentchangeshtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uploaddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploaddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uploaddate()) {
    _this->_impl_.uploaddate_.Set(from._internal_uploaddate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apptype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apptype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_apptype()) {
    _this->_impl_.apptype_.Set(from._internal_apptype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.installnotes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installnotes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_installnotes()) {
    _this->_impl_.installnotes_.Set(from._internal_installnotes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preregistrationpromocode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preregistrationpromocode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preregistrationpromocode()) {
    _this->_impl_.preregistrationpromocode_.Set(from._internal_preregistrationpromocode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_installdetails()) {
    _this->_impl_.installdetails_ = new ::playapi::proto::finsky::download::InstallDetails(*from._impl_.installdetails_);
  }
  if (from._internal_has_testingprograminfo()) {
    _this->_impl_.testingprograminfo_ = new ::playapi::proto::finsky::document::TestingProgramInfo(*from._impl_.testingprograminfo_);
  }
  ::memcpy(&_impl_.majorversionnumber_, &from._impl_.majorversionnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetsdkversion_) -
    reinterpret_cast<char*>(&_impl_.majorversionnumber_)) + sizeof(_impl_.targetsdkversion_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.AppDetails)
}

inline void AppDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appcategory_){arena}
    , decltype(_impl_.permission_){arena}
    , decltype(_impl_.file_){arena}
    , decltype(_impl_.certificatehash_){arena}
    , decltype(_impl_.certificateset_){arena}
    , decltype(_impl_.autoacquirefreeappifhigherversionavailabletag_){arena}
    , decltype(_impl_.splitid_){arena}
    , decltype(_impl_.developername_){}
    , decltype(_impl_.versionstring_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.developeremail_){}
    , decltype(_impl_.developerwebsite_){}
    , decltype(_impl_.numdownloads_){}
    , decltype(_impl_.packagename_){}
    , decltype(_impl_.recentchangeshtml_){}
    , decltype(_impl_.uploaddate_){}
    , decltype(_impl_.apptype_){}
    , decltype(_impl_.installnotes_){}
    , decltype(_impl_.preregistrationpromocode_){}
    , decltype(_impl_.installdetails_){nullptr}
    , decltype(_impl_.testingprograminfo_){nullptr}
    , decltype(_impl_.majorversionnumber_){0}
    , decltype(_impl_.versioncode_){0}
    , decltype(_impl_.installationsize_){int64_t{0}}
    , decltype(_impl_.contentrating_){0}
    , decltype(_impl_.variesbyaccount_){false}
    , decltype(_impl_.declaresiab_){false}
    , decltype(_impl_.gamepadrequired_){false}
    , decltype(_impl_.externallyhosted_){false}
    , decltype(_impl_.everexternallyhosted_){false}
    , decltype(_impl_.installlocation_){0}
    , decltype(_impl_.targetsdkversion_){0}
  };
  _impl_.developername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.developername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.versionstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.versionstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.developeremail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.developeremail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.developerwebsite_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.developerwebsite_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.numdownloads_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.numdownloads_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recentchangeshtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recentchangeshtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uploaddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploaddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apptype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apptype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.installnotes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installnotes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preregistrationpromocode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preregistrationpromocode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppDetails::~AppDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.AppDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appcategory_.~RepeatedPtrField();
  _impl_.permission_.~RepeatedPtrField();
  _impl_.file_.~RepeatedPtrField();
  _impl_.certificatehash_.~RepeatedPtrField();
  _impl_.certificateset_.~RepeatedPtrField();
  _impl_.autoacquirefreeappifhigherversionavailabletag_.~RepeatedPtrField();
  _impl_.splitid_.~RepeatedPtrField();
  _impl_.developername_.Destroy();
  _impl_.versionstring_.Destroy();
  _impl_.title_.Destroy();
  _impl_.developeremail_.Destroy();
  _impl_.developerwebsite_.Destroy();
  _impl_.numdownloads_.Destroy();
  _impl_.packagename_.Destroy();
  _impl_.recentchangeshtml_.Destroy();
  _impl_.uploaddate_.Destroy();
  _impl_.apptype_.Destroy();
  _impl_.installnotes_.Destroy();
  _impl_.preregistrationpromocode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.installdetails_;
  if (this != internal_default_instance()) delete _impl_.testingprograminfo_;
}

void AppDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.AppDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appcategory_.Clear();
  _impl_.permission_.Clear();
  _impl_.file_.Clear();
  _impl_.certificatehash_.Clear();
  _impl_.certificateset_.Clear();
  _impl_.autoacquirefreeappifhigherversionavailabletag_.Clear();
  _impl_.splitid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.developername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.versionstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.developeremail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.developerwebsite_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.numdownloads_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.packagename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.recentchangeshtml_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.uploaddate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.apptype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.installnotes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.preregistrationpromocode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.installdetails_ != nullptr);
      _impl_.installdetails_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.testingprograminfo_ != nullptr);
      _impl_.testingprograminfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.majorversionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.versioncode_) -
        reinterpret_cast<char*>(&_impl_.majorversionnumber_)) + sizeof(_impl_.versioncode_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.installationsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.installlocation_) -
        reinterpret_cast<char*>(&_impl_.installationsize_)) + sizeof(_impl_.installlocation_));
  }
  _impl_.targetsdkversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string developerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_developername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.developerName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 majorVersionNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_majorversionnumber(&has_bits);
          _impl_.majorversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 versionCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_versioncode(&has_bits);
          _impl_.versioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string versionString = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_versionstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.versionString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string appCategory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_appcategory();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.appCategory");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 contentRating = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_contentrating(&has_bits);
          _impl_.contentrating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 installationSize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_installationsize(&has_bits);
          _impl_.installationsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string permission = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_permission();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.permission");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string developerEmail = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_developeremail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.developerEmail");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string developerWebsite = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_developerwebsite();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.developerWebsite");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string numDownloads = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_numdownloads();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.numDownloads");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string packageName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_packagename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.packageName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string recentChangesHtml = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_recentchangeshtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.recentChangesHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uploadDate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_uploaddate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.uploadDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.download.FileMetadata file = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_file(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string appType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_apptype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.appType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string certificateHash = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_certificatehash();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.certificateHash");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool variesByAccount = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_variesbyaccount(&has_bits);
          _impl_.variesbyaccount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.CertificateSet certificateSet = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_certificateset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string autoAcquireFreeAppIfHigherVersionAvailableTag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_autoacquirefreeappifhigherversionavailabletag();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.autoAcquireFreeAppIfHigherVersionAvailableTag");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool declaresIab = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_declaresiab(&has_bits);
          _impl_.declaresiab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string splitId = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_splitid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.splitId");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool gamepadRequired = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_gamepadrequired(&has_bits);
          _impl_.gamepadrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool externallyHosted = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_externallyhosted(&has_bits);
          _impl_.externallyhosted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool everExternallyHosted = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_everexternallyhosted(&has_bits);
          _impl_.everexternallyhosted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string installNotes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_installnotes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.installNotes");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 installLocation = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_installlocation(&has_bits);
          _impl_.installlocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 targetSdkVersion = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_targetsdkversion(&has_bits);
          _impl_.targetsdkversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string preregistrationPromoCode = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_preregistrationpromocode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AppDetails.preregistrationPromoCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.InstallDetails installDetails = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_installdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.TestingProgramInfo testingProgramInfo = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_testingprograminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.AppDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string developerName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_developername().data(), static_cast<int>(this->_internal_developername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.developerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_developername(), target);
  }

  // optional int32 majorVersionNumber = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_majorversionnumber(), target);
  }

  // optional int32 versionCode = 3;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_versioncode(), target);
  }

  // optional string versionString = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_versionstring().data(), static_cast<int>(this->_internal_versionstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.versionString");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_versionstring(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // repeated string appCategory = 7;
  for (int i = 0, n = this->_internal_appcategory_size(); i < n; i++) {
    const auto& s = this->_internal_appcategory(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.appCategory");
    target = stream->WriteString(7, s, target);
  }

  // optional int32 contentRating = 8;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_contentrating(), target);
  }

  // optional int64 installationSize = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_installationsize(), target);
  }

  // repeated string permission = 10;
  for (int i = 0, n = this->_internal_permission_size(); i < n; i++) {
    const auto& s = this->_internal_permission(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.permission");
    target = stream->WriteString(10, s, target);
  }

  // optional string developerEmail = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_developeremail().data(), static_cast<int>(this->_internal_developeremail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.developerEmail");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_developeremail(), target);
  }

  // optional string developerWebsite = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_developerwebsite().data(), static_cast<int>(this->_internal_developerwebsite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.developerWebsite");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_developerwebsite(), target);
  }

  // optional string numDownloads = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_numdownloads().data(), static_cast<int>(this->_internal_numdownloads().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.numDownloads");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_numdownloads(), target);
  }

  // optional string packageName = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_packagename().data(), static_cast<int>(this->_internal_packagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.packageName");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_packagename(), target);
  }

  // optional string recentChangesHtml = 15;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recentchangeshtml().data(), static_cast<int>(this->_internal_recentchangeshtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.recentChangesHtml");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_recentchangeshtml(), target);
  }

  // optional string uploadDate = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uploaddate().data(), static_cast<int>(this->_internal_uploaddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.uploadDate");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_uploaddate(), target);
  }

  // repeated .playapi.proto.finsky.download.FileMetadata file = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_size()); i < n; i++) {
    const auto& repfield = this->_internal_file(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string appType = 18;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_apptype().data(), static_cast<int>(this->_internal_apptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.appType");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_apptype(), target);
  }

  // repeated string certificateHash = 19;
  for (int i = 0, n = this->_internal_certificatehash_size(); i < n; i++) {
    const auto& s = this->_internal_certificatehash(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.certificateHash");
    target = stream->WriteString(19, s, target);
  }

  // optional bool variesByAccount = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_variesbyaccount(), target);
  }

  // repeated .playapi.proto.finsky.CertificateSet certificateSet = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_certificateset_size()); i < n; i++) {
    const auto& repfield = this->_internal_certificateset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string autoAcquireFreeAppIfHigherVersionAvailableTag = 23;
  for (int i = 0, n = this->_internal_autoacquirefreeappifhigherversionavailabletag_size(); i < n; i++) {
    const auto& s = this->_internal_autoacquirefreeappifhigherversionavailabletag(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.autoAcquireFreeAppIfHigherVersionAvailableTag");
    target = stream->WriteString(23, s, target);
  }

  // optional bool declaresIab = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_declaresiab(), target);
  }

  // repeated string splitId = 25;
  for (int i = 0, n = this->_internal_splitid_size(); i < n; i++) {
    const auto& s = this->_internal_splitid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.splitId");
    target = stream->WriteString(25, s, target);
  }

  // optional bool gamepadRequired = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_gamepadrequired(), target);
  }

  // optional bool externallyHosted = 27;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_externallyhosted(), target);
  }

  // optional bool everExternallyHosted = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_everexternallyhosted(), target);
  }

  // optional string installNotes = 30;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_installnotes().data(), static_cast<int>(this->_internal_installnotes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.installNotes");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_installnotes(), target);
  }

  // optional int32 installLocation = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_installlocation(), target);
  }

  // optional int32 targetSdkVersion = 32;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_targetsdkversion(), target);
  }

  // optional string preregistrationPromoCode = 33;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preregistrationpromocode().data(), static_cast<int>(this->_internal_preregistrationpromocode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AppDetails.preregistrationPromoCode");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_preregistrationpromocode(), target);
  }

  // optional .playapi.proto.finsky.download.InstallDetails installDetails = 34;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::installdetails(this),
        _Internal::installdetails(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.TestingProgramInfo testingProgramInfo = 35;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::testingprograminfo(this),
        _Internal::testingprograminfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.AppDetails)
  return target;
}

size_t AppDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.AppDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string appCategory = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.appcategory_.size());
  for (int i = 0, n = _impl_.appcategory_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.appcategory_.Get(i));
  }

  // repeated string permission = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.permission_.size());
  for (int i = 0, n = _impl_.permission_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.permission_.Get(i));
  }

  // repeated .playapi.proto.finsky.download.FileMetadata file = 17;
  total_size += 2UL * this->_internal_file_size();
  for (const auto& msg : this->_impl_.file_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string certificateHash = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.certificatehash_.size());
  for (int i = 0, n = _impl_.certificatehash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.certificatehash_.Get(i));
  }

  // repeated .playapi.proto.finsky.CertificateSet certificateSet = 22;
  total_size += 2UL * this->_internal_certificateset_size();
  for (const auto& msg : this->_impl_.certificateset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string autoAcquireFreeAppIfHigherVersionAvailableTag = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.autoacquirefreeappifhigherversionavailabletag_.size());
  for (int i = 0, n = _impl_.autoacquirefreeappifhigherversionavailabletag_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.autoacquirefreeappifhigherversionavailabletag_.Get(i));
  }

  // repeated string splitId = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.splitid_.size());
  for (int i = 0, n = _impl_.splitid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.splitid_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string developerName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_developername());
    }

    // optional string versionString = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_versionstring());
    }

    // optional string title = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string developerEmail = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_developeremail());
    }

    // optional string developerWebsite = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_developerwebsite());
    }

    // optional string numDownloads = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_numdownloads());
    }

    // optional string packageName = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_packagename());
    }

    // optional string recentChangesHtml = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recentchangeshtml());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string uploadDate = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uploaddate());
    }

    // optional string appType = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_apptype());
    }

    // optional string installNotes = 30;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_installnotes());
    }

    // optional string preregistrationPromoCode = 33;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preregistrationpromocode());
    }

    // optional .playapi.proto.finsky.download.InstallDetails installDetails = 34;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.installdetails_);
    }

    // optional .playapi.proto.finsky.document.TestingProgramInfo testingProgramInfo = 35;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.testingprograminfo_);
    }

    // optional int32 majorVersionNumber = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_majorversionnumber());
    }

    // optional int32 versionCode = 3;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versioncode());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 installationSize = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_installationsize());
    }

    // optional int32 contentRating = 8;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contentrating());
    }

    // optional bool variesByAccount = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool declaresIab = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool gamepadRequired = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool externallyHosted = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool everExternallyHosted = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 installLocation = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_installlocation());
    }

  }
  // optional int32 targetSdkVersion = 32;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_targetsdkversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppDetails::GetClassData() const { return &_class_data_; }


void AppDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppDetails*>(&to_msg);
  auto& from = static_cast<const AppDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.AppDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.appcategory_.MergeFrom(from._impl_.appcategory_);
  _this->_impl_.permission_.MergeFrom(from._impl_.permission_);
  _this->_impl_.file_.MergeFrom(from._impl_.file_);
  _this->_impl_.certificatehash_.MergeFrom(from._impl_.certificatehash_);
  _this->_impl_.certificateset_.MergeFrom(from._impl_.certificateset_);
  _this->_impl_.autoacquirefreeappifhigherversionavailabletag_.MergeFrom(from._impl_.autoacquirefreeappifhigherversionavailabletag_);
  _this->_impl_.splitid_.MergeFrom(from._impl_.splitid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_developername(from._internal_developername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_versionstring(from._internal_versionstring());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_developeremail(from._internal_developeremail());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_developerwebsite(from._internal_developerwebsite());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_numdownloads(from._internal_numdownloads());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_packagename(from._internal_packagename());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_recentchangeshtml(from._internal_recentchangeshtml());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_uploaddate(from._internal_uploaddate());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_apptype(from._internal_apptype());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_installnotes(from._internal_installnotes());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_preregistrationpromocode(from._internal_preregistrationpromocode());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_installdetails()->::playapi::proto::finsky::download::InstallDetails::MergeFrom(
          from._internal_installdetails());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_testingprograminfo()->::playapi::proto::finsky::document::TestingProgramInfo::MergeFrom(
          from._internal_testingprograminfo());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.majorversionnumber_ = from._impl_.majorversionnumber_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.versioncode_ = from._impl_.versioncode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.installationsize_ = from._impl_.installationsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.contentrating_ = from._impl_.contentrating_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.variesbyaccount_ = from._impl_.variesbyaccount_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.declaresiab_ = from._impl_.declaresiab_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.gamepadrequired_ = from._impl_.gamepadrequired_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.externallyhosted_ = from._impl_.externallyhosted_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.everexternallyhosted_ = from._impl_.everexternallyhosted_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.installlocation_ = from._impl_.installlocation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_internal_set_targetsdkversion(from._internal_targetsdkversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppDetails::CopyFrom(const AppDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.AppDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDetails::IsInitialized() const {
  return true;
}

void AppDetails::InternalSwap(AppDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.appcategory_.InternalSwap(&other->_impl_.appcategory_);
  _impl_.permission_.InternalSwap(&other->_impl_.permission_);
  _impl_.file_.InternalSwap(&other->_impl_.file_);
  _impl_.certificatehash_.InternalSwap(&other->_impl_.certificatehash_);
  _impl_.certificateset_.InternalSwap(&other->_impl_.certificateset_);
  _impl_.autoacquirefreeappifhigherversionavailabletag_.InternalSwap(&other->_impl_.autoacquirefreeappifhigherversionavailabletag_);
  _impl_.splitid_.InternalSwap(&other->_impl_.splitid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.developername_, lhs_arena,
      &other->_impl_.developername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.versionstring_, lhs_arena,
      &other->_impl_.versionstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.developeremail_, lhs_arena,
      &other->_impl_.developeremail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.developerwebsite_, lhs_arena,
      &other->_impl_.developerwebsite_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.numdownloads_, lhs_arena,
      &other->_impl_.numdownloads_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packagename_, lhs_arena,
      &other->_impl_.packagename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recentchangeshtml_, lhs_arena,
      &other->_impl_.recentchangeshtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uploaddate_, lhs_arena,
      &other->_impl_.uploaddate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apptype_, lhs_arena,
      &other->_impl_.apptype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.installnotes_, lhs_arena,
      &other->_impl_.installnotes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preregistrationpromocode_, lhs_arena,
      &other->_impl_.preregistrationpromocode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppDetails, _impl_.targetsdkversion_)
      + sizeof(AppDetails::_impl_.targetsdkversion_)
      - PROTOBUF_FIELD_OFFSET(AppDetails, _impl_.installdetails_)>(
          reinterpret_cast<char*>(&_impl_.installdetails_),
          reinterpret_cast<char*>(&other->_impl_.installdetails_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[22]);
}

// ===================================================================

class TestingProgramInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TestingProgramInfo>()._impl_._has_bits_);
  static void set_has_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscribed1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestingProgramInfo::TestingProgramInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.TestingProgramInfo)
}
TestingProgramInfo::TestingProgramInfo(const TestingProgramInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestingProgramInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscribed_){}
    , decltype(_impl_.subscribed1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.subscribed_, &from._impl_.subscribed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subscribed1_) -
    reinterpret_cast<char*>(&_impl_.subscribed_)) + sizeof(_impl_.subscribed1_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.TestingProgramInfo)
}

inline void TestingProgramInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscribed_){false}
    , decltype(_impl_.subscribed1_){false}
  };
}

TestingProgramInfo::~TestingProgramInfo() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.TestingProgramInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestingProgramInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestingProgramInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestingProgramInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.TestingProgramInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.subscribed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.subscribed1_) -
      reinterpret_cast<char*>(&_impl_.subscribed_)) + sizeof(_impl_.subscribed1_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestingProgramInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool subscribed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_subscribed(&has_bits);
          _impl_.subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool subscribed1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_subscribed1(&has_bits);
          _impl_.subscribed1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestingProgramInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.TestingProgramInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool subscribed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_subscribed(), target);
  }

  // optional bool subscribed1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_subscribed1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.TestingProgramInfo)
  return target;
}

size_t TestingProgramInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.TestingProgramInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool subscribed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool subscribed1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestingProgramInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestingProgramInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestingProgramInfo::GetClassData() const { return &_class_data_; }


void TestingProgramInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestingProgramInfo*>(&to_msg);
  auto& from = static_cast<const TestingProgramInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.TestingProgramInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.subscribed_ = from._impl_.subscribed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.subscribed1_ = from._impl_.subscribed1_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestingProgramInfo::CopyFrom(const TestingProgramInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.TestingProgramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestingProgramInfo::IsInitialized() const {
  return true;
}

void TestingProgramInfo::InternalSwap(TestingProgramInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestingProgramInfo, _impl_.subscribed1_)
      + sizeof(TestingProgramInfo::_impl_.subscribed1_)
      - PROTOBUF_FIELD_OFFSET(TestingProgramInfo, _impl_.subscribed_)>(
          reinterpret_cast<char*>(&_impl_.subscribed_),
          reinterpret_cast<char*>(&other->_impl_.subscribed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestingProgramInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[23]);
}

// ===================================================================

class AlbumDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<AlbumDetails>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::document::MusicDetails& details(const AlbumDetails* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::document::ArtistDetails& displayartist(const AlbumDetails* msg);
  static void set_has_displayartist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::document::MusicDetails&
AlbumDetails::_Internal::details(const AlbumDetails* msg) {
  return *msg->_impl_.details_;
}
const ::playapi::proto::finsky::document::ArtistDetails&
AlbumDetails::_Internal::displayartist(const AlbumDetails* msg) {
  return *msg->_impl_.displayartist_;
}
AlbumDetails::AlbumDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.AlbumDetails)
}
AlbumDetails::AlbumDetails(const AlbumDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlbumDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.displayartist_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_details()) {
    _this->_impl_.details_ = new ::playapi::proto::finsky::document::MusicDetails(*from._impl_.details_);
  }
  if (from._internal_has_displayartist()) {
    _this->_impl_.displayartist_ = new ::playapi::proto::finsky::document::ArtistDetails(*from._impl_.displayartist_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.AlbumDetails)
}

inline void AlbumDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.displayartist_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlbumDetails::~AlbumDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.AlbumDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlbumDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.details_;
  if (this != internal_default_instance()) delete _impl_.displayartist_;
}

void AlbumDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlbumDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.AlbumDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.details_ != nullptr);
      _impl_.details_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.displayartist_ != nullptr);
      _impl_.displayartist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlbumDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AlbumDetails.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.MusicDetails details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.ArtistDetails displayArtist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_displayartist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlbumDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.AlbumDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AlbumDetails.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .playapi.proto.finsky.document.MusicDetails details = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.ArtistDetails displayArtist = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::displayartist(this),
        _Internal::displayartist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.AlbumDetails)
  return target;
}

size_t AlbumDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.AlbumDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .playapi.proto.finsky.document.MusicDetails details = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.details_);
    }

    // optional .playapi.proto.finsky.document.ArtistDetails displayArtist = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displayartist_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlbumDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlbumDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlbumDetails::GetClassData() const { return &_class_data_; }


void AlbumDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlbumDetails*>(&to_msg);
  auto& from = static_cast<const AlbumDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.AlbumDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_details()->::playapi::proto::finsky::document::MusicDetails::MergeFrom(
          from._internal_details());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_displayartist()->::playapi::proto::finsky::document::ArtistDetails::MergeFrom(
          from._internal_displayartist());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlbumDetails::CopyFrom(const AlbumDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.AlbumDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlbumDetails::IsInitialized() const {
  return true;
}

void AlbumDetails::InternalSwap(AlbumDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlbumDetails, _impl_.displayartist_)
      + sizeof(AlbumDetails::_impl_.displayartist_)
      - PROTOBUF_FIELD_OFFSET(AlbumDetails, _impl_.details_)>(
          reinterpret_cast<char*>(&_impl_.details_),
          reinterpret_cast<char*>(&other->_impl_.details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlbumDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[24]);
}

// ===================================================================

class MusicDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<MusicDetails>()._impl_._has_bits_);
  static void set_has_censoring(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_durationsec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_originalreleasedate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_releasedate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MusicDetails::MusicDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.MusicDetails)
}
MusicDetails::MusicDetails(const MusicDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MusicDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.artist_){from._impl_.artist_}
    , decltype(_impl_.genre_){from._impl_.genre_}
    , decltype(_impl_.releasetype_){from._impl_.releasetype_}
    , decltype(_impl_.originalreleasedate_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.censoring_){}
    , decltype(_impl_.durationsec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.originalreleasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalreleasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originalreleasedate()) {
    _this->_impl_.originalreleasedate_.Set(from._internal_originalreleasedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_releasedate()) {
    _this->_impl_.releasedate_.Set(from._internal_releasedate(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.censoring_, &from._impl_.censoring_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.durationsec_) -
    reinterpret_cast<char*>(&_impl_.censoring_)) + sizeof(_impl_.durationsec_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.MusicDetails)
}

inline void MusicDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.artist_){arena}
    , decltype(_impl_.genre_){arena}
    , decltype(_impl_.releasetype_){arena}
    , decltype(_impl_.originalreleasedate_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.censoring_){0}
    , decltype(_impl_.durationsec_){0}
  };
  _impl_.originalreleasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalreleasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MusicDetails::~MusicDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.MusicDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MusicDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.artist_.~RepeatedPtrField();
  _impl_.genre_.~RepeatedPtrField();
  _impl_.releasetype_.~RepeatedField();
  _impl_.originalreleasedate_.Destroy();
  _impl_.label_.Destroy();
  _impl_.releasedate_.Destroy();
}

void MusicDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MusicDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.MusicDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.artist_.Clear();
  _impl_.genre_.Clear();
  _impl_.releasetype_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.originalreleasedate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.releasedate_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.censoring_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.durationsec_) -
        reinterpret_cast<char*>(&_impl_.censoring_)) + sizeof(_impl_.durationsec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MusicDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 censoring = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_censoring(&has_bits);
          _impl_.censoring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 durationSec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_durationsec(&has_bits);
          _impl_.durationsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originalReleaseDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_originalreleasedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MusicDetails.originalReleaseDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MusicDetails.label");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.ArtistDetails artist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string genre = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_genre();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MusicDetails.genre");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string releaseDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_releasedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MusicDetails.releaseDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int32 releaseType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_releasetype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_releasetype(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MusicDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.MusicDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 censoring = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_censoring(), target);
  }

  // optional int32 durationSec = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_durationsec(), target);
  }

  // optional string originalReleaseDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_originalreleasedate().data(), static_cast<int>(this->_internal_originalreleasedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MusicDetails.originalReleaseDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_originalreleasedate(), target);
  }

  // optional string label = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MusicDetails.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  // repeated .playapi.proto.finsky.document.ArtistDetails artist = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_artist_size()); i < n; i++) {
    const auto& repfield = this->_internal_artist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string genre = 6;
  for (int i = 0, n = this->_internal_genre_size(); i < n; i++) {
    const auto& s = this->_internal_genre(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MusicDetails.genre");
    target = stream->WriteString(6, s, target);
  }

  // optional string releaseDate = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_releasedate().data(), static_cast<int>(this->_internal_releasedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MusicDetails.releaseDate");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_releasedate(), target);
  }

  // repeated int32 releaseType = 8;
  for (int i = 0, n = this->_internal_releasetype_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_releasetype(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.MusicDetails)
  return target;
}

size_t MusicDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.MusicDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.ArtistDetails artist = 5;
  total_size += 1UL * this->_internal_artist_size();
  for (const auto& msg : this->_impl_.artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string genre = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.genre_.size());
  for (int i = 0, n = _impl_.genre_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.genre_.Get(i));
  }

  // repeated int32 releaseType = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.releasetype_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_releasetype_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string originalReleaseDate = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originalreleasedate());
    }

    // optional string label = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string releaseDate = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_releasedate());
    }

    // optional int32 censoring = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_censoring());
    }

    // optional int32 durationSec = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_durationsec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MusicDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MusicDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MusicDetails::GetClassData() const { return &_class_data_; }


void MusicDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MusicDetails*>(&to_msg);
  auto& from = static_cast<const MusicDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.MusicDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.artist_.MergeFrom(from._impl_.artist_);
  _this->_impl_.genre_.MergeFrom(from._impl_.genre_);
  _this->_impl_.releasetype_.MergeFrom(from._impl_.releasetype_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_originalreleasedate(from._internal_originalreleasedate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_releasedate(from._internal_releasedate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.censoring_ = from._impl_.censoring_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.durationsec_ = from._impl_.durationsec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MusicDetails::CopyFrom(const MusicDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.MusicDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicDetails::IsInitialized() const {
  return true;
}

void MusicDetails::InternalSwap(MusicDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.artist_.InternalSwap(&other->_impl_.artist_);
  _impl_.genre_.InternalSwap(&other->_impl_.genre_);
  _impl_.releasetype_.InternalSwap(&other->_impl_.releasetype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalreleasedate_, lhs_arena,
      &other->_impl_.originalreleasedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.releasedate_, lhs_arena,
      &other->_impl_.releasedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MusicDetails, _impl_.durationsec_)
      + sizeof(MusicDetails::_impl_.durationsec_)
      - PROTOBUF_FIELD_OFFSET(MusicDetails, _impl_.censoring_)>(
          reinterpret_cast<char*>(&_impl_.censoring_),
          reinterpret_cast<char*>(&other->_impl_.censoring_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MusicDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[25]);
}

// ===================================================================

class ArtistDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtistDetails>()._impl_._has_bits_);
  static void set_has_detailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::document::ArtistExternalLinks& externallinks(const ArtistDetails* msg);
  static void set_has_externallinks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::document::ArtistExternalLinks&
ArtistDetails::_Internal::externallinks(const ArtistDetails* msg) {
  return *msg->_impl_.externallinks_;
}
ArtistDetails::ArtistDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.ArtistDetails)
}
ArtistDetails::ArtistDetails(const ArtistDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArtistDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.externallinks_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailsurl()) {
    _this->_impl_.detailsurl_.Set(from._internal_detailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_externallinks()) {
    _this->_impl_.externallinks_ = new ::playapi::proto::finsky::document::ArtistExternalLinks(*from._impl_.externallinks_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.ArtistDetails)
}

inline void ArtistDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.externallinks_){nullptr}
  };
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArtistDetails::~ArtistDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.ArtistDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArtistDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detailsurl_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.externallinks_;
}

void ArtistDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArtistDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.ArtistDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.detailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.externallinks_ != nullptr);
      _impl_.externallinks_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtistDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string detailsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_detailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ArtistDetails.detailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ArtistDetails.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.ArtistExternalLinks externalLinks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_externallinks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArtistDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.ArtistDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string detailsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailsurl().data(), static_cast<int>(this->_internal_detailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ArtistDetails.detailsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detailsurl(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ArtistDetails.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .playapi.proto.finsky.document.ArtistExternalLinks externalLinks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::externallinks(this),
        _Internal::externallinks(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.ArtistDetails)
  return target;
}

size_t ArtistDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.ArtistDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string detailsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailsurl());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .playapi.proto.finsky.document.ArtistExternalLinks externalLinks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.externallinks_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArtistDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArtistDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArtistDetails::GetClassData() const { return &_class_data_; }


void ArtistDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArtistDetails*>(&to_msg);
  auto& from = static_cast<const ArtistDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.ArtistDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_detailsurl(from._internal_detailsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_externallinks()->::playapi::proto::finsky::document::ArtistExternalLinks::MergeFrom(
          from._internal_externallinks());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArtistDetails::CopyFrom(const ArtistDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.ArtistDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistDetails::IsInitialized() const {
  return true;
}

void ArtistDetails::InternalSwap(ArtistDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailsurl_, lhs_arena,
      &other->_impl_.detailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.externallinks_, other->_impl_.externallinks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtistDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[26]);
}

// ===================================================================

class ArtistExternalLinks::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtistExternalLinks>()._impl_._has_bits_);
  static void set_has_googleplusprofileurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_youtubechannelurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArtistExternalLinks::ArtistExternalLinks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.ArtistExternalLinks)
}
ArtistExternalLinks::ArtistExternalLinks(const ArtistExternalLinks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArtistExternalLinks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.websiteurl_){from._impl_.websiteurl_}
    , decltype(_impl_.googleplusprofileurl_){}
    , decltype(_impl_.youtubechannelurl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.googleplusprofileurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.googleplusprofileurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_googleplusprofileurl()) {
    _this->_impl_.googleplusprofileurl_.Set(from._internal_googleplusprofileurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.youtubechannelurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.youtubechannelurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_youtubechannelurl()) {
    _this->_impl_.youtubechannelurl_.Set(from._internal_youtubechannelurl(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.ArtistExternalLinks)
}

inline void ArtistExternalLinks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.websiteurl_){arena}
    , decltype(_impl_.googleplusprofileurl_){}
    , decltype(_impl_.youtubechannelurl_){}
  };
  _impl_.googleplusprofileurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.googleplusprofileurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.youtubechannelurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.youtubechannelurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArtistExternalLinks::~ArtistExternalLinks() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.ArtistExternalLinks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArtistExternalLinks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.websiteurl_.~RepeatedPtrField();
  _impl_.googleplusprofileurl_.Destroy();
  _impl_.youtubechannelurl_.Destroy();
}

void ArtistExternalLinks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArtistExternalLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.ArtistExternalLinks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.websiteurl_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.googleplusprofileurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.youtubechannelurl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtistExternalLinks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string websiteUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_websiteurl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ArtistExternalLinks.websiteUrl");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string googlePlusProfileUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_googleplusprofileurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ArtistExternalLinks.googlePlusProfileUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string youtubeChannelUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_youtubechannelurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ArtistExternalLinks.youtubeChannelUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArtistExternalLinks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.ArtistExternalLinks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string websiteUrl = 1;
  for (int i = 0, n = this->_internal_websiteurl_size(); i < n; i++) {
    const auto& s = this->_internal_websiteurl(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ArtistExternalLinks.websiteUrl");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string googlePlusProfileUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_googleplusprofileurl().data(), static_cast<int>(this->_internal_googleplusprofileurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ArtistExternalLinks.googlePlusProfileUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_googleplusprofileurl(), target);
  }

  // optional string youtubeChannelUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtubechannelurl().data(), static_cast<int>(this->_internal_youtubechannelurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ArtistExternalLinks.youtubeChannelUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_youtubechannelurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.ArtistExternalLinks)
  return target;
}

size_t ArtistExternalLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.ArtistExternalLinks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string websiteUrl = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.websiteurl_.size());
  for (int i = 0, n = _impl_.websiteurl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.websiteurl_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string googlePlusProfileUrl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_googleplusprofileurl());
    }

    // optional string youtubeChannelUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtubechannelurl());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArtistExternalLinks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArtistExternalLinks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArtistExternalLinks::GetClassData() const { return &_class_data_; }


void ArtistExternalLinks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArtistExternalLinks*>(&to_msg);
  auto& from = static_cast<const ArtistExternalLinks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.ArtistExternalLinks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.websiteurl_.MergeFrom(from._impl_.websiteurl_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_googleplusprofileurl(from._internal_googleplusprofileurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_youtubechannelurl(from._internal_youtubechannelurl());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArtistExternalLinks::CopyFrom(const ArtistExternalLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.ArtistExternalLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistExternalLinks::IsInitialized() const {
  return true;
}

void ArtistExternalLinks::InternalSwap(ArtistExternalLinks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.websiteurl_.InternalSwap(&other->_impl_.websiteurl_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.googleplusprofileurl_, lhs_arena,
      &other->_impl_.googleplusprofileurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.youtubechannelurl_, lhs_arena,
      &other->_impl_.youtubechannelurl_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtistExternalLinks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[27]);
}

// ===================================================================

class SongDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<SongDetails>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::document::MusicDetails& details(const SongDetails* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_albumname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tracknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_previewurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::document::ArtistDetails& displayartist(const SongDetails* msg);
  static void set_has_displayartist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::document::Badge& badge(const SongDetails* msg);
  static void set_has_badge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::playapi::proto::finsky::document::MusicDetails&
SongDetails::_Internal::details(const SongDetails* msg) {
  return *msg->_impl_.details_;
}
const ::playapi::proto::finsky::document::ArtistDetails&
SongDetails::_Internal::displayartist(const SongDetails* msg) {
  return *msg->_impl_.displayartist_;
}
const ::playapi::proto::finsky::document::Badge&
SongDetails::_Internal::badge(const SongDetails* msg) {
  return *msg->_impl_.badge_;
}
SongDetails::SongDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.SongDetails)
}
SongDetails::SongDetails(const SongDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.albumname_){}
    , decltype(_impl_.previewurl_){}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.displayartist_){nullptr}
    , decltype(_impl_.badge_){nullptr}
    , decltype(_impl_.tracknumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.albumname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.albumname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_albumname()) {
    _this->_impl_.albumname_.Set(from._internal_albumname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.previewurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previewurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_previewurl()) {
    _this->_impl_.previewurl_.Set(from._internal_previewurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_details()) {
    _this->_impl_.details_ = new ::playapi::proto::finsky::document::MusicDetails(*from._impl_.details_);
  }
  if (from._internal_has_displayartist()) {
    _this->_impl_.displayartist_ = new ::playapi::proto::finsky::document::ArtistDetails(*from._impl_.displayartist_);
  }
  if (from._internal_has_badge()) {
    _this->_impl_.badge_ = new ::playapi::proto::finsky::document::Badge(*from._impl_.badge_);
  }
  _this->_impl_.tracknumber_ = from._impl_.tracknumber_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.SongDetails)
}

inline void SongDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.albumname_){}
    , decltype(_impl_.previewurl_){}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.displayartist_){nullptr}
    , decltype(_impl_.badge_){nullptr}
    , decltype(_impl_.tracknumber_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.albumname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.albumname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previewurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previewurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SongDetails::~SongDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.SongDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.albumname_.Destroy();
  _impl_.previewurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.details_;
  if (this != internal_default_instance()) delete _impl_.displayartist_;
  if (this != internal_default_instance()) delete _impl_.badge_;
}

void SongDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.SongDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.albumname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.previewurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.details_ != nullptr);
      _impl_.details_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.displayartist_ != nullptr);
      _impl_.displayartist_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.badge_ != nullptr);
      _impl_.badge_->Clear();
    }
  }
  _impl_.tracknumber_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SongDetails.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.MusicDetails details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string albumName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_albumname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SongDetails.albumName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 trackNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tracknumber(&has_bits);
          _impl_.tracknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string previewUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_previewurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.SongDetails.previewUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.ArtistDetails displayArtist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_displayartist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.Badge badge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_badge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.SongDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SongDetails.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .playapi.proto.finsky.document.MusicDetails details = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  // optional string albumName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_albumname().data(), static_cast<int>(this->_internal_albumname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SongDetails.albumName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_albumname(), target);
  }

  // optional int32 trackNumber = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tracknumber(), target);
  }

  // optional string previewUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previewurl().data(), static_cast<int>(this->_internal_previewurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.SongDetails.previewUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_previewurl(), target);
  }

  // optional .playapi.proto.finsky.document.ArtistDetails displayArtist = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::displayartist(this),
        _Internal::displayartist(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.Badge badge = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::badge(this),
        _Internal::badge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.SongDetails)
  return target;
}

size_t SongDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.SongDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string albumName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_albumname());
    }

    // optional string previewUrl = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previewurl());
    }

    // optional .playapi.proto.finsky.document.MusicDetails details = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.details_);
    }

    // optional .playapi.proto.finsky.document.ArtistDetails displayArtist = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displayartist_);
    }

    // optional .playapi.proto.finsky.document.Badge badge = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.badge_);
    }

    // optional int32 trackNumber = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tracknumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongDetails::GetClassData() const { return &_class_data_; }


void SongDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongDetails*>(&to_msg);
  auto& from = static_cast<const SongDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.SongDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_albumname(from._internal_albumname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_previewurl(from._internal_previewurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_details()->::playapi::proto::finsky::document::MusicDetails::MergeFrom(
          from._internal_details());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_displayartist()->::playapi::proto::finsky::document::ArtistDetails::MergeFrom(
          from._internal_displayartist());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_badge()->::playapi::proto::finsky::document::Badge::MergeFrom(
          from._internal_badge());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tracknumber_ = from._impl_.tracknumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongDetails::CopyFrom(const SongDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.SongDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongDetails::IsInitialized() const {
  return true;
}

void SongDetails::InternalSwap(SongDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.albumname_, lhs_arena,
      &other->_impl_.albumname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previewurl_, lhs_arena,
      &other->_impl_.previewurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongDetails, _impl_.tracknumber_)
      + sizeof(SongDetails::_impl_.tracknumber_)
      - PROTOBUF_FIELD_OFFSET(SongDetails, _impl_.details_)>(
          reinterpret_cast<char*>(&_impl_.details_),
          reinterpret_cast<char*>(&other->_impl_.details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[28]);
}

// ===================================================================

class BookDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<BookDetails>()._impl_._has_bits_);
  static void set_has_publisher(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_publicationdate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isbn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numberofpages(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_abouttheauthor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_booktype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_seriesline(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_concisetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shorttitle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seriestitle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

BookDetails::BookDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.BookDetails)
}
BookDetails::BookDetails(const BookDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publisher_){}
    , decltype(_impl_.publicationdate_){}
    , decltype(_impl_.isbn_){}
    , decltype(_impl_.abouttheauthor_){}
    , decltype(_impl_.seriesline_){}
    , decltype(_impl_.concisetitle_){}
    , decltype(_impl_.shorttitle_){}
    , decltype(_impl_.seriestitle_){}
    , decltype(_impl_.numberofpages_){}
    , decltype(_impl_.booktype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publisher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publisher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publisher()) {
    _this->_impl_.publisher_.Set(from._internal_publisher(), 
      _this->GetArenaForAllocation());
  }
  _impl_.publicationdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publicationdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publicationdate()) {
    _this->_impl_.publicationdate_.Set(from._internal_publicationdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isbn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isbn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_isbn()) {
    _this->_impl_.isbn_.Set(from._internal_isbn(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abouttheauthor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abouttheauthor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_abouttheauthor()) {
    _this->_impl_.abouttheauthor_.Set(from._internal_abouttheauthor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.seriesline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriesline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seriesline()) {
    _this->_impl_.seriesline_.Set(from._internal_seriesline(), 
      _this->GetArenaForAllocation());
  }
  _impl_.concisetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concisetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_concisetitle()) {
    _this->_impl_.concisetitle_.Set(from._internal_concisetitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shorttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shorttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shorttitle()) {
    _this->_impl_.shorttitle_.Set(from._internal_shorttitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.seriestitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriestitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seriestitle()) {
    _this->_impl_.seriestitle_.Set(from._internal_seriestitle(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.numberofpages_, &from._impl_.numberofpages_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.booktype_) -
    reinterpret_cast<char*>(&_impl_.numberofpages_)) + sizeof(_impl_.booktype_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.BookDetails)
}

inline void BookDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publisher_){}
    , decltype(_impl_.publicationdate_){}
    , decltype(_impl_.isbn_){}
    , decltype(_impl_.abouttheauthor_){}
    , decltype(_impl_.seriesline_){}
    , decltype(_impl_.concisetitle_){}
    , decltype(_impl_.shorttitle_){}
    , decltype(_impl_.seriestitle_){}
    , decltype(_impl_.numberofpages_){0}
    , decltype(_impl_.booktype_){0}
  };
  _impl_.publisher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publisher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.publicationdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publicationdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isbn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isbn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abouttheauthor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abouttheauthor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.seriesline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriesline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.concisetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concisetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shorttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shorttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.seriestitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriestitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookDetails::~BookDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.BookDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publisher_.Destroy();
  _impl_.publicationdate_.Destroy();
  _impl_.isbn_.Destroy();
  _impl_.abouttheauthor_.Destroy();
  _impl_.seriesline_.Destroy();
  _impl_.concisetitle_.Destroy();
  _impl_.shorttitle_.Destroy();
  _impl_.seriestitle_.Destroy();
}

void BookDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.BookDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.publisher_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.publicationdate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.isbn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.abouttheauthor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.seriesline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.concisetitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.shorttitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.seriestitle_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.numberofpages_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.booktype_) -
        reinterpret_cast<char*>(&_impl_.numberofpages_)) + sizeof(_impl_.booktype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string publisher = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_publisher();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.publisher");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string publicationDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_publicationdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.publicationDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string isbn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_isbn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.isbn");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 numberOfPages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_numberofpages(&has_bits);
          _impl_.numberofpages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string aboutTheAuthor = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_abouttheauthor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.aboutTheAuthor");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 bookType = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_booktype(&has_bits);
          _impl_.booktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string seriesLine = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_seriesline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.seriesLine");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string conciseTitle = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_concisetitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.conciseTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string shortTitle = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_shorttitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.shortTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string seriesTitle = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_seriestitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookDetails.seriesTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.BookDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string publisher = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_publisher().data(), static_cast<int>(this->_internal_publisher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.publisher");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_publisher(), target);
  }

  // optional string publicationDate = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_publicationdate().data(), static_cast<int>(this->_internal_publicationdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.publicationDate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_publicationdate(), target);
  }

  // optional string isbn = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_isbn().data(), static_cast<int>(this->_internal_isbn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.isbn");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_isbn(), target);
  }

  // optional int32 numberOfPages = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_numberofpages(), target);
  }

  // optional string aboutTheAuthor = 17;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abouttheauthor().data(), static_cast<int>(this->_internal_abouttheauthor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.aboutTheAuthor");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_abouttheauthor(), target);
  }

  // optional int32 bookType = 27;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_booktype(), target);
  }

  // optional string seriesLine = 28;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seriesline().data(), static_cast<int>(this->_internal_seriesline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.seriesLine");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_seriesline(), target);
  }

  // optional string conciseTitle = 29;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_concisetitle().data(), static_cast<int>(this->_internal_concisetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.conciseTitle");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_concisetitle(), target);
  }

  // optional string shortTitle = 30;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shorttitle().data(), static_cast<int>(this->_internal_shorttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.shortTitle");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_shorttitle(), target);
  }

  // optional string seriesTitle = 31;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seriestitle().data(), static_cast<int>(this->_internal_seriestitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookDetails.seriesTitle");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_seriestitle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.BookDetails)
  return target;
}

size_t BookDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.BookDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string publisher = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_publisher());
    }

    // optional string publicationDate = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_publicationdate());
    }

    // optional string isbn = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_isbn());
    }

    // optional string aboutTheAuthor = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abouttheauthor());
    }

    // optional string seriesLine = 28;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seriesline());
    }

    // optional string conciseTitle = 29;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_concisetitle());
    }

    // optional string shortTitle = 30;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shorttitle());
    }

    // optional string seriesTitle = 31;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seriestitle());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 numberOfPages = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numberofpages());
    }

    // optional int32 bookType = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_booktype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookDetails::GetClassData() const { return &_class_data_; }


void BookDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookDetails*>(&to_msg);
  auto& from = static_cast<const BookDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.BookDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_publisher(from._internal_publisher());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_publicationdate(from._internal_publicationdate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_isbn(from._internal_isbn());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_abouttheauthor(from._internal_abouttheauthor());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_seriesline(from._internal_seriesline());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_concisetitle(from._internal_concisetitle());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_shorttitle(from._internal_shorttitle());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_seriestitle(from._internal_seriestitle());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.numberofpages_ = from._impl_.numberofpages_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.booktype_ = from._impl_.booktype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookDetails::CopyFrom(const BookDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.BookDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookDetails::IsInitialized() const {
  return true;
}

void BookDetails::InternalSwap(BookDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publisher_, lhs_arena,
      &other->_impl_.publisher_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publicationdate_, lhs_arena,
      &other->_impl_.publicationdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isbn_, lhs_arena,
      &other->_impl_.isbn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abouttheauthor_, lhs_arena,
      &other->_impl_.abouttheauthor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seriesline_, lhs_arena,
      &other->_impl_.seriesline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concisetitle_, lhs_arena,
      &other->_impl_.concisetitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shorttitle_, lhs_arena,
      &other->_impl_.shorttitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seriestitle_, lhs_arena,
      &other->_impl_.seriestitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookDetails, _impl_.booktype_)
      + sizeof(BookDetails::_impl_.booktype_)
      - PROTOBUF_FIELD_OFFSET(BookDetails, _impl_.numberofpages_)>(
          reinterpret_cast<char*>(&_impl_.numberofpages_),
          reinterpret_cast<char*>(&other->_impl_.numberofpages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BookDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[29]);
}

// ===================================================================

class VideoDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoDetails>()._impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_releasedate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contentrating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_likes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dislikes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VideoDetails::VideoDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.VideoDetails)
}
VideoDetails::VideoDetails(const VideoDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.credit_){from._impl_.credit_}
    , decltype(_impl_.genre_){from._impl_.genre_}
    , decltype(_impl_.trailer_){from._impl_.trailer_}
    , decltype(_impl_.rentalterm_){from._impl_.rentalterm_}
    , decltype(_impl_.audiolanguage_){from._impl_.audiolanguage_}
    , decltype(_impl_.captionlanguage_){from._impl_.captionlanguage_}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.contentrating_){}
    , decltype(_impl_.likes_){}
    , decltype(_impl_.dislikes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_duration()) {
    _this->_impl_.duration_.Set(from._internal_duration(), 
      _this->GetArenaForAllocation());
  }
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_releasedate()) {
    _this->_impl_.releasedate_.Set(from._internal_releasedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contentrating_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentrating_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contentrating()) {
    _this->_impl_.contentrating_.Set(from._internal_contentrating(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.likes_, &from._impl_.likes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dislikes_) -
    reinterpret_cast<char*>(&_impl_.likes_)) + sizeof(_impl_.dislikes_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.VideoDetails)
}

inline void VideoDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.credit_){arena}
    , decltype(_impl_.genre_){arena}
    , decltype(_impl_.trailer_){arena}
    , decltype(_impl_.rentalterm_){arena}
    , decltype(_impl_.audiolanguage_){arena}
    , decltype(_impl_.captionlanguage_){arena}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.contentrating_){}
    , decltype(_impl_.likes_){int64_t{0}}
    , decltype(_impl_.dislikes_){int64_t{0}}
  };
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contentrating_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentrating_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoDetails::~VideoDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.VideoDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.credit_.~RepeatedPtrField();
  _impl_.genre_.~RepeatedPtrField();
  _impl_.trailer_.~RepeatedPtrField();
  _impl_.rentalterm_.~RepeatedPtrField();
  _impl_.audiolanguage_.~RepeatedPtrField();
  _impl_.captionlanguage_.~RepeatedPtrField();
  _impl_.duration_.Destroy();
  _impl_.releasedate_.Destroy();
  _impl_.contentrating_.Destroy();
}

void VideoDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.VideoDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.credit_.Clear();
  _impl_.genre_.Clear();
  _impl_.trailer_.Clear();
  _impl_.rentalterm_.Clear();
  _impl_.audiolanguage_.Clear();
  _impl_.captionlanguage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.releasedate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.contentrating_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.likes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dislikes_) -
        reinterpret_cast<char*>(&_impl_.likes_)) + sizeof(_impl_.dislikes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.document.VideoCredit credit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_credit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_duration();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoDetails.duration");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string releaseDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_releasedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoDetails.releaseDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string contentRating = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contentrating();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoDetails.contentRating");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 likes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_likes(&has_bits);
          _impl_.likes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 dislikes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_dislikes(&has_bits);
          _impl_.dislikes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string genre = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_genre();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoDetails.genre");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.Trailer trailer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trailer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.VideoRentalTerm rentalTerm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rentalterm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string audioLanguage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiolanguage();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoDetails.audioLanguage");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string captionLanguage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_captionlanguage();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoDetails.captionLanguage");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.VideoDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.VideoCredit credit = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_credit_size()); i < n; i++) {
    const auto& repfield = this->_internal_credit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string duration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoDetails.duration");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_duration(), target);
  }

  // optional string releaseDate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_releasedate().data(), static_cast<int>(this->_internal_releasedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoDetails.releaseDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_releasedate(), target);
  }

  // optional string contentRating = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contentrating().data(), static_cast<int>(this->_internal_contentrating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoDetails.contentRating");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_contentrating(), target);
  }

  // optional int64 likes = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_likes(), target);
  }

  // optional int64 dislikes = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_dislikes(), target);
  }

  // repeated string genre = 7;
  for (int i = 0, n = this->_internal_genre_size(); i < n; i++) {
    const auto& s = this->_internal_genre(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoDetails.genre");
    target = stream->WriteString(7, s, target);
  }

  // repeated .playapi.proto.finsky.document.Trailer trailer = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trailer_size()); i < n; i++) {
    const auto& repfield = this->_internal_trailer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.document.VideoRentalTerm rentalTerm = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rentalterm_size()); i < n; i++) {
    const auto& repfield = this->_internal_rentalterm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string audioLanguage = 10;
  for (int i = 0, n = this->_internal_audiolanguage_size(); i < n; i++) {
    const auto& s = this->_internal_audiolanguage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoDetails.audioLanguage");
    target = stream->WriteString(10, s, target);
  }

  // repeated string captionLanguage = 11;
  for (int i = 0, n = this->_internal_captionlanguage_size(); i < n; i++) {
    const auto& s = this->_internal_captionlanguage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoDetails.captionLanguage");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.VideoDetails)
  return target;
}

size_t VideoDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.VideoDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.VideoCredit credit = 1;
  total_size += 1UL * this->_internal_credit_size();
  for (const auto& msg : this->_impl_.credit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string genre = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.genre_.size());
  for (int i = 0, n = _impl_.genre_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.genre_.Get(i));
  }

  // repeated .playapi.proto.finsky.document.Trailer trailer = 8;
  total_size += 1UL * this->_internal_trailer_size();
  for (const auto& msg : this->_impl_.trailer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.document.VideoRentalTerm rentalTerm = 9;
  total_size += 1UL * this->_internal_rentalterm_size();
  for (const auto& msg : this->_impl_.rentalterm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string audioLanguage = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audiolanguage_.size());
  for (int i = 0, n = _impl_.audiolanguage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audiolanguage_.Get(i));
  }

  // repeated string captionLanguage = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.captionlanguage_.size());
  for (int i = 0, n = _impl_.captionlanguage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.captionlanguage_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string duration = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string releaseDate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_releasedate());
    }

    // optional string contentRating = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentrating());
    }

    // optional int64 likes = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_likes());
    }

    // optional int64 dislikes = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dislikes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoDetails::GetClassData() const { return &_class_data_; }


void VideoDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoDetails*>(&to_msg);
  auto& from = static_cast<const VideoDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.VideoDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.credit_.MergeFrom(from._impl_.credit_);
  _this->_impl_.genre_.MergeFrom(from._impl_.genre_);
  _this->_impl_.trailer_.MergeFrom(from._impl_.trailer_);
  _this->_impl_.rentalterm_.MergeFrom(from._impl_.rentalterm_);
  _this->_impl_.audiolanguage_.MergeFrom(from._impl_.audiolanguage_);
  _this->_impl_.captionlanguage_.MergeFrom(from._impl_.captionlanguage_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_releasedate(from._internal_releasedate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_contentrating(from._internal_contentrating());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.likes_ = from._impl_.likes_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dislikes_ = from._impl_.dislikes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoDetails::CopyFrom(const VideoDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.VideoDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDetails::IsInitialized() const {
  return true;
}

void VideoDetails::InternalSwap(VideoDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.credit_.InternalSwap(&other->_impl_.credit_);
  _impl_.genre_.InternalSwap(&other->_impl_.genre_);
  _impl_.trailer_.InternalSwap(&other->_impl_.trailer_);
  _impl_.rentalterm_.InternalSwap(&other->_impl_.rentalterm_);
  _impl_.audiolanguage_.InternalSwap(&other->_impl_.audiolanguage_);
  _impl_.captionlanguage_.InternalSwap(&other->_impl_.captionlanguage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_, lhs_arena,
      &other->_impl_.duration_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.releasedate_, lhs_arena,
      &other->_impl_.releasedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contentrating_, lhs_arena,
      &other->_impl_.contentrating_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoDetails, _impl_.dislikes_)
      + sizeof(VideoDetails::_impl_.dislikes_)
      - PROTOBUF_FIELD_OFFSET(VideoDetails, _impl_.likes_)>(
          reinterpret_cast<char*>(&_impl_.likes_),
          reinterpret_cast<char*>(&other->_impl_.likes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[30]);
}

// ===================================================================

class VideoCredit::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoCredit>()._impl_._has_bits_);
  static void set_has_credittype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_credit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VideoCredit::VideoCredit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.VideoCredit)
}
VideoCredit::VideoCredit(const VideoCredit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoCredit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){from._impl_.name_}
    , decltype(_impl_.credit_){}
    , decltype(_impl_.credittype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.credit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_credit()) {
    _this->_impl_.credit_.Set(from._internal_credit(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.credittype_ = from._impl_.credittype_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.VideoCredit)
}

inline void VideoCredit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){arena}
    , decltype(_impl_.credit_){}
    , decltype(_impl_.credittype_){0}
  };
  _impl_.credit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoCredit::~VideoCredit() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.VideoCredit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoCredit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.~RepeatedPtrField();
  _impl_.credit_.Destroy();
}

void VideoCredit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoCredit::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.VideoCredit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.credit_.ClearNonDefaultToEmpty();
  }
  _impl_.credittype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoCredit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 creditType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_credittype(&has_bits);
          _impl_.credittype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string credit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_credit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoCredit.credit");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoCredit.name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoCredit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.VideoCredit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 creditType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_credittype(), target);
  }

  // optional string credit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_credit().data(), static_cast<int>(this->_internal_credit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoCredit.credit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_credit(), target);
  }

  // repeated string name = 3;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoCredit.name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.VideoCredit)
  return target;
}

size_t VideoCredit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.VideoCredit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.name_.size());
  for (int i = 0, n = _impl_.name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.name_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string credit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_credit());
    }

    // optional int32 creditType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_credittype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoCredit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoCredit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoCredit::GetClassData() const { return &_class_data_; }


void VideoCredit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoCredit*>(&to_msg);
  auto& from = static_cast<const VideoCredit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.VideoCredit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_.MergeFrom(from._impl_.name_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_credit(from._internal_credit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.credittype_ = from._impl_.credittype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoCredit::CopyFrom(const VideoCredit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.VideoCredit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCredit::IsInitialized() const {
  return true;
}

void VideoCredit::InternalSwap(VideoCredit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_.InternalSwap(&other->_impl_.name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.credit_, lhs_arena,
      &other->_impl_.credit_, rhs_arena
  );
  swap(_impl_.credittype_, other->_impl_.credittype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCredit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[31]);
}

// ===================================================================

class Trailer::_Internal {
 public:
  using HasBits = decltype(std::declval<Trailer>()._impl_._has_bits_);
  static void set_has_trailerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thumbnailurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_watchurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Trailer::Trailer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.Trailer)
}
Trailer::Trailer(const Trailer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trailer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trailerid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.thumbnailurl_){}
    , decltype(_impl_.watchurl_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trailerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trailerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trailerid()) {
    _this->_impl_.trailerid_.Set(from._internal_trailerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailurl()) {
    _this->_impl_.thumbnailurl_.Set(from._internal_thumbnailurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.watchurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.watchurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_watchurl()) {
    _this->_impl_.watchurl_.Set(from._internal_watchurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_duration()) {
    _this->_impl_.duration_.Set(from._internal_duration(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.Trailer)
}

inline void Trailer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trailerid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.thumbnailurl_){}
    , decltype(_impl_.watchurl_){}
    , decltype(_impl_.duration_){}
  };
  _impl_.trailerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trailerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.watchurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.watchurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Trailer::~Trailer() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.Trailer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trailer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trailerid_.Destroy();
  _impl_.title_.Destroy();
  _impl_.thumbnailurl_.Destroy();
  _impl_.watchurl_.Destroy();
  _impl_.duration_.Destroy();
}

void Trailer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trailer::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.Trailer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.trailerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.thumbnailurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.watchurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.duration_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trailer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trailerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trailerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Trailer.trailerId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Trailer.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_thumbnailurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Trailer.thumbnailUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string watchUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_watchurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Trailer.watchUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_duration();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Trailer.duration");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trailer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.Trailer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string trailerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trailerid().data(), static_cast<int>(this->_internal_trailerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Trailer.trailerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trailerid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Trailer.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string thumbnailUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailurl().data(), static_cast<int>(this->_internal_thumbnailurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Trailer.thumbnailUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_thumbnailurl(), target);
  }

  // optional string watchUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_watchurl().data(), static_cast<int>(this->_internal_watchurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Trailer.watchUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_watchurl(), target);
  }

  // optional string duration = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Trailer.duration");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.Trailer)
  return target;
}

size_t Trailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.Trailer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trailerId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trailerid());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string thumbnailUrl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailurl());
    }

    // optional string watchUrl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_watchurl());
    }

    // optional string duration = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trailer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trailer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trailer::GetClassData() const { return &_class_data_; }


void Trailer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trailer*>(&to_msg);
  auto& from = static_cast<const Trailer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.Trailer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_trailerid(from._internal_trailerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_thumbnailurl(from._internal_thumbnailurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_watchurl(from._internal_watchurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_duration(from._internal_duration());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trailer::CopyFrom(const Trailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.Trailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trailer::IsInitialized() const {
  return true;
}

void Trailer::InternalSwap(Trailer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trailerid_, lhs_arena,
      &other->_impl_.trailerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailurl_, lhs_arena,
      &other->_impl_.thumbnailurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.watchurl_, lhs_arena,
      &other->_impl_.watchurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.duration_, lhs_arena,
      &other->_impl_.duration_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Trailer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[32]);
}

// ===================================================================

class VideoRentalTerm_Term::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoRentalTerm_Term>()._impl_._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VideoRentalTerm_Term::VideoRentalTerm_Term(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.VideoRentalTerm.Term)
}
VideoRentalTerm_Term::VideoRentalTerm_Term(const VideoRentalTerm_Term& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoRentalTerm_Term* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){}
    , decltype(_impl_.body_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_header()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.VideoRentalTerm.Term)
}

inline void VideoRentalTerm_Term::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){}
    , decltype(_impl_.body_){}
  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoRentalTerm_Term::~VideoRentalTerm_Term() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.VideoRentalTerm.Term)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoRentalTerm_Term::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destroy();
  _impl_.body_.Destroy();
}

void VideoRentalTerm_Term::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoRentalTerm_Term::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.VideoRentalTerm.Term)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoRentalTerm_Term::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoRentalTerm.Term.header");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoRentalTerm.Term.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoRentalTerm_Term::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.VideoRentalTerm.Term)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string header = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoRentalTerm.Term.header");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_header(), target);
  }

  // optional string body = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoRentalTerm.Term.body");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.VideoRentalTerm.Term)
  return target;
}

size_t VideoRentalTerm_Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.VideoRentalTerm.Term)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string header = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header());
    }

    // optional string body = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoRentalTerm_Term::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoRentalTerm_Term::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoRentalTerm_Term::GetClassData() const { return &_class_data_; }


void VideoRentalTerm_Term::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoRentalTerm_Term*>(&to_msg);
  auto& from = static_cast<const VideoRentalTerm_Term&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.VideoRentalTerm.Term)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoRentalTerm_Term::CopyFrom(const VideoRentalTerm_Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.VideoRentalTerm.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRentalTerm_Term::IsInitialized() const {
  return true;
}

void VideoRentalTerm_Term::InternalSwap(VideoRentalTerm_Term* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRentalTerm_Term::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[33]);
}

// ===================================================================

class VideoRentalTerm::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoRentalTerm>()._impl_._has_bits_);
  static void set_has_offertype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offerabbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rentalheader(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VideoRentalTerm::VideoRentalTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.VideoRentalTerm)
}
VideoRentalTerm::VideoRentalTerm(const VideoRentalTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoRentalTerm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.term_){from._impl_.term_}
    , decltype(_impl_.offerabbreviation_){}
    , decltype(_impl_.rentalheader_){}
    , decltype(_impl_.offertype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.offerabbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offerabbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_offerabbreviation()) {
    _this->_impl_.offerabbreviation_.Set(from._internal_offerabbreviation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rentalheader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rentalheader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rentalheader()) {
    _this->_impl_.rentalheader_.Set(from._internal_rentalheader(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.offertype_ = from._impl_.offertype_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.VideoRentalTerm)
}

inline void VideoRentalTerm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.term_){arena}
    , decltype(_impl_.offerabbreviation_){}
    , decltype(_impl_.rentalheader_){}
    , decltype(_impl_.offertype_){0}
  };
  _impl_.offerabbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offerabbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rentalheader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rentalheader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoRentalTerm::~VideoRentalTerm() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.VideoRentalTerm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoRentalTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.term_.~RepeatedPtrField();
  _impl_.offerabbreviation_.Destroy();
  _impl_.rentalheader_.Destroy();
}

void VideoRentalTerm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoRentalTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.VideoRentalTerm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.term_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.offerabbreviation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.rentalheader_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.offertype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoRentalTerm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 offerType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offertype(&has_bits);
          _impl_.offertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string offerAbbreviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_offerabbreviation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoRentalTerm.offerAbbreviation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rentalHeader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rentalheader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.VideoRentalTerm.rentalHeader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated group Term = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 35)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_term(), ptr, 35);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<35>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoRentalTerm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.VideoRentalTerm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 offerType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_offertype(), target);
  }

  // optional string offerAbbreviation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_offerabbreviation().data(), static_cast<int>(this->_internal_offerabbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoRentalTerm.offerAbbreviation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_offerabbreviation(), target);
  }

  // optional string rentalHeader = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rentalheader().data(), static_cast<int>(this->_internal_rentalheader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.VideoRentalTerm.rentalHeader");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rentalheader(), target);
  }

  // repeated group Term = 4 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_term_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(4, this->_internal_term(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.VideoRentalTerm)
  return target;
}

size_t VideoRentalTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.VideoRentalTerm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Term = 4 { ... };
  total_size += 2UL * this->_internal_term_size();
  for (const auto& msg : this->_impl_.term_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string offerAbbreviation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_offerabbreviation());
    }

    // optional string rentalHeader = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rentalheader());
    }

    // optional int32 offerType = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offertype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoRentalTerm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoRentalTerm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoRentalTerm::GetClassData() const { return &_class_data_; }


void VideoRentalTerm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoRentalTerm*>(&to_msg);
  auto& from = static_cast<const VideoRentalTerm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.VideoRentalTerm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.term_.MergeFrom(from._impl_.term_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_offerabbreviation(from._internal_offerabbreviation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_rentalheader(from._internal_rentalheader());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offertype_ = from._impl_.offertype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoRentalTerm::CopyFrom(const VideoRentalTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.VideoRentalTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRentalTerm::IsInitialized() const {
  return true;
}

void VideoRentalTerm::InternalSwap(VideoRentalTerm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.term_.InternalSwap(&other->_impl_.term_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offerabbreviation_, lhs_arena,
      &other->_impl_.offerabbreviation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rentalheader_, lhs_arena,
      &other->_impl_.rentalheader_, rhs_arena
  );
  swap(_impl_.offertype_, other->_impl_.offertype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRentalTerm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[34]);
}

// ===================================================================

class SubscriptionDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionDetails>()._impl_._has_bits_);
  static void set_has_subscriptionperiod(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubscriptionDetails::SubscriptionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.SubscriptionDetails)
}
SubscriptionDetails::SubscriptionDetails(const SubscriptionDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscriptionperiod_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subscriptionperiod_ = from._impl_.subscriptionperiod_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.SubscriptionDetails)
}

inline void SubscriptionDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscriptionperiod_){0}
  };
}

SubscriptionDetails::~SubscriptionDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.SubscriptionDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscriptionDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.SubscriptionDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriptionperiod_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 subscriptionPeriod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_subscriptionperiod(&has_bits);
          _impl_.subscriptionperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.SubscriptionDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 subscriptionPeriod = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_subscriptionperiod(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.SubscriptionDetails)
  return target;
}

size_t SubscriptionDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.SubscriptionDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 subscriptionPeriod = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subscriptionperiod());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionDetails::GetClassData() const { return &_class_data_; }


void SubscriptionDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionDetails*>(&to_msg);
  auto& from = static_cast<const SubscriptionDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.SubscriptionDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscriptionperiod()) {
    _this->_internal_set_subscriptionperiod(from._internal_subscriptionperiod());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionDetails::CopyFrom(const SubscriptionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.SubscriptionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionDetails::IsInitialized() const {
  return true;
}

void SubscriptionDetails::InternalSwap(SubscriptionDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.subscriptionperiod_, other->_impl_.subscriptionperiod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[35]);
}

// ===================================================================

class MagazineDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<MagazineDetails>()._impl_._has_bits_);
  static void set_has_parentdetailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceavailabilitydescriptionhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_psvdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deliveryfrequencydescription(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MagazineDetails::MagazineDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.MagazineDetails)
}
MagazineDetails::MagazineDetails(const MagazineDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MagazineDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentdetailsurl_){}
    , decltype(_impl_.deviceavailabilitydescriptionhtml_){}
    , decltype(_impl_.psvdescription_){}
    , decltype(_impl_.deliveryfrequencydescription_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parentdetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentdetailsurl()) {
    _this->_impl_.parentdetailsurl_.Set(from._internal_parentdetailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceavailabilitydescriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceavailabilitydescriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deviceavailabilitydescriptionhtml()) {
    _this->_impl_.deviceavailabilitydescriptionhtml_.Set(from._internal_deviceavailabilitydescriptionhtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.psvdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.psvdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_psvdescription()) {
    _this->_impl_.psvdescription_.Set(from._internal_psvdescription(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deliveryfrequencydescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deliveryfrequencydescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deliveryfrequencydescription()) {
    _this->_impl_.deliveryfrequencydescription_.Set(from._internal_deliveryfrequencydescription(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.MagazineDetails)
}

inline void MagazineDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentdetailsurl_){}
    , decltype(_impl_.deviceavailabilitydescriptionhtml_){}
    , decltype(_impl_.psvdescription_){}
    , decltype(_impl_.deliveryfrequencydescription_){}
  };
  _impl_.parentdetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceavailabilitydescriptionhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceavailabilitydescriptionhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.psvdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.psvdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deliveryfrequencydescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deliveryfrequencydescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MagazineDetails::~MagazineDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.MagazineDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MagazineDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parentdetailsurl_.Destroy();
  _impl_.deviceavailabilitydescriptionhtml_.Destroy();
  _impl_.psvdescription_.Destroy();
  _impl_.deliveryfrequencydescription_.Destroy();
}

void MagazineDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MagazineDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.MagazineDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parentdetailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.deviceavailabilitydescriptionhtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.psvdescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.deliveryfrequencydescription_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagazineDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string parentDetailsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parentdetailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MagazineDetails.parentDetailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deviceAvailabilityDescriptionHtml = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceavailabilitydescriptionhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MagazineDetails.deviceAvailabilityDescriptionHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string psvDescription = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_psvdescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MagazineDetails.psvDescription");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deliveryFrequencyDescription = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deliveryfrequencydescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.MagazineDetails.deliveryFrequencyDescription");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MagazineDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.MagazineDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string parentDetailsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentdetailsurl().data(), static_cast<int>(this->_internal_parentdetailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MagazineDetails.parentDetailsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parentdetailsurl(), target);
  }

  // optional string deviceAvailabilityDescriptionHtml = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deviceavailabilitydescriptionhtml().data(), static_cast<int>(this->_internal_deviceavailabilitydescriptionhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MagazineDetails.deviceAvailabilityDescriptionHtml");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceavailabilitydescriptionhtml(), target);
  }

  // optional string psvDescription = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_psvdescription().data(), static_cast<int>(this->_internal_psvdescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MagazineDetails.psvDescription");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_psvdescription(), target);
  }

  // optional string deliveryFrequencyDescription = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deliveryfrequencydescription().data(), static_cast<int>(this->_internal_deliveryfrequencydescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.MagazineDetails.deliveryFrequencyDescription");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deliveryfrequencydescription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.MagazineDetails)
  return target;
}

size_t MagazineDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.MagazineDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string parentDetailsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentdetailsurl());
    }

    // optional string deviceAvailabilityDescriptionHtml = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceavailabilitydescriptionhtml());
    }

    // optional string psvDescription = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_psvdescription());
    }

    // optional string deliveryFrequencyDescription = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deliveryfrequencydescription());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MagazineDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MagazineDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MagazineDetails::GetClassData() const { return &_class_data_; }


void MagazineDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MagazineDetails*>(&to_msg);
  auto& from = static_cast<const MagazineDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.MagazineDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_parentdetailsurl(from._internal_parentdetailsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_deviceavailabilitydescriptionhtml(from._internal_deviceavailabilitydescriptionhtml());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_psvdescription(from._internal_psvdescription());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_deliveryfrequencydescription(from._internal_deliveryfrequencydescription());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MagazineDetails::CopyFrom(const MagazineDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.MagazineDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagazineDetails::IsInitialized() const {
  return true;
}

void MagazineDetails::InternalSwap(MagazineDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentdetailsurl_, lhs_arena,
      &other->_impl_.parentdetailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceavailabilitydescriptionhtml_, lhs_arena,
      &other->_impl_.deviceavailabilitydescriptionhtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.psvdescription_, lhs_arena,
      &other->_impl_.psvdescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deliveryfrequencydescription_, lhs_arena,
      &other->_impl_.deliveryfrequencydescription_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MagazineDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[36]);
}

// ===================================================================

class TvShowDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TvShowDetails>()._impl_._has_bits_);
  static void set_has_seasoncount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startyear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endyear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TvShowDetails::TvShowDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.TvShowDetails)
}
TvShowDetails::TvShowDetails(const TvShowDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TvShowDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.seasoncount_){}
    , decltype(_impl_.startyear_){}
    , decltype(_impl_.endyear_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcaster()) {
    _this->_impl_.broadcaster_.Set(from._internal_broadcaster(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.seasoncount_, &from._impl_.seasoncount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endyear_) -
    reinterpret_cast<char*>(&_impl_.seasoncount_)) + sizeof(_impl_.endyear_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.TvShowDetails)
}

inline void TvShowDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.seasoncount_){0}
    , decltype(_impl_.startyear_){0}
    , decltype(_impl_.endyear_){0}
  };
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TvShowDetails::~TvShowDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.TvShowDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TvShowDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broadcaster_.Destroy();
}

void TvShowDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TvShowDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.TvShowDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.broadcaster_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.seasoncount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.endyear_) -
        reinterpret_cast<char*>(&_impl_.seasoncount_)) + sizeof(_impl_.endyear_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TvShowDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 seasonCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seasoncount(&has_bits);
          _impl_.seasoncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 startYear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_startyear(&has_bits);
          _impl_.startyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 endYear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_endyear(&has_bits);
          _impl_.endyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string broadcaster = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_broadcaster();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.TvShowDetails.broadcaster");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TvShowDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.TvShowDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 seasonCount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seasoncount(), target);
  }

  // optional int32 startYear = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_startyear(), target);
  }

  // optional int32 endYear = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_endyear(), target);
  }

  // optional string broadcaster = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcaster().data(), static_cast<int>(this->_internal_broadcaster().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.TvShowDetails.broadcaster");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_broadcaster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.TvShowDetails)
  return target;
}

size_t TvShowDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.TvShowDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string broadcaster = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcaster());
    }

    // optional int32 seasonCount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seasoncount());
    }

    // optional int32 startYear = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_startyear());
    }

    // optional int32 endYear = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_endyear());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TvShowDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TvShowDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TvShowDetails::GetClassData() const { return &_class_data_; }


void TvShowDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TvShowDetails*>(&to_msg);
  auto& from = static_cast<const TvShowDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.TvShowDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_broadcaster(from._internal_broadcaster());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.seasoncount_ = from._impl_.seasoncount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.startyear_ = from._impl_.startyear_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.endyear_ = from._impl_.endyear_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TvShowDetails::CopyFrom(const TvShowDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.TvShowDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TvShowDetails::IsInitialized() const {
  return true;
}

void TvShowDetails::InternalSwap(TvShowDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcaster_, lhs_arena,
      &other->_impl_.broadcaster_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TvShowDetails, _impl_.endyear_)
      + sizeof(TvShowDetails::_impl_.endyear_)
      - PROTOBUF_FIELD_OFFSET(TvShowDetails, _impl_.seasoncount_)>(
          reinterpret_cast<char*>(&_impl_.seasoncount_),
          reinterpret_cast<char*>(&other->_impl_.seasoncount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TvShowDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[37]);
}

// ===================================================================

class TvSeasonDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TvSeasonDetails>()._impl_._has_bits_);
  static void set_has_parentdetailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seasonindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_releasedate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_episodecount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_expectedepisodecount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inprogress(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TvSeasonDetails::TvSeasonDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.TvSeasonDetails)
}
TvSeasonDetails::TvSeasonDetails(const TvSeasonDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TvSeasonDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentdetailsurl_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.seasonindex_){}
    , decltype(_impl_.episodecount_){}
    , decltype(_impl_.expectedepisodecount_){}
    , decltype(_impl_.inprogress_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parentdetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentdetailsurl()) {
    _this->_impl_.parentdetailsurl_.Set(from._internal_parentdetailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_releasedate()) {
    _this->_impl_.releasedate_.Set(from._internal_releasedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcaster()) {
    _this->_impl_.broadcaster_.Set(from._internal_broadcaster(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.seasonindex_, &from._impl_.seasonindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inprogress_) -
    reinterpret_cast<char*>(&_impl_.seasonindex_)) + sizeof(_impl_.inprogress_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.TvSeasonDetails)
}

inline void TvSeasonDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentdetailsurl_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.broadcaster_){}
    , decltype(_impl_.seasonindex_){0}
    , decltype(_impl_.episodecount_){0}
    , decltype(_impl_.expectedepisodecount_){0}
    , decltype(_impl_.inprogress_){false}
  };
  _impl_.parentdetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcaster_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcaster_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TvSeasonDetails::~TvSeasonDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.TvSeasonDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TvSeasonDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parentdetailsurl_.Destroy();
  _impl_.releasedate_.Destroy();
  _impl_.broadcaster_.Destroy();
}

void TvSeasonDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TvSeasonDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.TvSeasonDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parentdetailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.releasedate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.broadcaster_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.seasonindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inprogress_) -
        reinterpret_cast<char*>(&_impl_.seasonindex_)) + sizeof(_impl_.inprogress_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TvSeasonDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string parentDetailsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parentdetailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.TvSeasonDetails.parentDetailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 seasonIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seasonindex(&has_bits);
          _impl_.seasonindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string releaseDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_releasedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.TvSeasonDetails.releaseDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string broadcaster = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_broadcaster();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.TvSeasonDetails.broadcaster");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 episodeCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_episodecount(&has_bits);
          _impl_.episodecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 expectedEpisodeCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_expectedepisodecount(&has_bits);
          _impl_.expectedepisodecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inProgress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_inprogress(&has_bits);
          _impl_.inprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TvSeasonDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.TvSeasonDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string parentDetailsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentdetailsurl().data(), static_cast<int>(this->_internal_parentdetailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.TvSeasonDetails.parentDetailsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parentdetailsurl(), target);
  }

  // optional int32 seasonIndex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_seasonindex(), target);
  }

  // optional string releaseDate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_releasedate().data(), static_cast<int>(this->_internal_releasedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.TvSeasonDetails.releaseDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_releasedate(), target);
  }

  // optional string broadcaster = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcaster().data(), static_cast<int>(this->_internal_broadcaster().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.TvSeasonDetails.broadcaster");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_broadcaster(), target);
  }

  // optional int32 episodeCount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_episodecount(), target);
  }

  // optional int32 expectedEpisodeCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_expectedepisodecount(), target);
  }

  // optional bool inProgress = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_inprogress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.TvSeasonDetails)
  return target;
}

size_t TvSeasonDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.TvSeasonDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string parentDetailsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentdetailsurl());
    }

    // optional string releaseDate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_releasedate());
    }

    // optional string broadcaster = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcaster());
    }

    // optional int32 seasonIndex = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seasonindex());
    }

    // optional int32 episodeCount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_episodecount());
    }

    // optional int32 expectedEpisodeCount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expectedepisodecount());
    }

    // optional bool inProgress = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TvSeasonDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TvSeasonDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TvSeasonDetails::GetClassData() const { return &_class_data_; }


void TvSeasonDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TvSeasonDetails*>(&to_msg);
  auto& from = static_cast<const TvSeasonDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.TvSeasonDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_parentdetailsurl(from._internal_parentdetailsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_releasedate(from._internal_releasedate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_broadcaster(from._internal_broadcaster());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seasonindex_ = from._impl_.seasonindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.episodecount_ = from._impl_.episodecount_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.expectedepisodecount_ = from._impl_.expectedepisodecount_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.inprogress_ = from._impl_.inprogress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TvSeasonDetails::CopyFrom(const TvSeasonDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.TvSeasonDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TvSeasonDetails::IsInitialized() const {
  return true;
}

void TvSeasonDetails::InternalSwap(TvSeasonDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentdetailsurl_, lhs_arena,
      &other->_impl_.parentdetailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.releasedate_, lhs_arena,
      &other->_impl_.releasedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcaster_, lhs_arena,
      &other->_impl_.broadcaster_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TvSeasonDetails, _impl_.inprogress_)
      + sizeof(TvSeasonDetails::_impl_.inprogress_)
      - PROTOBUF_FIELD_OFFSET(TvSeasonDetails, _impl_.seasonindex_)>(
          reinterpret_cast<char*>(&_impl_.seasonindex_),
          reinterpret_cast<char*>(&other->_impl_.seasonindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TvSeasonDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[38]);
}

// ===================================================================

class TvEpisodeDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TvEpisodeDetails>()._impl_._has_bits_);
  static void set_has_parentdetailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_episodeindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_releasedate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TvEpisodeDetails::TvEpisodeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.TvEpisodeDetails)
}
TvEpisodeDetails::TvEpisodeDetails(const TvEpisodeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TvEpisodeDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentdetailsurl_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.episodeindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parentdetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentdetailsurl()) {
    _this->_impl_.parentdetailsurl_.Set(from._internal_parentdetailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_releasedate()) {
    _this->_impl_.releasedate_.Set(from._internal_releasedate(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.episodeindex_ = from._impl_.episodeindex_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.TvEpisodeDetails)
}

inline void TvEpisodeDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentdetailsurl_){}
    , decltype(_impl_.releasedate_){}
    , decltype(_impl_.episodeindex_){0}
  };
  _impl_.parentdetailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdetailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.releasedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.releasedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TvEpisodeDetails::~TvEpisodeDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.TvEpisodeDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TvEpisodeDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parentdetailsurl_.Destroy();
  _impl_.releasedate_.Destroy();
}

void TvEpisodeDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TvEpisodeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.TvEpisodeDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parentdetailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.releasedate_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.episodeindex_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TvEpisodeDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string parentDetailsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parentdetailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.TvEpisodeDetails.parentDetailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 episodeIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_episodeindex(&has_bits);
          _impl_.episodeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string releaseDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_releasedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.TvEpisodeDetails.releaseDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TvEpisodeDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.TvEpisodeDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string parentDetailsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentdetailsurl().data(), static_cast<int>(this->_internal_parentdetailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.TvEpisodeDetails.parentDetailsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parentdetailsurl(), target);
  }

  // optional int32 episodeIndex = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_episodeindex(), target);
  }

  // optional string releaseDate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_releasedate().data(), static_cast<int>(this->_internal_releasedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.TvEpisodeDetails.releaseDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_releasedate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.TvEpisodeDetails)
  return target;
}

size_t TvEpisodeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.TvEpisodeDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string parentDetailsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentdetailsurl());
    }

    // optional string releaseDate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_releasedate());
    }

    // optional int32 episodeIndex = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_episodeindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TvEpisodeDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TvEpisodeDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TvEpisodeDetails::GetClassData() const { return &_class_data_; }


void TvEpisodeDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TvEpisodeDetails*>(&to_msg);
  auto& from = static_cast<const TvEpisodeDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.TvEpisodeDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_parentdetailsurl(from._internal_parentdetailsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_releasedate(from._internal_releasedate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.episodeindex_ = from._impl_.episodeindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TvEpisodeDetails::CopyFrom(const TvEpisodeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.TvEpisodeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TvEpisodeDetails::IsInitialized() const {
  return true;
}

void TvEpisodeDetails::InternalSwap(TvEpisodeDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentdetailsurl_, lhs_arena,
      &other->_impl_.parentdetailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.releasedate_, lhs_arena,
      &other->_impl_.releasedate_, rhs_arena
  );
  swap(_impl_.episodeindex_, other->_impl_.episodeindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TvEpisodeDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[39]);
}

// ===================================================================

class PersonDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PersonDetails>()._impl_._has_bits_);
  static void set_has_personisrequester(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isgplususer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PersonDetails::PersonDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.PersonDetails)
}
PersonDetails::PersonDetails(const PersonDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersonDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.personisrequester_){}
    , decltype(_impl_.isgplususer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.personisrequester_, &from._impl_.personisrequester_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isgplususer_) -
    reinterpret_cast<char*>(&_impl_.personisrequester_)) + sizeof(_impl_.isgplususer_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.PersonDetails)
}

inline void PersonDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.personisrequester_){false}
    , decltype(_impl_.isgplususer_){false}
  };
}

PersonDetails::~PersonDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.PersonDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PersonDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PersonDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersonDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.PersonDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.personisrequester_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isgplususer_) -
      reinterpret_cast<char*>(&_impl_.personisrequester_)) + sizeof(_impl_.isgplususer_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool personIsRequester = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_personisrequester(&has_bits);
          _impl_.personisrequester_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isGplusUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_isgplususer(&has_bits);
          _impl_.isgplususer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersonDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.PersonDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool personIsRequester = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_personisrequester(), target);
  }

  // optional bool isGplusUser = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isgplususer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.PersonDetails)
  return target;
}

size_t PersonDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.PersonDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool personIsRequester = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool isGplusUser = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersonDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersonDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersonDetails::GetClassData() const { return &_class_data_; }


void PersonDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersonDetails*>(&to_msg);
  auto& from = static_cast<const PersonDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.PersonDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.personisrequester_ = from._impl_.personisrequester_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.isgplususer_ = from._impl_.isgplususer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersonDetails::CopyFrom(const PersonDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.PersonDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonDetails::IsInitialized() const {
  return true;
}

void PersonDetails::InternalSwap(PersonDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonDetails, _impl_.isgplususer_)
      + sizeof(PersonDetails::_impl_.isgplususer_)
      - PROTOBUF_FIELD_OFFSET(PersonDetails, _impl_.personisrequester_)>(
          reinterpret_cast<char*>(&_impl_.personisrequester_),
          reinterpret_cast<char*>(&other->_impl_.personisrequester_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[40]);
}

// ===================================================================

class TalentDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TalentDetails>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::document::TalentExternalLinks& externallinks(const TalentDetails* msg);
  static void set_has_externallinks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primaryroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::document::TalentExternalLinks&
TalentDetails::_Internal::externallinks(const TalentDetails* msg) {
  return *msg->_impl_.externallinks_;
}
TalentDetails::TalentDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.TalentDetails)
}
TalentDetails::TalentDetails(const TalentDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TalentDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.externallinks_){nullptr}
    , decltype(_impl_.primaryroleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_externallinks()) {
    _this->_impl_.externallinks_ = new ::playapi::proto::finsky::document::TalentExternalLinks(*from._impl_.externallinks_);
  }
  _this->_impl_.primaryroleid_ = from._impl_.primaryroleid_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.TalentDetails)
}

inline void TalentDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.externallinks_){nullptr}
    , decltype(_impl_.primaryroleid_){0}
  };
}

TalentDetails::~TalentDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.TalentDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TalentDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.externallinks_;
}

void TalentDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TalentDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.TalentDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.externallinks_ != nullptr);
    _impl_.externallinks_->Clear();
  }
  _impl_.primaryroleid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TalentDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.document.TalentExternalLinks externalLinks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_externallinks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 primaryRoleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_primaryroleid(&has_bits);
          _impl_.primaryroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TalentDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.TalentDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.document.TalentExternalLinks externalLinks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::externallinks(this),
        _Internal::externallinks(this).GetCachedSize(), target, stream);
  }

  // optional int32 primaryRoleId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_primaryroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.TalentDetails)
  return target;
}

size_t TalentDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.TalentDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.document.TalentExternalLinks externalLinks = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.externallinks_);
    }

    // optional int32 primaryRoleId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_primaryroleid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TalentDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TalentDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TalentDetails::GetClassData() const { return &_class_data_; }


void TalentDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TalentDetails*>(&to_msg);
  auto& from = static_cast<const TalentDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.TalentDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_externallinks()->::playapi::proto::finsky::document::TalentExternalLinks::MergeFrom(
          from._internal_externallinks());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.primaryroleid_ = from._impl_.primaryroleid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TalentDetails::CopyFrom(const TalentDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.TalentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentDetails::IsInitialized() const {
  return true;
}

void TalentDetails::InternalSwap(TalentDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TalentDetails, _impl_.primaryroleid_)
      + sizeof(TalentDetails::_impl_.primaryroleid_)
      - PROTOBUF_FIELD_OFFSET(TalentDetails, _impl_.externallinks_)>(
          reinterpret_cast<char*>(&_impl_.externallinks_),
          reinterpret_cast<char*>(&other->_impl_.externallinks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TalentDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[41]);
}

// ===================================================================

class TalentExternalLinks::_Internal {
 public:
  using HasBits = decltype(std::declval<TalentExternalLinks>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::link::Link& googleplusprofileurl(const TalentExternalLinks* msg);
  static void set_has_googleplusprofileurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::link::Link& youtubechannelurl(const TalentExternalLinks* msg);
  static void set_has_youtubechannelurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::link::Link&
TalentExternalLinks::_Internal::googleplusprofileurl(const TalentExternalLinks* msg) {
  return *msg->_impl_.googleplusprofileurl_;
}
const ::playapi::proto::finsky::link::Link&
TalentExternalLinks::_Internal::youtubechannelurl(const TalentExternalLinks* msg) {
  return *msg->_impl_.youtubechannelurl_;
}
void TalentExternalLinks::clear_websiteurl() {
  _impl_.websiteurl_.Clear();
}
void TalentExternalLinks::clear_googleplusprofileurl() {
  if (_impl_.googleplusprofileurl_ != nullptr) _impl_.googleplusprofileurl_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TalentExternalLinks::clear_youtubechannelurl() {
  if (_impl_.youtubechannelurl_ != nullptr) _impl_.youtubechannelurl_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TalentExternalLinks::TalentExternalLinks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.TalentExternalLinks)
}
TalentExternalLinks::TalentExternalLinks(const TalentExternalLinks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TalentExternalLinks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.websiteurl_){from._impl_.websiteurl_}
    , decltype(_impl_.googleplusprofileurl_){nullptr}
    , decltype(_impl_.youtubechannelurl_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_googleplusprofileurl()) {
    _this->_impl_.googleplusprofileurl_ = new ::playapi::proto::finsky::link::Link(*from._impl_.googleplusprofileurl_);
  }
  if (from._internal_has_youtubechannelurl()) {
    _this->_impl_.youtubechannelurl_ = new ::playapi::proto::finsky::link::Link(*from._impl_.youtubechannelurl_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.TalentExternalLinks)
}

inline void TalentExternalLinks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.websiteurl_){arena}
    , decltype(_impl_.googleplusprofileurl_){nullptr}
    , decltype(_impl_.youtubechannelurl_){nullptr}
  };
}

TalentExternalLinks::~TalentExternalLinks() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.TalentExternalLinks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TalentExternalLinks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.websiteurl_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.googleplusprofileurl_;
  if (this != internal_default_instance()) delete _impl_.youtubechannelurl_;
}

void TalentExternalLinks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TalentExternalLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.TalentExternalLinks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.websiteurl_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.googleplusprofileurl_ != nullptr);
      _impl_.googleplusprofileurl_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.youtubechannelurl_ != nullptr);
      _impl_.youtubechannelurl_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TalentExternalLinks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.link.Link websiteUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_websiteurl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link googlePlusProfileUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_googleplusprofileurl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link youtubeChannelUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_youtubechannelurl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TalentExternalLinks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.TalentExternalLinks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.link.Link websiteUrl = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_websiteurl_size()); i < n; i++) {
    const auto& repfield = this->_internal_websiteurl(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.link.Link googlePlusProfileUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::googleplusprofileurl(this),
        _Internal::googleplusprofileurl(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.link.Link youtubeChannelUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::youtubechannelurl(this),
        _Internal::youtubechannelurl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.TalentExternalLinks)
  return target;
}

size_t TalentExternalLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.TalentExternalLinks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.link.Link websiteUrl = 1;
  total_size += 1UL * this->_internal_websiteurl_size();
  for (const auto& msg : this->_impl_.websiteurl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.link.Link googlePlusProfileUrl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.googleplusprofileurl_);
    }

    // optional .playapi.proto.finsky.link.Link youtubeChannelUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.youtubechannelurl_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TalentExternalLinks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TalentExternalLinks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TalentExternalLinks::GetClassData() const { return &_class_data_; }


void TalentExternalLinks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TalentExternalLinks*>(&to_msg);
  auto& from = static_cast<const TalentExternalLinks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.TalentExternalLinks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.websiteurl_.MergeFrom(from._impl_.websiteurl_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_googleplusprofileurl()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_googleplusprofileurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_youtubechannelurl()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_youtubechannelurl());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TalentExternalLinks::CopyFrom(const TalentExternalLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.TalentExternalLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentExternalLinks::IsInitialized() const {
  return true;
}

void TalentExternalLinks::InternalSwap(TalentExternalLinks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.websiteurl_.InternalSwap(&other->_impl_.websiteurl_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TalentExternalLinks, _impl_.youtubechannelurl_)
      + sizeof(TalentExternalLinks::_impl_.youtubechannelurl_)
      - PROTOBUF_FIELD_OFFSET(TalentExternalLinks, _impl_.googleplusprofileurl_)>(
          reinterpret_cast<char*>(&_impl_.googleplusprofileurl_),
          reinterpret_cast<char*>(&other->_impl_.googleplusprofileurl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TalentExternalLinks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[42]);
}

// ===================================================================

class DeveloperDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<DeveloperDetails>()._impl_._has_bits_);
  static void set_has_websiteurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeveloperDetails::DeveloperDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.DeveloperDetails)
}
DeveloperDetails::DeveloperDetails(const DeveloperDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeveloperDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.websiteurl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.websiteurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.websiteurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_websiteurl()) {
    _this->_impl_.websiteurl_.Set(from._internal_websiteurl(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.DeveloperDetails)
}

inline void DeveloperDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.websiteurl_){}
  };
  _impl_.websiteurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.websiteurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeveloperDetails::~DeveloperDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.DeveloperDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeveloperDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.websiteurl_.Destroy();
}

void DeveloperDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeveloperDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.DeveloperDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.websiteurl_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeveloperDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string websiteUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_websiteurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.DeveloperDetails.websiteUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeveloperDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.DeveloperDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string websiteUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_websiteurl().data(), static_cast<int>(this->_internal_websiteurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.DeveloperDetails.websiteUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_websiteurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.DeveloperDetails)
  return target;
}

size_t DeveloperDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.DeveloperDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string websiteUrl = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_websiteurl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeveloperDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeveloperDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeveloperDetails::GetClassData() const { return &_class_data_; }


void DeveloperDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeveloperDetails*>(&to_msg);
  auto& from = static_cast<const DeveloperDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.DeveloperDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_websiteurl()) {
    _this->_internal_set_websiteurl(from._internal_websiteurl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeveloperDetails::CopyFrom(const DeveloperDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.DeveloperDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeveloperDetails::IsInitialized() const {
  return true;
}

void DeveloperDetails::InternalSwap(DeveloperDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.websiteurl_, lhs_arena,
      &other->_impl_.websiteurl_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeveloperDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[43]);
}

// ===================================================================

class BookSeriesDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<BookSeriesDetails>()._impl_._has_bits_);
  static void set_has_publisher(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seriescomposition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seriescardcomposition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BookSeriesDetails::BookSeriesDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.BookSeriesDetails)
}
BookSeriesDetails::BookSeriesDetails(const BookSeriesDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookSeriesDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publisher_){}
    , decltype(_impl_.seriescomposition_){}
    , decltype(_impl_.seriescardcomposition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publisher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publisher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publisher()) {
    _this->_impl_.publisher_.Set(from._internal_publisher(), 
      _this->GetArenaForAllocation());
  }
  _impl_.seriescomposition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriescomposition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seriescomposition()) {
    _this->_impl_.seriescomposition_.Set(from._internal_seriescomposition(), 
      _this->GetArenaForAllocation());
  }
  _impl_.seriescardcomposition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriescardcomposition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seriescardcomposition()) {
    _this->_impl_.seriescardcomposition_.Set(from._internal_seriescardcomposition(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.BookSeriesDetails)
}

inline void BookSeriesDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publisher_){}
    , decltype(_impl_.seriescomposition_){}
    , decltype(_impl_.seriescardcomposition_){}
  };
  _impl_.publisher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publisher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.seriescomposition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriescomposition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.seriescardcomposition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seriescardcomposition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookSeriesDetails::~BookSeriesDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.BookSeriesDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookSeriesDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publisher_.Destroy();
  _impl_.seriescomposition_.Destroy();
  _impl_.seriescardcomposition_.Destroy();
}

void BookSeriesDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookSeriesDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.BookSeriesDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.publisher_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.seriescomposition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.seriescardcomposition_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookSeriesDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string publisher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publisher();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookSeriesDetails.publisher");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string seriesComposition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seriescomposition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookSeriesDetails.seriesComposition");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string seriesCardComposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_seriescardcomposition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.BookSeriesDetails.seriesCardComposition");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookSeriesDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.BookSeriesDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string publisher = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_publisher().data(), static_cast<int>(this->_internal_publisher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookSeriesDetails.publisher");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_publisher(), target);
  }

  // optional string seriesComposition = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seriescomposition().data(), static_cast<int>(this->_internal_seriescomposition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookSeriesDetails.seriesComposition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_seriescomposition(), target);
  }

  // optional string seriesCardComposition = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seriescardcomposition().data(), static_cast<int>(this->_internal_seriescardcomposition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.BookSeriesDetails.seriesCardComposition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_seriescardcomposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.BookSeriesDetails)
  return target;
}

size_t BookSeriesDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.BookSeriesDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string publisher = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_publisher());
    }

    // optional string seriesComposition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seriescomposition());
    }

    // optional string seriesCardComposition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seriescardcomposition());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookSeriesDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookSeriesDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookSeriesDetails::GetClassData() const { return &_class_data_; }


void BookSeriesDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookSeriesDetails*>(&to_msg);
  auto& from = static_cast<const BookSeriesDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.BookSeriesDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_publisher(from._internal_publisher());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_seriescomposition(from._internal_seriescomposition());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_seriescardcomposition(from._internal_seriescardcomposition());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookSeriesDetails::CopyFrom(const BookSeriesDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.BookSeriesDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookSeriesDetails::IsInitialized() const {
  return true;
}

void BookSeriesDetails::InternalSwap(BookSeriesDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publisher_, lhs_arena,
      &other->_impl_.publisher_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seriescomposition_, lhs_arena,
      &other->_impl_.seriescomposition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seriescardcomposition_, lhs_arena,
      &other->_impl_.seriescardcomposition_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BookSeriesDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[44]);
}

// ===================================================================

class AggregateRating::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregateRating>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starrating(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ratingscount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_onestarratings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_twostarratings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_threestarratings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fourstarratings(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fivestarratings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_thumbsupcount(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_thumbsdowncount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_commentcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bayesianmeanrating(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

AggregateRating::AggregateRating(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.AggregateRating)
}
AggregateRating::AggregateRating(const AggregateRating& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateRating* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tip_){from._impl_.tip_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.starrating_){}
    , decltype(_impl_.ratingscount_){}
    , decltype(_impl_.onestarratings_){}
    , decltype(_impl_.twostarratings_){}
    , decltype(_impl_.threestarratings_){}
    , decltype(_impl_.fourstarratings_){}
    , decltype(_impl_.fivestarratings_){}
    , decltype(_impl_.thumbsupcount_){}
    , decltype(_impl_.thumbsdowncount_){}
    , decltype(_impl_.commentcount_){}
    , decltype(_impl_.bayesianmeanrating_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bayesianmeanrating_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.bayesianmeanrating_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.AggregateRating)
}

inline void AggregateRating::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tip_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.starrating_){0}
    , decltype(_impl_.ratingscount_){int64_t{0}}
    , decltype(_impl_.onestarratings_){int64_t{0}}
    , decltype(_impl_.twostarratings_){int64_t{0}}
    , decltype(_impl_.threestarratings_){int64_t{0}}
    , decltype(_impl_.fourstarratings_){int64_t{0}}
    , decltype(_impl_.fivestarratings_){int64_t{0}}
    , decltype(_impl_.thumbsupcount_){int64_t{0}}
    , decltype(_impl_.thumbsdowncount_){int64_t{0}}
    , decltype(_impl_.commentcount_){int64_t{0}}
    , decltype(_impl_.bayesianmeanrating_){0}
  };
}

AggregateRating::~AggregateRating() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.AggregateRating)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateRating::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tip_.~RepeatedPtrField();
}

void AggregateRating::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateRating::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.AggregateRating)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tip_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fivestarratings_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.fivestarratings_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.thumbsupcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bayesianmeanrating_) -
        reinterpret_cast<char*>(&_impl_.thumbsupcount_)) + sizeof(_impl_.bayesianmeanrating_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRating::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float starRating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_starrating(&has_bits);
          _impl_.starrating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ratingsCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ratingscount(&has_bits);
          _impl_.ratingscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 oneStarRatings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_onestarratings(&has_bits);
          _impl_.onestarratings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 twoStarRatings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_twostarratings(&has_bits);
          _impl_.twostarratings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 threeStarRatings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_threestarratings(&has_bits);
          _impl_.threestarratings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 fourStarRatings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_fourstarratings(&has_bits);
          _impl_.fourstarratings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 fiveStarRatings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fivestarratings(&has_bits);
          _impl_.fivestarratings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 thumbsUpCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_thumbsupcount(&has_bits);
          _impl_.thumbsupcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 thumbsDownCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_thumbsdowncount(&has_bits);
          _impl_.thumbsdowncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 commentCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_commentcount(&has_bits);
          _impl_.commentcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double bayesianMeanRating = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_bayesianmeanrating(&has_bits);
          _impl_.bayesianmeanrating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.AggregateRatingTip tip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRating::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.AggregateRating)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional float starRating = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_starrating(), target);
  }

  // optional int64 ratingsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ratingscount(), target);
  }

  // optional int64 oneStarRatings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_onestarratings(), target);
  }

  // optional int64 twoStarRatings = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_twostarratings(), target);
  }

  // optional int64 threeStarRatings = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_threestarratings(), target);
  }

  // optional int64 fourStarRatings = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_fourstarratings(), target);
  }

  // optional int64 fiveStarRatings = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_fivestarratings(), target);
  }

  // optional int64 thumbsUpCount = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_thumbsupcount(), target);
  }

  // optional int64 thumbsDownCount = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_thumbsdowncount(), target);
  }

  // optional int64 commentCount = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_commentcount(), target);
  }

  // optional double bayesianMeanRating = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_bayesianmeanrating(), target);
  }

  // repeated .playapi.proto.finsky.document.AggregateRatingTip tip = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tip_size()); i < n; i++) {
    const auto& repfield = this->_internal_tip(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.AggregateRating)
  return target;
}

size_t AggregateRating::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.AggregateRating)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.AggregateRatingTip tip = 13;
  total_size += 1UL * this->_internal_tip_size();
  for (const auto& msg : this->_impl_.tip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional float starRating = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int64 ratingsCount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ratingscount());
    }

    // optional int64 oneStarRatings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_onestarratings());
    }

    // optional int64 twoStarRatings = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_twostarratings());
    }

    // optional int64 threeStarRatings = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_threestarratings());
    }

    // optional int64 fourStarRatings = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fourstarratings());
    }

    // optional int64 fiveStarRatings = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fivestarratings());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 thumbsUpCount = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_thumbsupcount());
    }

    // optional int64 thumbsDownCount = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_thumbsdowncount());
    }

    // optional int64 commentCount = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_commentcount());
    }

    // optional double bayesianMeanRating = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRating::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateRating::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRating::GetClassData() const { return &_class_data_; }


void AggregateRating::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateRating*>(&to_msg);
  auto& from = static_cast<const AggregateRating&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.AggregateRating)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tip_.MergeFrom(from._impl_.tip_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.starrating_ = from._impl_.starrating_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ratingscount_ = from._impl_.ratingscount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.onestarratings_ = from._impl_.onestarratings_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.twostarratings_ = from._impl_.twostarratings_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.threestarratings_ = from._impl_.threestarratings_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fourstarratings_ = from._impl_.fourstarratings_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fivestarratings_ = from._impl_.fivestarratings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.thumbsupcount_ = from._impl_.thumbsupcount_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.thumbsdowncount_ = from._impl_.thumbsdowncount_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.commentcount_ = from._impl_.commentcount_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bayesianmeanrating_ = from._impl_.bayesianmeanrating_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRating::CopyFrom(const AggregateRating& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.AggregateRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRating::IsInitialized() const {
  return true;
}

void AggregateRating::InternalSwap(AggregateRating* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tip_.InternalSwap(&other->_impl_.tip_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRating, _impl_.bayesianmeanrating_)
      + sizeof(AggregateRating::_impl_.bayesianmeanrating_)
      - PROTOBUF_FIELD_OFFSET(AggregateRating, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRating::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[45]);
}

// ===================================================================

class AggregateRatingTip::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregateRatingTip>()._impl_._has_bits_);
  static void set_has_tipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_polarity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reviewcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AggregateRatingTip::AggregateRatingTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.AggregateRatingTip)
}
AggregateRatingTip::AggregateRatingTip(const AggregateRatingTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateRatingTip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snippetreviewid_){from._impl_.snippetreviewid_}
    , decltype(_impl_.tipid_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.reviewcount_){}
    , decltype(_impl_.polarity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tipid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tipid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tipid()) {
    _this->_impl_.tipid_.Set(from._internal_tipid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reviewcount_, &from._impl_.reviewcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.polarity_) -
    reinterpret_cast<char*>(&_impl_.reviewcount_)) + sizeof(_impl_.polarity_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.AggregateRatingTip)
}

inline void AggregateRatingTip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snippetreviewid_){arena}
    , decltype(_impl_.tipid_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.reviewcount_){int64_t{0}}
    , decltype(_impl_.polarity_){0}
  };
  _impl_.tipid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tipid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AggregateRatingTip::~AggregateRatingTip() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.AggregateRatingTip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateRatingTip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snippetreviewid_.~RepeatedPtrField();
  _impl_.tipid_.Destroy();
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
}

void AggregateRatingTip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateRatingTip::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.AggregateRatingTip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snippetreviewid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tipid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.reviewcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.polarity_) -
        reinterpret_cast<char*>(&_impl_.reviewcount_)) + sizeof(_impl_.polarity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRatingTip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tipId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tipid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AggregateRatingTip.tipId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AggregateRatingTip.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 polarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_polarity(&has_bits);
          _impl_.polarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 reviewCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reviewcount(&has_bits);
          _impl_.reviewcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AggregateRatingTip.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string snippetReviewId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_snippetreviewid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.AggregateRatingTip.snippetReviewId");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRatingTip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.AggregateRatingTip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tipId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tipid().data(), static_cast<int>(this->_internal_tipid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AggregateRatingTip.tipId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tipid(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AggregateRatingTip.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional int32 polarity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_polarity(), target);
  }

  // optional int64 reviewCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_reviewcount(), target);
  }

  // optional string language = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AggregateRatingTip.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // repeated string snippetReviewId = 6;
  for (int i = 0, n = this->_internal_snippetreviewid_size(); i < n; i++) {
    const auto& s = this->_internal_snippetreviewid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.AggregateRatingTip.snippetReviewId");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.AggregateRatingTip)
  return target;
}

size_t AggregateRatingTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.AggregateRatingTip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string snippetReviewId = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.snippetreviewid_.size());
  for (int i = 0, n = _impl_.snippetreviewid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.snippetreviewid_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string tipId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tipid());
    }

    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string language = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional int64 reviewCount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reviewcount());
    }

    // optional int32 polarity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_polarity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRatingTip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateRatingTip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRatingTip::GetClassData() const { return &_class_data_; }


void AggregateRatingTip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateRatingTip*>(&to_msg);
  auto& from = static_cast<const AggregateRatingTip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.AggregateRatingTip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.snippetreviewid_.MergeFrom(from._impl_.snippetreviewid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tipid(from._internal_tipid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.reviewcount_ = from._impl_.reviewcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.polarity_ = from._impl_.polarity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRatingTip::CopyFrom(const AggregateRatingTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.AggregateRatingTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRatingTip::IsInitialized() const {
  return true;
}

void AggregateRatingTip::InternalSwap(AggregateRatingTip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.snippetreviewid_.InternalSwap(&other->_impl_.snippetreviewid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tipid_, lhs_arena,
      &other->_impl_.tipid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRatingTip, _impl_.polarity_)
      + sizeof(AggregateRatingTip::_impl_.polarity_)
      - PROTOBUF_FIELD_OFFSET(AggregateRatingTip, _impl_.reviewcount_)>(
          reinterpret_cast<char*>(&_impl_.reviewcount_),
          reinterpret_cast<char*>(&other->_impl_.reviewcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRatingTip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[46]);
}

// ===================================================================

class Review::_Internal {
 public:
  using HasBits = decltype(std::declval<Review>()._impl_._has_bits_);
  static void set_has_authorname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_documentversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_starrating(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_commentid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_replytext(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_replytimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::playapi::proto::finsky::document::OBSOLETE_PlusProfile& obsoleteplusprofile(const Review* msg);
  static void set_has_obsoleteplusprofile(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::playapi::proto::finsky::document::DocV2& author(const Review* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::playapi::proto::finsky::Image& sentiment(const Review* msg);
  static void set_has_sentiment(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_helpfulcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_thumbsupcount(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::playapi::proto::finsky::document::OBSOLETE_PlusProfile&
Review::_Internal::obsoleteplusprofile(const Review* msg) {
  return *msg->_impl_.obsoleteplusprofile_;
}
const ::playapi::proto::finsky::document::DocV2&
Review::_Internal::author(const Review* msg) {
  return *msg->_impl_.author_;
}
const ::playapi::proto::finsky::Image&
Review::_Internal::sentiment(const Review* msg) {
  return *msg->_impl_.sentiment_;
}
void Review::clear_sentiment() {
  if (_impl_.sentiment_ != nullptr) _impl_.sentiment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
Review::Review(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.Review)
}
Review::Review(const Review& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Review* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authorname_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.documentversion_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.commentid_){}
    , decltype(_impl_.devicename_){}
    , decltype(_impl_.replytext_){}
    , decltype(_impl_.obsoleteplusprofile_){nullptr}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.sentiment_){nullptr}
    , decltype(_impl_.timestampmsec_){}
    , decltype(_impl_.starrating_){}
    , decltype(_impl_.helpfulcount_){}
    , decltype(_impl_.replytimestampmsec_){}
    , decltype(_impl_.thumbsupcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authorname()) {
    _this->_impl_.authorname_.Set(from._internal_authorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.documentversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.documentversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_documentversion()) {
    _this->_impl_.documentversion_.Set(from._internal_documentversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.commentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_commentid()) {
    _this->_impl_.commentid_.Set(from._internal_commentid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicename()) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.replytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_replytext()) {
    _this->_impl_.replytext_.Set(from._internal_replytext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_obsoleteplusprofile()) {
    _this->_impl_.obsoleteplusprofile_ = new ::playapi::proto::finsky::document::OBSOLETE_PlusProfile(*from._impl_.obsoleteplusprofile_);
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.author_);
  }
  if (from._internal_has_sentiment()) {
    _this->_impl_.sentiment_ = new ::playapi::proto::finsky::Image(*from._impl_.sentiment_);
  }
  ::memcpy(&_impl_.timestampmsec_, &from._impl_.timestampmsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thumbsupcount_) -
    reinterpret_cast<char*>(&_impl_.timestampmsec_)) + sizeof(_impl_.thumbsupcount_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.Review)
}

inline void Review::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authorname_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.documentversion_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.commentid_){}
    , decltype(_impl_.devicename_){}
    , decltype(_impl_.replytext_){}
    , decltype(_impl_.obsoleteplusprofile_){nullptr}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.sentiment_){nullptr}
    , decltype(_impl_.timestampmsec_){int64_t{0}}
    , decltype(_impl_.starrating_){0}
    , decltype(_impl_.helpfulcount_){0}
    , decltype(_impl_.replytimestampmsec_){int64_t{0}}
    , decltype(_impl_.thumbsupcount_){int64_t{0}}
  };
  _impl_.authorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.documentversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.documentversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.replytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Review::~Review() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.Review)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Review::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authorname_.Destroy();
  _impl_.url_.Destroy();
  _impl_.source_.Destroy();
  _impl_.documentversion_.Destroy();
  _impl_.title_.Destroy();
  _impl_.comment_.Destroy();
  _impl_.commentid_.Destroy();
  _impl_.devicename_.Destroy();
  _impl_.replytext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.obsoleteplusprofile_;
  if (this != internal_default_instance()) delete _impl_.author_;
  if (this != internal_default_instance()) delete _impl_.sentiment_;
}

void Review::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Review::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.Review)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.authorname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.documentversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.commentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.replytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.obsoleteplusprofile_ != nullptr);
      _impl_.obsoleteplusprofile_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.author_ != nullptr);
      _impl_.author_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.sentiment_ != nullptr);
      _impl_.sentiment_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.timestampmsec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.replytimestampmsec_) -
        reinterpret_cast<char*>(&_impl_.timestampmsec_)) + sizeof(_impl_.replytimestampmsec_));
  }
  _impl_.thumbsupcount_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Review::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string authorName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.authorName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string documentVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_documentversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.documentVersion");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestampMsec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestampmsec(&has_bits);
          _impl_.timestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 starRating = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_starrating(&has_bits);
          _impl_.starrating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.comment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string commentId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_commentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.commentId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deviceName = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.deviceName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string replyText = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_replytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.Review.replyText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 replyTimestampMsec = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_replytimestampmsec(&has_bits);
          _impl_.replytimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.OBSOLETE_PlusProfile OBSOLETEPlusProfile = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsoleteplusprofile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DocV2 author = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image sentiment = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sentiment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 helpfulCount = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_helpfulcount(&has_bits);
          _impl_.helpfulcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 thumbsUpCount = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_thumbsupcount(&has_bits);
          _impl_.thumbsupcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Review::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.Review)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string authorName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authorname().data(), static_cast<int>(this->_internal_authorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.authorName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authorname(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string source = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // optional string documentVersion = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_documentversion().data(), static_cast<int>(this->_internal_documentversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.documentVersion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_documentversion(), target);
  }

  // optional int64 timestampMsec = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestampmsec(), target);
  }

  // optional int32 starRating = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_starrating(), target);
  }

  // optional string title = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // optional string comment = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.comment");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_comment(), target);
  }

  // optional string commentId = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commentid().data(), static_cast<int>(this->_internal_commentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.commentId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_commentid(), target);
  }

  // optional string deviceName = 19;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.deviceName");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_devicename(), target);
  }

  // optional string replyText = 29;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replytext().data(), static_cast<int>(this->_internal_replytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.Review.replyText");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_replytext(), target);
  }

  // optional int64 replyTimestampMsec = 30;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_replytimestampmsec(), target);
  }

  // optional .playapi.proto.finsky.document.OBSOLETE_PlusProfile OBSOLETEPlusProfile = 31;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::obsoleteplusprofile(this),
        _Internal::obsoleteplusprofile(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.DocV2 author = 33;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.Image sentiment = 34;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::sentiment(this),
        _Internal::sentiment(this).GetCachedSize(), target, stream);
  }

  // optional int32 helpfulCount = 35;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_helpfulcount(), target);
  }

  // optional int64 thumbsUpCount = 38;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(38, this->_internal_thumbsupcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.Review)
  return target;
}

size_t Review::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.Review)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string authorName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authorname());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string documentVersion = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_documentversion());
    }

    // optional string title = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string comment = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional string commentId = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_commentid());
    }

    // optional string deviceName = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicename());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string replyText = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replytext());
    }

    // optional .playapi.proto.finsky.document.OBSOLETE_PlusProfile OBSOLETEPlusProfile = 31;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obsoleteplusprofile_);
    }

    // optional .playapi.proto.finsky.document.DocV2 author = 33;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.author_);
    }

    // optional .playapi.proto.finsky.Image sentiment = 34;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sentiment_);
    }

    // optional int64 timestampMsec = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestampmsec());
    }

    // optional int32 starRating = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starrating());
    }

    // optional int32 helpfulCount = 35;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_helpfulcount());
    }

    // optional int64 replyTimestampMsec = 30;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_replytimestampmsec());
    }

  }
  // optional int64 thumbsUpCount = 38;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_thumbsupcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Review::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Review::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Review::GetClassData() const { return &_class_data_; }


void Review::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Review*>(&to_msg);
  auto& from = static_cast<const Review&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.Review)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_authorname(from._internal_authorname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_documentversion(from._internal_documentversion());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_commentid(from._internal_commentid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_replytext(from._internal_replytext());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_obsoleteplusprofile()->::playapi::proto::finsky::document::OBSOLETE_PlusProfile::MergeFrom(
          from._internal_obsoleteplusprofile());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_author()->::playapi::proto::finsky::document::DocV2::MergeFrom(
          from._internal_author());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_sentiment()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_sentiment());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timestampmsec_ = from._impl_.timestampmsec_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.starrating_ = from._impl_.starrating_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.helpfulcount_ = from._impl_.helpfulcount_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.replytimestampmsec_ = from._impl_.replytimestampmsec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_thumbsupcount(from._internal_thumbsupcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Review::CopyFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.Review)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Review::IsInitialized() const {
  return true;
}

void Review::InternalSwap(Review* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authorname_, lhs_arena,
      &other->_impl_.authorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.documentversion_, lhs_arena,
      &other->_impl_.documentversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commentid_, lhs_arena,
      &other->_impl_.commentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicename_, lhs_arena,
      &other->_impl_.devicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.replytext_, lhs_arena,
      &other->_impl_.replytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Review, _impl_.thumbsupcount_)
      + sizeof(Review::_impl_.thumbsupcount_)
      - PROTOBUF_FIELD_OFFSET(Review, _impl_.obsoleteplusprofile_)>(
          reinterpret_cast<char*>(&_impl_.obsoleteplusprofile_),
          reinterpret_cast<char*>(&other->_impl_.obsoleteplusprofile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Review::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[47]);
}

// ===================================================================

class ReviewTip::_Internal {
 public:
  using HasBits = decltype(std::declval<ReviewTip>()._impl_._has_bits_);
  static void set_has_tipurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_polarity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reviewcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReviewTip::ReviewTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.document.ReviewTip)
}
ReviewTip::ReviewTip(const ReviewTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReviewTip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tipurl_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.reviewcount_){}
    , decltype(_impl_.polarity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tipurl()) {
    _this->_impl_.tipurl_.Set(from._internal_tipurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reviewcount_, &from._impl_.reviewcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.polarity_) -
    reinterpret_cast<char*>(&_impl_.reviewcount_)) + sizeof(_impl_.polarity_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.document.ReviewTip)
}

inline void ReviewTip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tipurl_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.reviewcount_){int64_t{0}}
    , decltype(_impl_.polarity_){0}
  };
  _impl_.tipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReviewTip::~ReviewTip() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.document.ReviewTip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReviewTip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tipurl_.Destroy();
  _impl_.text_.Destroy();
}

void ReviewTip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReviewTip::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.document.ReviewTip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tipurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.reviewcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.polarity_) -
        reinterpret_cast<char*>(&_impl_.reviewcount_)) + sizeof(_impl_.polarity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReviewTip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tipUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tipurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ReviewTip.tipUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.document.ReviewTip.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 polarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_polarity(&has_bits);
          _impl_.polarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 reviewCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reviewcount(&has_bits);
          _impl_.reviewcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReviewTip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.document.ReviewTip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tipUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tipurl().data(), static_cast<int>(this->_internal_tipurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ReviewTip.tipUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tipurl(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.document.ReviewTip.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional int32 polarity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_polarity(), target);
  }

  // optional int64 reviewCount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_reviewcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.document.ReviewTip)
  return target;
}

size_t ReviewTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.document.ReviewTip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tipUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tipurl());
    }

    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional int64 reviewCount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reviewcount());
    }

    // optional int32 polarity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_polarity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReviewTip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReviewTip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReviewTip::GetClassData() const { return &_class_data_; }


void ReviewTip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReviewTip*>(&to_msg);
  auto& from = static_cast<const ReviewTip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.document.ReviewTip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tipurl(from._internal_tipurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reviewcount_ = from._impl_.reviewcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.polarity_ = from._impl_.polarity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReviewTip::CopyFrom(const ReviewTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.document.ReviewTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviewTip::IsInitialized() const {
  return true;
}

void ReviewTip::InternalSwap(ReviewTip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tipurl_, lhs_arena,
      &other->_impl_.tipurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReviewTip, _impl_.polarity_)
      + sizeof(ReviewTip::_impl_.polarity_)
      - PROTOBUF_FIELD_OFFSET(ReviewTip, _impl_.reviewcount_)>(
          reinterpret_cast<char*>(&_impl_.reviewcount_),
          reinterpret_cast<char*>(&other->_impl_.reviewcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReviewTip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdocument_2eproto_getter, &descriptor_table_play_5fdocument_2eproto_once,
      file_level_metadata_play_5fdocument_2eproto[48]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace document
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::DocV2*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::DocV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::DocV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::Annotations*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::Annotations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::Annotations >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::PlusOneData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::PlusOneData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::PlusOneData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::OBSOLETE_PlusProfile*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::OBSOLETE_PlusProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::OBSOLETE_PlusProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::SectionMetadata*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::SectionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::SectionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::Warning*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::Warning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::Warning >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::Badge*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::Badge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::Badge >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::BadgeContainer*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::BadgeContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::BadgeContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::PurchaseDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::PurchaseDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::PurchaseDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::PurchaseHistoryDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::PurchaseHistoryDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::PurchaseHistoryDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::OBSOLETE_Reason*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::OBSOLETE_Reason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::OBSOLETE_Reason >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::VoucherInfo*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::VoucherInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::VoucherInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::VideoAnnotations*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::VideoAnnotations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::VideoAnnotations >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::MySubscriptionDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::MySubscriptionDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::MySubscriptionDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::MyRewardDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::MyRewardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::MyRewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::SelectedChild*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::SelectedChild >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::SelectedChild >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::Snippet*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::Snippet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::Snippet >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::ProductDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::ProductDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::ProductDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::ProductDetailsSection*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::ProductDetailsSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::ProductDetailsSection >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::ProductDetailsDescription*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::ProductDetailsDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::ProductDetailsDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::PromotedDoc*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::PromotedDoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::PromotedDoc >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::DocumentDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::DocumentDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::DocumentDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::AppDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::AppDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::AppDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::TestingProgramInfo*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::TestingProgramInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::TestingProgramInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::AlbumDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::AlbumDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::AlbumDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::MusicDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::MusicDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::MusicDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::ArtistDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::ArtistDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::ArtistDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::ArtistExternalLinks*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::ArtistExternalLinks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::ArtistExternalLinks >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::SongDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::SongDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::SongDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::BookDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::BookDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::BookDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::VideoDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::VideoDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::VideoDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::VideoCredit*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::VideoCredit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::VideoCredit >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::Trailer*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::Trailer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::Trailer >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::VideoRentalTerm_Term*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::VideoRentalTerm_Term >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::VideoRentalTerm_Term >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::VideoRentalTerm*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::VideoRentalTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::VideoRentalTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::SubscriptionDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::SubscriptionDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::SubscriptionDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::MagazineDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::MagazineDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::MagazineDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::TvShowDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::TvShowDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::TvShowDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::TvSeasonDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::TvSeasonDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::TvSeasonDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::TvEpisodeDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::TvEpisodeDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::TvEpisodeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::PersonDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::PersonDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::PersonDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::TalentDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::TalentDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::TalentDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::TalentExternalLinks*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::TalentExternalLinks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::TalentExternalLinks >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::DeveloperDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::DeveloperDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::DeveloperDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::BookSeriesDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::BookSeriesDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::BookSeriesDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::AggregateRating*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::AggregateRating >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::AggregateRating >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::AggregateRatingTip*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::AggregateRatingTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::AggregateRatingTip >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::Review*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::Review >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::Review >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::document::ReviewTip*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::document::ReviewTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::document::ReviewTip >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
