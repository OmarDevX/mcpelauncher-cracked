// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_toc.proto

#include "play_toc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace toc {
PROTOBUF_CONSTEXPR CarrierBillingConfig::CarrierBillingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provisioningurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credentialsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apiversion_)*/0
  , /*decltype(_impl_.tosrequired_)*/false
  , /*decltype(_impl_.pertransactioncredentialsrequired_)*/false
  , /*decltype(_impl_.sendsubscriberidwithcarrierbillingrequests_)*/false} {}
struct CarrierBillingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarrierBillingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarrierBillingConfigDefaultTypeInternal() {}
  union {
    CarrierBillingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarrierBillingConfigDefaultTypeInternal _CarrierBillingConfig_default_instance_;
PROTOBUF_CONSTEXPR BillingConfig::BillingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.carrierbillingconfig_)*/nullptr
  , /*decltype(_impl_.maxiabapiversion_)*/0} {}
struct BillingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BillingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BillingConfigDefaultTypeInternal() {}
  union {
    BillingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BillingConfigDefaultTypeInternal _BillingConfig_default_instance_;
PROTOBUF_CONSTEXPR CorpusMetadata::CorpusMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.landingurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.libraryname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recswidgeturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shopname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backend_)*/0} {}
struct CorpusMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CorpusMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CorpusMetadataDefaultTypeInternal() {}
  union {
    CorpusMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CorpusMetadataDefaultTypeInternal _CorpusMetadata_default_instance_;
PROTOBUF_CONSTEXPR Experiments::Experiments(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.experimentid_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExperimentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExperimentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExperimentsDefaultTypeInternal() {}
  union {
    Experiments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExperimentsDefaultTypeInternal _Experiments_default_instance_;
PROTOBUF_CONSTEXPR SelfUpdateConfig::SelfUpdateConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latestclientversioncode_)*/0} {}
struct SelfUpdateConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfUpdateConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfUpdateConfigDefaultTypeInternal() {}
  union {
    SelfUpdateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfUpdateConfigDefaultTypeInternal _SelfUpdateConfig_default_instance_;
PROTOBUF_CONSTEXPR TocResponse::TocResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.corpus_)*/{}
  , /*decltype(_impl_.toscontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.homeurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.toscheckboxtextmarketingemails_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tostoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iconoverrideurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recswidgeturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.socialhomeurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.helpurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entertainmenthomeurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.experiments_)*/nullptr
  , /*decltype(_impl_.usersettings_)*/nullptr
  , /*decltype(_impl_.selfupdateconfig_)*/nullptr
  , /*decltype(_impl_.billingconfig_)*/nullptr
  , /*decltype(_impl_.tosversiondeprecated_)*/0
  , /*decltype(_impl_.requiresuploaddeviceconfig_)*/false
  , /*decltype(_impl_.ageverificationrequired_)*/false
  , /*decltype(_impl_.gplussignupenabled_)*/false
  , /*decltype(_impl_.redeemenabled_)*/false
  , /*decltype(_impl_.themeid_)*/0} {}
struct TocResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TocResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TocResponseDefaultTypeInternal() {}
  union {
    TocResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TocResponseDefaultTypeInternal _TocResponse_default_instance_;
}  // namespace toc
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5ftoc_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5ftoc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5ftoc_2eproto = nullptr;

const uint32_t TableStruct_play_5ftoc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.apiversion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.provisioningurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.credentialsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.tosrequired_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.pertransactioncredentialsrequired_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CarrierBillingConfig, _impl_.sendsubscriberidwithcarrierbillingrequests_),
  0,
  1,
  4,
  2,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::BillingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::BillingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::BillingConfig, _impl_.carrierbillingconfig_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::BillingConfig, _impl_.maxiabapiversion_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_.backend_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_.landingurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_.libraryname_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_.recswidgeturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::CorpusMetadata, _impl_.shopname_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::Experiments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::Experiments, _impl_.experimentid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::SelfUpdateConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::SelfUpdateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::SelfUpdateConfig, _impl_.latestclientversioncode_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.corpus_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.tosversiondeprecated_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.toscontent_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.homeurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.experiments_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.toscheckboxtextmarketingemails_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.tostoken_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.usersettings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.iconoverrideurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.selfupdateconfig_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.requiresuploaddeviceconfig_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.billingconfig_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.recswidgeturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.socialhomeurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.ageverificationrequired_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.gplussignupenabled_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.redeemenabled_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.helpurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.themeid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.entertainmenthomeurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::toc::TocResponse, _impl_.cookie_),
  ~0u,
  14,
  0,
  1,
  10,
  2,
  3,
  11,
  4,
  12,
  15,
  13,
  5,
  6,
  16,
  17,
  18,
  7,
  19,
  8,
  9,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::playapi::proto::finsky::toc::CarrierBillingConfig)},
  { 22, 30, -1, sizeof(::playapi::proto::finsky::toc::BillingConfig)},
  { 32, 44, -1, sizeof(::playapi::proto::finsky::toc::CorpusMetadata)},
  { 50, -1, -1, sizeof(::playapi::proto::finsky::toc::Experiments)},
  { 57, 64, -1, sizeof(::playapi::proto::finsky::toc::SelfUpdateConfig)},
  { 65, 92, -1, sizeof(::playapi::proto::finsky::toc::TocResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::toc::_CarrierBillingConfig_default_instance_._instance,
  &::playapi::proto::finsky::toc::_BillingConfig_default_instance_._instance,
  &::playapi::proto::finsky::toc::_CorpusMetadata_default_instance_._instance,
  &::playapi::proto::finsky::toc::_Experiments_default_instance_._instance,
  &::playapi::proto::finsky::toc::_SelfUpdateConfig_default_instance_._instance,
  &::playapi::proto::finsky::toc::_TocResponse_default_instance_._instance,
};

const char descriptor_table_protodef_play_5ftoc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016play_toc.proto\022\030playapi.proto.finsky.t"
  "oc\032\023play_settings.proto\"\351\001\n\024CarrierBilli"
  "ngConfig\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\022\n\nap"
  "iVersion\030\003 \001(\005\022\027\n\017provisioningUrl\030\004 \001(\t\022"
  "\026\n\016credentialsUrl\030\005 \001(\t\022\023\n\013tosRequired\030\006"
  " \001(\010\022)\n!perTransactionCredentialsRequire"
  "d\030\007 \001(\010\0222\n*sendSubscriberIdWithCarrierBi"
  "llingRequests\030\010 \001(\010\"w\n\rBillingConfig\022L\n\024"
  "carrierBillingConfig\030\001 \001(\0132..playapi.pro"
  "to.finsky.toc.CarrierBillingConfig\022\030\n\020ma"
  "xIabApiVersion\030\002 \001(\005\"\201\001\n\016CorpusMetadata\022"
  "\017\n\007backend\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\022\n\nlandin"
  "gUrl\030\003 \001(\t\022\023\n\013libraryName\030\004 \001(\t\022\025\n\rrecsW"
  "idgetUrl\030\006 \001(\t\022\020\n\010shopName\030\007 \001(\t\"#\n\013Expe"
  "riments\022\024\n\014experimentId\030\001 \003(\t\"3\n\020SelfUpd"
  "ateConfig\022\037\n\027latestClientVersionCode\030\001 \001"
  "(\005\"\340\005\n\013TocResponse\0228\n\006corpus\030\001 \003(\0132(.pla"
  "yapi.proto.finsky.toc.CorpusMetadata\022\034\n\024"
  "tosVersionDeprecated\030\002 \001(\005\022\022\n\ntosContent"
  "\030\003 \001(\t\022\017\n\007homeUrl\030\004 \001(\t\022:\n\013experiments\030\005"
  " \001(\0132%.playapi.proto.finsky.toc.Experime"
  "nts\022&\n\036tosCheckboxTextMarketingEmails\030\006 "
  "\001(\t\022\020\n\010tosToken\030\007 \001(\t\022I\n\014userSettings\030\010 "
  "\001(\01323.playapi.proto.finsky.settings.OBSO"
  "LETEUserSettings\022\027\n\017iconOverrideUrl\030\t \001("
  "\t\022D\n\020selfUpdateConfig\030\n \001(\0132*.playapi.pr"
  "oto.finsky.toc.SelfUpdateConfig\022\"\n\032requi"
  "resUploadDeviceConfig\030\013 \001(\010\022>\n\rbillingCo"
  "nfig\030\014 \001(\0132\'.playapi.proto.finsky.toc.Bi"
  "llingConfig\022\025\n\rrecsWidgetUrl\030\r \001(\t\022\025\n\rso"
  "cialHomeUrl\030\017 \001(\t\022\037\n\027ageVerificationRequ"
  "ired\030\020 \001(\010\022\032\n\022gplusSignupEnabled\030\021 \001(\010\022\025"
  "\n\rredeemEnabled\030\022 \001(\010\022\017\n\007helpUrl\030\023 \001(\t\022\017"
  "\n\007themeId\030\024 \001(\005\022\034\n\024entertainmentHomeUrl\030"
  "\025 \001(\t\022\016\n\006cookie\030\026 \001(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5ftoc_2eproto_deps[1] = {
  &::descriptor_table_play_5fsettings_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5ftoc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5ftoc_2eproto = {
    false, false, 1381, descriptor_table_protodef_play_5ftoc_2eproto,
    "play_toc.proto",
    &descriptor_table_play_5ftoc_2eproto_once, descriptor_table_play_5ftoc_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_play_5ftoc_2eproto::offsets,
    file_level_metadata_play_5ftoc_2eproto, file_level_enum_descriptors_play_5ftoc_2eproto,
    file_level_service_descriptors_play_5ftoc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5ftoc_2eproto_getter() {
  return &descriptor_table_play_5ftoc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5ftoc_2eproto(&descriptor_table_play_5ftoc_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace toc {

// ===================================================================

class CarrierBillingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CarrierBillingConfig>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_apiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_provisioningurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_credentialsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tosrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pertransactioncredentialsrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sendsubscriberidwithcarrierbillingrequests(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CarrierBillingConfig::CarrierBillingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.toc.CarrierBillingConfig)
}
CarrierBillingConfig::CarrierBillingConfig(const CarrierBillingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarrierBillingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.provisioningurl_){}
    , decltype(_impl_.credentialsurl_){}
    , decltype(_impl_.apiversion_){}
    , decltype(_impl_.tosrequired_){}
    , decltype(_impl_.pertransactioncredentialsrequired_){}
    , decltype(_impl_.sendsubscriberidwithcarrierbillingrequests_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.provisioningurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provisioningurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_provisioningurl()) {
    _this->_impl_.provisioningurl_.Set(from._internal_provisioningurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.credentialsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credentialsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_credentialsurl()) {
    _this->_impl_.credentialsurl_.Set(from._internal_credentialsurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.apiversion_, &from._impl_.apiversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sendsubscriberidwithcarrierbillingrequests_) -
    reinterpret_cast<char*>(&_impl_.apiversion_)) + sizeof(_impl_.sendsubscriberidwithcarrierbillingrequests_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.toc.CarrierBillingConfig)
}

inline void CarrierBillingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.provisioningurl_){}
    , decltype(_impl_.credentialsurl_){}
    , decltype(_impl_.apiversion_){0}
    , decltype(_impl_.tosrequired_){false}
    , decltype(_impl_.pertransactioncredentialsrequired_){false}
    , decltype(_impl_.sendsubscriberidwithcarrierbillingrequests_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provisioningurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provisioningurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.credentialsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credentialsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarrierBillingConfig::~CarrierBillingConfig() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.toc.CarrierBillingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarrierBillingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.provisioningurl_.Destroy();
  _impl_.credentialsurl_.Destroy();
}

void CarrierBillingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarrierBillingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.toc.CarrierBillingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.provisioningurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.credentialsurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.apiversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sendsubscriberidwithcarrierbillingrequests_) -
        reinterpret_cast<char*>(&_impl_.apiversion_)) + sizeof(_impl_.sendsubscriberidwithcarrierbillingrequests_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarrierBillingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CarrierBillingConfig.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CarrierBillingConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 apiVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_apiversion(&has_bits);
          _impl_.apiversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string provisioningUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_provisioningurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CarrierBillingConfig.provisioningUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string credentialsUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_credentialsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CarrierBillingConfig.credentialsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool tosRequired = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tosrequired(&has_bits);
          _impl_.tosrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool perTransactionCredentialsRequired = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_pertransactioncredentialsrequired(&has_bits);
          _impl_.pertransactioncredentialsrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sendSubscriberIdWithCarrierBillingRequests = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sendsubscriberidwithcarrierbillingrequests(&has_bits);
          _impl_.sendsubscriberidwithcarrierbillingrequests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarrierBillingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.toc.CarrierBillingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CarrierBillingConfig.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CarrierBillingConfig.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 apiVersion = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_apiversion(), target);
  }

  // optional string provisioningUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_provisioningurl().data(), static_cast<int>(this->_internal_provisioningurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CarrierBillingConfig.provisioningUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_provisioningurl(), target);
  }

  // optional string credentialsUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_credentialsurl().data(), static_cast<int>(this->_internal_credentialsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CarrierBillingConfig.credentialsUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_credentialsurl(), target);
  }

  // optional bool tosRequired = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_tosrequired(), target);
  }

  // optional bool perTransactionCredentialsRequired = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_pertransactioncredentialsrequired(), target);
  }

  // optional bool sendSubscriberIdWithCarrierBillingRequests = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_sendsubscriberidwithcarrierbillingrequests(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.toc.CarrierBillingConfig)
  return target;
}

size_t CarrierBillingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.toc.CarrierBillingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string provisioningUrl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_provisioningurl());
    }

    // optional string credentialsUrl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_credentialsurl());
    }

    // optional int32 apiVersion = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apiversion());
    }

    // optional bool tosRequired = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool perTransactionCredentialsRequired = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool sendSubscriberIdWithCarrierBillingRequests = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarrierBillingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarrierBillingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarrierBillingConfig::GetClassData() const { return &_class_data_; }


void CarrierBillingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarrierBillingConfig*>(&to_msg);
  auto& from = static_cast<const CarrierBillingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.toc.CarrierBillingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_provisioningurl(from._internal_provisioningurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_credentialsurl(from._internal_credentialsurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.apiversion_ = from._impl_.apiversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tosrequired_ = from._impl_.tosrequired_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pertransactioncredentialsrequired_ = from._impl_.pertransactioncredentialsrequired_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sendsubscriberidwithcarrierbillingrequests_ = from._impl_.sendsubscriberidwithcarrierbillingrequests_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarrierBillingConfig::CopyFrom(const CarrierBillingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.toc.CarrierBillingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierBillingConfig::IsInitialized() const {
  return true;
}

void CarrierBillingConfig::InternalSwap(CarrierBillingConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provisioningurl_, lhs_arena,
      &other->_impl_.provisioningurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.credentialsurl_, lhs_arena,
      &other->_impl_.credentialsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarrierBillingConfig, _impl_.sendsubscriberidwithcarrierbillingrequests_)
      + sizeof(CarrierBillingConfig::_impl_.sendsubscriberidwithcarrierbillingrequests_)
      - PROTOBUF_FIELD_OFFSET(CarrierBillingConfig, _impl_.apiversion_)>(
          reinterpret_cast<char*>(&_impl_.apiversion_),
          reinterpret_cast<char*>(&other->_impl_.apiversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarrierBillingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5ftoc_2eproto_getter, &descriptor_table_play_5ftoc_2eproto_once,
      file_level_metadata_play_5ftoc_2eproto[0]);
}

// ===================================================================

class BillingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<BillingConfig>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::toc::CarrierBillingConfig& carrierbillingconfig(const BillingConfig* msg);
  static void set_has_carrierbillingconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxiabapiversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::toc::CarrierBillingConfig&
BillingConfig::_Internal::carrierbillingconfig(const BillingConfig* msg) {
  return *msg->_impl_.carrierbillingconfig_;
}
BillingConfig::BillingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.toc.BillingConfig)
}
BillingConfig::BillingConfig(const BillingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BillingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.carrierbillingconfig_){nullptr}
    , decltype(_impl_.maxiabapiversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_carrierbillingconfig()) {
    _this->_impl_.carrierbillingconfig_ = new ::playapi::proto::finsky::toc::CarrierBillingConfig(*from._impl_.carrierbillingconfig_);
  }
  _this->_impl_.maxiabapiversion_ = from._impl_.maxiabapiversion_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.toc.BillingConfig)
}

inline void BillingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.carrierbillingconfig_){nullptr}
    , decltype(_impl_.maxiabapiversion_){0}
  };
}

BillingConfig::~BillingConfig() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.toc.BillingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BillingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.carrierbillingconfig_;
}

void BillingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BillingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.toc.BillingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.carrierbillingconfig_ != nullptr);
    _impl_.carrierbillingconfig_->Clear();
  }
  _impl_.maxiabapiversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BillingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.toc.CarrierBillingConfig carrierBillingConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_carrierbillingconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maxIabApiVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maxiabapiversion(&has_bits);
          _impl_.maxiabapiversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BillingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.toc.BillingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.toc.CarrierBillingConfig carrierBillingConfig = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::carrierbillingconfig(this),
        _Internal::carrierbillingconfig(this).GetCachedSize(), target, stream);
  }

  // optional int32 maxIabApiVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxiabapiversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.toc.BillingConfig)
  return target;
}

size_t BillingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.toc.BillingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.toc.CarrierBillingConfig carrierBillingConfig = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.carrierbillingconfig_);
    }

    // optional int32 maxIabApiVersion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxiabapiversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BillingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BillingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BillingConfig::GetClassData() const { return &_class_data_; }


void BillingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BillingConfig*>(&to_msg);
  auto& from = static_cast<const BillingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.toc.BillingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_carrierbillingconfig()->::playapi::proto::finsky::toc::CarrierBillingConfig::MergeFrom(
          from._internal_carrierbillingconfig());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.maxiabapiversion_ = from._impl_.maxiabapiversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BillingConfig::CopyFrom(const BillingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.toc.BillingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingConfig::IsInitialized() const {
  return true;
}

void BillingConfig::InternalSwap(BillingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BillingConfig, _impl_.maxiabapiversion_)
      + sizeof(BillingConfig::_impl_.maxiabapiversion_)
      - PROTOBUF_FIELD_OFFSET(BillingConfig, _impl_.carrierbillingconfig_)>(
          reinterpret_cast<char*>(&_impl_.carrierbillingconfig_),
          reinterpret_cast<char*>(&other->_impl_.carrierbillingconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BillingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5ftoc_2eproto_getter, &descriptor_table_play_5ftoc_2eproto_once,
      file_level_metadata_play_5ftoc_2eproto[1]);
}

// ===================================================================

class CorpusMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CorpusMetadata>()._impl_._has_bits_);
  static void set_has_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_landingurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_libraryname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_recswidgeturl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shopname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CorpusMetadata::CorpusMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.toc.CorpusMetadata)
}
CorpusMetadata::CorpusMetadata(const CorpusMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CorpusMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.landingurl_){}
    , decltype(_impl_.libraryname_){}
    , decltype(_impl_.recswidgeturl_){}
    , decltype(_impl_.shopname_){}
    , decltype(_impl_.backend_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.landingurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.landingurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_landingurl()) {
    _this->_impl_.landingurl_.Set(from._internal_landingurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.libraryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.libraryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_libraryname()) {
    _this->_impl_.libraryname_.Set(from._internal_libraryname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recswidgeturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recswidgeturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recswidgeturl()) {
    _this->_impl_.recswidgeturl_.Set(from._internal_recswidgeturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shopname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shopname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shopname()) {
    _this->_impl_.shopname_.Set(from._internal_shopname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.backend_ = from._impl_.backend_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.toc.CorpusMetadata)
}

inline void CorpusMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.landingurl_){}
    , decltype(_impl_.libraryname_){}
    , decltype(_impl_.recswidgeturl_){}
    , decltype(_impl_.shopname_){}
    , decltype(_impl_.backend_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.landingurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.landingurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.libraryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.libraryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recswidgeturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recswidgeturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shopname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shopname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CorpusMetadata::~CorpusMetadata() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.toc.CorpusMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CorpusMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.landingurl_.Destroy();
  _impl_.libraryname_.Destroy();
  _impl_.recswidgeturl_.Destroy();
  _impl_.shopname_.Destroy();
}

void CorpusMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CorpusMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.toc.CorpusMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.landingurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.libraryname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.recswidgeturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.shopname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.backend_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CorpusMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 backend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_backend(&has_bits);
          _impl_.backend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CorpusMetadata.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string landingUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_landingurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CorpusMetadata.landingUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string libraryName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_libraryname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CorpusMetadata.libraryName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string recsWidgetUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_recswidgeturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CorpusMetadata.recsWidgetUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string shopName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_shopname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.CorpusMetadata.shopName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CorpusMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.toc.CorpusMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 backend = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_backend(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CorpusMetadata.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string landingUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_landingurl().data(), static_cast<int>(this->_internal_landingurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CorpusMetadata.landingUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_landingurl(), target);
  }

  // optional string libraryName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_libraryname().data(), static_cast<int>(this->_internal_libraryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CorpusMetadata.libraryName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_libraryname(), target);
  }

  // optional string recsWidgetUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recswidgeturl().data(), static_cast<int>(this->_internal_recswidgeturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CorpusMetadata.recsWidgetUrl");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_recswidgeturl(), target);
  }

  // optional string shopName = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shopname().data(), static_cast<int>(this->_internal_shopname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.CorpusMetadata.shopName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_shopname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.toc.CorpusMetadata)
  return target;
}

size_t CorpusMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.toc.CorpusMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string landingUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_landingurl());
    }

    // optional string libraryName = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_libraryname());
    }

    // optional string recsWidgetUrl = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recswidgeturl());
    }

    // optional string shopName = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shopname());
    }

    // optional int32 backend = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backend());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CorpusMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CorpusMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CorpusMetadata::GetClassData() const { return &_class_data_; }


void CorpusMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CorpusMetadata*>(&to_msg);
  auto& from = static_cast<const CorpusMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.toc.CorpusMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_landingurl(from._internal_landingurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_libraryname(from._internal_libraryname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_recswidgeturl(from._internal_recswidgeturl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_shopname(from._internal_shopname());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.backend_ = from._impl_.backend_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CorpusMetadata::CopyFrom(const CorpusMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.toc.CorpusMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpusMetadata::IsInitialized() const {
  return true;
}

void CorpusMetadata::InternalSwap(CorpusMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.landingurl_, lhs_arena,
      &other->_impl_.landingurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.libraryname_, lhs_arena,
      &other->_impl_.libraryname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recswidgeturl_, lhs_arena,
      &other->_impl_.recswidgeturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shopname_, lhs_arena,
      &other->_impl_.shopname_, rhs_arena
  );
  swap(_impl_.backend_, other->_impl_.backend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CorpusMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5ftoc_2eproto_getter, &descriptor_table_play_5ftoc_2eproto_once,
      file_level_metadata_play_5ftoc_2eproto[2]);
}

// ===================================================================

class Experiments::_Internal {
 public:
};

Experiments::Experiments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.toc.Experiments)
}
Experiments::Experiments(const Experiments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Experiments* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.experimentid_){from._impl_.experimentid_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.toc.Experiments)
}

inline void Experiments::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.experimentid_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Experiments::~Experiments() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.toc.Experiments)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Experiments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.experimentid_.~RepeatedPtrField();
}

void Experiments::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Experiments::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.toc.Experiments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.experimentid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Experiments::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string experimentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_experimentid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.Experiments.experimentId");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Experiments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.toc.Experiments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string experimentId = 1;
  for (int i = 0, n = this->_internal_experimentid_size(); i < n; i++) {
    const auto& s = this->_internal_experimentid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.Experiments.experimentId");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.toc.Experiments)
  return target;
}

size_t Experiments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.toc.Experiments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string experimentId = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.experimentid_.size());
  for (int i = 0, n = _impl_.experimentid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.experimentid_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Experiments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Experiments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Experiments::GetClassData() const { return &_class_data_; }


void Experiments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Experiments*>(&to_msg);
  auto& from = static_cast<const Experiments&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.toc.Experiments)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.experimentid_.MergeFrom(from._impl_.experimentid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Experiments::CopyFrom(const Experiments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.toc.Experiments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Experiments::IsInitialized() const {
  return true;
}

void Experiments::InternalSwap(Experiments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.experimentid_.InternalSwap(&other->_impl_.experimentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Experiments::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5ftoc_2eproto_getter, &descriptor_table_play_5ftoc_2eproto_once,
      file_level_metadata_play_5ftoc_2eproto[3]);
}

// ===================================================================

class SelfUpdateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SelfUpdateConfig>()._impl_._has_bits_);
  static void set_has_latestclientversioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SelfUpdateConfig::SelfUpdateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.toc.SelfUpdateConfig)
}
SelfUpdateConfig::SelfUpdateConfig(const SelfUpdateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelfUpdateConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latestclientversioncode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.latestclientversioncode_ = from._impl_.latestclientversioncode_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.toc.SelfUpdateConfig)
}

inline void SelfUpdateConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latestclientversioncode_){0}
  };
}

SelfUpdateConfig::~SelfUpdateConfig() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.toc.SelfUpdateConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelfUpdateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelfUpdateConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelfUpdateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.toc.SelfUpdateConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.latestclientversioncode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelfUpdateConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 latestClientVersionCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_latestclientversioncode(&has_bits);
          _impl_.latestclientversioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelfUpdateConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.toc.SelfUpdateConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 latestClientVersionCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_latestclientversioncode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.toc.SelfUpdateConfig)
  return target;
}

size_t SelfUpdateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.toc.SelfUpdateConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 latestClientVersionCode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latestclientversioncode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelfUpdateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelfUpdateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelfUpdateConfig::GetClassData() const { return &_class_data_; }


void SelfUpdateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelfUpdateConfig*>(&to_msg);
  auto& from = static_cast<const SelfUpdateConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.toc.SelfUpdateConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_latestclientversioncode()) {
    _this->_internal_set_latestclientversioncode(from._internal_latestclientversioncode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelfUpdateConfig::CopyFrom(const SelfUpdateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.toc.SelfUpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfUpdateConfig::IsInitialized() const {
  return true;
}

void SelfUpdateConfig::InternalSwap(SelfUpdateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.latestclientversioncode_, other->_impl_.latestclientversioncode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfUpdateConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5ftoc_2eproto_getter, &descriptor_table_play_5ftoc_2eproto_once,
      file_level_metadata_play_5ftoc_2eproto[4]);
}

// ===================================================================

class TocResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TocResponse>()._impl_._has_bits_);
  static void set_has_tosversiondeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_toscontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_homeurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::toc::Experiments& experiments(const TocResponse* msg);
  static void set_has_experiments(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_toscheckboxtextmarketingemails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tostoken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::settings::OBSOLETEUserSettings& usersettings(const TocResponse* msg);
  static void set_has_usersettings(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_iconoverrideurl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::toc::SelfUpdateConfig& selfupdateconfig(const TocResponse* msg);
  static void set_has_selfupdateconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_requiresuploaddeviceconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::playapi::proto::finsky::toc::BillingConfig& billingconfig(const TocResponse* msg);
  static void set_has_billingconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_recswidgeturl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_socialhomeurl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ageverificationrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_gplussignupenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_redeemenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_helpurl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_themeid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_entertainmenthomeurl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::playapi::proto::finsky::toc::Experiments&
TocResponse::_Internal::experiments(const TocResponse* msg) {
  return *msg->_impl_.experiments_;
}
const ::playapi::proto::finsky::settings::OBSOLETEUserSettings&
TocResponse::_Internal::usersettings(const TocResponse* msg) {
  return *msg->_impl_.usersettings_;
}
const ::playapi::proto::finsky::toc::SelfUpdateConfig&
TocResponse::_Internal::selfupdateconfig(const TocResponse* msg) {
  return *msg->_impl_.selfupdateconfig_;
}
const ::playapi::proto::finsky::toc::BillingConfig&
TocResponse::_Internal::billingconfig(const TocResponse* msg) {
  return *msg->_impl_.billingconfig_;
}
void TocResponse::clear_usersettings() {
  if (_impl_.usersettings_ != nullptr) _impl_.usersettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
TocResponse::TocResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.toc.TocResponse)
}
TocResponse::TocResponse(const TocResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TocResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.corpus_){from._impl_.corpus_}
    , decltype(_impl_.toscontent_){}
    , decltype(_impl_.homeurl_){}
    , decltype(_impl_.toscheckboxtextmarketingemails_){}
    , decltype(_impl_.tostoken_){}
    , decltype(_impl_.iconoverrideurl_){}
    , decltype(_impl_.recswidgeturl_){}
    , decltype(_impl_.socialhomeurl_){}
    , decltype(_impl_.helpurl_){}
    , decltype(_impl_.entertainmenthomeurl_){}
    , decltype(_impl_.cookie_){}
    , decltype(_impl_.experiments_){nullptr}
    , decltype(_impl_.usersettings_){nullptr}
    , decltype(_impl_.selfupdateconfig_){nullptr}
    , decltype(_impl_.billingconfig_){nullptr}
    , decltype(_impl_.tosversiondeprecated_){}
    , decltype(_impl_.requiresuploaddeviceconfig_){}
    , decltype(_impl_.ageverificationrequired_){}
    , decltype(_impl_.gplussignupenabled_){}
    , decltype(_impl_.redeemenabled_){}
    , decltype(_impl_.themeid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.toscontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toscontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_toscontent()) {
    _this->_impl_.toscontent_.Set(from._internal_toscontent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.homeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.homeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_homeurl()) {
    _this->_impl_.homeurl_.Set(from._internal_homeurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.toscheckboxtextmarketingemails_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toscheckboxtextmarketingemails_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_toscheckboxtextmarketingemails()) {
    _this->_impl_.toscheckboxtextmarketingemails_.Set(from._internal_toscheckboxtextmarketingemails(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tostoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tostoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tostoken()) {
    _this->_impl_.tostoken_.Set(from._internal_tostoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iconoverrideurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iconoverrideurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_iconoverrideurl()) {
    _this->_impl_.iconoverrideurl_.Set(from._internal_iconoverrideurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recswidgeturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recswidgeturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recswidgeturl()) {
    _this->_impl_.recswidgeturl_.Set(from._internal_recswidgeturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.socialhomeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.socialhomeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_socialhomeurl()) {
    _this->_impl_.socialhomeurl_.Set(from._internal_socialhomeurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.helpurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.helpurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_helpurl()) {
    _this->_impl_.helpurl_.Set(from._internal_helpurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entertainmenthomeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entertainmenthomeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entertainmenthomeurl()) {
    _this->_impl_.entertainmenthomeurl_.Set(from._internal_entertainmenthomeurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cookie()) {
    _this->_impl_.cookie_.Set(from._internal_cookie(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_experiments()) {
    _this->_impl_.experiments_ = new ::playapi::proto::finsky::toc::Experiments(*from._impl_.experiments_);
  }
  if (from._internal_has_usersettings()) {
    _this->_impl_.usersettings_ = new ::playapi::proto::finsky::settings::OBSOLETEUserSettings(*from._impl_.usersettings_);
  }
  if (from._internal_has_selfupdateconfig()) {
    _this->_impl_.selfupdateconfig_ = new ::playapi::proto::finsky::toc::SelfUpdateConfig(*from._impl_.selfupdateconfig_);
  }
  if (from._internal_has_billingconfig()) {
    _this->_impl_.billingconfig_ = new ::playapi::proto::finsky::toc::BillingConfig(*from._impl_.billingconfig_);
  }
  ::memcpy(&_impl_.tosversiondeprecated_, &from._impl_.tosversiondeprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.themeid_) -
    reinterpret_cast<char*>(&_impl_.tosversiondeprecated_)) + sizeof(_impl_.themeid_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.toc.TocResponse)
}

inline void TocResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.corpus_){arena}
    , decltype(_impl_.toscontent_){}
    , decltype(_impl_.homeurl_){}
    , decltype(_impl_.toscheckboxtextmarketingemails_){}
    , decltype(_impl_.tostoken_){}
    , decltype(_impl_.iconoverrideurl_){}
    , decltype(_impl_.recswidgeturl_){}
    , decltype(_impl_.socialhomeurl_){}
    , decltype(_impl_.helpurl_){}
    , decltype(_impl_.entertainmenthomeurl_){}
    , decltype(_impl_.cookie_){}
    , decltype(_impl_.experiments_){nullptr}
    , decltype(_impl_.usersettings_){nullptr}
    , decltype(_impl_.selfupdateconfig_){nullptr}
    , decltype(_impl_.billingconfig_){nullptr}
    , decltype(_impl_.tosversiondeprecated_){0}
    , decltype(_impl_.requiresuploaddeviceconfig_){false}
    , decltype(_impl_.ageverificationrequired_){false}
    , decltype(_impl_.gplussignupenabled_){false}
    , decltype(_impl_.redeemenabled_){false}
    , decltype(_impl_.themeid_){0}
  };
  _impl_.toscontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toscontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.homeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.homeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.toscheckboxtextmarketingemails_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toscheckboxtextmarketingemails_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tostoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tostoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iconoverrideurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iconoverrideurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recswidgeturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recswidgeturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialhomeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.socialhomeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.helpurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.helpurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entertainmenthomeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entertainmenthomeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TocResponse::~TocResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.toc.TocResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TocResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.corpus_.~RepeatedPtrField();
  _impl_.toscontent_.Destroy();
  _impl_.homeurl_.Destroy();
  _impl_.toscheckboxtextmarketingemails_.Destroy();
  _impl_.tostoken_.Destroy();
  _impl_.iconoverrideurl_.Destroy();
  _impl_.recswidgeturl_.Destroy();
  _impl_.socialhomeurl_.Destroy();
  _impl_.helpurl_.Destroy();
  _impl_.entertainmenthomeurl_.Destroy();
  _impl_.cookie_.Destroy();
  if (this != internal_default_instance()) delete _impl_.experiments_;
  if (this != internal_default_instance()) delete _impl_.usersettings_;
  if (this != internal_default_instance()) delete _impl_.selfupdateconfig_;
  if (this != internal_default_instance()) delete _impl_.billingconfig_;
}

void TocResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TocResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.toc.TocResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.corpus_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.toscontent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.homeurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.toscheckboxtextmarketingemails_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tostoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.iconoverrideurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.recswidgeturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.socialhomeurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.helpurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.entertainmenthomeurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.cookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.experiments_ != nullptr);
      _impl_.experiments_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.usersettings_ != nullptr);
      _impl_.usersettings_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.selfupdateconfig_ != nullptr);
      _impl_.selfupdateconfig_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.billingconfig_ != nullptr);
      _impl_.billingconfig_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.tosversiondeprecated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.requiresuploaddeviceconfig_) -
        reinterpret_cast<char*>(&_impl_.tosversiondeprecated_)) + sizeof(_impl_.requiresuploaddeviceconfig_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.ageverificationrequired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.themeid_) -
        reinterpret_cast<char*>(&_impl_.ageverificationrequired_)) + sizeof(_impl_.themeid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TocResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.toc.CorpusMetadata corpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 tosVersionDeprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tosversiondeprecated(&has_bits);
          _impl_.tosversiondeprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tosContent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_toscontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.tosContent");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string homeUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_homeurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.homeUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.toc.Experiments experiments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_experiments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tosCheckboxTextMarketingEmails = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_toscheckboxtextmarketingemails();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.tosCheckboxTextMarketingEmails");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tosToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tostoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.tosToken");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.OBSOLETEUserSettings userSettings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_usersettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string iconOverrideUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_iconoverrideurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.iconOverrideUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.toc.SelfUpdateConfig selfUpdateConfig = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfupdateconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool requiresUploadDeviceConfig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_requiresuploaddeviceconfig(&has_bits);
          _impl_.requiresuploaddeviceconfig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.toc.BillingConfig billingConfig = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_billingconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string recsWidgetUrl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_recswidgeturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.recsWidgetUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string socialHomeUrl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_socialhomeurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.socialHomeUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool ageVerificationRequired = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_ageverificationrequired(&has_bits);
          _impl_.ageverificationrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gplusSignupEnabled = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_gplussignupenabled(&has_bits);
          _impl_.gplussignupenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool redeemEnabled = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_redeemenabled(&has_bits);
          _impl_.redeemenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string helpUrl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_helpurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.helpUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 themeId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_themeid(&has_bits);
          _impl_.themeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string entertainmentHomeUrl = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_entertainmenthomeurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.entertainmentHomeUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cookie = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_cookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.toc.TocResponse.cookie");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TocResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.toc.TocResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.toc.CorpusMetadata corpus = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_corpus_size()); i < n; i++) {
    const auto& repfield = this->_internal_corpus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tosVersionDeprecated = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tosversiondeprecated(), target);
  }

  // optional string tosContent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toscontent().data(), static_cast<int>(this->_internal_toscontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.tosContent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_toscontent(), target);
  }

  // optional string homeUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_homeurl().data(), static_cast<int>(this->_internal_homeurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.homeUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_homeurl(), target);
  }

  // optional .playapi.proto.finsky.toc.Experiments experiments = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::experiments(this),
        _Internal::experiments(this).GetCachedSize(), target, stream);
  }

  // optional string tosCheckboxTextMarketingEmails = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toscheckboxtextmarketingemails().data(), static_cast<int>(this->_internal_toscheckboxtextmarketingemails().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.tosCheckboxTextMarketingEmails");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_toscheckboxtextmarketingemails(), target);
  }

  // optional string tosToken = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tostoken().data(), static_cast<int>(this->_internal_tostoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.tosToken");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tostoken(), target);
  }

  // optional .playapi.proto.finsky.settings.OBSOLETEUserSettings userSettings = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::usersettings(this),
        _Internal::usersettings(this).GetCachedSize(), target, stream);
  }

  // optional string iconOverrideUrl = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_iconoverrideurl().data(), static_cast<int>(this->_internal_iconoverrideurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.iconOverrideUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_iconoverrideurl(), target);
  }

  // optional .playapi.proto.finsky.toc.SelfUpdateConfig selfUpdateConfig = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::selfupdateconfig(this),
        _Internal::selfupdateconfig(this).GetCachedSize(), target, stream);
  }

  // optional bool requiresUploadDeviceConfig = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_requiresuploaddeviceconfig(), target);
  }

  // optional .playapi.proto.finsky.toc.BillingConfig billingConfig = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::billingconfig(this),
        _Internal::billingconfig(this).GetCachedSize(), target, stream);
  }

  // optional string recsWidgetUrl = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recswidgeturl().data(), static_cast<int>(this->_internal_recswidgeturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.recsWidgetUrl");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_recswidgeturl(), target);
  }

  // optional string socialHomeUrl = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_socialhomeurl().data(), static_cast<int>(this->_internal_socialhomeurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.socialHomeUrl");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_socialhomeurl(), target);
  }

  // optional bool ageVerificationRequired = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_ageverificationrequired(), target);
  }

  // optional bool gplusSignupEnabled = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_gplussignupenabled(), target);
  }

  // optional bool redeemEnabled = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_redeemenabled(), target);
  }

  // optional string helpUrl = 19;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_helpurl().data(), static_cast<int>(this->_internal_helpurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.helpUrl");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_helpurl(), target);
  }

  // optional int32 themeId = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_themeid(), target);
  }

  // optional string entertainmentHomeUrl = 21;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entertainmenthomeurl().data(), static_cast<int>(this->_internal_entertainmenthomeurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.entertainmentHomeUrl");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_entertainmenthomeurl(), target);
  }

  // optional string cookie = 22;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cookie().data(), static_cast<int>(this->_internal_cookie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.toc.TocResponse.cookie");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.toc.TocResponse)
  return target;
}

size_t TocResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.toc.TocResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.toc.CorpusMetadata corpus = 1;
  total_size += 1UL * this->_internal_corpus_size();
  for (const auto& msg : this->_impl_.corpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tosContent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toscontent());
    }

    // optional string homeUrl = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_homeurl());
    }

    // optional string tosCheckboxTextMarketingEmails = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toscheckboxtextmarketingemails());
    }

    // optional string tosToken = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tostoken());
    }

    // optional string iconOverrideUrl = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_iconoverrideurl());
    }

    // optional string recsWidgetUrl = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recswidgeturl());
    }

    // optional string socialHomeUrl = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_socialhomeurl());
    }

    // optional string helpUrl = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_helpurl());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string entertainmentHomeUrl = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entertainmenthomeurl());
    }

    // optional string cookie = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cookie());
    }

    // optional .playapi.proto.finsky.toc.Experiments experiments = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.experiments_);
    }

    // optional .playapi.proto.finsky.settings.OBSOLETEUserSettings userSettings = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.usersettings_);
    }

    // optional .playapi.proto.finsky.toc.SelfUpdateConfig selfUpdateConfig = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selfupdateconfig_);
    }

    // optional .playapi.proto.finsky.toc.BillingConfig billingConfig = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.billingconfig_);
    }

    // optional int32 tosVersionDeprecated = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tosversiondeprecated());
    }

    // optional bool requiresUploadDeviceConfig = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool ageVerificationRequired = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool gplusSignupEnabled = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool redeemEnabled = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 themeId = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_themeid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TocResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TocResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TocResponse::GetClassData() const { return &_class_data_; }


void TocResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TocResponse*>(&to_msg);
  auto& from = static_cast<const TocResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.toc.TocResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.corpus_.MergeFrom(from._impl_.corpus_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_toscontent(from._internal_toscontent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_homeurl(from._internal_homeurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_toscheckboxtextmarketingemails(from._internal_toscheckboxtextmarketingemails());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_tostoken(from._internal_tostoken());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_iconoverrideurl(from._internal_iconoverrideurl());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_recswidgeturl(from._internal_recswidgeturl());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_socialhomeurl(from._internal_socialhomeurl());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_helpurl(from._internal_helpurl());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_entertainmenthomeurl(from._internal_entertainmenthomeurl());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_cookie(from._internal_cookie());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_experiments()->::playapi::proto::finsky::toc::Experiments::MergeFrom(
          from._internal_experiments());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_usersettings()->::playapi::proto::finsky::settings::OBSOLETEUserSettings::MergeFrom(
          from._internal_usersettings());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_selfupdateconfig()->::playapi::proto::finsky::toc::SelfUpdateConfig::MergeFrom(
          from._internal_selfupdateconfig());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_billingconfig()->::playapi::proto::finsky::toc::BillingConfig::MergeFrom(
          from._internal_billingconfig());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tosversiondeprecated_ = from._impl_.tosversiondeprecated_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.requiresuploaddeviceconfig_ = from._impl_.requiresuploaddeviceconfig_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ageverificationrequired_ = from._impl_.ageverificationrequired_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.gplussignupenabled_ = from._impl_.gplussignupenabled_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.redeemenabled_ = from._impl_.redeemenabled_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.themeid_ = from._impl_.themeid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TocResponse::CopyFrom(const TocResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.toc.TocResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TocResponse::IsInitialized() const {
  return true;
}

void TocResponse::InternalSwap(TocResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.corpus_.InternalSwap(&other->_impl_.corpus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toscontent_, lhs_arena,
      &other->_impl_.toscontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.homeurl_, lhs_arena,
      &other->_impl_.homeurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toscheckboxtextmarketingemails_, lhs_arena,
      &other->_impl_.toscheckboxtextmarketingemails_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tostoken_, lhs_arena,
      &other->_impl_.tostoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iconoverrideurl_, lhs_arena,
      &other->_impl_.iconoverrideurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recswidgeturl_, lhs_arena,
      &other->_impl_.recswidgeturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.socialhomeurl_, lhs_arena,
      &other->_impl_.socialhomeurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.helpurl_, lhs_arena,
      &other->_impl_.helpurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entertainmenthomeurl_, lhs_arena,
      &other->_impl_.entertainmenthomeurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cookie_, lhs_arena,
      &other->_impl_.cookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TocResponse, _impl_.themeid_)
      + sizeof(TocResponse::_impl_.themeid_)
      - PROTOBUF_FIELD_OFFSET(TocResponse, _impl_.experiments_)>(
          reinterpret_cast<char*>(&_impl_.experiments_),
          reinterpret_cast<char*>(&other->_impl_.experiments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TocResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5ftoc_2eproto_getter, &descriptor_table_play_5ftoc_2eproto_once,
      file_level_metadata_play_5ftoc_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace toc
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::toc::CarrierBillingConfig*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::toc::CarrierBillingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::toc::CarrierBillingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::toc::BillingConfig*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::toc::BillingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::toc::BillingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::toc::CorpusMetadata*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::toc::CorpusMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::toc::CorpusMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::toc::Experiments*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::toc::Experiments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::toc::Experiments >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::toc::SelfUpdateConfig*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::toc::SelfUpdateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::toc::SelfUpdateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::toc::TocResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::toc::TocResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::toc::TocResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
