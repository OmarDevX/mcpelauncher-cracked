// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_browse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_5fbrowse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_5fbrowse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "play_common.pb.h"
#include "play_link.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_5fbrowse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_5fbrowse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_5fbrowse_2eproto;
namespace playapi {
namespace proto {
namespace finsky {
namespace browse {
class BrowseLink;
struct BrowseLinkDefaultTypeInternal;
extern BrowseLinkDefaultTypeInternal _BrowseLink_default_instance_;
class BrowseResponse;
struct BrowseResponseDefaultTypeInternal;
extern BrowseResponseDefaultTypeInternal _BrowseResponse_default_instance_;
class BrowseTab;
struct BrowseTabDefaultTypeInternal;
extern BrowseTabDefaultTypeInternal _BrowseTab_default_instance_;
class QuickLink;
struct QuickLinkDefaultTypeInternal;
extern QuickLinkDefaultTypeInternal _QuickLink_default_instance_;
class TabBubble;
struct TabBubbleDefaultTypeInternal;
extern TabBubbleDefaultTypeInternal _TabBubble_default_instance_;
}  // namespace browse
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> ::playapi::proto::finsky::browse::BrowseLink* Arena::CreateMaybeMessage<::playapi::proto::finsky::browse::BrowseLink>(Arena*);
template<> ::playapi::proto::finsky::browse::BrowseResponse* Arena::CreateMaybeMessage<::playapi::proto::finsky::browse::BrowseResponse>(Arena*);
template<> ::playapi::proto::finsky::browse::BrowseTab* Arena::CreateMaybeMessage<::playapi::proto::finsky::browse::BrowseTab>(Arena*);
template<> ::playapi::proto::finsky::browse::QuickLink* Arena::CreateMaybeMessage<::playapi::proto::finsky::browse::QuickLink>(Arena*);
template<> ::playapi::proto::finsky::browse::TabBubble* Arena::CreateMaybeMessage<::playapi::proto::finsky::browse::TabBubble>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playapi {
namespace proto {
namespace finsky {
namespace browse {

// ===================================================================

class BrowseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.browse.BrowseResponse) */ {
 public:
  inline BrowseResponse() : BrowseResponse(nullptr) {}
  ~BrowseResponse() override;
  explicit PROTOBUF_CONSTEXPR BrowseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrowseResponse(const BrowseResponse& from);
  BrowseResponse(BrowseResponse&& from) noexcept
    : BrowseResponse() {
    *this = ::std::move(from);
  }

  inline BrowseResponse& operator=(const BrowseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrowseResponse& operator=(BrowseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrowseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrowseResponse* internal_default_instance() {
    return reinterpret_cast<const BrowseResponse*>(
               &_BrowseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BrowseResponse& a, BrowseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BrowseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrowseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrowseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrowseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrowseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrowseResponse& from) {
    BrowseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrowseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.browse.BrowseResponse";
  }
  protected:
  explicit BrowseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 3,
    kBreadcrumbFieldNumber = 4,
    kQuickLinkFieldNumber = 5,
    kBrowseTabFieldNumber = 9,
    kContentsUrlFieldNumber = 1,
    kPromoUrlFieldNumber = 2,
    kServerLogsCookieFieldNumber = 6,
    kTitleFieldNumber = 7,
    kBackendIdFieldNumber = 8,
    kLandingTabIndexFieldNumber = 10,
    kQuickLinkTabIndexFieldNumber = 11,
    kQuickLinkFallbackTabIndexFieldNumber = 12,
    kIsFamilySafeFieldNumber = 14,
    kTabStyleFieldNumber = 15,
  };
  // repeated .playapi.proto.finsky.browse.BrowseLink category = 3;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::playapi::proto::finsky::browse::BrowseLink* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >*
      mutable_category();
  private:
  const ::playapi::proto::finsky::browse::BrowseLink& _internal_category(int index) const;
  ::playapi::proto::finsky::browse::BrowseLink* _internal_add_category();
  public:
  const ::playapi::proto::finsky::browse::BrowseLink& category(int index) const;
  ::playapi::proto::finsky::browse::BrowseLink* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >&
      category() const;

  // repeated .playapi.proto.finsky.browse.BrowseLink breadcrumb = 4;
  int breadcrumb_size() const;
  private:
  int _internal_breadcrumb_size() const;
  public:
  void clear_breadcrumb();
  ::playapi::proto::finsky::browse::BrowseLink* mutable_breadcrumb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >*
      mutable_breadcrumb();
  private:
  const ::playapi::proto::finsky::browse::BrowseLink& _internal_breadcrumb(int index) const;
  ::playapi::proto::finsky::browse::BrowseLink* _internal_add_breadcrumb();
  public:
  const ::playapi::proto::finsky::browse::BrowseLink& breadcrumb(int index) const;
  ::playapi::proto::finsky::browse::BrowseLink* add_breadcrumb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >&
      breadcrumb() const;

  // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
  int quicklink_size() const;
  private:
  int _internal_quicklink_size() const;
  public:
  void clear_quicklink();
  ::playapi::proto::finsky::browse::QuickLink* mutable_quicklink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >*
      mutable_quicklink();
  private:
  const ::playapi::proto::finsky::browse::QuickLink& _internal_quicklink(int index) const;
  ::playapi::proto::finsky::browse::QuickLink* _internal_add_quicklink();
  public:
  const ::playapi::proto::finsky::browse::QuickLink& quicklink(int index) const;
  ::playapi::proto::finsky::browse::QuickLink* add_quicklink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >&
      quicklink() const;

  // repeated .playapi.proto.finsky.browse.BrowseTab browseTab = 9;
  int browsetab_size() const;
  private:
  int _internal_browsetab_size() const;
  public:
  void clear_browsetab();
  ::playapi::proto::finsky::browse::BrowseTab* mutable_browsetab(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseTab >*
      mutable_browsetab();
  private:
  const ::playapi::proto::finsky::browse::BrowseTab& _internal_browsetab(int index) const;
  ::playapi::proto::finsky::browse::BrowseTab* _internal_add_browsetab();
  public:
  const ::playapi::proto::finsky::browse::BrowseTab& browsetab(int index) const;
  ::playapi::proto::finsky::browse::BrowseTab* add_browsetab();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseTab >&
      browsetab() const;

  // optional string contentsUrl = 1;
  bool has_contentsurl() const;
  private:
  bool _internal_has_contentsurl() const;
  public:
  void clear_contentsurl();
  const std::string& contentsurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contentsurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contentsurl();
  PROTOBUF_NODISCARD std::string* release_contentsurl();
  void set_allocated_contentsurl(std::string* contentsurl);
  private:
  const std::string& _internal_contentsurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contentsurl(const std::string& value);
  std::string* _internal_mutable_contentsurl();
  public:

  // optional string promoUrl = 2;
  bool has_promourl() const;
  private:
  bool _internal_has_promourl() const;
  public:
  void clear_promourl();
  const std::string& promourl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_promourl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_promourl();
  PROTOBUF_NODISCARD std::string* release_promourl();
  void set_allocated_promourl(std::string* promourl);
  private:
  const std::string& _internal_promourl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_promourl(const std::string& value);
  std::string* _internal_mutable_promourl();
  public:

  // optional bytes serverLogsCookie = 6;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional string title = 7;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional int32 backendId = 8;
  bool has_backendid() const;
  private:
  bool _internal_has_backendid() const;
  public:
  void clear_backendid();
  int32_t backendid() const;
  void set_backendid(int32_t value);
  private:
  int32_t _internal_backendid() const;
  void _internal_set_backendid(int32_t value);
  public:

  // optional int32 landingTabIndex = 10;
  bool has_landingtabindex() const;
  private:
  bool _internal_has_landingtabindex() const;
  public:
  void clear_landingtabindex();
  int32_t landingtabindex() const;
  void set_landingtabindex(int32_t value);
  private:
  int32_t _internal_landingtabindex() const;
  void _internal_set_landingtabindex(int32_t value);
  public:

  // optional int32 quickLinkTabIndex = 11;
  bool has_quicklinktabindex() const;
  private:
  bool _internal_has_quicklinktabindex() const;
  public:
  void clear_quicklinktabindex();
  int32_t quicklinktabindex() const;
  void set_quicklinktabindex(int32_t value);
  private:
  int32_t _internal_quicklinktabindex() const;
  void _internal_set_quicklinktabindex(int32_t value);
  public:

  // optional int32 quickLinkFallbackTabIndex = 12;
  bool has_quicklinkfallbacktabindex() const;
  private:
  bool _internal_has_quicklinkfallbacktabindex() const;
  public:
  void clear_quicklinkfallbacktabindex();
  int32_t quicklinkfallbacktabindex() const;
  void set_quicklinkfallbacktabindex(int32_t value);
  private:
  int32_t _internal_quicklinkfallbacktabindex() const;
  void _internal_set_quicklinkfallbacktabindex(int32_t value);
  public:

  // optional bool isFamilySafe = 14;
  bool has_isfamilysafe() const;
  private:
  bool _internal_has_isfamilysafe() const;
  public:
  void clear_isfamilysafe();
  bool isfamilysafe() const;
  void set_isfamilysafe(bool value);
  private:
  bool _internal_isfamilysafe() const;
  void _internal_set_isfamilysafe(bool value);
  public:

  // optional int32 tabStyle = 15;
  bool has_tabstyle() const;
  private:
  bool _internal_has_tabstyle() const;
  public:
  void clear_tabstyle();
  int32_t tabstyle() const;
  void set_tabstyle(int32_t value);
  private:
  int32_t _internal_tabstyle() const;
  void _internal_set_tabstyle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.browse.BrowseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink > category_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink > breadcrumb_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink > quicklink_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseTab > browsetab_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contentsurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr promourl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int32_t backendid_;
    int32_t landingtabindex_;
    int32_t quicklinktabindex_;
    int32_t quicklinkfallbacktabindex_;
    bool isfamilysafe_;
    int32_t tabstyle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fbrowse_2eproto;
};
// -------------------------------------------------------------------

class BrowseTab final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.browse.BrowseTab) */ {
 public:
  inline BrowseTab() : BrowseTab(nullptr) {}
  ~BrowseTab() override;
  explicit PROTOBUF_CONSTEXPR BrowseTab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrowseTab(const BrowseTab& from);
  BrowseTab(BrowseTab&& from) noexcept
    : BrowseTab() {
    *this = ::std::move(from);
  }

  inline BrowseTab& operator=(const BrowseTab& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrowseTab& operator=(BrowseTab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrowseTab& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrowseTab* internal_default_instance() {
    return reinterpret_cast<const BrowseTab*>(
               &_BrowseTab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrowseTab& a, BrowseTab& b) {
    a.Swap(&b);
  }
  inline void Swap(BrowseTab* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrowseTab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrowseTab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrowseTab>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrowseTab& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrowseTab& from) {
    BrowseTab::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrowseTab* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.browse.BrowseTab";
  }
  protected:
  explicit BrowseTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 4,
    kQuickLinkFieldNumber = 5,
    kTitleFieldNumber = 1,
    kServerLogsCookieFieldNumber = 2,
    kListUrlFieldNumber = 3,
    kQuickLinkTitleFieldNumber = 6,
    kCategoriesTitleFieldNumber = 7,
    kHighlightsBannerUrlFieldNumber = 9,
    kEntertainmentTabBubbleFieldNumber = 10,
    kBackendIdFieldNumber = 8,
  };
  // repeated .playapi.proto.finsky.browse.BrowseLink category = 4;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::playapi::proto::finsky::browse::BrowseLink* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >*
      mutable_category();
  private:
  const ::playapi::proto::finsky::browse::BrowseLink& _internal_category(int index) const;
  ::playapi::proto::finsky::browse::BrowseLink* _internal_add_category();
  public:
  const ::playapi::proto::finsky::browse::BrowseLink& category(int index) const;
  ::playapi::proto::finsky::browse::BrowseLink* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >&
      category() const;

  // repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
  int quicklink_size() const;
  private:
  int _internal_quicklink_size() const;
  public:
  void clear_quicklink();
  ::playapi::proto::finsky::browse::QuickLink* mutable_quicklink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >*
      mutable_quicklink();
  private:
  const ::playapi::proto::finsky::browse::QuickLink& _internal_quicklink(int index) const;
  ::playapi::proto::finsky::browse::QuickLink* _internal_add_quicklink();
  public:
  const ::playapi::proto::finsky::browse::QuickLink& quicklink(int index) const;
  ::playapi::proto::finsky::browse::QuickLink* add_quicklink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >&
      quicklink() const;

  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional bytes serverLogsCookie = 2;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional string listUrl = 3;
  bool has_listurl() const;
  private:
  bool _internal_has_listurl() const;
  public:
  void clear_listurl();
  const std::string& listurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listurl();
  PROTOBUF_NODISCARD std::string* release_listurl();
  void set_allocated_listurl(std::string* listurl);
  private:
  const std::string& _internal_listurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listurl(const std::string& value);
  std::string* _internal_mutable_listurl();
  public:

  // optional string quickLinkTitle = 6;
  bool has_quicklinktitle() const;
  private:
  bool _internal_has_quicklinktitle() const;
  public:
  void clear_quicklinktitle();
  const std::string& quicklinktitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quicklinktitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quicklinktitle();
  PROTOBUF_NODISCARD std::string* release_quicklinktitle();
  void set_allocated_quicklinktitle(std::string* quicklinktitle);
  private:
  const std::string& _internal_quicklinktitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quicklinktitle(const std::string& value);
  std::string* _internal_mutable_quicklinktitle();
  public:

  // optional string categoriesTitle = 7;
  bool has_categoriestitle() const;
  private:
  bool _internal_has_categoriestitle() const;
  public:
  void clear_categoriestitle();
  const std::string& categoriestitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_categoriestitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_categoriestitle();
  PROTOBUF_NODISCARD std::string* release_categoriestitle();
  void set_allocated_categoriestitle(std::string* categoriestitle);
  private:
  const std::string& _internal_categoriestitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_categoriestitle(const std::string& value);
  std::string* _internal_mutable_categoriestitle();
  public:

  // optional string highlightsBannerUrl = 9;
  bool has_highlightsbannerurl() const;
  private:
  bool _internal_has_highlightsbannerurl() const;
  public:
  void clear_highlightsbannerurl();
  const std::string& highlightsbannerurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_highlightsbannerurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_highlightsbannerurl();
  PROTOBUF_NODISCARD std::string* release_highlightsbannerurl();
  void set_allocated_highlightsbannerurl(std::string* highlightsbannerurl);
  private:
  const std::string& _internal_highlightsbannerurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_highlightsbannerurl(const std::string& value);
  std::string* _internal_mutable_highlightsbannerurl();
  public:

  // optional .playapi.proto.finsky.browse.TabBubble entertainmentTabBubble = 10;
  bool has_entertainmenttabbubble() const;
  private:
  bool _internal_has_entertainmenttabbubble() const;
  public:
  void clear_entertainmenttabbubble();
  const ::playapi::proto::finsky::browse::TabBubble& entertainmenttabbubble() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::browse::TabBubble* release_entertainmenttabbubble();
  ::playapi::proto::finsky::browse::TabBubble* mutable_entertainmenttabbubble();
  void set_allocated_entertainmenttabbubble(::playapi::proto::finsky::browse::TabBubble* entertainmenttabbubble);
  private:
  const ::playapi::proto::finsky::browse::TabBubble& _internal_entertainmenttabbubble() const;
  ::playapi::proto::finsky::browse::TabBubble* _internal_mutable_entertainmenttabbubble();
  public:
  void unsafe_arena_set_allocated_entertainmenttabbubble(
      ::playapi::proto::finsky::browse::TabBubble* entertainmenttabbubble);
  ::playapi::proto::finsky::browse::TabBubble* unsafe_arena_release_entertainmenttabbubble();

  // optional int32 backendId = 8;
  bool has_backendid() const;
  private:
  bool _internal_has_backendid() const;
  public:
  void clear_backendid();
  int32_t backendid() const;
  void set_backendid(int32_t value);
  private:
  int32_t _internal_backendid() const;
  void _internal_set_backendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.browse.BrowseTab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink > category_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink > quicklink_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quicklinktitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr categoriestitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr highlightsbannerurl_;
    ::playapi::proto::finsky::browse::TabBubble* entertainmenttabbubble_;
    int32_t backendid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fbrowse_2eproto;
};
// -------------------------------------------------------------------

class BrowseLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.browse.BrowseLink) */ {
 public:
  inline BrowseLink() : BrowseLink(nullptr) {}
  ~BrowseLink() override;
  explicit PROTOBUF_CONSTEXPR BrowseLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrowseLink(const BrowseLink& from);
  BrowseLink(BrowseLink&& from) noexcept
    : BrowseLink() {
    *this = ::std::move(from);
  }

  inline BrowseLink& operator=(const BrowseLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrowseLink& operator=(BrowseLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrowseLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrowseLink* internal_default_instance() {
    return reinterpret_cast<const BrowseLink*>(
               &_BrowseLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BrowseLink& a, BrowseLink& b) {
    a.Swap(&b);
  }
  inline void Swap(BrowseLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrowseLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrowseLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrowseLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrowseLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrowseLink& from) {
    BrowseLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrowseLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.browse.BrowseLink";
  }
  protected:
  explicit BrowseLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataUrlFieldNumber = 3,
    kServerLogsCookieFieldNumber = 4,
    kImageFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string dataUrl = 3;
  bool has_dataurl() const;
  private:
  bool _internal_has_dataurl() const;
  public:
  void clear_dataurl();
  const std::string& dataurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataurl();
  PROTOBUF_NODISCARD std::string* release_dataurl();
  void set_allocated_dataurl(std::string* dataurl);
  private:
  const std::string& _internal_dataurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataurl(const std::string& value);
  std::string* _internal_mutable_dataurl();
  public:

  // optional bytes serverLogsCookie = 4;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional .playapi.proto.finsky.Image image = 5;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::playapi::proto::finsky::Image& image() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::Image* release_image();
  ::playapi::proto::finsky::Image* mutable_image();
  void set_allocated_image(::playapi::proto::finsky::Image* image);
  private:
  const ::playapi::proto::finsky::Image& _internal_image() const;
  ::playapi::proto::finsky::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::playapi::proto::finsky::Image* image);
  ::playapi::proto::finsky::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.browse.BrowseLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    ::playapi::proto::finsky::Image* image_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fbrowse_2eproto;
};
// -------------------------------------------------------------------

class QuickLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.browse.QuickLink) */ {
 public:
  inline QuickLink() : QuickLink(nullptr) {}
  ~QuickLink() override;
  explicit PROTOBUF_CONSTEXPR QuickLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuickLink(const QuickLink& from);
  QuickLink(QuickLink&& from) noexcept
    : QuickLink() {
    *this = ::std::move(from);
  }

  inline QuickLink& operator=(const QuickLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuickLink& operator=(QuickLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuickLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuickLink* internal_default_instance() {
    return reinterpret_cast<const QuickLink*>(
               &_QuickLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuickLink& a, QuickLink& b) {
    a.Swap(&b);
  }
  inline void Swap(QuickLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuickLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuickLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuickLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuickLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuickLink& from) {
    QuickLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuickLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.browse.QuickLink";
  }
  protected:
  explicit QuickLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kServerLogsCookieFieldNumber = 5,
    kImageFieldNumber = 2,
    kLinkFieldNumber = 3,
    kDisplayRequiredFieldNumber = 4,
    kPrismStyleFieldNumber = 7,
    kBackendIdFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes serverLogsCookie = 5;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional .playapi.proto.finsky.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::playapi::proto::finsky::Image& image() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::Image* release_image();
  ::playapi::proto::finsky::Image* mutable_image();
  void set_allocated_image(::playapi::proto::finsky::Image* image);
  private:
  const ::playapi::proto::finsky::Image& _internal_image() const;
  ::playapi::proto::finsky::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::playapi::proto::finsky::Image* image);
  ::playapi::proto::finsky::Image* unsafe_arena_release_image();

  // optional .playapi.proto.finsky.link.ResolvedLink link = 3;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::playapi::proto::finsky::link::ResolvedLink& link() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::link::ResolvedLink* release_link();
  ::playapi::proto::finsky::link::ResolvedLink* mutable_link();
  void set_allocated_link(::playapi::proto::finsky::link::ResolvedLink* link);
  private:
  const ::playapi::proto::finsky::link::ResolvedLink& _internal_link() const;
  ::playapi::proto::finsky::link::ResolvedLink* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::playapi::proto::finsky::link::ResolvedLink* link);
  ::playapi::proto::finsky::link::ResolvedLink* unsafe_arena_release_link();

  // optional bool displayRequired = 4;
  bool has_displayrequired() const;
  private:
  bool _internal_has_displayrequired() const;
  public:
  void clear_displayrequired();
  bool displayrequired() const;
  void set_displayrequired(bool value);
  private:
  bool _internal_displayrequired() const;
  void _internal_set_displayrequired(bool value);
  public:

  // optional bool prismStyle = 7;
  bool has_prismstyle() const;
  private:
  bool _internal_has_prismstyle() const;
  public:
  void clear_prismstyle();
  bool prismstyle() const;
  void set_prismstyle(bool value);
  private:
  bool _internal_prismstyle() const;
  void _internal_set_prismstyle(bool value);
  public:

  // optional int32 backendId = 6;
  bool has_backendid() const;
  private:
  bool _internal_has_backendid() const;
  public:
  void clear_backendid();
  int32_t backendid() const;
  void set_backendid(int32_t value);
  private:
  int32_t _internal_backendid() const;
  void _internal_set_backendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.browse.QuickLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    ::playapi::proto::finsky::Image* image_;
    ::playapi::proto::finsky::link::ResolvedLink* link_;
    bool displayrequired_;
    bool prismstyle_;
    int32_t backendid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fbrowse_2eproto;
};
// -------------------------------------------------------------------

class TabBubble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.browse.TabBubble) */ {
 public:
  inline TabBubble() : TabBubble(nullptr) {}
  ~TabBubble() override;
  explicit PROTOBUF_CONSTEXPR TabBubble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabBubble(const TabBubble& from);
  TabBubble(TabBubble&& from) noexcept
    : TabBubble() {
    *this = ::std::move(from);
  }

  inline TabBubble& operator=(const TabBubble& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabBubble& operator=(TabBubble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabBubble& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabBubble* internal_default_instance() {
    return reinterpret_cast<const TabBubble*>(
               &_TabBubble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TabBubble& a, TabBubble& b) {
    a.Swap(&b);
  }
  inline void Swap(TabBubble* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabBubble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabBubble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabBubble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabBubble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TabBubble& from) {
    TabBubble::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabBubble* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.browse.TabBubble";
  }
  protected:
  explicit TabBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.browse.TabBubble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fbrowse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrowseResponse

// optional string contentsUrl = 1;
inline bool BrowseResponse::_internal_has_contentsurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BrowseResponse::has_contentsurl() const {
  return _internal_has_contentsurl();
}
inline void BrowseResponse::clear_contentsurl() {
  _impl_.contentsurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BrowseResponse::contentsurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.contentsUrl)
  return _internal_contentsurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseResponse::set_contentsurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.contentsurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.contentsUrl)
}
inline std::string* BrowseResponse::mutable_contentsurl() {
  std::string* _s = _internal_mutable_contentsurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.contentsUrl)
  return _s;
}
inline const std::string& BrowseResponse::_internal_contentsurl() const {
  return _impl_.contentsurl_.Get();
}
inline void BrowseResponse::_internal_set_contentsurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contentsurl_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseResponse::_internal_mutable_contentsurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.contentsurl_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseResponse::release_contentsurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseResponse.contentsUrl)
  if (!_internal_has_contentsurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.contentsurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentsurl_.IsDefault()) {
    _impl_.contentsurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseResponse::set_allocated_contentsurl(std::string* contentsurl) {
  if (contentsurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contentsurl_.SetAllocated(contentsurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentsurl_.IsDefault()) {
    _impl_.contentsurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseResponse.contentsUrl)
}

// optional string promoUrl = 2;
inline bool BrowseResponse::_internal_has_promourl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BrowseResponse::has_promourl() const {
  return _internal_has_promourl();
}
inline void BrowseResponse::clear_promourl() {
  _impl_.promourl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BrowseResponse::promourl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.promoUrl)
  return _internal_promourl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseResponse::set_promourl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.promourl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.promoUrl)
}
inline std::string* BrowseResponse::mutable_promourl() {
  std::string* _s = _internal_mutable_promourl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.promoUrl)
  return _s;
}
inline const std::string& BrowseResponse::_internal_promourl() const {
  return _impl_.promourl_.Get();
}
inline void BrowseResponse::_internal_set_promourl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.promourl_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseResponse::_internal_mutable_promourl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.promourl_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseResponse::release_promourl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseResponse.promoUrl)
  if (!_internal_has_promourl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.promourl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.promourl_.IsDefault()) {
    _impl_.promourl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseResponse::set_allocated_promourl(std::string* promourl) {
  if (promourl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.promourl_.SetAllocated(promourl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.promourl_.IsDefault()) {
    _impl_.promourl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseResponse.promoUrl)
}

// repeated .playapi.proto.finsky.browse.BrowseLink category = 3;
inline int BrowseResponse::_internal_category_size() const {
  return _impl_.category_.size();
}
inline int BrowseResponse::category_size() const {
  return _internal_category_size();
}
inline void BrowseResponse::clear_category() {
  _impl_.category_.Clear();
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseResponse::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.category)
  return _impl_.category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >*
BrowseResponse::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.browse.BrowseResponse.category)
  return &_impl_.category_;
}
inline const ::playapi::proto::finsky::browse::BrowseLink& BrowseResponse::_internal_category(int index) const {
  return _impl_.category_.Get(index);
}
inline const ::playapi::proto::finsky::browse::BrowseLink& BrowseResponse::category(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.category)
  return _internal_category(index);
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseResponse::_internal_add_category() {
  return _impl_.category_.Add();
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseResponse::add_category() {
  ::playapi::proto::finsky::browse::BrowseLink* _add = _internal_add_category();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.browse.BrowseResponse.category)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >&
BrowseResponse::category() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.browse.BrowseResponse.category)
  return _impl_.category_;
}

// repeated .playapi.proto.finsky.browse.BrowseLink breadcrumb = 4;
inline int BrowseResponse::_internal_breadcrumb_size() const {
  return _impl_.breadcrumb_.size();
}
inline int BrowseResponse::breadcrumb_size() const {
  return _internal_breadcrumb_size();
}
inline void BrowseResponse::clear_breadcrumb() {
  _impl_.breadcrumb_.Clear();
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseResponse::mutable_breadcrumb(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.breadcrumb)
  return _impl_.breadcrumb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >*
BrowseResponse::mutable_breadcrumb() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.browse.BrowseResponse.breadcrumb)
  return &_impl_.breadcrumb_;
}
inline const ::playapi::proto::finsky::browse::BrowseLink& BrowseResponse::_internal_breadcrumb(int index) const {
  return _impl_.breadcrumb_.Get(index);
}
inline const ::playapi::proto::finsky::browse::BrowseLink& BrowseResponse::breadcrumb(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.breadcrumb)
  return _internal_breadcrumb(index);
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseResponse::_internal_add_breadcrumb() {
  return _impl_.breadcrumb_.Add();
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseResponse::add_breadcrumb() {
  ::playapi::proto::finsky::browse::BrowseLink* _add = _internal_add_breadcrumb();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.browse.BrowseResponse.breadcrumb)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >&
BrowseResponse::breadcrumb() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.browse.BrowseResponse.breadcrumb)
  return _impl_.breadcrumb_;
}

// repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
inline int BrowseResponse::_internal_quicklink_size() const {
  return _impl_.quicklink_.size();
}
inline int BrowseResponse::quicklink_size() const {
  return _internal_quicklink_size();
}
inline void BrowseResponse::clear_quicklink() {
  _impl_.quicklink_.Clear();
}
inline ::playapi::proto::finsky::browse::QuickLink* BrowseResponse::mutable_quicklink(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.quickLink)
  return _impl_.quicklink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >*
BrowseResponse::mutable_quicklink() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.browse.BrowseResponse.quickLink)
  return &_impl_.quicklink_;
}
inline const ::playapi::proto::finsky::browse::QuickLink& BrowseResponse::_internal_quicklink(int index) const {
  return _impl_.quicklink_.Get(index);
}
inline const ::playapi::proto::finsky::browse::QuickLink& BrowseResponse::quicklink(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.quickLink)
  return _internal_quicklink(index);
}
inline ::playapi::proto::finsky::browse::QuickLink* BrowseResponse::_internal_add_quicklink() {
  return _impl_.quicklink_.Add();
}
inline ::playapi::proto::finsky::browse::QuickLink* BrowseResponse::add_quicklink() {
  ::playapi::proto::finsky::browse::QuickLink* _add = _internal_add_quicklink();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.browse.BrowseResponse.quickLink)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >&
BrowseResponse::quicklink() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.browse.BrowseResponse.quickLink)
  return _impl_.quicklink_;
}

// optional bytes serverLogsCookie = 6;
inline bool BrowseResponse::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BrowseResponse::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void BrowseResponse::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BrowseResponse::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseResponse::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.serverLogsCookie)
}
inline std::string* BrowseResponse::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.serverLogsCookie)
  return _s;
}
inline const std::string& BrowseResponse::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void BrowseResponse::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseResponse::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseResponse::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseResponse.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseResponse::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseResponse.serverLogsCookie)
}

// optional string title = 7;
inline bool BrowseResponse::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BrowseResponse::has_title() const {
  return _internal_has_title();
}
inline void BrowseResponse::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BrowseResponse::title() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseResponse::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.title)
}
inline std::string* BrowseResponse::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.title)
  return _s;
}
inline const std::string& BrowseResponse::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BrowseResponse::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseResponse::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseResponse::release_title() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseResponse.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseResponse::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseResponse.title)
}

// optional int32 backendId = 8;
inline bool BrowseResponse::_internal_has_backendid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BrowseResponse::has_backendid() const {
  return _internal_has_backendid();
}
inline void BrowseResponse::clear_backendid() {
  _impl_.backendid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t BrowseResponse::_internal_backendid() const {
  return _impl_.backendid_;
}
inline int32_t BrowseResponse::backendid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.backendId)
  return _internal_backendid();
}
inline void BrowseResponse::_internal_set_backendid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.backendid_ = value;
}
inline void BrowseResponse::set_backendid(int32_t value) {
  _internal_set_backendid(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.backendId)
}

// repeated .playapi.proto.finsky.browse.BrowseTab browseTab = 9;
inline int BrowseResponse::_internal_browsetab_size() const {
  return _impl_.browsetab_.size();
}
inline int BrowseResponse::browsetab_size() const {
  return _internal_browsetab_size();
}
inline void BrowseResponse::clear_browsetab() {
  _impl_.browsetab_.Clear();
}
inline ::playapi::proto::finsky::browse::BrowseTab* BrowseResponse::mutable_browsetab(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseResponse.browseTab)
  return _impl_.browsetab_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseTab >*
BrowseResponse::mutable_browsetab() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.browse.BrowseResponse.browseTab)
  return &_impl_.browsetab_;
}
inline const ::playapi::proto::finsky::browse::BrowseTab& BrowseResponse::_internal_browsetab(int index) const {
  return _impl_.browsetab_.Get(index);
}
inline const ::playapi::proto::finsky::browse::BrowseTab& BrowseResponse::browsetab(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.browseTab)
  return _internal_browsetab(index);
}
inline ::playapi::proto::finsky::browse::BrowseTab* BrowseResponse::_internal_add_browsetab() {
  return _impl_.browsetab_.Add();
}
inline ::playapi::proto::finsky::browse::BrowseTab* BrowseResponse::add_browsetab() {
  ::playapi::proto::finsky::browse::BrowseTab* _add = _internal_add_browsetab();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.browse.BrowseResponse.browseTab)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseTab >&
BrowseResponse::browsetab() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.browse.BrowseResponse.browseTab)
  return _impl_.browsetab_;
}

// optional int32 landingTabIndex = 10;
inline bool BrowseResponse::_internal_has_landingtabindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BrowseResponse::has_landingtabindex() const {
  return _internal_has_landingtabindex();
}
inline void BrowseResponse::clear_landingtabindex() {
  _impl_.landingtabindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t BrowseResponse::_internal_landingtabindex() const {
  return _impl_.landingtabindex_;
}
inline int32_t BrowseResponse::landingtabindex() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.landingTabIndex)
  return _internal_landingtabindex();
}
inline void BrowseResponse::_internal_set_landingtabindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.landingtabindex_ = value;
}
inline void BrowseResponse::set_landingtabindex(int32_t value) {
  _internal_set_landingtabindex(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.landingTabIndex)
}

// optional int32 quickLinkTabIndex = 11;
inline bool BrowseResponse::_internal_has_quicklinktabindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BrowseResponse::has_quicklinktabindex() const {
  return _internal_has_quicklinktabindex();
}
inline void BrowseResponse::clear_quicklinktabindex() {
  _impl_.quicklinktabindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t BrowseResponse::_internal_quicklinktabindex() const {
  return _impl_.quicklinktabindex_;
}
inline int32_t BrowseResponse::quicklinktabindex() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.quickLinkTabIndex)
  return _internal_quicklinktabindex();
}
inline void BrowseResponse::_internal_set_quicklinktabindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.quicklinktabindex_ = value;
}
inline void BrowseResponse::set_quicklinktabindex(int32_t value) {
  _internal_set_quicklinktabindex(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.quickLinkTabIndex)
}

// optional int32 quickLinkFallbackTabIndex = 12;
inline bool BrowseResponse::_internal_has_quicklinkfallbacktabindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BrowseResponse::has_quicklinkfallbacktabindex() const {
  return _internal_has_quicklinkfallbacktabindex();
}
inline void BrowseResponse::clear_quicklinkfallbacktabindex() {
  _impl_.quicklinkfallbacktabindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t BrowseResponse::_internal_quicklinkfallbacktabindex() const {
  return _impl_.quicklinkfallbacktabindex_;
}
inline int32_t BrowseResponse::quicklinkfallbacktabindex() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.quickLinkFallbackTabIndex)
  return _internal_quicklinkfallbacktabindex();
}
inline void BrowseResponse::_internal_set_quicklinkfallbacktabindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.quicklinkfallbacktabindex_ = value;
}
inline void BrowseResponse::set_quicklinkfallbacktabindex(int32_t value) {
  _internal_set_quicklinkfallbacktabindex(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.quickLinkFallbackTabIndex)
}

// optional bool isFamilySafe = 14;
inline bool BrowseResponse::_internal_has_isfamilysafe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BrowseResponse::has_isfamilysafe() const {
  return _internal_has_isfamilysafe();
}
inline void BrowseResponse::clear_isfamilysafe() {
  _impl_.isfamilysafe_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool BrowseResponse::_internal_isfamilysafe() const {
  return _impl_.isfamilysafe_;
}
inline bool BrowseResponse::isfamilysafe() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.isFamilySafe)
  return _internal_isfamilysafe();
}
inline void BrowseResponse::_internal_set_isfamilysafe(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.isfamilysafe_ = value;
}
inline void BrowseResponse::set_isfamilysafe(bool value) {
  _internal_set_isfamilysafe(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.isFamilySafe)
}

// optional int32 tabStyle = 15;
inline bool BrowseResponse::_internal_has_tabstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BrowseResponse::has_tabstyle() const {
  return _internal_has_tabstyle();
}
inline void BrowseResponse::clear_tabstyle() {
  _impl_.tabstyle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t BrowseResponse::_internal_tabstyle() const {
  return _impl_.tabstyle_;
}
inline int32_t BrowseResponse::tabstyle() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseResponse.tabStyle)
  return _internal_tabstyle();
}
inline void BrowseResponse::_internal_set_tabstyle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tabstyle_ = value;
}
inline void BrowseResponse::set_tabstyle(int32_t value) {
  _internal_set_tabstyle(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseResponse.tabStyle)
}

// -------------------------------------------------------------------

// BrowseTab

// optional string title = 1;
inline bool BrowseTab::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BrowseTab::has_title() const {
  return _internal_has_title();
}
inline void BrowseTab::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BrowseTab::title() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseTab::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.title)
}
inline std::string* BrowseTab::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.title)
  return _s;
}
inline const std::string& BrowseTab::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BrowseTab::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseTab::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseTab::release_title() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseTab::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.title)
}

// optional bytes serverLogsCookie = 2;
inline bool BrowseTab::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BrowseTab::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void BrowseTab::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BrowseTab::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseTab::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.serverLogsCookie)
}
inline std::string* BrowseTab::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.serverLogsCookie)
  return _s;
}
inline const std::string& BrowseTab::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void BrowseTab::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseTab::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseTab::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseTab::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.serverLogsCookie)
}

// optional string listUrl = 3;
inline bool BrowseTab::_internal_has_listurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BrowseTab::has_listurl() const {
  return _internal_has_listurl();
}
inline void BrowseTab::clear_listurl() {
  _impl_.listurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BrowseTab::listurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.listUrl)
  return _internal_listurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseTab::set_listurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.listurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.listUrl)
}
inline std::string* BrowseTab::mutable_listurl() {
  std::string* _s = _internal_mutable_listurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.listUrl)
  return _s;
}
inline const std::string& BrowseTab::_internal_listurl() const {
  return _impl_.listurl_.Get();
}
inline void BrowseTab::_internal_set_listurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.listurl_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseTab::_internal_mutable_listurl() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.listurl_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseTab::release_listurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.listUrl)
  if (!_internal_has_listurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.listurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listurl_.IsDefault()) {
    _impl_.listurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseTab::set_allocated_listurl(std::string* listurl) {
  if (listurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.listurl_.SetAllocated(listurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listurl_.IsDefault()) {
    _impl_.listurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.listUrl)
}

// repeated .playapi.proto.finsky.browse.BrowseLink category = 4;
inline int BrowseTab::_internal_category_size() const {
  return _impl_.category_.size();
}
inline int BrowseTab::category_size() const {
  return _internal_category_size();
}
inline void BrowseTab::clear_category() {
  _impl_.category_.Clear();
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseTab::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.category)
  return _impl_.category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >*
BrowseTab::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.browse.BrowseTab.category)
  return &_impl_.category_;
}
inline const ::playapi::proto::finsky::browse::BrowseLink& BrowseTab::_internal_category(int index) const {
  return _impl_.category_.Get(index);
}
inline const ::playapi::proto::finsky::browse::BrowseLink& BrowseTab::category(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.category)
  return _internal_category(index);
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseTab::_internal_add_category() {
  return _impl_.category_.Add();
}
inline ::playapi::proto::finsky::browse::BrowseLink* BrowseTab::add_category() {
  ::playapi::proto::finsky::browse::BrowseLink* _add = _internal_add_category();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.browse.BrowseTab.category)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::BrowseLink >&
BrowseTab::category() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.browse.BrowseTab.category)
  return _impl_.category_;
}

// repeated .playapi.proto.finsky.browse.QuickLink quickLink = 5;
inline int BrowseTab::_internal_quicklink_size() const {
  return _impl_.quicklink_.size();
}
inline int BrowseTab::quicklink_size() const {
  return _internal_quicklink_size();
}
inline void BrowseTab::clear_quicklink() {
  _impl_.quicklink_.Clear();
}
inline ::playapi::proto::finsky::browse::QuickLink* BrowseTab::mutable_quicklink(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.quickLink)
  return _impl_.quicklink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >*
BrowseTab::mutable_quicklink() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.browse.BrowseTab.quickLink)
  return &_impl_.quicklink_;
}
inline const ::playapi::proto::finsky::browse::QuickLink& BrowseTab::_internal_quicklink(int index) const {
  return _impl_.quicklink_.Get(index);
}
inline const ::playapi::proto::finsky::browse::QuickLink& BrowseTab::quicklink(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.quickLink)
  return _internal_quicklink(index);
}
inline ::playapi::proto::finsky::browse::QuickLink* BrowseTab::_internal_add_quicklink() {
  return _impl_.quicklink_.Add();
}
inline ::playapi::proto::finsky::browse::QuickLink* BrowseTab::add_quicklink() {
  ::playapi::proto::finsky::browse::QuickLink* _add = _internal_add_quicklink();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.browse.BrowseTab.quickLink)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::browse::QuickLink >&
BrowseTab::quicklink() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.browse.BrowseTab.quickLink)
  return _impl_.quicklink_;
}

// optional string quickLinkTitle = 6;
inline bool BrowseTab::_internal_has_quicklinktitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BrowseTab::has_quicklinktitle() const {
  return _internal_has_quicklinktitle();
}
inline void BrowseTab::clear_quicklinktitle() {
  _impl_.quicklinktitle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BrowseTab::quicklinktitle() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.quickLinkTitle)
  return _internal_quicklinktitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseTab::set_quicklinktitle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.quicklinktitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.quickLinkTitle)
}
inline std::string* BrowseTab::mutable_quicklinktitle() {
  std::string* _s = _internal_mutable_quicklinktitle();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.quickLinkTitle)
  return _s;
}
inline const std::string& BrowseTab::_internal_quicklinktitle() const {
  return _impl_.quicklinktitle_.Get();
}
inline void BrowseTab::_internal_set_quicklinktitle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.quicklinktitle_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseTab::_internal_mutable_quicklinktitle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.quicklinktitle_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseTab::release_quicklinktitle() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.quickLinkTitle)
  if (!_internal_has_quicklinktitle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.quicklinktitle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quicklinktitle_.IsDefault()) {
    _impl_.quicklinktitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseTab::set_allocated_quicklinktitle(std::string* quicklinktitle) {
  if (quicklinktitle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.quicklinktitle_.SetAllocated(quicklinktitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quicklinktitle_.IsDefault()) {
    _impl_.quicklinktitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.quickLinkTitle)
}

// optional string categoriesTitle = 7;
inline bool BrowseTab::_internal_has_categoriestitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BrowseTab::has_categoriestitle() const {
  return _internal_has_categoriestitle();
}
inline void BrowseTab::clear_categoriestitle() {
  _impl_.categoriestitle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BrowseTab::categoriestitle() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.categoriesTitle)
  return _internal_categoriestitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseTab::set_categoriestitle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.categoriestitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.categoriesTitle)
}
inline std::string* BrowseTab::mutable_categoriestitle() {
  std::string* _s = _internal_mutable_categoriestitle();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.categoriesTitle)
  return _s;
}
inline const std::string& BrowseTab::_internal_categoriestitle() const {
  return _impl_.categoriestitle_.Get();
}
inline void BrowseTab::_internal_set_categoriestitle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.categoriestitle_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseTab::_internal_mutable_categoriestitle() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.categoriestitle_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseTab::release_categoriestitle() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.categoriesTitle)
  if (!_internal_has_categoriestitle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.categoriestitle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.categoriestitle_.IsDefault()) {
    _impl_.categoriestitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseTab::set_allocated_categoriestitle(std::string* categoriestitle) {
  if (categoriestitle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.categoriestitle_.SetAllocated(categoriestitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.categoriestitle_.IsDefault()) {
    _impl_.categoriestitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.categoriesTitle)
}

// optional int32 backendId = 8;
inline bool BrowseTab::_internal_has_backendid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BrowseTab::has_backendid() const {
  return _internal_has_backendid();
}
inline void BrowseTab::clear_backendid() {
  _impl_.backendid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t BrowseTab::_internal_backendid() const {
  return _impl_.backendid_;
}
inline int32_t BrowseTab::backendid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.backendId)
  return _internal_backendid();
}
inline void BrowseTab::_internal_set_backendid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.backendid_ = value;
}
inline void BrowseTab::set_backendid(int32_t value) {
  _internal_set_backendid(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.backendId)
}

// optional string highlightsBannerUrl = 9;
inline bool BrowseTab::_internal_has_highlightsbannerurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BrowseTab::has_highlightsbannerurl() const {
  return _internal_has_highlightsbannerurl();
}
inline void BrowseTab::clear_highlightsbannerurl() {
  _impl_.highlightsbannerurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& BrowseTab::highlightsbannerurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl)
  return _internal_highlightsbannerurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseTab::set_highlightsbannerurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.highlightsbannerurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl)
}
inline std::string* BrowseTab::mutable_highlightsbannerurl() {
  std::string* _s = _internal_mutable_highlightsbannerurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl)
  return _s;
}
inline const std::string& BrowseTab::_internal_highlightsbannerurl() const {
  return _impl_.highlightsbannerurl_.Get();
}
inline void BrowseTab::_internal_set_highlightsbannerurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.highlightsbannerurl_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseTab::_internal_mutable_highlightsbannerurl() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.highlightsbannerurl_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseTab::release_highlightsbannerurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl)
  if (!_internal_has_highlightsbannerurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.highlightsbannerurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.highlightsbannerurl_.IsDefault()) {
    _impl_.highlightsbannerurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseTab::set_allocated_highlightsbannerurl(std::string* highlightsbannerurl) {
  if (highlightsbannerurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.highlightsbannerurl_.SetAllocated(highlightsbannerurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.highlightsbannerurl_.IsDefault()) {
    _impl_.highlightsbannerurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.highlightsBannerUrl)
}

// optional .playapi.proto.finsky.browse.TabBubble entertainmentTabBubble = 10;
inline bool BrowseTab::_internal_has_entertainmenttabbubble() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entertainmenttabbubble_ != nullptr);
  return value;
}
inline bool BrowseTab::has_entertainmenttabbubble() const {
  return _internal_has_entertainmenttabbubble();
}
inline void BrowseTab::clear_entertainmenttabbubble() {
  if (_impl_.entertainmenttabbubble_ != nullptr) _impl_.entertainmenttabbubble_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::playapi::proto::finsky::browse::TabBubble& BrowseTab::_internal_entertainmenttabbubble() const {
  const ::playapi::proto::finsky::browse::TabBubble* p = _impl_.entertainmenttabbubble_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::browse::TabBubble&>(
      ::playapi::proto::finsky::browse::_TabBubble_default_instance_);
}
inline const ::playapi::proto::finsky::browse::TabBubble& BrowseTab::entertainmenttabbubble() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseTab.entertainmentTabBubble)
  return _internal_entertainmenttabbubble();
}
inline void BrowseTab::unsafe_arena_set_allocated_entertainmenttabbubble(
    ::playapi::proto::finsky::browse::TabBubble* entertainmenttabbubble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entertainmenttabbubble_);
  }
  _impl_.entertainmenttabbubble_ = entertainmenttabbubble;
  if (entertainmenttabbubble) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.browse.BrowseTab.entertainmentTabBubble)
}
inline ::playapi::proto::finsky::browse::TabBubble* BrowseTab::release_entertainmenttabbubble() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::playapi::proto::finsky::browse::TabBubble* temp = _impl_.entertainmenttabbubble_;
  _impl_.entertainmenttabbubble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::browse::TabBubble* BrowseTab::unsafe_arena_release_entertainmenttabbubble() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseTab.entertainmentTabBubble)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::playapi::proto::finsky::browse::TabBubble* temp = _impl_.entertainmenttabbubble_;
  _impl_.entertainmenttabbubble_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::browse::TabBubble* BrowseTab::_internal_mutable_entertainmenttabbubble() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.entertainmenttabbubble_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::browse::TabBubble>(GetArenaForAllocation());
    _impl_.entertainmenttabbubble_ = p;
  }
  return _impl_.entertainmenttabbubble_;
}
inline ::playapi::proto::finsky::browse::TabBubble* BrowseTab::mutable_entertainmenttabbubble() {
  ::playapi::proto::finsky::browse::TabBubble* _msg = _internal_mutable_entertainmenttabbubble();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseTab.entertainmentTabBubble)
  return _msg;
}
inline void BrowseTab::set_allocated_entertainmenttabbubble(::playapi::proto::finsky::browse::TabBubble* entertainmenttabbubble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entertainmenttabbubble_;
  }
  if (entertainmenttabbubble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entertainmenttabbubble);
    if (message_arena != submessage_arena) {
      entertainmenttabbubble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entertainmenttabbubble, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.entertainmenttabbubble_ = entertainmenttabbubble;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseTab.entertainmentTabBubble)
}

// -------------------------------------------------------------------

// BrowseLink

// optional string name = 1;
inline bool BrowseLink::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BrowseLink::has_name() const {
  return _internal_has_name();
}
inline void BrowseLink::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BrowseLink::name() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseLink.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseLink::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseLink.name)
}
inline std::string* BrowseLink::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseLink.name)
  return _s;
}
inline const std::string& BrowseLink::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BrowseLink::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseLink::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseLink::release_name() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseLink.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseLink.name)
}

// optional string dataUrl = 3;
inline bool BrowseLink::_internal_has_dataurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BrowseLink::has_dataurl() const {
  return _internal_has_dataurl();
}
inline void BrowseLink::clear_dataurl() {
  _impl_.dataurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BrowseLink::dataurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseLink.dataUrl)
  return _internal_dataurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseLink::set_dataurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.dataurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseLink.dataUrl)
}
inline std::string* BrowseLink::mutable_dataurl() {
  std::string* _s = _internal_mutable_dataurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseLink.dataUrl)
  return _s;
}
inline const std::string& BrowseLink::_internal_dataurl() const {
  return _impl_.dataurl_.Get();
}
inline void BrowseLink::_internal_set_dataurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dataurl_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseLink::_internal_mutable_dataurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.dataurl_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseLink::release_dataurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseLink.dataUrl)
  if (!_internal_has_dataurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.dataurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataurl_.IsDefault()) {
    _impl_.dataurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseLink::set_allocated_dataurl(std::string* dataurl) {
  if (dataurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dataurl_.SetAllocated(dataurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataurl_.IsDefault()) {
    _impl_.dataurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseLink.dataUrl)
}

// optional bytes serverLogsCookie = 4;
inline bool BrowseLink::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BrowseLink::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void BrowseLink::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BrowseLink::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseLink.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrowseLink::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.BrowseLink.serverLogsCookie)
}
inline std::string* BrowseLink::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseLink.serverLogsCookie)
  return _s;
}
inline const std::string& BrowseLink::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void BrowseLink::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* BrowseLink::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* BrowseLink::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseLink.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrowseLink::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseLink.serverLogsCookie)
}

// optional .playapi.proto.finsky.Image image = 5;
inline bool BrowseLink::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool BrowseLink::has_image() const {
  return _internal_has_image();
}
inline const ::playapi::proto::finsky::Image& BrowseLink::_internal_image() const {
  const ::playapi::proto::finsky::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::Image&>(
      ::playapi::proto::finsky::_Image_default_instance_);
}
inline const ::playapi::proto::finsky::Image& BrowseLink::image() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.BrowseLink.image)
  return _internal_image();
}
inline void BrowseLink::unsafe_arena_set_allocated_image(
    ::playapi::proto::finsky::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.browse.BrowseLink.image)
}
inline ::playapi::proto::finsky::Image* BrowseLink::release_image() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::Image* BrowseLink::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.BrowseLink.image)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::Image* BrowseLink::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::playapi::proto::finsky::Image* BrowseLink::mutable_image() {
  ::playapi::proto::finsky::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.BrowseLink.image)
  return _msg;
}
inline void BrowseLink::set_allocated_image(::playapi::proto::finsky::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.BrowseLink.image)
}

// -------------------------------------------------------------------

// QuickLink

// optional string name = 1;
inline bool QuickLink::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QuickLink::has_name() const {
  return _internal_has_name();
}
inline void QuickLink::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QuickLink::name() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuickLink::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.QuickLink.name)
}
inline std::string* QuickLink::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.QuickLink.name)
  return _s;
}
inline const std::string& QuickLink::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QuickLink::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QuickLink::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* QuickLink::release_name() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.QuickLink.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QuickLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.QuickLink.name)
}

// optional .playapi.proto.finsky.Image image = 2;
inline bool QuickLink::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool QuickLink::has_image() const {
  return _internal_has_image();
}
inline const ::playapi::proto::finsky::Image& QuickLink::_internal_image() const {
  const ::playapi::proto::finsky::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::Image&>(
      ::playapi::proto::finsky::_Image_default_instance_);
}
inline const ::playapi::proto::finsky::Image& QuickLink::image() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.image)
  return _internal_image();
}
inline void QuickLink::unsafe_arena_set_allocated_image(
    ::playapi::proto::finsky::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.browse.QuickLink.image)
}
inline ::playapi::proto::finsky::Image* QuickLink::release_image() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::finsky::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::Image* QuickLink::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.QuickLink.image)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::finsky::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::Image* QuickLink::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::playapi::proto::finsky::Image* QuickLink::mutable_image() {
  ::playapi::proto::finsky::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.QuickLink.image)
  return _msg;
}
inline void QuickLink::set_allocated_image(::playapi::proto::finsky::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.QuickLink.image)
}

// optional .playapi.proto.finsky.link.ResolvedLink link = 3;
inline bool QuickLink::_internal_has_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.link_ != nullptr);
  return value;
}
inline bool QuickLink::has_link() const {
  return _internal_has_link();
}
inline const ::playapi::proto::finsky::link::ResolvedLink& QuickLink::_internal_link() const {
  const ::playapi::proto::finsky::link::ResolvedLink* p = _impl_.link_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::link::ResolvedLink&>(
      ::playapi::proto::finsky::link::_ResolvedLink_default_instance_);
}
inline const ::playapi::proto::finsky::link::ResolvedLink& QuickLink::link() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.link)
  return _internal_link();
}
inline void QuickLink::unsafe_arena_set_allocated_link(
    ::playapi::proto::finsky::link::ResolvedLink* link) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_);
  }
  _impl_.link_ = link;
  if (link) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.browse.QuickLink.link)
}
inline ::playapi::proto::finsky::link::ResolvedLink* QuickLink::release_link() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::link::ResolvedLink* temp = _impl_.link_;
  _impl_.link_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::link::ResolvedLink* QuickLink::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.QuickLink.link)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::link::ResolvedLink* temp = _impl_.link_;
  _impl_.link_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::link::ResolvedLink* QuickLink::_internal_mutable_link() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.link_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::link::ResolvedLink>(GetArenaForAllocation());
    _impl_.link_ = p;
  }
  return _impl_.link_;
}
inline ::playapi::proto::finsky::link::ResolvedLink* QuickLink::mutable_link() {
  ::playapi::proto::finsky::link::ResolvedLink* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.QuickLink.link)
  return _msg;
}
inline void QuickLink::set_allocated_link(::playapi::proto::finsky::link::ResolvedLink* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_);
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link));
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.link_ = link;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.QuickLink.link)
}

// optional bool displayRequired = 4;
inline bool QuickLink::_internal_has_displayrequired() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QuickLink::has_displayrequired() const {
  return _internal_has_displayrequired();
}
inline void QuickLink::clear_displayrequired() {
  _impl_.displayrequired_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool QuickLink::_internal_displayrequired() const {
  return _impl_.displayrequired_;
}
inline bool QuickLink::displayrequired() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.displayRequired)
  return _internal_displayrequired();
}
inline void QuickLink::_internal_set_displayrequired(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.displayrequired_ = value;
}
inline void QuickLink::set_displayrequired(bool value) {
  _internal_set_displayrequired(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.QuickLink.displayRequired)
}

// optional bytes serverLogsCookie = 5;
inline bool QuickLink::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QuickLink::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void QuickLink::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& QuickLink::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuickLink::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.QuickLink.serverLogsCookie)
}
inline std::string* QuickLink::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.QuickLink.serverLogsCookie)
  return _s;
}
inline const std::string& QuickLink::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void QuickLink::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* QuickLink::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* QuickLink::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.QuickLink.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QuickLink::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.QuickLink.serverLogsCookie)
}

// optional int32 backendId = 6;
inline bool QuickLink::_internal_has_backendid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QuickLink::has_backendid() const {
  return _internal_has_backendid();
}
inline void QuickLink::clear_backendid() {
  _impl_.backendid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t QuickLink::_internal_backendid() const {
  return _impl_.backendid_;
}
inline int32_t QuickLink::backendid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.backendId)
  return _internal_backendid();
}
inline void QuickLink::_internal_set_backendid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.backendid_ = value;
}
inline void QuickLink::set_backendid(int32_t value) {
  _internal_set_backendid(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.QuickLink.backendId)
}

// optional bool prismStyle = 7;
inline bool QuickLink::_internal_has_prismstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QuickLink::has_prismstyle() const {
  return _internal_has_prismstyle();
}
inline void QuickLink::clear_prismstyle() {
  _impl_.prismstyle_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool QuickLink::_internal_prismstyle() const {
  return _impl_.prismstyle_;
}
inline bool QuickLink::prismstyle() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.QuickLink.prismStyle)
  return _internal_prismstyle();
}
inline void QuickLink::_internal_set_prismstyle(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.prismstyle_ = value;
}
inline void QuickLink::set_prismstyle(bool value) {
  _internal_set_prismstyle(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.QuickLink.prismStyle)
}

// -------------------------------------------------------------------

// TabBubble

// optional string text = 1;
inline bool TabBubble::_internal_has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TabBubble::has_text() const {
  return _internal_has_text();
}
inline void TabBubble::clear_text() {
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TabBubble::text() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.browse.TabBubble.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TabBubble::set_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.browse.TabBubble.text)
}
inline std::string* TabBubble::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.browse.TabBubble.text)
  return _s;
}
inline const std::string& TabBubble::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TabBubble::_internal_set_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TabBubble::_internal_mutable_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TabBubble::release_text() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.browse.TabBubble.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TabBubble::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.browse.TabBubble.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace browse
}  // namespace finsky
}  // namespace proto
}  // namespace playapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_5fbrowse_2eproto
