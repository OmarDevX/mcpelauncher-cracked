// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_device_config.proto

#include "play_device_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace device_config {
PROTOBUF_CONSTEXPR MobileSubscriber::MobileSubscriber(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gid1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imsi_)*/int64_t{0}} {}
struct MobileSubscriberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MobileSubscriberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MobileSubscriberDefaultTypeInternal() {}
  union {
    MobileSubscriber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MobileSubscriberDefaultTypeInternal _MobileSubscriber_default_instance_;
PROTOBUF_CONSTEXPR DataServiceSubscriber::DataServiceSubscriber(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobilesubscriber_)*/nullptr} {}
struct DataServiceSubscriberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServiceSubscriberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServiceSubscriberDefaultTypeInternal() {}
  union {
    DataServiceSubscriber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServiceSubscriberDefaultTypeInternal _DataServiceSubscriber_default_instance_;
PROTOBUF_CONSTEXPR ShortDescription::ShortDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brand_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fingerprint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manufacturer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitypatch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialhash_)*/uint64_t{0u}
  , /*decltype(_impl_.usercount_)*/0} {}
struct ShortDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShortDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShortDescriptionDefaultTypeInternal() {}
  union {
    ShortDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShortDescriptionDefaultTypeInternal _ShortDescription_default_instance_;
PROTOBUF_CONSTEXPR AccountInfo::AccountInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.androididanduserhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AccountInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountInfoDefaultTypeInternal() {}
  union {
    AccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
PROTOBUF_CONSTEXPR UploadDeviceConfigRequest::UploadDeviceConfigRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manufacturer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gcmregistrationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceconfiguration_)*/nullptr
  , /*decltype(_impl_.dataservicesubscriber_)*/nullptr
  , /*decltype(_impl_.shortdescription_)*/nullptr
  , /*decltype(_impl_.accountinfo_)*/nullptr} {}
struct UploadDeviceConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadDeviceConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadDeviceConfigRequestDefaultTypeInternal() {}
  union {
    UploadDeviceConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadDeviceConfigRequestDefaultTypeInternal _UploadDeviceConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadDeviceConfigResponse::UploadDeviceConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uploaddeviceconfigtoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UploadDeviceConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadDeviceConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadDeviceConfigResponseDefaultTypeInternal() {}
  union {
    UploadDeviceConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadDeviceConfigResponseDefaultTypeInternal _UploadDeviceConfigResponse_default_instance_;
}  // namespace device_config
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fdevice_5fconfig_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fdevice_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fdevice_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_play_5fdevice_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::MobileSubscriber, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::MobileSubscriber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::MobileSubscriber, _impl_.imsi_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::MobileSubscriber, _impl_.spn_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::MobileSubscriber, _impl_.gid1_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::DataServiceSubscriber, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::DataServiceSubscriber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::DataServiceSubscriber, _impl_.mobilesubscriber_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_.brand_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_.fingerprint_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_.serialhash_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_.usercount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_.manufacturer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::ShortDescription, _impl_.securitypatch_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::AccountInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::AccountInfo, _impl_.androididanduserhash_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_.deviceconfiguration_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_.manufacturer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_.gcmregistrationid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_.dataservicesubscriber_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_.shortdescription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest, _impl_.accountinfo_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::device_config::UploadDeviceConfigResponse, _impl_.uploaddeviceconfigtoken_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::playapi::proto::finsky::device_config::MobileSubscriber)},
  { 12, 19, -1, sizeof(::playapi::proto::finsky::device_config::DataServiceSubscriber)},
  { 20, 32, -1, sizeof(::playapi::proto::finsky::device_config::ShortDescription)},
  { 38, 45, -1, sizeof(::playapi::proto::finsky::device_config::AccountInfo)},
  { 46, 58, -1, sizeof(::playapi::proto::finsky::device_config::UploadDeviceConfigRequest)},
  { 64, 71, -1, sizeof(::playapi::proto::finsky::device_config::UploadDeviceConfigResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::device_config::_MobileSubscriber_default_instance_._instance,
  &::playapi::proto::finsky::device_config::_DataServiceSubscriber_default_instance_._instance,
  &::playapi::proto::finsky::device_config::_ShortDescription_default_instance_._instance,
  &::playapi::proto::finsky::device_config::_AccountInfo_default_instance_._instance,
  &::playapi::proto::finsky::device_config::_UploadDeviceConfigRequest_default_instance_._instance,
  &::playapi::proto::finsky::device_config::_UploadDeviceConfigResponse_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fdevice_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030play_device_config.proto\022\"playapi.prot"
  "o.finsky.device_config\032\tgsf.proto\032\021play_"
  "common.proto\";\n\020MobileSubscriber\022\014\n\004imsi"
  "\030\001 \001(\003\022\013\n\003spn\030\002 \001(\t\022\014\n\004gid1\030\003 \001(\t\"g\n\025Dat"
  "aServiceSubscriber\022N\n\020mobileSubscriber\030\001"
  " \001(\01324.playapi.proto.finsky.device_confi"
  "g.MobileSubscriber\"\212\001\n\020ShortDescription\022"
  "\r\n\005brand\030\002 \001(\t\022\023\n\013fingerprint\030\003 \001(\t\022\022\n\ns"
  "erialHash\030\004 \001(\006\022\021\n\tuserCount\030\005 \001(\005\022\024\n\014ma"
  "nufacturer\030\006 \001(\t\022\025\n\rsecurityPatch\030\007 \001(\t\""
  "+\n\013AccountInfo\022\034\n\024androidIdAndUserHash\030\001"
  " \001(\t\"\206\003\n\031UploadDeviceConfigRequest\022H\n\023de"
  "viceConfiguration\030\001 \001(\0132+.playapi.proto."
  "gsf.DeviceConfigurationProto\022\024\n\014manufact"
  "urer\030\002 \001(\t\022\031\n\021gcmRegistrationId\030\003 \001(\t\022X\n"
  "\025dataServiceSubscriber\030\004 \001(\01329.playapi.p"
  "roto.finsky.device_config.DataServiceSub"
  "scriber\022N\n\020shortDescription\030\006 \001(\01324.play"
  "api.proto.finsky.device_config.ShortDesc"
  "ription\022D\n\013accountInfo\030\007 \001(\0132/.playapi.p"
  "roto.finsky.device_config.AccountInfo\"=\n"
  "\032UploadDeviceConfigResponse\022\037\n\027uploadDev"
  "iceConfigToken\030\001 \001(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fdevice_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_gsf_2eproto,
  &::descriptor_table_play_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fdevice_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fdevice_5fconfig_2eproto = {
    false, false, 900, descriptor_table_protodef_play_5fdevice_5fconfig_2eproto,
    "play_device_config.proto",
    &descriptor_table_play_5fdevice_5fconfig_2eproto_once, descriptor_table_play_5fdevice_5fconfig_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_play_5fdevice_5fconfig_2eproto::offsets,
    file_level_metadata_play_5fdevice_5fconfig_2eproto, file_level_enum_descriptors_play_5fdevice_5fconfig_2eproto,
    file_level_service_descriptors_play_5fdevice_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fdevice_5fconfig_2eproto_getter() {
  return &descriptor_table_play_5fdevice_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fdevice_5fconfig_2eproto(&descriptor_table_play_5fdevice_5fconfig_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace device_config {

// ===================================================================

class MobileSubscriber::_Internal {
 public:
  using HasBits = decltype(std::declval<MobileSubscriber>()._impl_._has_bits_);
  static void set_has_imsi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gid1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MobileSubscriber::MobileSubscriber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.device_config.MobileSubscriber)
}
MobileSubscriber::MobileSubscriber(const MobileSubscriber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MobileSubscriber* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spn_){}
    , decltype(_impl_.gid1_){}
    , decltype(_impl_.imsi_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_spn()) {
    _this->_impl_.spn_.Set(from._internal_spn(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gid1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gid1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gid1()) {
    _this->_impl_.gid1_.Set(from._internal_gid1(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.imsi_ = from._impl_.imsi_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.device_config.MobileSubscriber)
}

inline void MobileSubscriber::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spn_){}
    , decltype(_impl_.gid1_){}
    , decltype(_impl_.imsi_){int64_t{0}}
  };
  _impl_.spn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gid1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gid1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MobileSubscriber::~MobileSubscriber() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.device_config.MobileSubscriber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MobileSubscriber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spn_.Destroy();
  _impl_.gid1_.Destroy();
}

void MobileSubscriber::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MobileSubscriber::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.device_config.MobileSubscriber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.spn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gid1_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.imsi_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MobileSubscriber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 imsi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_imsi(&has_bits);
          _impl_.imsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string spn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_spn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.MobileSubscriber.spn");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gid1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gid1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.MobileSubscriber.gid1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MobileSubscriber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.device_config.MobileSubscriber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 imsi = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_imsi(), target);
  }

  // optional string spn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spn().data(), static_cast<int>(this->_internal_spn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.MobileSubscriber.spn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spn(), target);
  }

  // optional string gid1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gid1().data(), static_cast<int>(this->_internal_gid1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.MobileSubscriber.gid1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gid1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.device_config.MobileSubscriber)
  return target;
}

size_t MobileSubscriber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.device_config.MobileSubscriber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string spn = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spn());
    }

    // optional string gid1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gid1());
    }

    // optional int64 imsi = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_imsi());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MobileSubscriber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MobileSubscriber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MobileSubscriber::GetClassData() const { return &_class_data_; }


void MobileSubscriber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MobileSubscriber*>(&to_msg);
  auto& from = static_cast<const MobileSubscriber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.device_config.MobileSubscriber)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_spn(from._internal_spn());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_gid1(from._internal_gid1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.imsi_ = from._impl_.imsi_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MobileSubscriber::CopyFrom(const MobileSubscriber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.device_config.MobileSubscriber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileSubscriber::IsInitialized() const {
  return true;
}

void MobileSubscriber::InternalSwap(MobileSubscriber* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spn_, lhs_arena,
      &other->_impl_.spn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gid1_, lhs_arena,
      &other->_impl_.gid1_, rhs_arena
  );
  swap(_impl_.imsi_, other->_impl_.imsi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MobileSubscriber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdevice_5fconfig_2eproto_getter, &descriptor_table_play_5fdevice_5fconfig_2eproto_once,
      file_level_metadata_play_5fdevice_5fconfig_2eproto[0]);
}

// ===================================================================

class DataServiceSubscriber::_Internal {
 public:
  using HasBits = decltype(std::declval<DataServiceSubscriber>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::device_config::MobileSubscriber& mobilesubscriber(const DataServiceSubscriber* msg);
  static void set_has_mobilesubscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::device_config::MobileSubscriber&
DataServiceSubscriber::_Internal::mobilesubscriber(const DataServiceSubscriber* msg) {
  return *msg->_impl_.mobilesubscriber_;
}
DataServiceSubscriber::DataServiceSubscriber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.device_config.DataServiceSubscriber)
}
DataServiceSubscriber::DataServiceSubscriber(const DataServiceSubscriber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataServiceSubscriber* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobilesubscriber_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mobilesubscriber()) {
    _this->_impl_.mobilesubscriber_ = new ::playapi::proto::finsky::device_config::MobileSubscriber(*from._impl_.mobilesubscriber_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.device_config.DataServiceSubscriber)
}

inline void DataServiceSubscriber::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobilesubscriber_){nullptr}
  };
}

DataServiceSubscriber::~DataServiceSubscriber() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.device_config.DataServiceSubscriber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataServiceSubscriber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mobilesubscriber_;
}

void DataServiceSubscriber::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataServiceSubscriber::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.device_config.DataServiceSubscriber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mobilesubscriber_ != nullptr);
    _impl_.mobilesubscriber_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataServiceSubscriber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.device_config.MobileSubscriber mobileSubscriber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobilesubscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataServiceSubscriber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.device_config.DataServiceSubscriber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.device_config.MobileSubscriber mobileSubscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mobilesubscriber(this),
        _Internal::mobilesubscriber(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.device_config.DataServiceSubscriber)
  return target;
}

size_t DataServiceSubscriber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.device_config.DataServiceSubscriber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .playapi.proto.finsky.device_config.MobileSubscriber mobileSubscriber = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mobilesubscriber_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServiceSubscriber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataServiceSubscriber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServiceSubscriber::GetClassData() const { return &_class_data_; }


void DataServiceSubscriber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataServiceSubscriber*>(&to_msg);
  auto& from = static_cast<const DataServiceSubscriber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.device_config.DataServiceSubscriber)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mobilesubscriber()) {
    _this->_internal_mutable_mobilesubscriber()->::playapi::proto::finsky::device_config::MobileSubscriber::MergeFrom(
        from._internal_mobilesubscriber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataServiceSubscriber::CopyFrom(const DataServiceSubscriber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.device_config.DataServiceSubscriber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServiceSubscriber::IsInitialized() const {
  return true;
}

void DataServiceSubscriber::InternalSwap(DataServiceSubscriber* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mobilesubscriber_, other->_impl_.mobilesubscriber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataServiceSubscriber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdevice_5fconfig_2eproto_getter, &descriptor_table_play_5fdevice_5fconfig_2eproto_once,
      file_level_metadata_play_5fdevice_5fconfig_2eproto[1]);
}

// ===================================================================

class ShortDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ShortDescription>()._impl_._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serialhash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_usercount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_securitypatch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ShortDescription::ShortDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.device_config.ShortDescription)
}
ShortDescription::ShortDescription(const ShortDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShortDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brand_){}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.securitypatch_){}
    , decltype(_impl_.serialhash_){}
    , decltype(_impl_.usercount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.brand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.brand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_brand()) {
    _this->_impl_.brand_.Set(from._internal_brand(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fingerprint()) {
    _this->_impl_.fingerprint_.Set(from._internal_fingerprint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manufacturer()) {
    _this->_impl_.manufacturer_.Set(from._internal_manufacturer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitypatch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_securitypatch()) {
    _this->_impl_.securitypatch_.Set(from._internal_securitypatch(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serialhash_, &from._impl_.serialhash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usercount_) -
    reinterpret_cast<char*>(&_impl_.serialhash_)) + sizeof(_impl_.usercount_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.device_config.ShortDescription)
}

inline void ShortDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brand_){}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.securitypatch_){}
    , decltype(_impl_.serialhash_){uint64_t{0u}}
    , decltype(_impl_.usercount_){0}
  };
  _impl_.brand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.brand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fingerprint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitypatch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShortDescription::~ShortDescription() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.device_config.ShortDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShortDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.brand_.Destroy();
  _impl_.fingerprint_.Destroy();
  _impl_.manufacturer_.Destroy();
  _impl_.securitypatch_.Destroy();
}

void ShortDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShortDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.device_config.ShortDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brand_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fingerprint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.securitypatch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.serialhash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usercount_) -
        reinterpret_cast<char*>(&_impl_.serialhash_)) + sizeof(_impl_.usercount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShortDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string brand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_brand();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.ShortDescription.brand");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string fingerprint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.ShortDescription.fingerprint");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 serialHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_serialhash(&has_bits);
          _impl_.serialhash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 userCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_usercount(&has_bits);
          _impl_.usercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manufacturer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.ShortDescription.manufacturer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string securityPatch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_securitypatch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.ShortDescription.securityPatch");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShortDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.device_config.ShortDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string brand = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.ShortDescription.brand");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brand(), target);
  }

  // optional string fingerprint = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.ShortDescription.fingerprint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fingerprint(), target);
  }

  // optional fixed64 serialHash = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_serialhash(), target);
  }

  // optional int32 userCount = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_usercount(), target);
  }

  // optional string manufacturer = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.ShortDescription.manufacturer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_manufacturer(), target);
  }

  // optional string securityPatch = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securitypatch().data(), static_cast<int>(this->_internal_securitypatch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.ShortDescription.securityPatch");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securitypatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.device_config.ShortDescription)
  return target;
}

size_t ShortDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.device_config.ShortDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string brand = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brand());
    }

    // optional string fingerprint = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fingerprint());
    }

    // optional string manufacturer = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer());
    }

    // optional string securityPatch = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_securitypatch());
    }

    // optional fixed64 serialHash = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 userCount = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usercount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShortDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShortDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShortDescription::GetClassData() const { return &_class_data_; }


void ShortDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShortDescription*>(&to_msg);
  auto& from = static_cast<const ShortDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.device_config.ShortDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_brand(from._internal_brand());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fingerprint(from._internal_fingerprint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_manufacturer(from._internal_manufacturer());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_securitypatch(from._internal_securitypatch());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.serialhash_ = from._impl_.serialhash_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.usercount_ = from._impl_.usercount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShortDescription::CopyFrom(const ShortDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.device_config.ShortDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortDescription::IsInitialized() const {
  return true;
}

void ShortDescription::InternalSwap(ShortDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.brand_, lhs_arena,
      &other->_impl_.brand_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fingerprint_, lhs_arena,
      &other->_impl_.fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manufacturer_, lhs_arena,
      &other->_impl_.manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitypatch_, lhs_arena,
      &other->_impl_.securitypatch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShortDescription, _impl_.usercount_)
      + sizeof(ShortDescription::_impl_.usercount_)
      - PROTOBUF_FIELD_OFFSET(ShortDescription, _impl_.serialhash_)>(
          reinterpret_cast<char*>(&_impl_.serialhash_),
          reinterpret_cast<char*>(&other->_impl_.serialhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShortDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdevice_5fconfig_2eproto_getter, &descriptor_table_play_5fdevice_5fconfig_2eproto_once,
      file_level_metadata_play_5fdevice_5fconfig_2eproto[2]);
}

// ===================================================================

class AccountInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountInfo>()._impl_._has_bits_);
  static void set_has_androididanduserhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AccountInfo::AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.device_config.AccountInfo)
}
AccountInfo::AccountInfo(const AccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.androididanduserhash_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.androididanduserhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.androididanduserhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_androididanduserhash()) {
    _this->_impl_.androididanduserhash_.Set(from._internal_androididanduserhash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.device_config.AccountInfo)
}

inline void AccountInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.androididanduserhash_){}
  };
  _impl_.androididanduserhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.androididanduserhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.device_config.AccountInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.androididanduserhash_.Destroy();
}

void AccountInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.device_config.AccountInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.androididanduserhash_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string androidIdAndUserHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_androididanduserhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.device_config.AccountInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string androidIdAndUserHash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_androididanduserhash().data(), static_cast<int>(this->_internal_androididanduserhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_androididanduserhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.device_config.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.device_config.AccountInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string androidIdAndUserHash = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_androididanduserhash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountInfo::GetClassData() const { return &_class_data_; }


void AccountInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountInfo*>(&to_msg);
  auto& from = static_cast<const AccountInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.device_config.AccountInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_androididanduserhash()) {
    _this->_internal_set_androididanduserhash(from._internal_androididanduserhash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.device_config.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  return true;
}

void AccountInfo::InternalSwap(AccountInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.androididanduserhash_, lhs_arena,
      &other->_impl_.androididanduserhash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdevice_5fconfig_2eproto_getter, &descriptor_table_play_5fdevice_5fconfig_2eproto_once,
      file_level_metadata_play_5fdevice_5fconfig_2eproto[3]);
}

// ===================================================================

class UploadDeviceConfigRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadDeviceConfigRequest>()._impl_._has_bits_);
  static const ::playapi::proto::gsf::DeviceConfigurationProto& deviceconfiguration(const UploadDeviceConfigRequest* msg);
  static void set_has_deviceconfiguration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gcmregistrationid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::device_config::DataServiceSubscriber& dataservicesubscriber(const UploadDeviceConfigRequest* msg);
  static void set_has_dataservicesubscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::device_config::ShortDescription& shortdescription(const UploadDeviceConfigRequest* msg);
  static void set_has_shortdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::device_config::AccountInfo& accountinfo(const UploadDeviceConfigRequest* msg);
  static void set_has_accountinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::playapi::proto::gsf::DeviceConfigurationProto&
UploadDeviceConfigRequest::_Internal::deviceconfiguration(const UploadDeviceConfigRequest* msg) {
  return *msg->_impl_.deviceconfiguration_;
}
const ::playapi::proto::finsky::device_config::DataServiceSubscriber&
UploadDeviceConfigRequest::_Internal::dataservicesubscriber(const UploadDeviceConfigRequest* msg) {
  return *msg->_impl_.dataservicesubscriber_;
}
const ::playapi::proto::finsky::device_config::ShortDescription&
UploadDeviceConfigRequest::_Internal::shortdescription(const UploadDeviceConfigRequest* msg) {
  return *msg->_impl_.shortdescription_;
}
const ::playapi::proto::finsky::device_config::AccountInfo&
UploadDeviceConfigRequest::_Internal::accountinfo(const UploadDeviceConfigRequest* msg) {
  return *msg->_impl_.accountinfo_;
}
void UploadDeviceConfigRequest::clear_deviceconfiguration() {
  if (_impl_.deviceconfiguration_ != nullptr) _impl_.deviceconfiguration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
UploadDeviceConfigRequest::UploadDeviceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
}
UploadDeviceConfigRequest::UploadDeviceConfigRequest(const UploadDeviceConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadDeviceConfigRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.gcmregistrationid_){}
    , decltype(_impl_.deviceconfiguration_){nullptr}
    , decltype(_impl_.dataservicesubscriber_){nullptr}
    , decltype(_impl_.shortdescription_){nullptr}
    , decltype(_impl_.accountinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manufacturer()) {
    _this->_impl_.manufacturer_.Set(from._internal_manufacturer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gcmregistrationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gcmregistrationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gcmregistrationid()) {
    _this->_impl_.gcmregistrationid_.Set(from._internal_gcmregistrationid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deviceconfiguration()) {
    _this->_impl_.deviceconfiguration_ = new ::playapi::proto::gsf::DeviceConfigurationProto(*from._impl_.deviceconfiguration_);
  }
  if (from._internal_has_dataservicesubscriber()) {
    _this->_impl_.dataservicesubscriber_ = new ::playapi::proto::finsky::device_config::DataServiceSubscriber(*from._impl_.dataservicesubscriber_);
  }
  if (from._internal_has_shortdescription()) {
    _this->_impl_.shortdescription_ = new ::playapi::proto::finsky::device_config::ShortDescription(*from._impl_.shortdescription_);
  }
  if (from._internal_has_accountinfo()) {
    _this->_impl_.accountinfo_ = new ::playapi::proto::finsky::device_config::AccountInfo(*from._impl_.accountinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
}

inline void UploadDeviceConfigRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.gcmregistrationid_){}
    , decltype(_impl_.deviceconfiguration_){nullptr}
    , decltype(_impl_.dataservicesubscriber_){nullptr}
    , decltype(_impl_.shortdescription_){nullptr}
    , decltype(_impl_.accountinfo_){nullptr}
  };
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gcmregistrationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gcmregistrationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadDeviceConfigRequest::~UploadDeviceConfigRequest() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadDeviceConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.manufacturer_.Destroy();
  _impl_.gcmregistrationid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deviceconfiguration_;
  if (this != internal_default_instance()) delete _impl_.dataservicesubscriber_;
  if (this != internal_default_instance()) delete _impl_.shortdescription_;
  if (this != internal_default_instance()) delete _impl_.accountinfo_;
}

void UploadDeviceConfigRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadDeviceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gcmregistrationid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deviceconfiguration_ != nullptr);
      _impl_.deviceconfiguration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.dataservicesubscriber_ != nullptr);
      _impl_.dataservicesubscriber_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.shortdescription_ != nullptr);
      _impl_.shortdescription_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.accountinfo_ != nullptr);
      _impl_.accountinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadDeviceConfigRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceconfiguration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manufacturer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gcmRegistrationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gcmregistrationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.device_config.DataServiceSubscriber dataServiceSubscriber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataservicesubscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.device_config.ShortDescription shortDescription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shortdescription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.device_config.AccountInfo accountInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadDeviceConfigRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deviceconfiguration(this),
        _Internal::deviceconfiguration(this).GetCachedSize(), target, stream);
  }

  // optional string manufacturer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_manufacturer(), target);
  }

  // optional string gcmRegistrationId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gcmregistrationid().data(), static_cast<int>(this->_internal_gcmregistrationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gcmregistrationid(), target);
  }

  // optional .playapi.proto.finsky.device_config.DataServiceSubscriber dataServiceSubscriber = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dataservicesubscriber(this),
        _Internal::dataservicesubscriber(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.device_config.ShortDescription shortDescription = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::shortdescription(this),
        _Internal::shortdescription(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.device_config.AccountInfo accountInfo = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::accountinfo(this),
        _Internal::accountinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  return target;
}

size_t UploadDeviceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string manufacturer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer());
    }

    // optional string gcmRegistrationId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gcmregistrationid());
    }

    // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deviceconfiguration_);
    }

    // optional .playapi.proto.finsky.device_config.DataServiceSubscriber dataServiceSubscriber = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dataservicesubscriber_);
    }

    // optional .playapi.proto.finsky.device_config.ShortDescription shortDescription = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shortdescription_);
    }

    // optional .playapi.proto.finsky.device_config.AccountInfo accountInfo = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accountinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadDeviceConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadDeviceConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadDeviceConfigRequest::GetClassData() const { return &_class_data_; }


void UploadDeviceConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadDeviceConfigRequest*>(&to_msg);
  auto& from = static_cast<const UploadDeviceConfigRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_manufacturer(from._internal_manufacturer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_gcmregistrationid(from._internal_gcmregistrationid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deviceconfiguration()->::playapi::proto::gsf::DeviceConfigurationProto::MergeFrom(
          from._internal_deviceconfiguration());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dataservicesubscriber()->::playapi::proto::finsky::device_config::DataServiceSubscriber::MergeFrom(
          from._internal_dataservicesubscriber());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_shortdescription()->::playapi::proto::finsky::device_config::ShortDescription::MergeFrom(
          from._internal_shortdescription());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_accountinfo()->::playapi::proto::finsky::device_config::AccountInfo::MergeFrom(
          from._internal_accountinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadDeviceConfigRequest::CopyFrom(const UploadDeviceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDeviceConfigRequest::IsInitialized() const {
  return true;
}

void UploadDeviceConfigRequest::InternalSwap(UploadDeviceConfigRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manufacturer_, lhs_arena,
      &other->_impl_.manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gcmregistrationid_, lhs_arena,
      &other->_impl_.gcmregistrationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadDeviceConfigRequest, _impl_.accountinfo_)
      + sizeof(UploadDeviceConfigRequest::_impl_.accountinfo_)
      - PROTOBUF_FIELD_OFFSET(UploadDeviceConfigRequest, _impl_.deviceconfiguration_)>(
          reinterpret_cast<char*>(&_impl_.deviceconfiguration_),
          reinterpret_cast<char*>(&other->_impl_.deviceconfiguration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadDeviceConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdevice_5fconfig_2eproto_getter, &descriptor_table_play_5fdevice_5fconfig_2eproto_once,
      file_level_metadata_play_5fdevice_5fconfig_2eproto[4]);
}

// ===================================================================

class UploadDeviceConfigResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadDeviceConfigResponse>()._impl_._has_bits_);
  static void set_has_uploaddeviceconfigtoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UploadDeviceConfigResponse::UploadDeviceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
}
UploadDeviceConfigResponse::UploadDeviceConfigResponse(const UploadDeviceConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadDeviceConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uploaddeviceconfigtoken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uploaddeviceconfigtoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploaddeviceconfigtoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uploaddeviceconfigtoken()) {
    _this->_impl_.uploaddeviceconfigtoken_.Set(from._internal_uploaddeviceconfigtoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
}

inline void UploadDeviceConfigResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uploaddeviceconfigtoken_){}
  };
  _impl_.uploaddeviceconfigtoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploaddeviceconfigtoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadDeviceConfigResponse::~UploadDeviceConfigResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadDeviceConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uploaddeviceconfigtoken_.Destroy();
}

void UploadDeviceConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadDeviceConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uploaddeviceconfigtoken_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadDeviceConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uploadDeviceConfigToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uploaddeviceconfigtoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadDeviceConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uploadDeviceConfigToken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uploaddeviceconfigtoken().data(), static_cast<int>(this->_internal_uploaddeviceconfigtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uploaddeviceconfigtoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  return target;
}

size_t UploadDeviceConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string uploadDeviceConfigToken = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploaddeviceconfigtoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadDeviceConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadDeviceConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadDeviceConfigResponse::GetClassData() const { return &_class_data_; }


void UploadDeviceConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadDeviceConfigResponse*>(&to_msg);
  auto& from = static_cast<const UploadDeviceConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uploaddeviceconfigtoken()) {
    _this->_internal_set_uploaddeviceconfigtoken(from._internal_uploaddeviceconfigtoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadDeviceConfigResponse::CopyFrom(const UploadDeviceConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDeviceConfigResponse::IsInitialized() const {
  return true;
}

void UploadDeviceConfigResponse::InternalSwap(UploadDeviceConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uploaddeviceconfigtoken_, lhs_arena,
      &other->_impl_.uploaddeviceconfigtoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadDeviceConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdevice_5fconfig_2eproto_getter, &descriptor_table_play_5fdevice_5fconfig_2eproto_once,
      file_level_metadata_play_5fdevice_5fconfig_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace device_config
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::device_config::MobileSubscriber*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::device_config::MobileSubscriber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::device_config::MobileSubscriber >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::device_config::DataServiceSubscriber*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::device_config::DataServiceSubscriber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::device_config::DataServiceSubscriber >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::device_config::ShortDescription*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::device_config::ShortDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::device_config::ShortDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::device_config::AccountInfo*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::device_config::AccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::device_config::AccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::device_config::UploadDeviceConfigRequest*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::device_config::UploadDeviceConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::device_config::UploadDeviceConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
