// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_details.proto

#include "play_details.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace details {
PROTOBUF_CONSTEXPR BulkDetailsRequest_Entry::BulkDetailsRequest_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.docid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.installedversioncode_)*/0
  , /*decltype(_impl_.includedetails_)*/false} {}
struct BulkDetailsRequest_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkDetailsRequest_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkDetailsRequest_EntryDefaultTypeInternal() {}
  union {
    BulkDetailsRequest_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkDetailsRequest_EntryDefaultTypeInternal _BulkDetailsRequest_Entry_default_instance_;
PROTOBUF_CONSTEXPR BulkDetailsRequest::BulkDetailsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkDetailsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkDetailsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkDetailsRequestDefaultTypeInternal() {}
  union {
    BulkDetailsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkDetailsRequestDefaultTypeInternal _BulkDetailsRequest_default_instance_;
PROTOBUF_CONSTEXPR BulkDetailsResponse::BulkDetailsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkDetailsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkDetailsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkDetailsResponseDefaultTypeInternal() {}
  union {
    BulkDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkDetailsResponseDefaultTypeInternal _BulkDetailsResponse_default_instance_;
PROTOBUF_CONSTEXPR BulkDetailsEntry::BulkDetailsEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.doc_)*/nullptr} {}
struct BulkDetailsEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkDetailsEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkDetailsEntryDefaultTypeInternal() {}
  union {
    BulkDetailsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkDetailsEntryDefaultTypeInternal _BulkDetailsEntry_default_instance_;
PROTOBUF_CONSTEXPR DetailsResponse::DetailsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.discoverybadge_)*/{}
  , /*decltype(_impl_.footerhtml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userreview_)*/nullptr
  , /*decltype(_impl_.docv2_)*/nullptr
  , /*decltype(_impl_.enablereviews_)*/false} {}
struct DetailsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetailsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetailsResponseDefaultTypeInternal() {}
  union {
    DetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetailsResponseDefaultTypeInternal _DetailsResponse_default_instance_;
PROTOBUF_CONSTEXPR DiscoveryBadge::DiscoveryBadge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadcount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadunits_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contentdescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.discoverybadgelink_)*/nullptr
  , /*decltype(_impl_.playerbadge_)*/nullptr
  , /*decltype(_impl_.familyagerangebadge_)*/nullptr
  , /*decltype(_impl_.familycategorybadge_)*/nullptr
  , /*decltype(_impl_.backgroundcolor_)*/0
  , /*decltype(_impl_.isplusone_)*/false
  , /*decltype(_impl_.aggregaterating_)*/0
  , /*decltype(_impl_.userstarrating_)*/0} {}
struct DiscoveryBadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryBadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryBadgeDefaultTypeInternal() {}
  union {
    DiscoveryBadge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryBadgeDefaultTypeInternal _DiscoveryBadge_default_instance_;
PROTOBUF_CONSTEXPR DiscoveryBadgeLink::DiscoveryBadgeLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userreviewsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.criticreviewsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.link_)*/nullptr} {}
struct DiscoveryBadgeLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryBadgeLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryBadgeLinkDefaultTypeInternal() {}
  union {
    DiscoveryBadgeLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryBadgeLinkDefaultTypeInternal _DiscoveryBadgeLink_default_instance_;
PROTOBUF_CONSTEXPR PlayerBadge::PlayerBadge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.overlayicon_)*/nullptr} {}
struct PlayerBadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerBadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerBadgeDefaultTypeInternal() {}
  union {
    PlayerBadge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerBadgeDefaultTypeInternal _PlayerBadge_default_instance_;
PROTOBUF_CONSTEXPR FamilyAgeRangeBadge::FamilyAgeRangeBadge(
    ::_pbi::ConstantInitialized) {}
struct FamilyAgeRangeBadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FamilyAgeRangeBadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FamilyAgeRangeBadgeDefaultTypeInternal() {}
  union {
    FamilyAgeRangeBadge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FamilyAgeRangeBadgeDefaultTypeInternal _FamilyAgeRangeBadge_default_instance_;
PROTOBUF_CONSTEXPR FamilyCategoryBadge::FamilyCategoryBadge(
    ::_pbi::ConstantInitialized) {}
struct FamilyCategoryBadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FamilyCategoryBadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FamilyCategoryBadgeDefaultTypeInternal() {}
  union {
    FamilyCategoryBadge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FamilyCategoryBadgeDefaultTypeInternal _FamilyCategoryBadge_default_instance_;
}  // namespace details
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fdetails_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fdetails_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fdetails_2eproto = nullptr;

const uint32_t TableStruct_play_5fdetails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest_Entry, _impl_.docid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest_Entry, _impl_.installedversioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest_Entry, _impl_.includedetails_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsRequest, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsResponse, _impl_.entry_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::BulkDetailsEntry, _impl_.doc_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_.userreview_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_.docv2_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_.footerhtml_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_.discoverybadge_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DetailsResponse, _impl_.enablereviews_),
  2,
  3,
  0,
  1,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.backgroundcolor_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.discoverybadgelink_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.isplusone_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.aggregaterating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.userstarrating_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.downloadcount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.downloadunits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.contentdescription_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.playerbadge_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.familyagerangebadge_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadge, _impl_.familycategorybadge_),
  0,
  5,
  10,
  6,
  1,
  11,
  12,
  13,
  2,
  3,
  4,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadgeLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadgeLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadgeLink, _impl_.link_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadgeLink, _impl_.userreviewsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::DiscoveryBadgeLink, _impl_.criticreviewsurl_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::PlayerBadge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::PlayerBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::PlayerBadge, _impl_.overlayicon_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::FamilyAgeRangeBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::details::FamilyCategoryBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::playapi::proto::finsky::details::BulkDetailsRequest_Entry)},
  { 12, -1, -1, sizeof(::playapi::proto::finsky::details::BulkDetailsRequest)},
  { 19, -1, -1, sizeof(::playapi::proto::finsky::details::BulkDetailsResponse)},
  { 26, 33, -1, sizeof(::playapi::proto::finsky::details::BulkDetailsEntry)},
  { 34, 46, -1, sizeof(::playapi::proto::finsky::details::DetailsResponse)},
  { 52, 72, -1, sizeof(::playapi::proto::finsky::details::DiscoveryBadge)},
  { 86, 95, -1, sizeof(::playapi::proto::finsky::details::DiscoveryBadgeLink)},
  { 98, 105, -1, sizeof(::playapi::proto::finsky::details::PlayerBadge)},
  { 106, -1, -1, sizeof(::playapi::proto::finsky::details::FamilyAgeRangeBadge)},
  { 112, -1, -1, sizeof(::playapi::proto::finsky::details::FamilyCategoryBadge)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::details::_BulkDetailsRequest_Entry_default_instance_._instance,
  &::playapi::proto::finsky::details::_BulkDetailsRequest_default_instance_._instance,
  &::playapi::proto::finsky::details::_BulkDetailsResponse_default_instance_._instance,
  &::playapi::proto::finsky::details::_BulkDetailsEntry_default_instance_._instance,
  &::playapi::proto::finsky::details::_DetailsResponse_default_instance_._instance,
  &::playapi::proto::finsky::details::_DiscoveryBadge_default_instance_._instance,
  &::playapi::proto::finsky::details::_DiscoveryBadgeLink_default_instance_._instance,
  &::playapi::proto::finsky::details::_PlayerBadge_default_instance_._instance,
  &::playapi::proto::finsky::details::_FamilyAgeRangeBadge_default_instance_._instance,
  &::playapi::proto::finsky::details::_FamilyCategoryBadge_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fdetails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022play_details.proto\022\034playapi.proto.fins"
  "ky.details\032\021play_common.proto\032\023play_docu"
  "ment.proto\032\017play_link.proto\"\251\001\n\022BulkDeta"
  "ilsRequest\022E\n\005entry\030\010 \003(\01326.playapi.prot"
  "o.finsky.details.BulkDetailsRequest.Entr"
  "y\032L\n\005Entry\022\r\n\005docid\030\001 \002(\t\022\034\n\024installedVe"
  "rsionCode\030\002 \001(\005\022\026\n\016includeDetails\030\003 \001(\010\""
  "T\n\023BulkDetailsResponse\022=\n\005entry\030\001 \003(\0132.."
  "playapi.proto.finsky.details.BulkDetails"
  "Entry\"E\n\020BulkDetailsEntry\0221\n\003doc\030\001 \001(\0132$"
  ".playapi.proto.finsky.document.DocV2\"\214\002\n"
  "\017DetailsResponse\0229\n\nuserReview\030\003 \001(\0132%.p"
  "layapi.proto.finsky.document.Review\0223\n\005d"
  "ocV2\030\004 \001(\0132$.playapi.proto.finsky.docume"
  "nt.DocV2\022\022\n\nfooterHtml\030\005 \001(\t\022\030\n\020serverLo"
  "gsCookie\030\006 \001(\014\022D\n\016discoveryBadge\030\007 \003(\0132,"
  ".playapi.proto.finsky.details.DiscoveryB"
  "adge\022\025\n\renableReviews\030\010 \001(\010\"\272\004\n\016Discover"
  "yBadge\022\r\n\005title\030\001 \001(\t\022*\n\005image\030\002 \001(\0132\033.p"
  "layapi.proto.finsky.Image\022\027\n\017backgroundC"
  "olor\030\003 \001(\005\022L\n\022discoveryBadgeLink\030\004 \001(\01320"
  ".playapi.proto.finsky.details.DiscoveryB"
  "adgeLink\022\030\n\020serverLogsCookie\030\005 \001(\014\022\021\n\tis"
  "PlusOne\030\006 \001(\010\022\027\n\017aggregateRating\030\007 \001(\002\022\026"
  "\n\016userStarRating\030\010 \001(\005\022\025\n\rdownloadCount\030"
  "\t \001(\t\022\025\n\rdownloadUnits\030\n \001(\t\022\032\n\022contentD"
  "escription\030\013 \001(\t\022>\n\013playerBadge\030\014 \001(\0132)."
  "playapi.proto.finsky.details.PlayerBadge"
  "\022N\n\023familyAgeRangeBadge\030\r \001(\01321.playapi."
  "proto.finsky.details.FamilyAgeRangeBadge"
  "\022N\n\023familyCategoryBadge\030\016 \001(\01321.playapi."
  "proto.finsky.details.FamilyCategoryBadge"
  "\"u\n\022DiscoveryBadgeLink\022-\n\004link\030\001 \001(\0132\037.p"
  "layapi.proto.finsky.link.Link\022\026\n\016userRev"
  "iewsUrl\030\002 \001(\t\022\030\n\020criticReviewsUrl\030\003 \001(\t\""
  "\?\n\013PlayerBadge\0220\n\013overlayIcon\030\001 \001(\0132\033.pl"
  "ayapi.proto.finsky.Image\"\025\n\023FamilyAgeRan"
  "geBadge\"\025\n\023FamilyCategoryBadge"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fdetails_2eproto_deps[3] = {
  &::descriptor_table_play_5fcommon_2eproto,
  &::descriptor_table_play_5fdocument_2eproto,
  &::descriptor_table_play_5flink_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fdetails_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fdetails_2eproto = {
    false, false, 1510, descriptor_table_protodef_play_5fdetails_2eproto,
    "play_details.proto",
    &descriptor_table_play_5fdetails_2eproto_once, descriptor_table_play_5fdetails_2eproto_deps, 3, 10,
    schemas, file_default_instances, TableStruct_play_5fdetails_2eproto::offsets,
    file_level_metadata_play_5fdetails_2eproto, file_level_enum_descriptors_play_5fdetails_2eproto,
    file_level_service_descriptors_play_5fdetails_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fdetails_2eproto_getter() {
  return &descriptor_table_play_5fdetails_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fdetails_2eproto(&descriptor_table_play_5fdetails_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace details {

// ===================================================================

class BulkDetailsRequest_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkDetailsRequest_Entry>()._impl_._has_bits_);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_installedversioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_includedetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BulkDetailsRequest_Entry::BulkDetailsRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
}
BulkDetailsRequest_Entry::BulkDetailsRequest_Entry(const BulkDetailsRequest_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkDetailsRequest_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.installedversioncode_){}
    , decltype(_impl_.includedetails_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docid()) {
    _this->_impl_.docid_.Set(from._internal_docid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.installedversioncode_, &from._impl_.installedversioncode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.includedetails_) -
    reinterpret_cast<char*>(&_impl_.installedversioncode_)) + sizeof(_impl_.includedetails_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
}

inline void BulkDetailsRequest_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.installedversioncode_){0}
    , decltype(_impl_.includedetails_){false}
  };
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BulkDetailsRequest_Entry::~BulkDetailsRequest_Entry() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkDetailsRequest_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.docid_.Destroy();
}

void BulkDetailsRequest_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkDetailsRequest_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.docid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.installedversioncode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.includedetails_) -
        reinterpret_cast<char*>(&_impl_.installedversioncode_)) + sizeof(_impl_.includedetails_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkDetailsRequest_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string docid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_docid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 installedVersionCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_installedversioncode(&has_bits);
          _impl_.installedversioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includeDetails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_includedetails(&has_bits);
          _impl_.includedetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkDetailsRequest_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docid().data(), static_cast<int>(this->_internal_docid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docid(), target);
  }

  // optional int32 installedVersionCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_installedversioncode(), target);
  }

  // optional bool includeDetails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_includedetails(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  return target;
}

size_t BulkDetailsRequest_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  size_t total_size = 0;

  // required string docid = 1;
  if (_internal_has_docid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_docid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 installedVersionCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_installedversioncode());
    }

    // optional bool includeDetails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkDetailsRequest_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkDetailsRequest_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkDetailsRequest_Entry::GetClassData() const { return &_class_data_; }


void BulkDetailsRequest_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkDetailsRequest_Entry*>(&to_msg);
  auto& from = static_cast<const BulkDetailsRequest_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_docid(from._internal_docid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.installedversioncode_ = from._impl_.installedversioncode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.includedetails_ = from._impl_.includedetails_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkDetailsRequest_Entry::CopyFrom(const BulkDetailsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkDetailsRequest_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BulkDetailsRequest_Entry::InternalSwap(BulkDetailsRequest_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docid_, lhs_arena,
      &other->_impl_.docid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkDetailsRequest_Entry, _impl_.includedetails_)
      + sizeof(BulkDetailsRequest_Entry::_impl_.includedetails_)
      - PROTOBUF_FIELD_OFFSET(BulkDetailsRequest_Entry, _impl_.installedversioncode_)>(
          reinterpret_cast<char*>(&_impl_.installedversioncode_),
          reinterpret_cast<char*>(&other->_impl_.installedversioncode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkDetailsRequest_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[0]);
}

// ===================================================================

class BulkDetailsRequest::_Internal {
 public:
};

BulkDetailsRequest::BulkDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.BulkDetailsRequest)
}
BulkDetailsRequest::BulkDetailsRequest(const BulkDetailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkDetailsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.BulkDetailsRequest)
}

inline void BulkDetailsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkDetailsRequest::~BulkDetailsRequest() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.BulkDetailsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkDetailsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void BulkDetailsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.BulkDetailsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkDetailsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.details.BulkDetailsRequest.Entry entry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkDetailsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.BulkDetailsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.details.BulkDetailsRequest.Entry entry = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.BulkDetailsRequest)
  return target;
}

size_t BulkDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.BulkDetailsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.details.BulkDetailsRequest.Entry entry = 8;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkDetailsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkDetailsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkDetailsRequest::GetClassData() const { return &_class_data_; }


void BulkDetailsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkDetailsRequest*>(&to_msg);
  auto& from = static_cast<const BulkDetailsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.BulkDetailsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkDetailsRequest::CopyFrom(const BulkDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.BulkDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkDetailsRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entry_))
    return false;
  return true;
}

void BulkDetailsRequest::InternalSwap(BulkDetailsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkDetailsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[1]);
}

// ===================================================================

class BulkDetailsResponse::_Internal {
 public:
};

BulkDetailsResponse::BulkDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.BulkDetailsResponse)
}
BulkDetailsResponse::BulkDetailsResponse(const BulkDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkDetailsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.BulkDetailsResponse)
}

inline void BulkDetailsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkDetailsResponse::~BulkDetailsResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.BulkDetailsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void BulkDetailsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.BulkDetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkDetailsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.details.BulkDetailsEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkDetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.BulkDetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.details.BulkDetailsEntry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.BulkDetailsResponse)
  return target;
}

size_t BulkDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.BulkDetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.details.BulkDetailsEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkDetailsResponse::GetClassData() const { return &_class_data_; }


void BulkDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkDetailsResponse*>(&to_msg);
  auto& from = static_cast<const BulkDetailsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.BulkDetailsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkDetailsResponse::CopyFrom(const BulkDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.BulkDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkDetailsResponse::IsInitialized() const {
  return true;
}

void BulkDetailsResponse::InternalSwap(BulkDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkDetailsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[2]);
}

// ===================================================================

class BulkDetailsEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkDetailsEntry>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::document::DocV2& doc(const BulkDetailsEntry* msg);
  static void set_has_doc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::document::DocV2&
BulkDetailsEntry::_Internal::doc(const BulkDetailsEntry* msg) {
  return *msg->_impl_.doc_;
}
void BulkDetailsEntry::clear_doc() {
  if (_impl_.doc_ != nullptr) _impl_.doc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BulkDetailsEntry::BulkDetailsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.BulkDetailsEntry)
}
BulkDetailsEntry::BulkDetailsEntry(const BulkDetailsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkDetailsEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.doc_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_doc()) {
    _this->_impl_.doc_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.doc_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.BulkDetailsEntry)
}

inline void BulkDetailsEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.doc_){nullptr}
  };
}

BulkDetailsEntry::~BulkDetailsEntry() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.BulkDetailsEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkDetailsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.doc_;
}

void BulkDetailsEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkDetailsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.BulkDetailsEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.doc_ != nullptr);
    _impl_.doc_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkDetailsEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.document.DocV2 doc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkDetailsEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.BulkDetailsEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.document.DocV2 doc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::doc(this),
        _Internal::doc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.BulkDetailsEntry)
  return target;
}

size_t BulkDetailsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.BulkDetailsEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .playapi.proto.finsky.document.DocV2 doc = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.doc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkDetailsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkDetailsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkDetailsEntry::GetClassData() const { return &_class_data_; }


void BulkDetailsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkDetailsEntry*>(&to_msg);
  auto& from = static_cast<const BulkDetailsEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.BulkDetailsEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_doc()) {
    _this->_internal_mutable_doc()->::playapi::proto::finsky::document::DocV2::MergeFrom(
        from._internal_doc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkDetailsEntry::CopyFrom(const BulkDetailsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.BulkDetailsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkDetailsEntry::IsInitialized() const {
  return true;
}

void BulkDetailsEntry::InternalSwap(BulkDetailsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.doc_, other->_impl_.doc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkDetailsEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[3]);
}

// ===================================================================

class DetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailsResponse>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::document::Review& userreview(const DetailsResponse* msg);
  static void set_has_userreview(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::document::DocV2& docv2(const DetailsResponse* msg);
  static void set_has_docv2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_footerhtml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enablereviews(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::playapi::proto::finsky::document::Review&
DetailsResponse::_Internal::userreview(const DetailsResponse* msg) {
  return *msg->_impl_.userreview_;
}
const ::playapi::proto::finsky::document::DocV2&
DetailsResponse::_Internal::docv2(const DetailsResponse* msg) {
  return *msg->_impl_.docv2_;
}
void DetailsResponse::clear_userreview() {
  if (_impl_.userreview_ != nullptr) _impl_.userreview_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DetailsResponse::clear_docv2() {
  if (_impl_.docv2_ != nullptr) _impl_.docv2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DetailsResponse::DetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.DetailsResponse)
}
DetailsResponse::DetailsResponse(const DetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetailsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.discoverybadge_){from._impl_.discoverybadge_}
    , decltype(_impl_.footerhtml_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.userreview_){nullptr}
    , decltype(_impl_.docv2_){nullptr}
    , decltype(_impl_.enablereviews_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.footerhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footerhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_footerhtml()) {
    _this->_impl_.footerhtml_.Set(from._internal_footerhtml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_userreview()) {
    _this->_impl_.userreview_ = new ::playapi::proto::finsky::document::Review(*from._impl_.userreview_);
  }
  if (from._internal_has_docv2()) {
    _this->_impl_.docv2_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.docv2_);
  }
  _this->_impl_.enablereviews_ = from._impl_.enablereviews_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.DetailsResponse)
}

inline void DetailsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.discoverybadge_){arena}
    , decltype(_impl_.footerhtml_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.userreview_){nullptr}
    , decltype(_impl_.docv2_){nullptr}
    , decltype(_impl_.enablereviews_){false}
  };
  _impl_.footerhtml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footerhtml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DetailsResponse::~DetailsResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.DetailsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.discoverybadge_.~RepeatedPtrField();
  _impl_.footerhtml_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  if (this != internal_default_instance()) delete _impl_.userreview_;
  if (this != internal_default_instance()) delete _impl_.docv2_;
}

void DetailsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.DetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.discoverybadge_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.footerhtml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.userreview_ != nullptr);
      _impl_.userreview_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.docv2_ != nullptr);
      _impl_.docv2_->Clear();
    }
  }
  _impl_.enablereviews_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.document.Review userReview = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_userreview(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DocV2 docV2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_docv2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string footerHtml = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_footerhtml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DetailsResponse.footerHtml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.details.DiscoveryBadge discoveryBadge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_discoverybadge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool enableReviews = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_enablereviews(&has_bits);
          _impl_.enablereviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.DetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.document.Review userReview = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::userreview(this),
        _Internal::userreview(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.DocV2 docV2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::docv2(this),
        _Internal::docv2(this).GetCachedSize(), target, stream);
  }

  // optional string footerHtml = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_footerhtml().data(), static_cast<int>(this->_internal_footerhtml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DetailsResponse.footerHtml");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_footerhtml(), target);
  }

  // optional bytes serverLogsCookie = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_serverlogscookie(), target);
  }

  // repeated .playapi.proto.finsky.details.DiscoveryBadge discoveryBadge = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_discoverybadge_size()); i < n; i++) {
    const auto& repfield = this->_internal_discoverybadge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool enableReviews = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_enablereviews(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.DetailsResponse)
  return target;
}

size_t DetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.DetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.details.DiscoveryBadge discoveryBadge = 7;
  total_size += 1UL * this->_internal_discoverybadge_size();
  for (const auto& msg : this->_impl_.discoverybadge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string footerHtml = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_footerhtml());
    }

    // optional bytes serverLogsCookie = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional .playapi.proto.finsky.document.Review userReview = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.userreview_);
    }

    // optional .playapi.proto.finsky.document.DocV2 docV2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.docv2_);
    }

    // optional bool enableReviews = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetailsResponse::GetClassData() const { return &_class_data_; }


void DetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetailsResponse*>(&to_msg);
  auto& from = static_cast<const DetailsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.DetailsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.discoverybadge_.MergeFrom(from._impl_.discoverybadge_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_footerhtml(from._internal_footerhtml());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_userreview()->::playapi::proto::finsky::document::Review::MergeFrom(
          from._internal_userreview());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_docv2()->::playapi::proto::finsky::document::DocV2::MergeFrom(
          from._internal_docv2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enablereviews_ = from._impl_.enablereviews_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetailsResponse::CopyFrom(const DetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.DetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailsResponse::IsInitialized() const {
  return true;
}

void DetailsResponse::InternalSwap(DetailsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.discoverybadge_.InternalSwap(&other->_impl_.discoverybadge_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.footerhtml_, lhs_arena,
      &other->_impl_.footerhtml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailsResponse, _impl_.enablereviews_)
      + sizeof(DetailsResponse::_impl_.enablereviews_)
      - PROTOBUF_FIELD_OFFSET(DetailsResponse, _impl_.userreview_)>(
          reinterpret_cast<char*>(&_impl_.userreview_),
          reinterpret_cast<char*>(&other->_impl_.userreview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[4]);
}

// ===================================================================

class DiscoveryBadge::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscoveryBadge>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::Image& image(const DiscoveryBadge* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_backgroundcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::playapi::proto::finsky::details::DiscoveryBadgeLink& discoverybadgelink(const DiscoveryBadge* msg);
  static void set_has_discoverybadgelink(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isplusone(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_aggregaterating(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_userstarrating(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_downloadcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_downloadunits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contentdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::details::PlayerBadge& playerbadge(const DiscoveryBadge* msg);
  static void set_has_playerbadge(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::details::FamilyAgeRangeBadge& familyagerangebadge(const DiscoveryBadge* msg);
  static void set_has_familyagerangebadge(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::finsky::details::FamilyCategoryBadge& familycategorybadge(const DiscoveryBadge* msg);
  static void set_has_familycategorybadge(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::playapi::proto::finsky::Image&
DiscoveryBadge::_Internal::image(const DiscoveryBadge* msg) {
  return *msg->_impl_.image_;
}
const ::playapi::proto::finsky::details::DiscoveryBadgeLink&
DiscoveryBadge::_Internal::discoverybadgelink(const DiscoveryBadge* msg) {
  return *msg->_impl_.discoverybadgelink_;
}
const ::playapi::proto::finsky::details::PlayerBadge&
DiscoveryBadge::_Internal::playerbadge(const DiscoveryBadge* msg) {
  return *msg->_impl_.playerbadge_;
}
const ::playapi::proto::finsky::details::FamilyAgeRangeBadge&
DiscoveryBadge::_Internal::familyagerangebadge(const DiscoveryBadge* msg) {
  return *msg->_impl_.familyagerangebadge_;
}
const ::playapi::proto::finsky::details::FamilyCategoryBadge&
DiscoveryBadge::_Internal::familycategorybadge(const DiscoveryBadge* msg) {
  return *msg->_impl_.familycategorybadge_;
}
void DiscoveryBadge::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
DiscoveryBadge::DiscoveryBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.DiscoveryBadge)
}
DiscoveryBadge::DiscoveryBadge(const DiscoveryBadge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiscoveryBadge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.downloadcount_){}
    , decltype(_impl_.downloadunits_){}
    , decltype(_impl_.contentdescription_){}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.discoverybadgelink_){nullptr}
    , decltype(_impl_.playerbadge_){nullptr}
    , decltype(_impl_.familyagerangebadge_){nullptr}
    , decltype(_impl_.familycategorybadge_){nullptr}
    , decltype(_impl_.backgroundcolor_){}
    , decltype(_impl_.isplusone_){}
    , decltype(_impl_.aggregaterating_){}
    , decltype(_impl_.userstarrating_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadcount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadcount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_downloadcount()) {
    _this->_impl_.downloadcount_.Set(from._internal_downloadcount(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadunits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadunits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_downloadunits()) {
    _this->_impl_.downloadunits_.Set(from._internal_downloadunits(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contentdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contentdescription()) {
    _this->_impl_.contentdescription_.Set(from._internal_contentdescription(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::playapi::proto::finsky::Image(*from._impl_.image_);
  }
  if (from._internal_has_discoverybadgelink()) {
    _this->_impl_.discoverybadgelink_ = new ::playapi::proto::finsky::details::DiscoveryBadgeLink(*from._impl_.discoverybadgelink_);
  }
  if (from._internal_has_playerbadge()) {
    _this->_impl_.playerbadge_ = new ::playapi::proto::finsky::details::PlayerBadge(*from._impl_.playerbadge_);
  }
  if (from._internal_has_familyagerangebadge()) {
    _this->_impl_.familyagerangebadge_ = new ::playapi::proto::finsky::details::FamilyAgeRangeBadge(*from._impl_.familyagerangebadge_);
  }
  if (from._internal_has_familycategorybadge()) {
    _this->_impl_.familycategorybadge_ = new ::playapi::proto::finsky::details::FamilyCategoryBadge(*from._impl_.familycategorybadge_);
  }
  ::memcpy(&_impl_.backgroundcolor_, &from._impl_.backgroundcolor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.userstarrating_) -
    reinterpret_cast<char*>(&_impl_.backgroundcolor_)) + sizeof(_impl_.userstarrating_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.DiscoveryBadge)
}

inline void DiscoveryBadge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.downloadcount_){}
    , decltype(_impl_.downloadunits_){}
    , decltype(_impl_.contentdescription_){}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.discoverybadgelink_){nullptr}
    , decltype(_impl_.playerbadge_){nullptr}
    , decltype(_impl_.familyagerangebadge_){nullptr}
    , decltype(_impl_.familycategorybadge_){nullptr}
    , decltype(_impl_.backgroundcolor_){0}
    , decltype(_impl_.isplusone_){false}
    , decltype(_impl_.aggregaterating_){0}
    , decltype(_impl_.userstarrating_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadcount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadcount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadunits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadunits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contentdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiscoveryBadge::~DiscoveryBadge() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.DiscoveryBadge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryBadge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  _impl_.downloadcount_.Destroy();
  _impl_.downloadunits_.Destroy();
  _impl_.contentdescription_.Destroy();
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.discoverybadgelink_;
  if (this != internal_default_instance()) delete _impl_.playerbadge_;
  if (this != internal_default_instance()) delete _impl_.familyagerangebadge_;
  if (this != internal_default_instance()) delete _impl_.familycategorybadge_;
}

void DiscoveryBadge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiscoveryBadge::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.DiscoveryBadge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.downloadcount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.downloadunits_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.contentdescription_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.discoverybadgelink_ != nullptr);
      _impl_.discoverybadgelink_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.playerbadge_ != nullptr);
      _impl_.playerbadge_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.familyagerangebadge_ != nullptr);
      _impl_.familyagerangebadge_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.familycategorybadge_ != nullptr);
      _impl_.familycategorybadge_->Clear();
    }
  }
  if (cached_has_bits & 0x00003c00u) {
    ::memset(&_impl_.backgroundcolor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.userstarrating_) -
        reinterpret_cast<char*>(&_impl_.backgroundcolor_)) + sizeof(_impl_.userstarrating_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveryBadge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DiscoveryBadge.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 backgroundColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_backgroundcolor(&has_bits);
          _impl_.backgroundcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.details.DiscoveryBadgeLink discoveryBadgeLink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_discoverybadgelink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isPlusOne = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_isplusone(&has_bits);
          _impl_.isplusone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float aggregateRating = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_aggregaterating(&has_bits);
          _impl_.aggregaterating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 userStarRating = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_userstarrating(&has_bits);
          _impl_.userstarrating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string downloadCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_downloadcount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DiscoveryBadge.downloadCount");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string downloadUnits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_downloadunits();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DiscoveryBadge.downloadUnits");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string contentDescription = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_contentdescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DiscoveryBadge.contentDescription");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.details.PlayerBadge playerBadge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerbadge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.details.FamilyAgeRangeBadge familyAgeRangeBadge = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_familyagerangebadge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.details.FamilyCategoryBadge familyCategoryBadge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_familycategorybadge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryBadge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.DiscoveryBadge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DiscoveryBadge.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional .playapi.proto.finsky.Image image = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // optional int32 backgroundColor = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_backgroundcolor(), target);
  }

  // optional .playapi.proto.finsky.details.DiscoveryBadgeLink discoveryBadgeLink = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::discoverybadgelink(this),
        _Internal::discoverybadgelink(this).GetCachedSize(), target, stream);
  }

  // optional bytes serverLogsCookie = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_serverlogscookie(), target);
  }

  // optional bool isPlusOne = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isplusone(), target);
  }

  // optional float aggregateRating = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_aggregaterating(), target);
  }

  // optional int32 userStarRating = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_userstarrating(), target);
  }

  // optional string downloadCount = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_downloadcount().data(), static_cast<int>(this->_internal_downloadcount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DiscoveryBadge.downloadCount");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_downloadcount(), target);
  }

  // optional string downloadUnits = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_downloadunits().data(), static_cast<int>(this->_internal_downloadunits().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DiscoveryBadge.downloadUnits");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_downloadunits(), target);
  }

  // optional string contentDescription = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contentdescription().data(), static_cast<int>(this->_internal_contentdescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DiscoveryBadge.contentDescription");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_contentdescription(), target);
  }

  // optional .playapi.proto.finsky.details.PlayerBadge playerBadge = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::playerbadge(this),
        _Internal::playerbadge(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.details.FamilyAgeRangeBadge familyAgeRangeBadge = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::familyagerangebadge(this),
        _Internal::familyagerangebadge(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.details.FamilyCategoryBadge familyCategoryBadge = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::familycategorybadge(this),
        _Internal::familycategorybadge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.DiscoveryBadge)
  return target;
}

size_t DiscoveryBadge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.DiscoveryBadge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes serverLogsCookie = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional string downloadCount = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_downloadcount());
    }

    // optional string downloadUnits = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_downloadunits());
    }

    // optional string contentDescription = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentdescription());
    }

    // optional .playapi.proto.finsky.Image image = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

    // optional .playapi.proto.finsky.details.DiscoveryBadgeLink discoveryBadgeLink = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.discoverybadgelink_);
    }

    // optional .playapi.proto.finsky.details.PlayerBadge playerBadge = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playerbadge_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .playapi.proto.finsky.details.FamilyAgeRangeBadge familyAgeRangeBadge = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.familyagerangebadge_);
    }

    // optional .playapi.proto.finsky.details.FamilyCategoryBadge familyCategoryBadge = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.familycategorybadge_);
    }

    // optional int32 backgroundColor = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backgroundcolor());
    }

    // optional bool isPlusOne = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional float aggregateRating = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int32 userStarRating = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userstarrating());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscoveryBadge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiscoveryBadge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscoveryBadge::GetClassData() const { return &_class_data_; }


void DiscoveryBadge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiscoveryBadge*>(&to_msg);
  auto& from = static_cast<const DiscoveryBadge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.DiscoveryBadge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_downloadcount(from._internal_downloadcount());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_downloadunits(from._internal_downloadunits());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_contentdescription(from._internal_contentdescription());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_image()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_image());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_discoverybadgelink()->::playapi::proto::finsky::details::DiscoveryBadgeLink::MergeFrom(
          from._internal_discoverybadgelink());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_playerbadge()->::playapi::proto::finsky::details::PlayerBadge::MergeFrom(
          from._internal_playerbadge());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_familyagerangebadge()->::playapi::proto::finsky::details::FamilyAgeRangeBadge::MergeFrom(
          from._internal_familyagerangebadge());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_familycategorybadge()->::playapi::proto::finsky::details::FamilyCategoryBadge::MergeFrom(
          from._internal_familycategorybadge());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.backgroundcolor_ = from._impl_.backgroundcolor_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.isplusone_ = from._impl_.isplusone_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.aggregaterating_ = from._impl_.aggregaterating_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.userstarrating_ = from._impl_.userstarrating_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscoveryBadge::CopyFrom(const DiscoveryBadge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.DiscoveryBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryBadge::IsInitialized() const {
  return true;
}

void DiscoveryBadge::InternalSwap(DiscoveryBadge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadcount_, lhs_arena,
      &other->_impl_.downloadcount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadunits_, lhs_arena,
      &other->_impl_.downloadunits_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contentdescription_, lhs_arena,
      &other->_impl_.contentdescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscoveryBadge, _impl_.userstarrating_)
      + sizeof(DiscoveryBadge::_impl_.userstarrating_)
      - PROTOBUF_FIELD_OFFSET(DiscoveryBadge, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryBadge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[5]);
}

// ===================================================================

class DiscoveryBadgeLink::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscoveryBadgeLink>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::link::Link& link(const DiscoveryBadgeLink* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_userreviewsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_criticreviewsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::link::Link&
DiscoveryBadgeLink::_Internal::link(const DiscoveryBadgeLink* msg) {
  return *msg->_impl_.link_;
}
void DiscoveryBadgeLink::clear_link() {
  if (_impl_.link_ != nullptr) _impl_.link_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DiscoveryBadgeLink::DiscoveryBadgeLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.DiscoveryBadgeLink)
}
DiscoveryBadgeLink::DiscoveryBadgeLink(const DiscoveryBadgeLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiscoveryBadgeLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userreviewsurl_){}
    , decltype(_impl_.criticreviewsurl_){}
    , decltype(_impl_.link_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userreviewsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userreviewsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_userreviewsurl()) {
    _this->_impl_.userreviewsurl_.Set(from._internal_userreviewsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.criticreviewsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.criticreviewsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_criticreviewsurl()) {
    _this->_impl_.criticreviewsurl_.Set(from._internal_criticreviewsurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_link()) {
    _this->_impl_.link_ = new ::playapi::proto::finsky::link::Link(*from._impl_.link_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.DiscoveryBadgeLink)
}

inline void DiscoveryBadgeLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userreviewsurl_){}
    , decltype(_impl_.criticreviewsurl_){}
    , decltype(_impl_.link_){nullptr}
  };
  _impl_.userreviewsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userreviewsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.criticreviewsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.criticreviewsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiscoveryBadgeLink::~DiscoveryBadgeLink() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.DiscoveryBadgeLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryBadgeLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userreviewsurl_.Destroy();
  _impl_.criticreviewsurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.link_;
}

void DiscoveryBadgeLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiscoveryBadgeLink::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.DiscoveryBadgeLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.userreviewsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.criticreviewsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.link_ != nullptr);
      _impl_.link_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveryBadgeLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.link.Link link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string userReviewsUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_userreviewsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string criticReviewsUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_criticreviewsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryBadgeLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.DiscoveryBadgeLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.link.Link link = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  // optional string userReviewsUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userreviewsurl().data(), static_cast<int>(this->_internal_userreviewsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userreviewsurl(), target);
  }

  // optional string criticReviewsUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_criticreviewsurl().data(), static_cast<int>(this->_internal_criticreviewsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_criticreviewsurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.DiscoveryBadgeLink)
  return target;
}

size_t DiscoveryBadgeLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.DiscoveryBadgeLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string userReviewsUrl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userreviewsurl());
    }

    // optional string criticReviewsUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_criticreviewsurl());
    }

    // optional .playapi.proto.finsky.link.Link link = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscoveryBadgeLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiscoveryBadgeLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscoveryBadgeLink::GetClassData() const { return &_class_data_; }


void DiscoveryBadgeLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiscoveryBadgeLink*>(&to_msg);
  auto& from = static_cast<const DiscoveryBadgeLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.DiscoveryBadgeLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_userreviewsurl(from._internal_userreviewsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_criticreviewsurl(from._internal_criticreviewsurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_link()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_link());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscoveryBadgeLink::CopyFrom(const DiscoveryBadgeLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.DiscoveryBadgeLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryBadgeLink::IsInitialized() const {
  return true;
}

void DiscoveryBadgeLink::InternalSwap(DiscoveryBadgeLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userreviewsurl_, lhs_arena,
      &other->_impl_.userreviewsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.criticreviewsurl_, lhs_arena,
      &other->_impl_.criticreviewsurl_, rhs_arena
  );
  swap(_impl_.link_, other->_impl_.link_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryBadgeLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[6]);
}

// ===================================================================

class PlayerBadge::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerBadge>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::Image& overlayicon(const PlayerBadge* msg);
  static void set_has_overlayicon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::Image&
PlayerBadge::_Internal::overlayicon(const PlayerBadge* msg) {
  return *msg->_impl_.overlayicon_;
}
void PlayerBadge::clear_overlayicon() {
  if (_impl_.overlayicon_ != nullptr) _impl_.overlayicon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlayerBadge::PlayerBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.PlayerBadge)
}
PlayerBadge::PlayerBadge(const PlayerBadge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerBadge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlayicon_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_overlayicon()) {
    _this->_impl_.overlayicon_ = new ::playapi::proto::finsky::Image(*from._impl_.overlayicon_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.PlayerBadge)
}

inline void PlayerBadge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlayicon_){nullptr}
  };
}

PlayerBadge::~PlayerBadge() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.details.PlayerBadge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerBadge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.overlayicon_;
}

void PlayerBadge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerBadge::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.details.PlayerBadge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.overlayicon_ != nullptr);
    _impl_.overlayicon_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBadge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.Image overlayIcon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlayicon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerBadge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.details.PlayerBadge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.Image overlayIcon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::overlayicon(this),
        _Internal::overlayicon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.details.PlayerBadge)
  return target;
}

size_t PlayerBadge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.details.PlayerBadge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .playapi.proto.finsky.Image overlayIcon = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.overlayicon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerBadge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerBadge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerBadge::GetClassData() const { return &_class_data_; }


void PlayerBadge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerBadge*>(&to_msg);
  auto& from = static_cast<const PlayerBadge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.details.PlayerBadge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_overlayicon()) {
    _this->_internal_mutable_overlayicon()->::playapi::proto::finsky::Image::MergeFrom(
        from._internal_overlayicon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerBadge::CopyFrom(const PlayerBadge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.details.PlayerBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBadge::IsInitialized() const {
  return true;
}

void PlayerBadge::InternalSwap(PlayerBadge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.overlayicon_, other->_impl_.overlayicon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBadge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[7]);
}

// ===================================================================

class FamilyAgeRangeBadge::_Internal {
 public:
};

FamilyAgeRangeBadge::FamilyAgeRangeBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.FamilyAgeRangeBadge)
}
FamilyAgeRangeBadge::FamilyAgeRangeBadge(const FamilyAgeRangeBadge& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FamilyAgeRangeBadge* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.FamilyAgeRangeBadge)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FamilyAgeRangeBadge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FamilyAgeRangeBadge::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FamilyAgeRangeBadge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[8]);
}

// ===================================================================

class FamilyCategoryBadge::_Internal {
 public:
};

FamilyCategoryBadge::FamilyCategoryBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.details.FamilyCategoryBadge)
}
FamilyCategoryBadge::FamilyCategoryBadge(const FamilyCategoryBadge& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FamilyCategoryBadge* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.details.FamilyCategoryBadge)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FamilyCategoryBadge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FamilyCategoryBadge::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FamilyCategoryBadge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdetails_2eproto_getter, &descriptor_table_play_5fdetails_2eproto_once,
      file_level_metadata_play_5fdetails_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace details
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::BulkDetailsRequest_Entry*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::BulkDetailsRequest*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::BulkDetailsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::BulkDetailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::BulkDetailsResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::BulkDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::BulkDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::BulkDetailsEntry*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::BulkDetailsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::BulkDetailsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::DetailsResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::DetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::DetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::DiscoveryBadge*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::DiscoveryBadge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::DiscoveryBadge >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::DiscoveryBadgeLink*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::DiscoveryBadgeLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::DiscoveryBadgeLink >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::PlayerBadge*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::PlayerBadge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::PlayerBadge >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::FamilyAgeRangeBadge*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::FamilyAgeRangeBadge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::FamilyAgeRangeBadge >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::details::FamilyCategoryBadge*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::details::FamilyCategoryBadge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::details::FamilyCategoryBadge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
