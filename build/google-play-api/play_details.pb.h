// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_details.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_5fdetails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_5fdetails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "play_common.pb.h"
#include "play_document.pb.h"
#include "play_link.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_5fdetails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_5fdetails_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_5fdetails_2eproto;
namespace playapi {
namespace proto {
namespace finsky {
namespace details {
class BulkDetailsEntry;
struct BulkDetailsEntryDefaultTypeInternal;
extern BulkDetailsEntryDefaultTypeInternal _BulkDetailsEntry_default_instance_;
class BulkDetailsRequest;
struct BulkDetailsRequestDefaultTypeInternal;
extern BulkDetailsRequestDefaultTypeInternal _BulkDetailsRequest_default_instance_;
class BulkDetailsRequest_Entry;
struct BulkDetailsRequest_EntryDefaultTypeInternal;
extern BulkDetailsRequest_EntryDefaultTypeInternal _BulkDetailsRequest_Entry_default_instance_;
class BulkDetailsResponse;
struct BulkDetailsResponseDefaultTypeInternal;
extern BulkDetailsResponseDefaultTypeInternal _BulkDetailsResponse_default_instance_;
class DetailsResponse;
struct DetailsResponseDefaultTypeInternal;
extern DetailsResponseDefaultTypeInternal _DetailsResponse_default_instance_;
class DiscoveryBadge;
struct DiscoveryBadgeDefaultTypeInternal;
extern DiscoveryBadgeDefaultTypeInternal _DiscoveryBadge_default_instance_;
class DiscoveryBadgeLink;
struct DiscoveryBadgeLinkDefaultTypeInternal;
extern DiscoveryBadgeLinkDefaultTypeInternal _DiscoveryBadgeLink_default_instance_;
class FamilyAgeRangeBadge;
struct FamilyAgeRangeBadgeDefaultTypeInternal;
extern FamilyAgeRangeBadgeDefaultTypeInternal _FamilyAgeRangeBadge_default_instance_;
class FamilyCategoryBadge;
struct FamilyCategoryBadgeDefaultTypeInternal;
extern FamilyCategoryBadgeDefaultTypeInternal _FamilyCategoryBadge_default_instance_;
class PlayerBadge;
struct PlayerBadgeDefaultTypeInternal;
extern PlayerBadgeDefaultTypeInternal _PlayerBadge_default_instance_;
}  // namespace details
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> ::playapi::proto::finsky::details::BulkDetailsEntry* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::BulkDetailsEntry>(Arena*);
template<> ::playapi::proto::finsky::details::BulkDetailsRequest* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::BulkDetailsRequest>(Arena*);
template<> ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::BulkDetailsRequest_Entry>(Arena*);
template<> ::playapi::proto::finsky::details::BulkDetailsResponse* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::BulkDetailsResponse>(Arena*);
template<> ::playapi::proto::finsky::details::DetailsResponse* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::DetailsResponse>(Arena*);
template<> ::playapi::proto::finsky::details::DiscoveryBadge* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::DiscoveryBadge>(Arena*);
template<> ::playapi::proto::finsky::details::DiscoveryBadgeLink* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::DiscoveryBadgeLink>(Arena*);
template<> ::playapi::proto::finsky::details::FamilyAgeRangeBadge* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::FamilyAgeRangeBadge>(Arena*);
template<> ::playapi::proto::finsky::details::FamilyCategoryBadge* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::FamilyCategoryBadge>(Arena*);
template<> ::playapi::proto::finsky::details::PlayerBadge* Arena::CreateMaybeMessage<::playapi::proto::finsky::details::PlayerBadge>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playapi {
namespace proto {
namespace finsky {
namespace details {

// ===================================================================

class BulkDetailsRequest_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.BulkDetailsRequest.Entry) */ {
 public:
  inline BulkDetailsRequest_Entry() : BulkDetailsRequest_Entry(nullptr) {}
  ~BulkDetailsRequest_Entry() override;
  explicit PROTOBUF_CONSTEXPR BulkDetailsRequest_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulkDetailsRequest_Entry(const BulkDetailsRequest_Entry& from);
  BulkDetailsRequest_Entry(BulkDetailsRequest_Entry&& from) noexcept
    : BulkDetailsRequest_Entry() {
    *this = ::std::move(from);
  }

  inline BulkDetailsRequest_Entry& operator=(const BulkDetailsRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkDetailsRequest_Entry& operator=(BulkDetailsRequest_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkDetailsRequest_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkDetailsRequest_Entry* internal_default_instance() {
    return reinterpret_cast<const BulkDetailsRequest_Entry*>(
               &_BulkDetailsRequest_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BulkDetailsRequest_Entry& a, BulkDetailsRequest_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkDetailsRequest_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkDetailsRequest_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkDetailsRequest_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkDetailsRequest_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BulkDetailsRequest_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BulkDetailsRequest_Entry& from) {
    BulkDetailsRequest_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkDetailsRequest_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.BulkDetailsRequest.Entry";
  }
  protected:
  explicit BulkDetailsRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocidFieldNumber = 1,
    kInstalledVersionCodeFieldNumber = 2,
    kIncludeDetailsFieldNumber = 3,
  };
  // required string docid = 1;
  bool has_docid() const;
  private:
  bool _internal_has_docid() const;
  public:
  void clear_docid();
  const std::string& docid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_docid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_docid();
  PROTOBUF_NODISCARD std::string* release_docid();
  void set_allocated_docid(std::string* docid);
  private:
  const std::string& _internal_docid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_docid(const std::string& value);
  std::string* _internal_mutable_docid();
  public:

  // optional int32 installedVersionCode = 2;
  bool has_installedversioncode() const;
  private:
  bool _internal_has_installedversioncode() const;
  public:
  void clear_installedversioncode();
  int32_t installedversioncode() const;
  void set_installedversioncode(int32_t value);
  private:
  int32_t _internal_installedversioncode() const;
  void _internal_set_installedversioncode(int32_t value);
  public:

  // optional bool includeDetails = 3;
  bool has_includedetails() const;
  private:
  bool _internal_has_includedetails() const;
  public:
  void clear_includedetails();
  bool includedetails() const;
  void set_includedetails(bool value);
  private:
  bool _internal_includedetails() const;
  void _internal_set_includedetails(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.BulkDetailsRequest.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docid_;
    int32_t installedversioncode_;
    bool includedetails_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class BulkDetailsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.BulkDetailsRequest) */ {
 public:
  inline BulkDetailsRequest() : BulkDetailsRequest(nullptr) {}
  ~BulkDetailsRequest() override;
  explicit PROTOBUF_CONSTEXPR BulkDetailsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulkDetailsRequest(const BulkDetailsRequest& from);
  BulkDetailsRequest(BulkDetailsRequest&& from) noexcept
    : BulkDetailsRequest() {
    *this = ::std::move(from);
  }

  inline BulkDetailsRequest& operator=(const BulkDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkDetailsRequest& operator=(BulkDetailsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkDetailsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const BulkDetailsRequest*>(
               &_BulkDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BulkDetailsRequest& a, BulkDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkDetailsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkDetailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkDetailsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BulkDetailsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BulkDetailsRequest& from) {
    BulkDetailsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkDetailsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.BulkDetailsRequest";
  }
  protected:
  explicit BulkDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BulkDetailsRequest_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 8,
  };
  // repeated .playapi.proto.finsky.details.BulkDetailsRequest.Entry entry = 8;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry >*
      mutable_entry();
  private:
  const ::playapi::proto::finsky::details::BulkDetailsRequest_Entry& _internal_entry(int index) const;
  ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* _internal_add_entry();
  public:
  const ::playapi::proto::finsky::details::BulkDetailsRequest_Entry& entry(int index) const;
  ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry >&
      entry() const;

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.BulkDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry > entry_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class BulkDetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.BulkDetailsResponse) */ {
 public:
  inline BulkDetailsResponse() : BulkDetailsResponse(nullptr) {}
  ~BulkDetailsResponse() override;
  explicit PROTOBUF_CONSTEXPR BulkDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulkDetailsResponse(const BulkDetailsResponse& from);
  BulkDetailsResponse(BulkDetailsResponse&& from) noexcept
    : BulkDetailsResponse() {
    *this = ::std::move(from);
  }

  inline BulkDetailsResponse& operator=(const BulkDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkDetailsResponse& operator=(BulkDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const BulkDetailsResponse*>(
               &_BulkDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BulkDetailsResponse& a, BulkDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkDetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkDetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BulkDetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BulkDetailsResponse& from) {
    BulkDetailsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkDetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.BulkDetailsResponse";
  }
  protected:
  explicit BulkDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // repeated .playapi.proto.finsky.details.BulkDetailsEntry entry = 1;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::playapi::proto::finsky::details::BulkDetailsEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsEntry >*
      mutable_entry();
  private:
  const ::playapi::proto::finsky::details::BulkDetailsEntry& _internal_entry(int index) const;
  ::playapi::proto::finsky::details::BulkDetailsEntry* _internal_add_entry();
  public:
  const ::playapi::proto::finsky::details::BulkDetailsEntry& entry(int index) const;
  ::playapi::proto::finsky::details::BulkDetailsEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsEntry >&
      entry() const;

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.BulkDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsEntry > entry_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class BulkDetailsEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.BulkDetailsEntry) */ {
 public:
  inline BulkDetailsEntry() : BulkDetailsEntry(nullptr) {}
  ~BulkDetailsEntry() override;
  explicit PROTOBUF_CONSTEXPR BulkDetailsEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulkDetailsEntry(const BulkDetailsEntry& from);
  BulkDetailsEntry(BulkDetailsEntry&& from) noexcept
    : BulkDetailsEntry() {
    *this = ::std::move(from);
  }

  inline BulkDetailsEntry& operator=(const BulkDetailsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkDetailsEntry& operator=(BulkDetailsEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkDetailsEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkDetailsEntry* internal_default_instance() {
    return reinterpret_cast<const BulkDetailsEntry*>(
               &_BulkDetailsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BulkDetailsEntry& a, BulkDetailsEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkDetailsEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkDetailsEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkDetailsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkDetailsEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BulkDetailsEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BulkDetailsEntry& from) {
    BulkDetailsEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkDetailsEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.BulkDetailsEntry";
  }
  protected:
  explicit BulkDetailsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocFieldNumber = 1,
  };
  // optional .playapi.proto.finsky.document.DocV2 doc = 1;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::playapi::proto::finsky::document::DocV2& doc() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::document::DocV2* release_doc();
  ::playapi::proto::finsky::document::DocV2* mutable_doc();
  void set_allocated_doc(::playapi::proto::finsky::document::DocV2* doc);
  private:
  const ::playapi::proto::finsky::document::DocV2& _internal_doc() const;
  ::playapi::proto::finsky::document::DocV2* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::playapi::proto::finsky::document::DocV2* doc);
  ::playapi::proto::finsky::document::DocV2* unsafe_arena_release_doc();

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.BulkDetailsEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::playapi::proto::finsky::document::DocV2* doc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class DetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.DetailsResponse) */ {
 public:
  inline DetailsResponse() : DetailsResponse(nullptr) {}
  ~DetailsResponse() override;
  explicit PROTOBUF_CONSTEXPR DetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetailsResponse(const DetailsResponse& from);
  DetailsResponse(DetailsResponse&& from) noexcept
    : DetailsResponse() {
    *this = ::std::move(from);
  }

  inline DetailsResponse& operator=(const DetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailsResponse& operator=(DetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetailsResponse* internal_default_instance() {
    return reinterpret_cast<const DetailsResponse*>(
               &_DetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetailsResponse& a, DetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetailsResponse& from) {
    DetailsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.DetailsResponse";
  }
  protected:
  explicit DetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveryBadgeFieldNumber = 7,
    kFooterHtmlFieldNumber = 5,
    kServerLogsCookieFieldNumber = 6,
    kUserReviewFieldNumber = 3,
    kDocV2FieldNumber = 4,
    kEnableReviewsFieldNumber = 8,
  };
  // repeated .playapi.proto.finsky.details.DiscoveryBadge discoveryBadge = 7;
  int discoverybadge_size() const;
  private:
  int _internal_discoverybadge_size() const;
  public:
  void clear_discoverybadge();
  ::playapi::proto::finsky::details::DiscoveryBadge* mutable_discoverybadge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::DiscoveryBadge >*
      mutable_discoverybadge();
  private:
  const ::playapi::proto::finsky::details::DiscoveryBadge& _internal_discoverybadge(int index) const;
  ::playapi::proto::finsky::details::DiscoveryBadge* _internal_add_discoverybadge();
  public:
  const ::playapi::proto::finsky::details::DiscoveryBadge& discoverybadge(int index) const;
  ::playapi::proto::finsky::details::DiscoveryBadge* add_discoverybadge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::DiscoveryBadge >&
      discoverybadge() const;

  // optional string footerHtml = 5;
  bool has_footerhtml() const;
  private:
  bool _internal_has_footerhtml() const;
  public:
  void clear_footerhtml();
  const std::string& footerhtml() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_footerhtml(ArgT0&& arg0, ArgT... args);
  std::string* mutable_footerhtml();
  PROTOBUF_NODISCARD std::string* release_footerhtml();
  void set_allocated_footerhtml(std::string* footerhtml);
  private:
  const std::string& _internal_footerhtml() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_footerhtml(const std::string& value);
  std::string* _internal_mutable_footerhtml();
  public:

  // optional bytes serverLogsCookie = 6;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional .playapi.proto.finsky.document.Review userReview = 3;
  bool has_userreview() const;
  private:
  bool _internal_has_userreview() const;
  public:
  void clear_userreview();
  const ::playapi::proto::finsky::document::Review& userreview() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::document::Review* release_userreview();
  ::playapi::proto::finsky::document::Review* mutable_userreview();
  void set_allocated_userreview(::playapi::proto::finsky::document::Review* userreview);
  private:
  const ::playapi::proto::finsky::document::Review& _internal_userreview() const;
  ::playapi::proto::finsky::document::Review* _internal_mutable_userreview();
  public:
  void unsafe_arena_set_allocated_userreview(
      ::playapi::proto::finsky::document::Review* userreview);
  ::playapi::proto::finsky::document::Review* unsafe_arena_release_userreview();

  // optional .playapi.proto.finsky.document.DocV2 docV2 = 4;
  bool has_docv2() const;
  private:
  bool _internal_has_docv2() const;
  public:
  void clear_docv2();
  const ::playapi::proto::finsky::document::DocV2& docv2() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::document::DocV2* release_docv2();
  ::playapi::proto::finsky::document::DocV2* mutable_docv2();
  void set_allocated_docv2(::playapi::proto::finsky::document::DocV2* docv2);
  private:
  const ::playapi::proto::finsky::document::DocV2& _internal_docv2() const;
  ::playapi::proto::finsky::document::DocV2* _internal_mutable_docv2();
  public:
  void unsafe_arena_set_allocated_docv2(
      ::playapi::proto::finsky::document::DocV2* docv2);
  ::playapi::proto::finsky::document::DocV2* unsafe_arena_release_docv2();

  // optional bool enableReviews = 8;
  bool has_enablereviews() const;
  private:
  bool _internal_has_enablereviews() const;
  public:
  void clear_enablereviews();
  bool enablereviews() const;
  void set_enablereviews(bool value);
  private:
  bool _internal_enablereviews() const;
  void _internal_set_enablereviews(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.DetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::DiscoveryBadge > discoverybadge_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr footerhtml_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    ::playapi::proto::finsky::document::Review* userreview_;
    ::playapi::proto::finsky::document::DocV2* docv2_;
    bool enablereviews_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryBadge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.DiscoveryBadge) */ {
 public:
  inline DiscoveryBadge() : DiscoveryBadge(nullptr) {}
  ~DiscoveryBadge() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryBadge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryBadge(const DiscoveryBadge& from);
  DiscoveryBadge(DiscoveryBadge&& from) noexcept
    : DiscoveryBadge() {
    *this = ::std::move(from);
  }

  inline DiscoveryBadge& operator=(const DiscoveryBadge& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryBadge& operator=(DiscoveryBadge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryBadge& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryBadge* internal_default_instance() {
    return reinterpret_cast<const DiscoveryBadge*>(
               &_DiscoveryBadge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DiscoveryBadge& a, DiscoveryBadge& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryBadge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryBadge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryBadge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryBadge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryBadge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryBadge& from) {
    DiscoveryBadge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryBadge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.DiscoveryBadge";
  }
  protected:
  explicit DiscoveryBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kServerLogsCookieFieldNumber = 5,
    kDownloadCountFieldNumber = 9,
    kDownloadUnitsFieldNumber = 10,
    kContentDescriptionFieldNumber = 11,
    kImageFieldNumber = 2,
    kDiscoveryBadgeLinkFieldNumber = 4,
    kPlayerBadgeFieldNumber = 12,
    kFamilyAgeRangeBadgeFieldNumber = 13,
    kFamilyCategoryBadgeFieldNumber = 14,
    kBackgroundColorFieldNumber = 3,
    kIsPlusOneFieldNumber = 6,
    kAggregateRatingFieldNumber = 7,
    kUserStarRatingFieldNumber = 8,
  };
  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional bytes serverLogsCookie = 5;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional string downloadCount = 9;
  bool has_downloadcount() const;
  private:
  bool _internal_has_downloadcount() const;
  public:
  void clear_downloadcount();
  const std::string& downloadcount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadcount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadcount();
  PROTOBUF_NODISCARD std::string* release_downloadcount();
  void set_allocated_downloadcount(std::string* downloadcount);
  private:
  const std::string& _internal_downloadcount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadcount(const std::string& value);
  std::string* _internal_mutable_downloadcount();
  public:

  // optional string downloadUnits = 10;
  bool has_downloadunits() const;
  private:
  bool _internal_has_downloadunits() const;
  public:
  void clear_downloadunits();
  const std::string& downloadunits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadunits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadunits();
  PROTOBUF_NODISCARD std::string* release_downloadunits();
  void set_allocated_downloadunits(std::string* downloadunits);
  private:
  const std::string& _internal_downloadunits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadunits(const std::string& value);
  std::string* _internal_mutable_downloadunits();
  public:

  // optional string contentDescription = 11;
  bool has_contentdescription() const;
  private:
  bool _internal_has_contentdescription() const;
  public:
  void clear_contentdescription();
  const std::string& contentdescription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contentdescription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contentdescription();
  PROTOBUF_NODISCARD std::string* release_contentdescription();
  void set_allocated_contentdescription(std::string* contentdescription);
  private:
  const std::string& _internal_contentdescription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contentdescription(const std::string& value);
  std::string* _internal_mutable_contentdescription();
  public:

  // optional .playapi.proto.finsky.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::playapi::proto::finsky::Image& image() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::Image* release_image();
  ::playapi::proto::finsky::Image* mutable_image();
  void set_allocated_image(::playapi::proto::finsky::Image* image);
  private:
  const ::playapi::proto::finsky::Image& _internal_image() const;
  ::playapi::proto::finsky::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::playapi::proto::finsky::Image* image);
  ::playapi::proto::finsky::Image* unsafe_arena_release_image();

  // optional .playapi.proto.finsky.details.DiscoveryBadgeLink discoveryBadgeLink = 4;
  bool has_discoverybadgelink() const;
  private:
  bool _internal_has_discoverybadgelink() const;
  public:
  void clear_discoverybadgelink();
  const ::playapi::proto::finsky::details::DiscoveryBadgeLink& discoverybadgelink() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::details::DiscoveryBadgeLink* release_discoverybadgelink();
  ::playapi::proto::finsky::details::DiscoveryBadgeLink* mutable_discoverybadgelink();
  void set_allocated_discoverybadgelink(::playapi::proto::finsky::details::DiscoveryBadgeLink* discoverybadgelink);
  private:
  const ::playapi::proto::finsky::details::DiscoveryBadgeLink& _internal_discoverybadgelink() const;
  ::playapi::proto::finsky::details::DiscoveryBadgeLink* _internal_mutable_discoverybadgelink();
  public:
  void unsafe_arena_set_allocated_discoverybadgelink(
      ::playapi::proto::finsky::details::DiscoveryBadgeLink* discoverybadgelink);
  ::playapi::proto::finsky::details::DiscoveryBadgeLink* unsafe_arena_release_discoverybadgelink();

  // optional .playapi.proto.finsky.details.PlayerBadge playerBadge = 12;
  bool has_playerbadge() const;
  private:
  bool _internal_has_playerbadge() const;
  public:
  void clear_playerbadge();
  const ::playapi::proto::finsky::details::PlayerBadge& playerbadge() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::details::PlayerBadge* release_playerbadge();
  ::playapi::proto::finsky::details::PlayerBadge* mutable_playerbadge();
  void set_allocated_playerbadge(::playapi::proto::finsky::details::PlayerBadge* playerbadge);
  private:
  const ::playapi::proto::finsky::details::PlayerBadge& _internal_playerbadge() const;
  ::playapi::proto::finsky::details::PlayerBadge* _internal_mutable_playerbadge();
  public:
  void unsafe_arena_set_allocated_playerbadge(
      ::playapi::proto::finsky::details::PlayerBadge* playerbadge);
  ::playapi::proto::finsky::details::PlayerBadge* unsafe_arena_release_playerbadge();

  // optional .playapi.proto.finsky.details.FamilyAgeRangeBadge familyAgeRangeBadge = 13;
  bool has_familyagerangebadge() const;
  private:
  bool _internal_has_familyagerangebadge() const;
  public:
  void clear_familyagerangebadge();
  const ::playapi::proto::finsky::details::FamilyAgeRangeBadge& familyagerangebadge() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::details::FamilyAgeRangeBadge* release_familyagerangebadge();
  ::playapi::proto::finsky::details::FamilyAgeRangeBadge* mutable_familyagerangebadge();
  void set_allocated_familyagerangebadge(::playapi::proto::finsky::details::FamilyAgeRangeBadge* familyagerangebadge);
  private:
  const ::playapi::proto::finsky::details::FamilyAgeRangeBadge& _internal_familyagerangebadge() const;
  ::playapi::proto::finsky::details::FamilyAgeRangeBadge* _internal_mutable_familyagerangebadge();
  public:
  void unsafe_arena_set_allocated_familyagerangebadge(
      ::playapi::proto::finsky::details::FamilyAgeRangeBadge* familyagerangebadge);
  ::playapi::proto::finsky::details::FamilyAgeRangeBadge* unsafe_arena_release_familyagerangebadge();

  // optional .playapi.proto.finsky.details.FamilyCategoryBadge familyCategoryBadge = 14;
  bool has_familycategorybadge() const;
  private:
  bool _internal_has_familycategorybadge() const;
  public:
  void clear_familycategorybadge();
  const ::playapi::proto::finsky::details::FamilyCategoryBadge& familycategorybadge() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::details::FamilyCategoryBadge* release_familycategorybadge();
  ::playapi::proto::finsky::details::FamilyCategoryBadge* mutable_familycategorybadge();
  void set_allocated_familycategorybadge(::playapi::proto::finsky::details::FamilyCategoryBadge* familycategorybadge);
  private:
  const ::playapi::proto::finsky::details::FamilyCategoryBadge& _internal_familycategorybadge() const;
  ::playapi::proto::finsky::details::FamilyCategoryBadge* _internal_mutable_familycategorybadge();
  public:
  void unsafe_arena_set_allocated_familycategorybadge(
      ::playapi::proto::finsky::details::FamilyCategoryBadge* familycategorybadge);
  ::playapi::proto::finsky::details::FamilyCategoryBadge* unsafe_arena_release_familycategorybadge();

  // optional int32 backgroundColor = 3;
  bool has_backgroundcolor() const;
  private:
  bool _internal_has_backgroundcolor() const;
  public:
  void clear_backgroundcolor();
  int32_t backgroundcolor() const;
  void set_backgroundcolor(int32_t value);
  private:
  int32_t _internal_backgroundcolor() const;
  void _internal_set_backgroundcolor(int32_t value);
  public:

  // optional bool isPlusOne = 6;
  bool has_isplusone() const;
  private:
  bool _internal_has_isplusone() const;
  public:
  void clear_isplusone();
  bool isplusone() const;
  void set_isplusone(bool value);
  private:
  bool _internal_isplusone() const;
  void _internal_set_isplusone(bool value);
  public:

  // optional float aggregateRating = 7;
  bool has_aggregaterating() const;
  private:
  bool _internal_has_aggregaterating() const;
  public:
  void clear_aggregaterating();
  float aggregaterating() const;
  void set_aggregaterating(float value);
  private:
  float _internal_aggregaterating() const;
  void _internal_set_aggregaterating(float value);
  public:

  // optional int32 userStarRating = 8;
  bool has_userstarrating() const;
  private:
  bool _internal_has_userstarrating() const;
  public:
  void clear_userstarrating();
  int32_t userstarrating() const;
  void set_userstarrating(int32_t value);
  private:
  int32_t _internal_userstarrating() const;
  void _internal_set_userstarrating(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.DiscoveryBadge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadcount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadunits_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contentdescription_;
    ::playapi::proto::finsky::Image* image_;
    ::playapi::proto::finsky::details::DiscoveryBadgeLink* discoverybadgelink_;
    ::playapi::proto::finsky::details::PlayerBadge* playerbadge_;
    ::playapi::proto::finsky::details::FamilyAgeRangeBadge* familyagerangebadge_;
    ::playapi::proto::finsky::details::FamilyCategoryBadge* familycategorybadge_;
    int32_t backgroundcolor_;
    bool isplusone_;
    float aggregaterating_;
    int32_t userstarrating_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryBadgeLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.DiscoveryBadgeLink) */ {
 public:
  inline DiscoveryBadgeLink() : DiscoveryBadgeLink(nullptr) {}
  ~DiscoveryBadgeLink() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryBadgeLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryBadgeLink(const DiscoveryBadgeLink& from);
  DiscoveryBadgeLink(DiscoveryBadgeLink&& from) noexcept
    : DiscoveryBadgeLink() {
    *this = ::std::move(from);
  }

  inline DiscoveryBadgeLink& operator=(const DiscoveryBadgeLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryBadgeLink& operator=(DiscoveryBadgeLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryBadgeLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryBadgeLink* internal_default_instance() {
    return reinterpret_cast<const DiscoveryBadgeLink*>(
               &_DiscoveryBadgeLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiscoveryBadgeLink& a, DiscoveryBadgeLink& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryBadgeLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryBadgeLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryBadgeLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryBadgeLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryBadgeLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryBadgeLink& from) {
    DiscoveryBadgeLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryBadgeLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.DiscoveryBadgeLink";
  }
  protected:
  explicit DiscoveryBadgeLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserReviewsUrlFieldNumber = 2,
    kCriticReviewsUrlFieldNumber = 3,
    kLinkFieldNumber = 1,
  };
  // optional string userReviewsUrl = 2;
  bool has_userreviewsurl() const;
  private:
  bool _internal_has_userreviewsurl() const;
  public:
  void clear_userreviewsurl();
  const std::string& userreviewsurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userreviewsurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userreviewsurl();
  PROTOBUF_NODISCARD std::string* release_userreviewsurl();
  void set_allocated_userreviewsurl(std::string* userreviewsurl);
  private:
  const std::string& _internal_userreviewsurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userreviewsurl(const std::string& value);
  std::string* _internal_mutable_userreviewsurl();
  public:

  // optional string criticReviewsUrl = 3;
  bool has_criticreviewsurl() const;
  private:
  bool _internal_has_criticreviewsurl() const;
  public:
  void clear_criticreviewsurl();
  const std::string& criticreviewsurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_criticreviewsurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_criticreviewsurl();
  PROTOBUF_NODISCARD std::string* release_criticreviewsurl();
  void set_allocated_criticreviewsurl(std::string* criticreviewsurl);
  private:
  const std::string& _internal_criticreviewsurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_criticreviewsurl(const std::string& value);
  std::string* _internal_mutable_criticreviewsurl();
  public:

  // optional .playapi.proto.finsky.link.Link link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::playapi::proto::finsky::link::Link& link() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::link::Link* release_link();
  ::playapi::proto::finsky::link::Link* mutable_link();
  void set_allocated_link(::playapi::proto::finsky::link::Link* link);
  private:
  const ::playapi::proto::finsky::link::Link& _internal_link() const;
  ::playapi::proto::finsky::link::Link* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::playapi::proto::finsky::link::Link* link);
  ::playapi::proto::finsky::link::Link* unsafe_arena_release_link();

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.DiscoveryBadgeLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userreviewsurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr criticreviewsurl_;
    ::playapi::proto::finsky::link::Link* link_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class PlayerBadge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.PlayerBadge) */ {
 public:
  inline PlayerBadge() : PlayerBadge(nullptr) {}
  ~PlayerBadge() override;
  explicit PROTOBUF_CONSTEXPR PlayerBadge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerBadge(const PlayerBadge& from);
  PlayerBadge(PlayerBadge&& from) noexcept
    : PlayerBadge() {
    *this = ::std::move(from);
  }

  inline PlayerBadge& operator=(const PlayerBadge& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBadge& operator=(PlayerBadge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerBadge& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerBadge* internal_default_instance() {
    return reinterpret_cast<const PlayerBadge*>(
               &_PlayerBadge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerBadge& a, PlayerBadge& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBadge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBadge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerBadge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerBadge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerBadge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerBadge& from) {
    PlayerBadge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBadge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.PlayerBadge";
  }
  protected:
  explicit PlayerBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlayIconFieldNumber = 1,
  };
  // optional .playapi.proto.finsky.Image overlayIcon = 1;
  bool has_overlayicon() const;
  private:
  bool _internal_has_overlayicon() const;
  public:
  void clear_overlayicon();
  const ::playapi::proto::finsky::Image& overlayicon() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::Image* release_overlayicon();
  ::playapi::proto::finsky::Image* mutable_overlayicon();
  void set_allocated_overlayicon(::playapi::proto::finsky::Image* overlayicon);
  private:
  const ::playapi::proto::finsky::Image& _internal_overlayicon() const;
  ::playapi::proto::finsky::Image* _internal_mutable_overlayicon();
  public:
  void unsafe_arena_set_allocated_overlayicon(
      ::playapi::proto::finsky::Image* overlayicon);
  ::playapi::proto::finsky::Image* unsafe_arena_release_overlayicon();

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.PlayerBadge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::playapi::proto::finsky::Image* overlayicon_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class FamilyAgeRangeBadge final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.FamilyAgeRangeBadge) */ {
 public:
  inline FamilyAgeRangeBadge() : FamilyAgeRangeBadge(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FamilyAgeRangeBadge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FamilyAgeRangeBadge(const FamilyAgeRangeBadge& from);
  FamilyAgeRangeBadge(FamilyAgeRangeBadge&& from) noexcept
    : FamilyAgeRangeBadge() {
    *this = ::std::move(from);
  }

  inline FamilyAgeRangeBadge& operator=(const FamilyAgeRangeBadge& from) {
    CopyFrom(from);
    return *this;
  }
  inline FamilyAgeRangeBadge& operator=(FamilyAgeRangeBadge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FamilyAgeRangeBadge& default_instance() {
    return *internal_default_instance();
  }
  static inline const FamilyAgeRangeBadge* internal_default_instance() {
    return reinterpret_cast<const FamilyAgeRangeBadge*>(
               &_FamilyAgeRangeBadge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FamilyAgeRangeBadge& a, FamilyAgeRangeBadge& b) {
    a.Swap(&b);
  }
  inline void Swap(FamilyAgeRangeBadge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FamilyAgeRangeBadge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FamilyAgeRangeBadge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FamilyAgeRangeBadge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FamilyAgeRangeBadge& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FamilyAgeRangeBadge& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.FamilyAgeRangeBadge";
  }
  protected:
  explicit FamilyAgeRangeBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.FamilyAgeRangeBadge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class FamilyCategoryBadge final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.details.FamilyCategoryBadge) */ {
 public:
  inline FamilyCategoryBadge() : FamilyCategoryBadge(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FamilyCategoryBadge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FamilyCategoryBadge(const FamilyCategoryBadge& from);
  FamilyCategoryBadge(FamilyCategoryBadge&& from) noexcept
    : FamilyCategoryBadge() {
    *this = ::std::move(from);
  }

  inline FamilyCategoryBadge& operator=(const FamilyCategoryBadge& from) {
    CopyFrom(from);
    return *this;
  }
  inline FamilyCategoryBadge& operator=(FamilyCategoryBadge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FamilyCategoryBadge& default_instance() {
    return *internal_default_instance();
  }
  static inline const FamilyCategoryBadge* internal_default_instance() {
    return reinterpret_cast<const FamilyCategoryBadge*>(
               &_FamilyCategoryBadge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FamilyCategoryBadge& a, FamilyCategoryBadge& b) {
    a.Swap(&b);
  }
  inline void Swap(FamilyCategoryBadge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FamilyCategoryBadge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FamilyCategoryBadge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FamilyCategoryBadge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FamilyCategoryBadge& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FamilyCategoryBadge& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.details.FamilyCategoryBadge";
  }
  protected:
  explicit FamilyCategoryBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.details.FamilyCategoryBadge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_play_5fdetails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BulkDetailsRequest_Entry

// required string docid = 1;
inline bool BulkDetailsRequest_Entry::_internal_has_docid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BulkDetailsRequest_Entry::has_docid() const {
  return _internal_has_docid();
}
inline void BulkDetailsRequest_Entry::clear_docid() {
  _impl_.docid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BulkDetailsRequest_Entry::docid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid)
  return _internal_docid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BulkDetailsRequest_Entry::set_docid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.docid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid)
}
inline std::string* BulkDetailsRequest_Entry::mutable_docid() {
  std::string* _s = _internal_mutable_docid();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid)
  return _s;
}
inline const std::string& BulkDetailsRequest_Entry::_internal_docid() const {
  return _impl_.docid_.Get();
}
inline void BulkDetailsRequest_Entry::_internal_set_docid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.docid_.Set(value, GetArenaForAllocation());
}
inline std::string* BulkDetailsRequest_Entry::_internal_mutable_docid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.docid_.Mutable(GetArenaForAllocation());
}
inline std::string* BulkDetailsRequest_Entry::release_docid() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid)
  if (!_internal_has_docid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.docid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.docid_.IsDefault()) {
    _impl_.docid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BulkDetailsRequest_Entry::set_allocated_docid(std::string* docid) {
  if (docid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.docid_.SetAllocated(docid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.docid_.IsDefault()) {
    _impl_.docid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.BulkDetailsRequest.Entry.docid)
}

// optional int32 installedVersionCode = 2;
inline bool BulkDetailsRequest_Entry::_internal_has_installedversioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BulkDetailsRequest_Entry::has_installedversioncode() const {
  return _internal_has_installedversioncode();
}
inline void BulkDetailsRequest_Entry::clear_installedversioncode() {
  _impl_.installedversioncode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t BulkDetailsRequest_Entry::_internal_installedversioncode() const {
  return _impl_.installedversioncode_;
}
inline int32_t BulkDetailsRequest_Entry::installedversioncode() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.BulkDetailsRequest.Entry.installedVersionCode)
  return _internal_installedversioncode();
}
inline void BulkDetailsRequest_Entry::_internal_set_installedversioncode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.installedversioncode_ = value;
}
inline void BulkDetailsRequest_Entry::set_installedversioncode(int32_t value) {
  _internal_set_installedversioncode(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.BulkDetailsRequest.Entry.installedVersionCode)
}

// optional bool includeDetails = 3;
inline bool BulkDetailsRequest_Entry::_internal_has_includedetails() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BulkDetailsRequest_Entry::has_includedetails() const {
  return _internal_has_includedetails();
}
inline void BulkDetailsRequest_Entry::clear_includedetails() {
  _impl_.includedetails_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool BulkDetailsRequest_Entry::_internal_includedetails() const {
  return _impl_.includedetails_;
}
inline bool BulkDetailsRequest_Entry::includedetails() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.BulkDetailsRequest.Entry.includeDetails)
  return _internal_includedetails();
}
inline void BulkDetailsRequest_Entry::_internal_set_includedetails(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.includedetails_ = value;
}
inline void BulkDetailsRequest_Entry::set_includedetails(bool value) {
  _internal_set_includedetails(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.BulkDetailsRequest.Entry.includeDetails)
}

// -------------------------------------------------------------------

// BulkDetailsRequest

// repeated .playapi.proto.finsky.details.BulkDetailsRequest.Entry entry = 8;
inline int BulkDetailsRequest::_internal_entry_size() const {
  return _impl_.entry_.size();
}
inline int BulkDetailsRequest::entry_size() const {
  return _internal_entry_size();
}
inline void BulkDetailsRequest::clear_entry() {
  _impl_.entry_.Clear();
}
inline ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* BulkDetailsRequest::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.BulkDetailsRequest.entry)
  return _impl_.entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry >*
BulkDetailsRequest::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.details.BulkDetailsRequest.entry)
  return &_impl_.entry_;
}
inline const ::playapi::proto::finsky::details::BulkDetailsRequest_Entry& BulkDetailsRequest::_internal_entry(int index) const {
  return _impl_.entry_.Get(index);
}
inline const ::playapi::proto::finsky::details::BulkDetailsRequest_Entry& BulkDetailsRequest::entry(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.BulkDetailsRequest.entry)
  return _internal_entry(index);
}
inline ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* BulkDetailsRequest::_internal_add_entry() {
  return _impl_.entry_.Add();
}
inline ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* BulkDetailsRequest::add_entry() {
  ::playapi::proto::finsky::details::BulkDetailsRequest_Entry* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.details.BulkDetailsRequest.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsRequest_Entry >&
BulkDetailsRequest::entry() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.details.BulkDetailsRequest.entry)
  return _impl_.entry_;
}

// -------------------------------------------------------------------

// BulkDetailsResponse

// repeated .playapi.proto.finsky.details.BulkDetailsEntry entry = 1;
inline int BulkDetailsResponse::_internal_entry_size() const {
  return _impl_.entry_.size();
}
inline int BulkDetailsResponse::entry_size() const {
  return _internal_entry_size();
}
inline void BulkDetailsResponse::clear_entry() {
  _impl_.entry_.Clear();
}
inline ::playapi::proto::finsky::details::BulkDetailsEntry* BulkDetailsResponse::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.BulkDetailsResponse.entry)
  return _impl_.entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsEntry >*
BulkDetailsResponse::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.details.BulkDetailsResponse.entry)
  return &_impl_.entry_;
}
inline const ::playapi::proto::finsky::details::BulkDetailsEntry& BulkDetailsResponse::_internal_entry(int index) const {
  return _impl_.entry_.Get(index);
}
inline const ::playapi::proto::finsky::details::BulkDetailsEntry& BulkDetailsResponse::entry(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.BulkDetailsResponse.entry)
  return _internal_entry(index);
}
inline ::playapi::proto::finsky::details::BulkDetailsEntry* BulkDetailsResponse::_internal_add_entry() {
  return _impl_.entry_.Add();
}
inline ::playapi::proto::finsky::details::BulkDetailsEntry* BulkDetailsResponse::add_entry() {
  ::playapi::proto::finsky::details::BulkDetailsEntry* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.details.BulkDetailsResponse.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::BulkDetailsEntry >&
BulkDetailsResponse::entry() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.details.BulkDetailsResponse.entry)
  return _impl_.entry_;
}

// -------------------------------------------------------------------

// BulkDetailsEntry

// optional .playapi.proto.finsky.document.DocV2 doc = 1;
inline bool BulkDetailsEntry::_internal_has_doc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.doc_ != nullptr);
  return value;
}
inline bool BulkDetailsEntry::has_doc() const {
  return _internal_has_doc();
}
inline const ::playapi::proto::finsky::document::DocV2& BulkDetailsEntry::_internal_doc() const {
  const ::playapi::proto::finsky::document::DocV2* p = _impl_.doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::document::DocV2&>(
      ::playapi::proto::finsky::document::_DocV2_default_instance_);
}
inline const ::playapi::proto::finsky::document::DocV2& BulkDetailsEntry::doc() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.BulkDetailsEntry.doc)
  return _internal_doc();
}
inline void BulkDetailsEntry::unsafe_arena_set_allocated_doc(
    ::playapi::proto::finsky::document::DocV2* doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.doc_);
  }
  _impl_.doc_ = doc;
  if (doc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.BulkDetailsEntry.doc)
}
inline ::playapi::proto::finsky::document::DocV2* BulkDetailsEntry::release_doc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::document::DocV2* temp = _impl_.doc_;
  _impl_.doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::document::DocV2* BulkDetailsEntry::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.BulkDetailsEntry.doc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::document::DocV2* temp = _impl_.doc_;
  _impl_.doc_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::document::DocV2* BulkDetailsEntry::_internal_mutable_doc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::document::DocV2>(GetArenaForAllocation());
    _impl_.doc_ = p;
  }
  return _impl_.doc_;
}
inline ::playapi::proto::finsky::document::DocV2* BulkDetailsEntry::mutable_doc() {
  ::playapi::proto::finsky::document::DocV2* _msg = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.BulkDetailsEntry.doc)
  return _msg;
}
inline void BulkDetailsEntry::set_allocated_doc(::playapi::proto::finsky::document::DocV2* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.doc_);
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc));
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.BulkDetailsEntry.doc)
}

// -------------------------------------------------------------------

// DetailsResponse

// optional .playapi.proto.finsky.document.Review userReview = 3;
inline bool DetailsResponse::_internal_has_userreview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userreview_ != nullptr);
  return value;
}
inline bool DetailsResponse::has_userreview() const {
  return _internal_has_userreview();
}
inline const ::playapi::proto::finsky::document::Review& DetailsResponse::_internal_userreview() const {
  const ::playapi::proto::finsky::document::Review* p = _impl_.userreview_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::document::Review&>(
      ::playapi::proto::finsky::document::_Review_default_instance_);
}
inline const ::playapi::proto::finsky::document::Review& DetailsResponse::userreview() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DetailsResponse.userReview)
  return _internal_userreview();
}
inline void DetailsResponse::unsafe_arena_set_allocated_userreview(
    ::playapi::proto::finsky::document::Review* userreview) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userreview_);
  }
  _impl_.userreview_ = userreview;
  if (userreview) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DetailsResponse.userReview)
}
inline ::playapi::proto::finsky::document::Review* DetailsResponse::release_userreview() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::finsky::document::Review* temp = _impl_.userreview_;
  _impl_.userreview_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::document::Review* DetailsResponse::unsafe_arena_release_userreview() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DetailsResponse.userReview)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::finsky::document::Review* temp = _impl_.userreview_;
  _impl_.userreview_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::document::Review* DetailsResponse::_internal_mutable_userreview() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.userreview_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::document::Review>(GetArenaForAllocation());
    _impl_.userreview_ = p;
  }
  return _impl_.userreview_;
}
inline ::playapi::proto::finsky::document::Review* DetailsResponse::mutable_userreview() {
  ::playapi::proto::finsky::document::Review* _msg = _internal_mutable_userreview();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DetailsResponse.userReview)
  return _msg;
}
inline void DetailsResponse::set_allocated_userreview(::playapi::proto::finsky::document::Review* userreview) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userreview_);
  }
  if (userreview) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userreview));
    if (message_arena != submessage_arena) {
      userreview = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userreview, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.userreview_ = userreview;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DetailsResponse.userReview)
}

// optional .playapi.proto.finsky.document.DocV2 docV2 = 4;
inline bool DetailsResponse::_internal_has_docv2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.docv2_ != nullptr);
  return value;
}
inline bool DetailsResponse::has_docv2() const {
  return _internal_has_docv2();
}
inline const ::playapi::proto::finsky::document::DocV2& DetailsResponse::_internal_docv2() const {
  const ::playapi::proto::finsky::document::DocV2* p = _impl_.docv2_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::document::DocV2&>(
      ::playapi::proto::finsky::document::_DocV2_default_instance_);
}
inline const ::playapi::proto::finsky::document::DocV2& DetailsResponse::docv2() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DetailsResponse.docV2)
  return _internal_docv2();
}
inline void DetailsResponse::unsafe_arena_set_allocated_docv2(
    ::playapi::proto::finsky::document::DocV2* docv2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.docv2_);
  }
  _impl_.docv2_ = docv2;
  if (docv2) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DetailsResponse.docV2)
}
inline ::playapi::proto::finsky::document::DocV2* DetailsResponse::release_docv2() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::document::DocV2* temp = _impl_.docv2_;
  _impl_.docv2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::document::DocV2* DetailsResponse::unsafe_arena_release_docv2() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DetailsResponse.docV2)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::document::DocV2* temp = _impl_.docv2_;
  _impl_.docv2_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::document::DocV2* DetailsResponse::_internal_mutable_docv2() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.docv2_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::document::DocV2>(GetArenaForAllocation());
    _impl_.docv2_ = p;
  }
  return _impl_.docv2_;
}
inline ::playapi::proto::finsky::document::DocV2* DetailsResponse::mutable_docv2() {
  ::playapi::proto::finsky::document::DocV2* _msg = _internal_mutable_docv2();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DetailsResponse.docV2)
  return _msg;
}
inline void DetailsResponse::set_allocated_docv2(::playapi::proto::finsky::document::DocV2* docv2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.docv2_);
  }
  if (docv2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(docv2));
    if (message_arena != submessage_arena) {
      docv2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, docv2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.docv2_ = docv2;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DetailsResponse.docV2)
}

// optional string footerHtml = 5;
inline bool DetailsResponse::_internal_has_footerhtml() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetailsResponse::has_footerhtml() const {
  return _internal_has_footerhtml();
}
inline void DetailsResponse::clear_footerhtml() {
  _impl_.footerhtml_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetailsResponse::footerhtml() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DetailsResponse.footerHtml)
  return _internal_footerhtml();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetailsResponse::set_footerhtml(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.footerhtml_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DetailsResponse.footerHtml)
}
inline std::string* DetailsResponse::mutable_footerhtml() {
  std::string* _s = _internal_mutable_footerhtml();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DetailsResponse.footerHtml)
  return _s;
}
inline const std::string& DetailsResponse::_internal_footerhtml() const {
  return _impl_.footerhtml_.Get();
}
inline void DetailsResponse::_internal_set_footerhtml(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.footerhtml_.Set(value, GetArenaForAllocation());
}
inline std::string* DetailsResponse::_internal_mutable_footerhtml() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.footerhtml_.Mutable(GetArenaForAllocation());
}
inline std::string* DetailsResponse::release_footerhtml() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DetailsResponse.footerHtml)
  if (!_internal_has_footerhtml()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.footerhtml_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.footerhtml_.IsDefault()) {
    _impl_.footerhtml_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetailsResponse::set_allocated_footerhtml(std::string* footerhtml) {
  if (footerhtml != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.footerhtml_.SetAllocated(footerhtml, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.footerhtml_.IsDefault()) {
    _impl_.footerhtml_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DetailsResponse.footerHtml)
}

// optional bytes serverLogsCookie = 6;
inline bool DetailsResponse::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetailsResponse::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void DetailsResponse::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DetailsResponse::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DetailsResponse.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetailsResponse::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DetailsResponse.serverLogsCookie)
}
inline std::string* DetailsResponse::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DetailsResponse.serverLogsCookie)
  return _s;
}
inline const std::string& DetailsResponse::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void DetailsResponse::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* DetailsResponse::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* DetailsResponse::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DetailsResponse.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetailsResponse::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DetailsResponse.serverLogsCookie)
}

// repeated .playapi.proto.finsky.details.DiscoveryBadge discoveryBadge = 7;
inline int DetailsResponse::_internal_discoverybadge_size() const {
  return _impl_.discoverybadge_.size();
}
inline int DetailsResponse::discoverybadge_size() const {
  return _internal_discoverybadge_size();
}
inline void DetailsResponse::clear_discoverybadge() {
  _impl_.discoverybadge_.Clear();
}
inline ::playapi::proto::finsky::details::DiscoveryBadge* DetailsResponse::mutable_discoverybadge(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DetailsResponse.discoveryBadge)
  return _impl_.discoverybadge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::DiscoveryBadge >*
DetailsResponse::mutable_discoverybadge() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.details.DetailsResponse.discoveryBadge)
  return &_impl_.discoverybadge_;
}
inline const ::playapi::proto::finsky::details::DiscoveryBadge& DetailsResponse::_internal_discoverybadge(int index) const {
  return _impl_.discoverybadge_.Get(index);
}
inline const ::playapi::proto::finsky::details::DiscoveryBadge& DetailsResponse::discoverybadge(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DetailsResponse.discoveryBadge)
  return _internal_discoverybadge(index);
}
inline ::playapi::proto::finsky::details::DiscoveryBadge* DetailsResponse::_internal_add_discoverybadge() {
  return _impl_.discoverybadge_.Add();
}
inline ::playapi::proto::finsky::details::DiscoveryBadge* DetailsResponse::add_discoverybadge() {
  ::playapi::proto::finsky::details::DiscoveryBadge* _add = _internal_add_discoverybadge();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.details.DetailsResponse.discoveryBadge)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::details::DiscoveryBadge >&
DetailsResponse::discoverybadge() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.details.DetailsResponse.discoveryBadge)
  return _impl_.discoverybadge_;
}

// optional bool enableReviews = 8;
inline bool DetailsResponse::_internal_has_enablereviews() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetailsResponse::has_enablereviews() const {
  return _internal_has_enablereviews();
}
inline void DetailsResponse::clear_enablereviews() {
  _impl_.enablereviews_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool DetailsResponse::_internal_enablereviews() const {
  return _impl_.enablereviews_;
}
inline bool DetailsResponse::enablereviews() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DetailsResponse.enableReviews)
  return _internal_enablereviews();
}
inline void DetailsResponse::_internal_set_enablereviews(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.enablereviews_ = value;
}
inline void DetailsResponse::set_enablereviews(bool value) {
  _internal_set_enablereviews(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DetailsResponse.enableReviews)
}

// -------------------------------------------------------------------

// DiscoveryBadge

// optional string title = 1;
inline bool DiscoveryBadge::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_title() const {
  return _internal_has_title();
}
inline void DiscoveryBadge::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiscoveryBadge::title() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadge::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.title)
}
inline std::string* DiscoveryBadge::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.title)
  return _s;
}
inline const std::string& DiscoveryBadge::_internal_title() const {
  return _impl_.title_.Get();
}
inline void DiscoveryBadge::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::release_title() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadge::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.title)
}

// optional .playapi.proto.finsky.Image image = 2;
inline bool DiscoveryBadge::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool DiscoveryBadge::has_image() const {
  return _internal_has_image();
}
inline const ::playapi::proto::finsky::Image& DiscoveryBadge::_internal_image() const {
  const ::playapi::proto::finsky::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::Image&>(
      ::playapi::proto::finsky::_Image_default_instance_);
}
inline const ::playapi::proto::finsky::Image& DiscoveryBadge::image() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.image)
  return _internal_image();
}
inline void DiscoveryBadge::unsafe_arena_set_allocated_image(
    ::playapi::proto::finsky::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.image)
}
inline ::playapi::proto::finsky::Image* DiscoveryBadge::release_image() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::playapi::proto::finsky::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::Image* DiscoveryBadge::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.image)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::playapi::proto::finsky::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::Image* DiscoveryBadge::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::playapi::proto::finsky::Image* DiscoveryBadge::mutable_image() {
  ::playapi::proto::finsky::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.image)
  return _msg;
}
inline void DiscoveryBadge::set_allocated_image(::playapi::proto::finsky::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.image)
}

// optional int32 backgroundColor = 3;
inline bool DiscoveryBadge::_internal_has_backgroundcolor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_backgroundcolor() const {
  return _internal_has_backgroundcolor();
}
inline void DiscoveryBadge::clear_backgroundcolor() {
  _impl_.backgroundcolor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t DiscoveryBadge::_internal_backgroundcolor() const {
  return _impl_.backgroundcolor_;
}
inline int32_t DiscoveryBadge::backgroundcolor() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.backgroundColor)
  return _internal_backgroundcolor();
}
inline void DiscoveryBadge::_internal_set_backgroundcolor(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.backgroundcolor_ = value;
}
inline void DiscoveryBadge::set_backgroundcolor(int32_t value) {
  _internal_set_backgroundcolor(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.backgroundColor)
}

// optional .playapi.proto.finsky.details.DiscoveryBadgeLink discoveryBadgeLink = 4;
inline bool DiscoveryBadge::_internal_has_discoverybadgelink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.discoverybadgelink_ != nullptr);
  return value;
}
inline bool DiscoveryBadge::has_discoverybadgelink() const {
  return _internal_has_discoverybadgelink();
}
inline void DiscoveryBadge::clear_discoverybadgelink() {
  if (_impl_.discoverybadgelink_ != nullptr) _impl_.discoverybadgelink_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::playapi::proto::finsky::details::DiscoveryBadgeLink& DiscoveryBadge::_internal_discoverybadgelink() const {
  const ::playapi::proto::finsky::details::DiscoveryBadgeLink* p = _impl_.discoverybadgelink_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::details::DiscoveryBadgeLink&>(
      ::playapi::proto::finsky::details::_DiscoveryBadgeLink_default_instance_);
}
inline const ::playapi::proto::finsky::details::DiscoveryBadgeLink& DiscoveryBadge::discoverybadgelink() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.discoveryBadgeLink)
  return _internal_discoverybadgelink();
}
inline void DiscoveryBadge::unsafe_arena_set_allocated_discoverybadgelink(
    ::playapi::proto::finsky::details::DiscoveryBadgeLink* discoverybadgelink) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.discoverybadgelink_);
  }
  _impl_.discoverybadgelink_ = discoverybadgelink;
  if (discoverybadgelink) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.discoveryBadgeLink)
}
inline ::playapi::proto::finsky::details::DiscoveryBadgeLink* DiscoveryBadge::release_discoverybadgelink() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::playapi::proto::finsky::details::DiscoveryBadgeLink* temp = _impl_.discoverybadgelink_;
  _impl_.discoverybadgelink_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::details::DiscoveryBadgeLink* DiscoveryBadge::unsafe_arena_release_discoverybadgelink() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.discoveryBadgeLink)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::playapi::proto::finsky::details::DiscoveryBadgeLink* temp = _impl_.discoverybadgelink_;
  _impl_.discoverybadgelink_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::details::DiscoveryBadgeLink* DiscoveryBadge::_internal_mutable_discoverybadgelink() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.discoverybadgelink_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::details::DiscoveryBadgeLink>(GetArenaForAllocation());
    _impl_.discoverybadgelink_ = p;
  }
  return _impl_.discoverybadgelink_;
}
inline ::playapi::proto::finsky::details::DiscoveryBadgeLink* DiscoveryBadge::mutable_discoverybadgelink() {
  ::playapi::proto::finsky::details::DiscoveryBadgeLink* _msg = _internal_mutable_discoverybadgelink();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.discoveryBadgeLink)
  return _msg;
}
inline void DiscoveryBadge::set_allocated_discoverybadgelink(::playapi::proto::finsky::details::DiscoveryBadgeLink* discoverybadgelink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.discoverybadgelink_;
  }
  if (discoverybadgelink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(discoverybadgelink);
    if (message_arena != submessage_arena) {
      discoverybadgelink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discoverybadgelink, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.discoverybadgelink_ = discoverybadgelink;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.discoveryBadgeLink)
}

// optional bytes serverLogsCookie = 5;
inline bool DiscoveryBadge::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void DiscoveryBadge::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DiscoveryBadge::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadge::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.serverLogsCookie)
}
inline std::string* DiscoveryBadge::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.serverLogsCookie)
  return _s;
}
inline const std::string& DiscoveryBadge::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void DiscoveryBadge::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadge::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.serverLogsCookie)
}

// optional bool isPlusOne = 6;
inline bool DiscoveryBadge::_internal_has_isplusone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_isplusone() const {
  return _internal_has_isplusone();
}
inline void DiscoveryBadge::clear_isplusone() {
  _impl_.isplusone_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool DiscoveryBadge::_internal_isplusone() const {
  return _impl_.isplusone_;
}
inline bool DiscoveryBadge::isplusone() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.isPlusOne)
  return _internal_isplusone();
}
inline void DiscoveryBadge::_internal_set_isplusone(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.isplusone_ = value;
}
inline void DiscoveryBadge::set_isplusone(bool value) {
  _internal_set_isplusone(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.isPlusOne)
}

// optional float aggregateRating = 7;
inline bool DiscoveryBadge::_internal_has_aggregaterating() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_aggregaterating() const {
  return _internal_has_aggregaterating();
}
inline void DiscoveryBadge::clear_aggregaterating() {
  _impl_.aggregaterating_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float DiscoveryBadge::_internal_aggregaterating() const {
  return _impl_.aggregaterating_;
}
inline float DiscoveryBadge::aggregaterating() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.aggregateRating)
  return _internal_aggregaterating();
}
inline void DiscoveryBadge::_internal_set_aggregaterating(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.aggregaterating_ = value;
}
inline void DiscoveryBadge::set_aggregaterating(float value) {
  _internal_set_aggregaterating(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.aggregateRating)
}

// optional int32 userStarRating = 8;
inline bool DiscoveryBadge::_internal_has_userstarrating() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_userstarrating() const {
  return _internal_has_userstarrating();
}
inline void DiscoveryBadge::clear_userstarrating() {
  _impl_.userstarrating_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t DiscoveryBadge::_internal_userstarrating() const {
  return _impl_.userstarrating_;
}
inline int32_t DiscoveryBadge::userstarrating() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.userStarRating)
  return _internal_userstarrating();
}
inline void DiscoveryBadge::_internal_set_userstarrating(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.userstarrating_ = value;
}
inline void DiscoveryBadge::set_userstarrating(int32_t value) {
  _internal_set_userstarrating(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.userStarRating)
}

// optional string downloadCount = 9;
inline bool DiscoveryBadge::_internal_has_downloadcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_downloadcount() const {
  return _internal_has_downloadcount();
}
inline void DiscoveryBadge::clear_downloadcount() {
  _impl_.downloadcount_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DiscoveryBadge::downloadcount() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.downloadCount)
  return _internal_downloadcount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadge::set_downloadcount(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.downloadcount_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.downloadCount)
}
inline std::string* DiscoveryBadge::mutable_downloadcount() {
  std::string* _s = _internal_mutable_downloadcount();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.downloadCount)
  return _s;
}
inline const std::string& DiscoveryBadge::_internal_downloadcount() const {
  return _impl_.downloadcount_.Get();
}
inline void DiscoveryBadge::_internal_set_downloadcount(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.downloadcount_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::_internal_mutable_downloadcount() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.downloadcount_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::release_downloadcount() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.downloadCount)
  if (!_internal_has_downloadcount()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.downloadcount_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadcount_.IsDefault()) {
    _impl_.downloadcount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadge::set_allocated_downloadcount(std::string* downloadcount) {
  if (downloadcount != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.downloadcount_.SetAllocated(downloadcount, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadcount_.IsDefault()) {
    _impl_.downloadcount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.downloadCount)
}

// optional string downloadUnits = 10;
inline bool DiscoveryBadge::_internal_has_downloadunits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_downloadunits() const {
  return _internal_has_downloadunits();
}
inline void DiscoveryBadge::clear_downloadunits() {
  _impl_.downloadunits_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DiscoveryBadge::downloadunits() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.downloadUnits)
  return _internal_downloadunits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadge::set_downloadunits(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.downloadunits_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.downloadUnits)
}
inline std::string* DiscoveryBadge::mutable_downloadunits() {
  std::string* _s = _internal_mutable_downloadunits();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.downloadUnits)
  return _s;
}
inline const std::string& DiscoveryBadge::_internal_downloadunits() const {
  return _impl_.downloadunits_.Get();
}
inline void DiscoveryBadge::_internal_set_downloadunits(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.downloadunits_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::_internal_mutable_downloadunits() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.downloadunits_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::release_downloadunits() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.downloadUnits)
  if (!_internal_has_downloadunits()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.downloadunits_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadunits_.IsDefault()) {
    _impl_.downloadunits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadge::set_allocated_downloadunits(std::string* downloadunits) {
  if (downloadunits != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.downloadunits_.SetAllocated(downloadunits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadunits_.IsDefault()) {
    _impl_.downloadunits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.downloadUnits)
}

// optional string contentDescription = 11;
inline bool DiscoveryBadge::_internal_has_contentdescription() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DiscoveryBadge::has_contentdescription() const {
  return _internal_has_contentdescription();
}
inline void DiscoveryBadge::clear_contentdescription() {
  _impl_.contentdescription_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DiscoveryBadge::contentdescription() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.contentDescription)
  return _internal_contentdescription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadge::set_contentdescription(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.contentdescription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadge.contentDescription)
}
inline std::string* DiscoveryBadge::mutable_contentdescription() {
  std::string* _s = _internal_mutable_contentdescription();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.contentDescription)
  return _s;
}
inline const std::string& DiscoveryBadge::_internal_contentdescription() const {
  return _impl_.contentdescription_.Get();
}
inline void DiscoveryBadge::_internal_set_contentdescription(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.contentdescription_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::_internal_mutable_contentdescription() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.contentdescription_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadge::release_contentdescription() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.contentDescription)
  if (!_internal_has_contentdescription()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.contentdescription_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentdescription_.IsDefault()) {
    _impl_.contentdescription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadge::set_allocated_contentdescription(std::string* contentdescription) {
  if (contentdescription != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.contentdescription_.SetAllocated(contentdescription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentdescription_.IsDefault()) {
    _impl_.contentdescription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.contentDescription)
}

// optional .playapi.proto.finsky.details.PlayerBadge playerBadge = 12;
inline bool DiscoveryBadge::_internal_has_playerbadge() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playerbadge_ != nullptr);
  return value;
}
inline bool DiscoveryBadge::has_playerbadge() const {
  return _internal_has_playerbadge();
}
inline void DiscoveryBadge::clear_playerbadge() {
  if (_impl_.playerbadge_ != nullptr) _impl_.playerbadge_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::playapi::proto::finsky::details::PlayerBadge& DiscoveryBadge::_internal_playerbadge() const {
  const ::playapi::proto::finsky::details::PlayerBadge* p = _impl_.playerbadge_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::details::PlayerBadge&>(
      ::playapi::proto::finsky::details::_PlayerBadge_default_instance_);
}
inline const ::playapi::proto::finsky::details::PlayerBadge& DiscoveryBadge::playerbadge() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.playerBadge)
  return _internal_playerbadge();
}
inline void DiscoveryBadge::unsafe_arena_set_allocated_playerbadge(
    ::playapi::proto::finsky::details::PlayerBadge* playerbadge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerbadge_);
  }
  _impl_.playerbadge_ = playerbadge;
  if (playerbadge) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.playerBadge)
}
inline ::playapi::proto::finsky::details::PlayerBadge* DiscoveryBadge::release_playerbadge() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::playapi::proto::finsky::details::PlayerBadge* temp = _impl_.playerbadge_;
  _impl_.playerbadge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::details::PlayerBadge* DiscoveryBadge::unsafe_arena_release_playerbadge() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.playerBadge)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::playapi::proto::finsky::details::PlayerBadge* temp = _impl_.playerbadge_;
  _impl_.playerbadge_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::details::PlayerBadge* DiscoveryBadge::_internal_mutable_playerbadge() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.playerbadge_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::details::PlayerBadge>(GetArenaForAllocation());
    _impl_.playerbadge_ = p;
  }
  return _impl_.playerbadge_;
}
inline ::playapi::proto::finsky::details::PlayerBadge* DiscoveryBadge::mutable_playerbadge() {
  ::playapi::proto::finsky::details::PlayerBadge* _msg = _internal_mutable_playerbadge();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.playerBadge)
  return _msg;
}
inline void DiscoveryBadge::set_allocated_playerbadge(::playapi::proto::finsky::details::PlayerBadge* playerbadge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerbadge_;
  }
  if (playerbadge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerbadge);
    if (message_arena != submessage_arena) {
      playerbadge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerbadge, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.playerbadge_ = playerbadge;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.playerBadge)
}

// optional .playapi.proto.finsky.details.FamilyAgeRangeBadge familyAgeRangeBadge = 13;
inline bool DiscoveryBadge::_internal_has_familyagerangebadge() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.familyagerangebadge_ != nullptr);
  return value;
}
inline bool DiscoveryBadge::has_familyagerangebadge() const {
  return _internal_has_familyagerangebadge();
}
inline void DiscoveryBadge::clear_familyagerangebadge() {
  if (_impl_.familyagerangebadge_ != nullptr) _impl_.familyagerangebadge_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::playapi::proto::finsky::details::FamilyAgeRangeBadge& DiscoveryBadge::_internal_familyagerangebadge() const {
  const ::playapi::proto::finsky::details::FamilyAgeRangeBadge* p = _impl_.familyagerangebadge_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::details::FamilyAgeRangeBadge&>(
      ::playapi::proto::finsky::details::_FamilyAgeRangeBadge_default_instance_);
}
inline const ::playapi::proto::finsky::details::FamilyAgeRangeBadge& DiscoveryBadge::familyagerangebadge() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.familyAgeRangeBadge)
  return _internal_familyagerangebadge();
}
inline void DiscoveryBadge::unsafe_arena_set_allocated_familyagerangebadge(
    ::playapi::proto::finsky::details::FamilyAgeRangeBadge* familyagerangebadge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.familyagerangebadge_);
  }
  _impl_.familyagerangebadge_ = familyagerangebadge;
  if (familyagerangebadge) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.familyAgeRangeBadge)
}
inline ::playapi::proto::finsky::details::FamilyAgeRangeBadge* DiscoveryBadge::release_familyagerangebadge() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::playapi::proto::finsky::details::FamilyAgeRangeBadge* temp = _impl_.familyagerangebadge_;
  _impl_.familyagerangebadge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::details::FamilyAgeRangeBadge* DiscoveryBadge::unsafe_arena_release_familyagerangebadge() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.familyAgeRangeBadge)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::playapi::proto::finsky::details::FamilyAgeRangeBadge* temp = _impl_.familyagerangebadge_;
  _impl_.familyagerangebadge_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::details::FamilyAgeRangeBadge* DiscoveryBadge::_internal_mutable_familyagerangebadge() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.familyagerangebadge_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::details::FamilyAgeRangeBadge>(GetArenaForAllocation());
    _impl_.familyagerangebadge_ = p;
  }
  return _impl_.familyagerangebadge_;
}
inline ::playapi::proto::finsky::details::FamilyAgeRangeBadge* DiscoveryBadge::mutable_familyagerangebadge() {
  ::playapi::proto::finsky::details::FamilyAgeRangeBadge* _msg = _internal_mutable_familyagerangebadge();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.familyAgeRangeBadge)
  return _msg;
}
inline void DiscoveryBadge::set_allocated_familyagerangebadge(::playapi::proto::finsky::details::FamilyAgeRangeBadge* familyagerangebadge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.familyagerangebadge_;
  }
  if (familyagerangebadge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(familyagerangebadge);
    if (message_arena != submessage_arena) {
      familyagerangebadge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, familyagerangebadge, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.familyagerangebadge_ = familyagerangebadge;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.familyAgeRangeBadge)
}

// optional .playapi.proto.finsky.details.FamilyCategoryBadge familyCategoryBadge = 14;
inline bool DiscoveryBadge::_internal_has_familycategorybadge() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.familycategorybadge_ != nullptr);
  return value;
}
inline bool DiscoveryBadge::has_familycategorybadge() const {
  return _internal_has_familycategorybadge();
}
inline void DiscoveryBadge::clear_familycategorybadge() {
  if (_impl_.familycategorybadge_ != nullptr) _impl_.familycategorybadge_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::playapi::proto::finsky::details::FamilyCategoryBadge& DiscoveryBadge::_internal_familycategorybadge() const {
  const ::playapi::proto::finsky::details::FamilyCategoryBadge* p = _impl_.familycategorybadge_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::details::FamilyCategoryBadge&>(
      ::playapi::proto::finsky::details::_FamilyCategoryBadge_default_instance_);
}
inline const ::playapi::proto::finsky::details::FamilyCategoryBadge& DiscoveryBadge::familycategorybadge() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadge.familyCategoryBadge)
  return _internal_familycategorybadge();
}
inline void DiscoveryBadge::unsafe_arena_set_allocated_familycategorybadge(
    ::playapi::proto::finsky::details::FamilyCategoryBadge* familycategorybadge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.familycategorybadge_);
  }
  _impl_.familycategorybadge_ = familycategorybadge;
  if (familycategorybadge) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.familyCategoryBadge)
}
inline ::playapi::proto::finsky::details::FamilyCategoryBadge* DiscoveryBadge::release_familycategorybadge() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::playapi::proto::finsky::details::FamilyCategoryBadge* temp = _impl_.familycategorybadge_;
  _impl_.familycategorybadge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::details::FamilyCategoryBadge* DiscoveryBadge::unsafe_arena_release_familycategorybadge() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadge.familyCategoryBadge)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::playapi::proto::finsky::details::FamilyCategoryBadge* temp = _impl_.familycategorybadge_;
  _impl_.familycategorybadge_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::details::FamilyCategoryBadge* DiscoveryBadge::_internal_mutable_familycategorybadge() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.familycategorybadge_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::details::FamilyCategoryBadge>(GetArenaForAllocation());
    _impl_.familycategorybadge_ = p;
  }
  return _impl_.familycategorybadge_;
}
inline ::playapi::proto::finsky::details::FamilyCategoryBadge* DiscoveryBadge::mutable_familycategorybadge() {
  ::playapi::proto::finsky::details::FamilyCategoryBadge* _msg = _internal_mutable_familycategorybadge();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadge.familyCategoryBadge)
  return _msg;
}
inline void DiscoveryBadge::set_allocated_familycategorybadge(::playapi::proto::finsky::details::FamilyCategoryBadge* familycategorybadge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.familycategorybadge_;
  }
  if (familycategorybadge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(familycategorybadge);
    if (message_arena != submessage_arena) {
      familycategorybadge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, familycategorybadge, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.familycategorybadge_ = familycategorybadge;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadge.familyCategoryBadge)
}

// -------------------------------------------------------------------

// DiscoveryBadgeLink

// optional .playapi.proto.finsky.link.Link link = 1;
inline bool DiscoveryBadgeLink::_internal_has_link() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.link_ != nullptr);
  return value;
}
inline bool DiscoveryBadgeLink::has_link() const {
  return _internal_has_link();
}
inline const ::playapi::proto::finsky::link::Link& DiscoveryBadgeLink::_internal_link() const {
  const ::playapi::proto::finsky::link::Link* p = _impl_.link_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::link::Link&>(
      ::playapi::proto::finsky::link::_Link_default_instance_);
}
inline const ::playapi::proto::finsky::link::Link& DiscoveryBadgeLink::link() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadgeLink.link)
  return _internal_link();
}
inline void DiscoveryBadgeLink::unsafe_arena_set_allocated_link(
    ::playapi::proto::finsky::link::Link* link) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_);
  }
  _impl_.link_ = link;
  if (link) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.DiscoveryBadgeLink.link)
}
inline ::playapi::proto::finsky::link::Link* DiscoveryBadgeLink::release_link() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::finsky::link::Link* temp = _impl_.link_;
  _impl_.link_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::link::Link* DiscoveryBadgeLink::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadgeLink.link)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::finsky::link::Link* temp = _impl_.link_;
  _impl_.link_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::link::Link* DiscoveryBadgeLink::_internal_mutable_link() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.link_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::link::Link>(GetArenaForAllocation());
    _impl_.link_ = p;
  }
  return _impl_.link_;
}
inline ::playapi::proto::finsky::link::Link* DiscoveryBadgeLink::mutable_link() {
  ::playapi::proto::finsky::link::Link* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadgeLink.link)
  return _msg;
}
inline void DiscoveryBadgeLink::set_allocated_link(::playapi::proto::finsky::link::Link* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_);
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link));
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.link_ = link;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadgeLink.link)
}

// optional string userReviewsUrl = 2;
inline bool DiscoveryBadgeLink::_internal_has_userreviewsurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryBadgeLink::has_userreviewsurl() const {
  return _internal_has_userreviewsurl();
}
inline void DiscoveryBadgeLink::clear_userreviewsurl() {
  _impl_.userreviewsurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiscoveryBadgeLink::userreviewsurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl)
  return _internal_userreviewsurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadgeLink::set_userreviewsurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.userreviewsurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl)
}
inline std::string* DiscoveryBadgeLink::mutable_userreviewsurl() {
  std::string* _s = _internal_mutable_userreviewsurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl)
  return _s;
}
inline const std::string& DiscoveryBadgeLink::_internal_userreviewsurl() const {
  return _impl_.userreviewsurl_.Get();
}
inline void DiscoveryBadgeLink::_internal_set_userreviewsurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userreviewsurl_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadgeLink::_internal_mutable_userreviewsurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.userreviewsurl_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadgeLink::release_userreviewsurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl)
  if (!_internal_has_userreviewsurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.userreviewsurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userreviewsurl_.IsDefault()) {
    _impl_.userreviewsurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadgeLink::set_allocated_userreviewsurl(std::string* userreviewsurl) {
  if (userreviewsurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userreviewsurl_.SetAllocated(userreviewsurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userreviewsurl_.IsDefault()) {
    _impl_.userreviewsurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadgeLink.userReviewsUrl)
}

// optional string criticReviewsUrl = 3;
inline bool DiscoveryBadgeLink::_internal_has_criticreviewsurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryBadgeLink::has_criticreviewsurl() const {
  return _internal_has_criticreviewsurl();
}
inline void DiscoveryBadgeLink::clear_criticreviewsurl() {
  _impl_.criticreviewsurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DiscoveryBadgeLink::criticreviewsurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl)
  return _internal_criticreviewsurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryBadgeLink::set_criticreviewsurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.criticreviewsurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl)
}
inline std::string* DiscoveryBadgeLink::mutable_criticreviewsurl() {
  std::string* _s = _internal_mutable_criticreviewsurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl)
  return _s;
}
inline const std::string& DiscoveryBadgeLink::_internal_criticreviewsurl() const {
  return _impl_.criticreviewsurl_.Get();
}
inline void DiscoveryBadgeLink::_internal_set_criticreviewsurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.criticreviewsurl_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryBadgeLink::_internal_mutable_criticreviewsurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.criticreviewsurl_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryBadgeLink::release_criticreviewsurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl)
  if (!_internal_has_criticreviewsurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.criticreviewsurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.criticreviewsurl_.IsDefault()) {
    _impl_.criticreviewsurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryBadgeLink::set_allocated_criticreviewsurl(std::string* criticreviewsurl) {
  if (criticreviewsurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.criticreviewsurl_.SetAllocated(criticreviewsurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.criticreviewsurl_.IsDefault()) {
    _impl_.criticreviewsurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.DiscoveryBadgeLink.criticReviewsUrl)
}

// -------------------------------------------------------------------

// PlayerBadge

// optional .playapi.proto.finsky.Image overlayIcon = 1;
inline bool PlayerBadge::_internal_has_overlayicon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.overlayicon_ != nullptr);
  return value;
}
inline bool PlayerBadge::has_overlayicon() const {
  return _internal_has_overlayicon();
}
inline const ::playapi::proto::finsky::Image& PlayerBadge::_internal_overlayicon() const {
  const ::playapi::proto::finsky::Image* p = _impl_.overlayicon_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::Image&>(
      ::playapi::proto::finsky::_Image_default_instance_);
}
inline const ::playapi::proto::finsky::Image& PlayerBadge::overlayicon() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.details.PlayerBadge.overlayIcon)
  return _internal_overlayicon();
}
inline void PlayerBadge::unsafe_arena_set_allocated_overlayicon(
    ::playapi::proto::finsky::Image* overlayicon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlayicon_);
  }
  _impl_.overlayicon_ = overlayicon;
  if (overlayicon) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.details.PlayerBadge.overlayIcon)
}
inline ::playapi::proto::finsky::Image* PlayerBadge::release_overlayicon() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::Image* temp = _impl_.overlayicon_;
  _impl_.overlayicon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::Image* PlayerBadge::unsafe_arena_release_overlayicon() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.details.PlayerBadge.overlayIcon)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::Image* temp = _impl_.overlayicon_;
  _impl_.overlayicon_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::Image* PlayerBadge::_internal_mutable_overlayicon() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.overlayicon_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::Image>(GetArenaForAllocation());
    _impl_.overlayicon_ = p;
  }
  return _impl_.overlayicon_;
}
inline ::playapi::proto::finsky::Image* PlayerBadge::mutable_overlayicon() {
  ::playapi::proto::finsky::Image* _msg = _internal_mutable_overlayicon();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.details.PlayerBadge.overlayIcon)
  return _msg;
}
inline void PlayerBadge::set_allocated_overlayicon(::playapi::proto::finsky::Image* overlayicon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlayicon_);
  }
  if (overlayicon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overlayicon));
    if (message_arena != submessage_arena) {
      overlayicon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlayicon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.overlayicon_ = overlayicon;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.details.PlayerBadge.overlayIcon)
}

// -------------------------------------------------------------------

// FamilyAgeRangeBadge

// -------------------------------------------------------------------

// FamilyCategoryBadge

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace details
}  // namespace finsky
}  // namespace proto
}  // namespace playapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_5fdetails_2eproto
