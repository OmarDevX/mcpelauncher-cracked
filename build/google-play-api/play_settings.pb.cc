// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_settings.proto

#include "play_settings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace settings {
PROTOBUF_CONSTEXPR UserSettingsConsistencyTokens_ConsistencyTokenInfo::UserSettingsConsistencyTokens_ConsistencyTokenInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestheader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consistencytoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserSettingsConsistencyTokens_ConsistencyTokenInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSettingsConsistencyTokens_ConsistencyTokenInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSettingsConsistencyTokens_ConsistencyTokenInfoDefaultTypeInternal() {}
  union {
    UserSettingsConsistencyTokens_ConsistencyTokenInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSettingsConsistencyTokens_ConsistencyTokenInfoDefaultTypeInternal _UserSettingsConsistencyTokens_ConsistencyTokenInfo_default_instance_;
PROTOBUF_CONSTEXPR UserSettingsConsistencyTokens::UserSettingsConsistencyTokens(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consistencytokeninfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSettingsConsistencyTokensDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSettingsConsistencyTokensDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSettingsConsistencyTokensDefaultTypeInternal() {}
  union {
    UserSettingsConsistencyTokens _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSettingsConsistencyTokensDefaultTypeInternal _UserSettingsConsistencyTokens_default_instance_;
PROTOBUF_CONSTEXPR MarketingSettings::MarketingSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.marketingemailsoptedin_)*/false} {}
struct MarketingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketingSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketingSettingsDefaultTypeInternal() {}
  union {
    MarketingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketingSettingsDefaultTypeInternal _MarketingSettings_default_instance_;
PROTOBUF_CONSTEXPR PrivacySetting::PrivacySetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.currentstatus_)*/0
  , /*decltype(_impl_.enabledbydefault_)*/false} {}
struct PrivacySettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivacySettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivacySettingDefaultTypeInternal() {}
  union {
    PrivacySetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivacySettingDefaultTypeInternal _PrivacySetting_default_instance_;
PROTOBUF_CONSTEXPR PrivacySettings::PrivacySettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.privacysetting_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivacySettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivacySettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivacySettingsDefaultTypeInternal() {}
  union {
    PrivacySettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivacySettingsDefaultTypeInternal _PrivacySettings_default_instance_;
PROTOBUF_CONSTEXPR FamilyInfo::FamilyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.family_)*/nullptr
  , /*decltype(_impl_.familymembershipstatus_)*/0} {}
struct FamilyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FamilyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FamilyInfoDefaultTypeInternal() {}
  union {
    FamilyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FamilyInfoDefaultTypeInternal _FamilyInfo_default_instance_;
PROTOBUF_CONSTEXPR Family::Family(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.member_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FamilyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FamilyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FamilyDefaultTypeInternal() {}
  union {
    Family _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FamilyDefaultTypeInternal _Family_default_instance_;
PROTOBUF_CONSTEXPR FamilyMember::FamilyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persondocument_)*/nullptr
  , /*decltype(_impl_.role_)*/0} {}
struct FamilyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FamilyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FamilyMemberDefaultTypeInternal() {}
  union {
    FamilyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FamilyMemberDefaultTypeInternal _FamilyMember_default_instance_;
PROTOBUF_CONSTEXPR Onboarding::Onboarding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct OnboardingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnboardingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnboardingDefaultTypeInternal() {}
  union {
    Onboarding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnboardingDefaultTypeInternal _Onboarding_default_instance_;
PROTOBUF_CONSTEXPR Onboardings::Onboardings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.onboarding_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnboardingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnboardingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnboardingsDefaultTypeInternal() {}
  union {
    Onboardings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnboardingsDefaultTypeInternal _Onboardings_default_instance_;
PROTOBUF_CONSTEXPR UserSettings::UserSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.marketingsettings_)*/nullptr
  , /*decltype(_impl_.privacysettings_)*/nullptr
  , /*decltype(_impl_.familyinfo_)*/nullptr
  , /*decltype(_impl_.dismissedonboardings_)*/nullptr} {}
struct UserSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSettingsDefaultTypeInternal() {}
  union {
    UserSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSettingsDefaultTypeInternal _UserSettings_default_instance_;
PROTOBUF_CONSTEXPR OBSOLETEUserSettings::OBSOLETEUserSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privacysetting_)*/{}
  , /*decltype(_impl_.toscheckboxmarketingemailsoptedin_)*/false} {}
struct OBSOLETEUserSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OBSOLETEUserSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OBSOLETEUserSettingsDefaultTypeInternal() {}
  union {
    OBSOLETEUserSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OBSOLETEUserSettingsDefaultTypeInternal _OBSOLETEUserSettings_default_instance_;
PROTOBUF_CONSTEXPR UserSettingDirtyData::UserSettingDirtyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.consistencytokens_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct UserSettingDirtyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSettingDirtyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSettingDirtyDataDefaultTypeInternal() {}
  union {
    UserSettingDirtyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSettingDirtyDataDefaultTypeInternal _UserSettingDirtyData_default_instance_;
PROTOBUF_CONSTEXPR GetUserSettingsResponse::GetUserSettingsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.usersettings_)*/nullptr
  , /*decltype(_impl_.consistencytokens_)*/nullptr} {}
struct GetUserSettingsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserSettingsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserSettingsResponseDefaultTypeInternal() {}
  union {
    GetUserSettingsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserSettingsResponseDefaultTypeInternal _GetUserSettingsResponse_default_instance_;
}  // namespace settings
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fsettings_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fsettings_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fsettings_2eproto = nullptr;

const uint32_t TableStruct_play_5fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo, _impl_.requestheader_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo, _impl_.consistencytoken_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens, _impl_.consistencytokeninfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::MarketingSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::MarketingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::MarketingSettings, _impl_.marketingemailsoptedin_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySetting, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySetting, _impl_.currentstatus_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySetting, _impl_.enabledbydefault_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::PrivacySettings, _impl_.privacysetting_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyInfo, _impl_.familymembershipstatus_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyInfo, _impl_.family_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Family, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Family, _impl_.member_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyMember, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::FamilyMember, _impl_.persondocument_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Onboarding, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Onboarding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Onboarding, _impl_.type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Onboardings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::Onboardings, _impl_.onboarding_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettings, _impl_.marketingsettings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettings, _impl_.privacysettings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettings, _impl_.familyinfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettings, _impl_.dismissedonboardings_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::OBSOLETEUserSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::OBSOLETEUserSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::OBSOLETEUserSettings, _impl_.toscheckboxmarketingemailsoptedin_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::OBSOLETEUserSettings, _impl_.privacysetting_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingDirtyData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingDirtyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingDirtyData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::UserSettingDirtyData, _impl_.consistencytokens_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::GetUserSettingsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::GetUserSettingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::GetUserSettingsResponse, _impl_.usersettings_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::settings::GetUserSettingsResponse, _impl_.consistencytokens_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo)},
  { 10, -1, -1, sizeof(::playapi::proto::finsky::settings::UserSettingsConsistencyTokens)},
  { 17, 24, -1, sizeof(::playapi::proto::finsky::settings::MarketingSettings)},
  { 25, 34, -1, sizeof(::playapi::proto::finsky::settings::PrivacySetting)},
  { 37, -1, -1, sizeof(::playapi::proto::finsky::settings::PrivacySettings)},
  { 44, 52, -1, sizeof(::playapi::proto::finsky::settings::FamilyInfo)},
  { 54, -1, -1, sizeof(::playapi::proto::finsky::settings::Family)},
  { 61, 69, -1, sizeof(::playapi::proto::finsky::settings::FamilyMember)},
  { 71, 78, -1, sizeof(::playapi::proto::finsky::settings::Onboarding)},
  { 79, -1, -1, sizeof(::playapi::proto::finsky::settings::Onboardings)},
  { 86, 96, -1, sizeof(::playapi::proto::finsky::settings::UserSettings)},
  { 100, 108, -1, sizeof(::playapi::proto::finsky::settings::OBSOLETEUserSettings)},
  { 110, 118, -1, sizeof(::playapi::proto::finsky::settings::UserSettingDirtyData)},
  { 120, 128, -1, sizeof(::playapi::proto::finsky::settings::GetUserSettingsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::settings::_UserSettingsConsistencyTokens_ConsistencyTokenInfo_default_instance_._instance,
  &::playapi::proto::finsky::settings::_UserSettingsConsistencyTokens_default_instance_._instance,
  &::playapi::proto::finsky::settings::_MarketingSettings_default_instance_._instance,
  &::playapi::proto::finsky::settings::_PrivacySetting_default_instance_._instance,
  &::playapi::proto::finsky::settings::_PrivacySettings_default_instance_._instance,
  &::playapi::proto::finsky::settings::_FamilyInfo_default_instance_._instance,
  &::playapi::proto::finsky::settings::_Family_default_instance_._instance,
  &::playapi::proto::finsky::settings::_FamilyMember_default_instance_._instance,
  &::playapi::proto::finsky::settings::_Onboarding_default_instance_._instance,
  &::playapi::proto::finsky::settings::_Onboardings_default_instance_._instance,
  &::playapi::proto::finsky::settings::_UserSettings_default_instance_._instance,
  &::playapi::proto::finsky::settings::_OBSOLETEUserSettings_default_instance_._instance,
  &::playapi::proto::finsky::settings::_UserSettingDirtyData_default_instance_._instance,
  &::playapi::proto::finsky::settings::_GetUserSettingsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023play_settings.proto\022\035playapi.proto.fin"
  "sky.settings\032\023play_document.proto\032\021play_"
  "search.proto\"\331\001\n\035UserSettingsConsistency"
  "Tokens\022o\n\024consistencyTokenInfo\030\001 \003(\0132Q.p"
  "layapi.proto.finsky.settings.UserSetting"
  "sConsistencyTokens.ConsistencyTokenInfo\032"
  "G\n\024ConsistencyTokenInfo\022\025\n\rrequestHeader"
  "\030\001 \001(\t\022\030\n\020consistencyToken\030\002 \001(\t\"3\n\021Mark"
  "etingSettings\022\036\n\026marketingEmailsOptedIn\030"
  "\001 \001(\010\"O\n\016PrivacySetting\022\014\n\004type\030\001 \001(\005\022\025\n"
  "\rcurrentStatus\030\002 \001(\005\022\030\n\020enabledByDefault"
  "\030\003 \001(\010\"X\n\017PrivacySettings\022E\n\016privacySett"
  "ing\030\001 \003(\0132-.playapi.proto.finsky.setting"
  "s.PrivacySetting\"c\n\nFamilyInfo\022\036\n\026family"
  "MembershipStatus\030\001 \001(\005\0225\n\006family\030\002 \001(\0132%"
  ".playapi.proto.finsky.settings.Family\"E\n"
  "\006Family\022;\n\006member\030\001 \003(\0132+.playapi.proto."
  "finsky.settings.FamilyMember\"Z\n\014FamilyMe"
  "mber\022\014\n\004role\030\001 \001(\005\022<\n\016personDocument\030\002 \001"
  "(\0132$.playapi.proto.finsky.document.DocV2"
  "\"\032\n\nOnboarding\022\014\n\004type\030\001 \001(\005\"L\n\013Onboardi"
  "ngs\022=\n\nonboarding\030\001 \003(\0132).playapi.proto."
  "finsky.settings.Onboarding\"\255\002\n\014UserSetti"
  "ngs\022K\n\021marketingSettings\030\001 \001(\01320.playapi"
  ".proto.finsky.settings.MarketingSettings"
  "\022G\n\017privacySettings\030\002 \001(\0132..playapi.prot"
  "o.finsky.settings.PrivacySettings\022=\n\nfam"
  "ilyInfo\030\003 \001(\0132).playapi.proto.finsky.set"
  "tings.FamilyInfo\022H\n\024dismissedOnboardings"
  "\030\004 \001(\0132*.playapi.proto.finsky.settings.O"
  "nboardings\"\210\001\n\024OBSOLETEUserSettings\022)\n!t"
  "osCheckboxMarketingEmailsOptedIn\030\001 \001(\010\022E"
  "\n\016privacySetting\030\002 \003(\0132-.playapi.proto.f"
  "insky.settings.PrivacySetting\"}\n\024UserSet"
  "tingDirtyData\022\014\n\004type\030\001 \001(\005\022W\n\021consisten"
  "cyTokens\030\002 \001(\0132<.playapi.proto.finsky.se"
  "ttings.UserSettingsConsistencyTokens\"\265\001\n"
  "\027GetUserSettingsResponse\022A\n\014userSettings"
  "\030\001 \001(\0132+.playapi.proto.finsky.settings.U"
  "serSettings\022W\n\021consistencyTokens\030\002 \001(\0132<"
  ".playapi.proto.finsky.settings.UserSetti"
  "ngsConsistencyTokens"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fsettings_2eproto_deps[2] = {
  &::descriptor_table_play_5fdocument_2eproto,
  &::descriptor_table_play_5fsearch_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fsettings_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fsettings_2eproto = {
    false, false, 1660, descriptor_table_protodef_play_5fsettings_2eproto,
    "play_settings.proto",
    &descriptor_table_play_5fsettings_2eproto_once, descriptor_table_play_5fsettings_2eproto_deps, 2, 14,
    schemas, file_default_instances, TableStruct_play_5fsettings_2eproto::offsets,
    file_level_metadata_play_5fsettings_2eproto, file_level_enum_descriptors_play_5fsettings_2eproto,
    file_level_service_descriptors_play_5fsettings_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fsettings_2eproto_getter() {
  return &descriptor_table_play_5fsettings_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fsettings_2eproto(&descriptor_table_play_5fsettings_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace settings {

// ===================================================================

class UserSettingsConsistencyTokens_ConsistencyTokenInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSettingsConsistencyTokens_ConsistencyTokenInfo>()._impl_._has_bits_);
  static void set_has_requestheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_consistencytoken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserSettingsConsistencyTokens_ConsistencyTokenInfo::UserSettingsConsistencyTokens_ConsistencyTokenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
}
UserSettingsConsistencyTokens_ConsistencyTokenInfo::UserSettingsConsistencyTokens_ConsistencyTokenInfo(const UserSettingsConsistencyTokens_ConsistencyTokenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSettingsConsistencyTokens_ConsistencyTokenInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestheader_){}
    , decltype(_impl_.consistencytoken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestheader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestheader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requestheader()) {
    _this->_impl_.requestheader_.Set(from._internal_requestheader(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consistencytoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consistencytoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_consistencytoken()) {
    _this->_impl_.consistencytoken_.Set(from._internal_consistencytoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
}

inline void UserSettingsConsistencyTokens_ConsistencyTokenInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestheader_){}
    , decltype(_impl_.consistencytoken_){}
  };
  _impl_.requestheader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestheader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consistencytoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consistencytoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSettingsConsistencyTokens_ConsistencyTokenInfo::~UserSettingsConsistencyTokens_ConsistencyTokenInfo() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSettingsConsistencyTokens_ConsistencyTokenInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestheader_.Destroy();
  _impl_.consistencytoken_.Destroy();
}

void UserSettingsConsistencyTokens_ConsistencyTokenInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSettingsConsistencyTokens_ConsistencyTokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.requestheader_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.consistencytoken_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettingsConsistencyTokens_ConsistencyTokenInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string requestHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requestheader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo.requestHeader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string consistencyToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_consistencytoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo.consistencyToken");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSettingsConsistencyTokens_ConsistencyTokenInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string requestHeader = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requestheader().data(), static_cast<int>(this->_internal_requestheader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo.requestHeader");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requestheader(), target);
  }

  // optional string consistencyToken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_consistencytoken().data(), static_cast<int>(this->_internal_consistencytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo.consistencyToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consistencytoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  return target;
}

size_t UserSettingsConsistencyTokens_ConsistencyTokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string requestHeader = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requestheader());
    }

    // optional string consistencyToken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_consistencytoken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSettingsConsistencyTokens_ConsistencyTokenInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSettingsConsistencyTokens_ConsistencyTokenInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSettingsConsistencyTokens_ConsistencyTokenInfo::GetClassData() const { return &_class_data_; }


void UserSettingsConsistencyTokens_ConsistencyTokenInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSettingsConsistencyTokens_ConsistencyTokenInfo*>(&to_msg);
  auto& from = static_cast<const UserSettingsConsistencyTokens_ConsistencyTokenInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_requestheader(from._internal_requestheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_consistencytoken(from._internal_consistencytoken());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSettingsConsistencyTokens_ConsistencyTokenInfo::CopyFrom(const UserSettingsConsistencyTokens_ConsistencyTokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettingsConsistencyTokens_ConsistencyTokenInfo::IsInitialized() const {
  return true;
}

void UserSettingsConsistencyTokens_ConsistencyTokenInfo::InternalSwap(UserSettingsConsistencyTokens_ConsistencyTokenInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestheader_, lhs_arena,
      &other->_impl_.requestheader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consistencytoken_, lhs_arena,
      &other->_impl_.consistencytoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettingsConsistencyTokens_ConsistencyTokenInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[0]);
}

// ===================================================================

class UserSettingsConsistencyTokens::_Internal {
 public:
};

UserSettingsConsistencyTokens::UserSettingsConsistencyTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
}
UserSettingsConsistencyTokens::UserSettingsConsistencyTokens(const UserSettingsConsistencyTokens& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSettingsConsistencyTokens* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consistencytokeninfo_){from._impl_.consistencytokeninfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
}

inline void UserSettingsConsistencyTokens::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consistencytokeninfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserSettingsConsistencyTokens::~UserSettingsConsistencyTokens() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSettingsConsistencyTokens::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consistencytokeninfo_.~RepeatedPtrField();
}

void UserSettingsConsistencyTokens::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSettingsConsistencyTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consistencytokeninfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettingsConsistencyTokens::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo consistencyTokenInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consistencytokeninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSettingsConsistencyTokens::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo consistencyTokenInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consistencytokeninfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_consistencytokeninfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  return target;
}

size_t UserSettingsConsistencyTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.UserSettingsConsistencyTokens.ConsistencyTokenInfo consistencyTokenInfo = 1;
  total_size += 1UL * this->_internal_consistencytokeninfo_size();
  for (const auto& msg : this->_impl_.consistencytokeninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSettingsConsistencyTokens::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSettingsConsistencyTokens::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSettingsConsistencyTokens::GetClassData() const { return &_class_data_; }


void UserSettingsConsistencyTokens::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSettingsConsistencyTokens*>(&to_msg);
  auto& from = static_cast<const UserSettingsConsistencyTokens&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consistencytokeninfo_.MergeFrom(from._impl_.consistencytokeninfo_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSettingsConsistencyTokens::CopyFrom(const UserSettingsConsistencyTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.UserSettingsConsistencyTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettingsConsistencyTokens::IsInitialized() const {
  return true;
}

void UserSettingsConsistencyTokens::InternalSwap(UserSettingsConsistencyTokens* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consistencytokeninfo_.InternalSwap(&other->_impl_.consistencytokeninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettingsConsistencyTokens::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[1]);
}

// ===================================================================

class MarketingSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketingSettings>()._impl_._has_bits_);
  static void set_has_marketingemailsoptedin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MarketingSettings::MarketingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.MarketingSettings)
}
MarketingSettings::MarketingSettings(const MarketingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketingSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.marketingemailsoptedin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.marketingemailsoptedin_ = from._impl_.marketingemailsoptedin_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.MarketingSettings)
}

inline void MarketingSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.marketingemailsoptedin_){false}
  };
}

MarketingSettings::~MarketingSettings() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.MarketingSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MarketingSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.MarketingSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketingemailsoptedin_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketingSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool marketingEmailsOptedIn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_marketingemailsoptedin(&has_bits);
          _impl_.marketingemailsoptedin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketingSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.MarketingSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool marketingEmailsOptedIn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_marketingemailsoptedin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.MarketingSettings)
  return target;
}

size_t MarketingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.MarketingSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool marketingEmailsOptedIn = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketingSettings::GetClassData() const { return &_class_data_; }


void MarketingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketingSettings*>(&to_msg);
  auto& from = static_cast<const MarketingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.MarketingSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_marketingemailsoptedin()) {
    _this->_internal_set_marketingemailsoptedin(from._internal_marketingemailsoptedin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketingSettings::CopyFrom(const MarketingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.MarketingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketingSettings::IsInitialized() const {
  return true;
}

void MarketingSettings::InternalSwap(MarketingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.marketingemailsoptedin_, other->_impl_.marketingemailsoptedin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketingSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[2]);
}

// ===================================================================

class PrivacySetting::_Internal {
 public:
  using HasBits = decltype(std::declval<PrivacySetting>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currentstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enabledbydefault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PrivacySetting::PrivacySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.PrivacySetting)
}
PrivacySetting::PrivacySetting(const PrivacySetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrivacySetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.currentstatus_){}
    , decltype(_impl_.enabledbydefault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabledbydefault_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.enabledbydefault_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.PrivacySetting)
}

inline void PrivacySetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.currentstatus_){0}
    , decltype(_impl_.enabledbydefault_){false}
  };
}

PrivacySetting::~PrivacySetting() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.PrivacySetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivacySetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrivacySetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivacySetting::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.PrivacySetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enabledbydefault_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.enabledbydefault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivacySetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currentStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currentstatus(&has_bits);
          _impl_.currentstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabledByDefault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enabledbydefault(&has_bits);
          _impl_.enabledbydefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivacySetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.PrivacySetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 currentStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_currentstatus(), target);
  }

  // optional bool enabledByDefault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enabledbydefault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.PrivacySetting)
  return target;
}

size_t PrivacySetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.PrivacySetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 currentStatus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentstatus());
    }

    // optional bool enabledByDefault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivacySetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrivacySetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivacySetting::GetClassData() const { return &_class_data_; }


void PrivacySetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrivacySetting*>(&to_msg);
  auto& from = static_cast<const PrivacySetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.PrivacySetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currentstatus_ = from._impl_.currentstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.enabledbydefault_ = from._impl_.enabledbydefault_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivacySetting::CopyFrom(const PrivacySetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.PrivacySetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacySetting::IsInitialized() const {
  return true;
}

void PrivacySetting::InternalSwap(PrivacySetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivacySetting, _impl_.enabledbydefault_)
      + sizeof(PrivacySetting::_impl_.enabledbydefault_)
      - PROTOBUF_FIELD_OFFSET(PrivacySetting, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivacySetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[3]);
}

// ===================================================================

class PrivacySettings::_Internal {
 public:
};

PrivacySettings::PrivacySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.PrivacySettings)
}
PrivacySettings::PrivacySettings(const PrivacySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrivacySettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.privacysetting_){from._impl_.privacysetting_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.PrivacySettings)
}

inline void PrivacySettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.privacysetting_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrivacySettings::~PrivacySettings() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.PrivacySettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivacySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privacysetting_.~RepeatedPtrField();
}

void PrivacySettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivacySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.PrivacySettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privacysetting_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivacySettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.settings.PrivacySetting privacySetting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_privacysetting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivacySettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.PrivacySettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.PrivacySetting privacySetting = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_privacysetting_size()); i < n; i++) {
    const auto& repfield = this->_internal_privacysetting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.PrivacySettings)
  return target;
}

size_t PrivacySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.PrivacySettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.PrivacySetting privacySetting = 1;
  total_size += 1UL * this->_internal_privacysetting_size();
  for (const auto& msg : this->_impl_.privacysetting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivacySettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrivacySettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivacySettings::GetClassData() const { return &_class_data_; }


void PrivacySettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrivacySettings*>(&to_msg);
  auto& from = static_cast<const PrivacySettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.PrivacySettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privacysetting_.MergeFrom(from._impl_.privacysetting_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivacySettings::CopyFrom(const PrivacySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.PrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacySettings::IsInitialized() const {
  return true;
}

void PrivacySettings::InternalSwap(PrivacySettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.privacysetting_.InternalSwap(&other->_impl_.privacysetting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivacySettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[4]);
}

// ===================================================================

class FamilyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FamilyInfo>()._impl_._has_bits_);
  static void set_has_familymembershipstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::settings::Family& family(const FamilyInfo* msg);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::settings::Family&
FamilyInfo::_Internal::family(const FamilyInfo* msg) {
  return *msg->_impl_.family_;
}
FamilyInfo::FamilyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.FamilyInfo)
}
FamilyInfo::FamilyInfo(const FamilyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FamilyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.family_){nullptr}
    , decltype(_impl_.familymembershipstatus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_family()) {
    _this->_impl_.family_ = new ::playapi::proto::finsky::settings::Family(*from._impl_.family_);
  }
  _this->_impl_.familymembershipstatus_ = from._impl_.familymembershipstatus_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.FamilyInfo)
}

inline void FamilyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.family_){nullptr}
    , decltype(_impl_.familymembershipstatus_){0}
  };
}

FamilyInfo::~FamilyInfo() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.FamilyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FamilyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.family_;
}

void FamilyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FamilyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.FamilyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.family_ != nullptr);
    _impl_.family_->Clear();
  }
  _impl_.familymembershipstatus_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FamilyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 familyMembershipStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_familymembershipstatus(&has_bits);
          _impl_.familymembershipstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.Family family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FamilyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.FamilyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 familyMembershipStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_familymembershipstatus(), target);
  }

  // optional .playapi.proto.finsky.settings.Family family = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::family(this),
        _Internal::family(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.FamilyInfo)
  return target;
}

size_t FamilyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.FamilyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.settings.Family family = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.family_);
    }

    // optional int32 familyMembershipStatus = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_familymembershipstatus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FamilyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FamilyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FamilyInfo::GetClassData() const { return &_class_data_; }


void FamilyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FamilyInfo*>(&to_msg);
  auto& from = static_cast<const FamilyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.FamilyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_family()->::playapi::proto::finsky::settings::Family::MergeFrom(
          from._internal_family());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.familymembershipstatus_ = from._impl_.familymembershipstatus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FamilyInfo::CopyFrom(const FamilyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.FamilyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyInfo::IsInitialized() const {
  return true;
}

void FamilyInfo::InternalSwap(FamilyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FamilyInfo, _impl_.familymembershipstatus_)
      + sizeof(FamilyInfo::_impl_.familymembershipstatus_)
      - PROTOBUF_FIELD_OFFSET(FamilyInfo, _impl_.family_)>(
          reinterpret_cast<char*>(&_impl_.family_),
          reinterpret_cast<char*>(&other->_impl_.family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FamilyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[5]);
}

// ===================================================================

class Family::_Internal {
 public:
};

Family::Family(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.Family)
}
Family::Family(const Family& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Family* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.member_){from._impl_.member_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.Family)
}

inline void Family::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.member_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Family::~Family() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.Family)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Family::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_.~RepeatedPtrField();
}

void Family::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Family::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.Family)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Family::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.settings.FamilyMember member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Family::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.Family)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.FamilyMember member = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_member_size()); i < n; i++) {
    const auto& repfield = this->_internal_member(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.Family)
  return target;
}

size_t Family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.Family)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.FamilyMember member = 1;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->_impl_.member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Family::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Family::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Family::GetClassData() const { return &_class_data_; }


void Family::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Family*>(&to_msg);
  auto& from = static_cast<const Family&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.Family)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_.MergeFrom(from._impl_.member_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Family::CopyFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.Family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Family::IsInitialized() const {
  return true;
}

void Family::InternalSwap(Family* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.member_.InternalSwap(&other->_impl_.member_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Family::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[6]);
}

// ===================================================================

class FamilyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<FamilyMember>()._impl_._has_bits_);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::document::DocV2& persondocument(const FamilyMember* msg);
  static void set_has_persondocument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::document::DocV2&
FamilyMember::_Internal::persondocument(const FamilyMember* msg) {
  return *msg->_impl_.persondocument_;
}
void FamilyMember::clear_persondocument() {
  if (_impl_.persondocument_ != nullptr) _impl_.persondocument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FamilyMember::FamilyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.FamilyMember)
}
FamilyMember::FamilyMember(const FamilyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FamilyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persondocument_){nullptr}
    , decltype(_impl_.role_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_persondocument()) {
    _this->_impl_.persondocument_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.persondocument_);
  }
  _this->_impl_.role_ = from._impl_.role_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.FamilyMember)
}

inline void FamilyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persondocument_){nullptr}
    , decltype(_impl_.role_){0}
  };
}

FamilyMember::~FamilyMember() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.FamilyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FamilyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.persondocument_;
}

void FamilyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FamilyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.FamilyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.persondocument_ != nullptr);
    _impl_.persondocument_->Clear();
  }
  _impl_.role_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FamilyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_role(&has_bits);
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DocV2 personDocument = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_persondocument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FamilyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.FamilyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 role = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_role(), target);
  }

  // optional .playapi.proto.finsky.document.DocV2 personDocument = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::persondocument(this),
        _Internal::persondocument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.FamilyMember)
  return target;
}

size_t FamilyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.FamilyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.document.DocV2 personDocument = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.persondocument_);
    }

    // optional int32 role = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_role());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FamilyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FamilyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FamilyMember::GetClassData() const { return &_class_data_; }


void FamilyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FamilyMember*>(&to_msg);
  auto& from = static_cast<const FamilyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.FamilyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_persondocument()->::playapi::proto::finsky::document::DocV2::MergeFrom(
          from._internal_persondocument());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FamilyMember::CopyFrom(const FamilyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.FamilyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyMember::IsInitialized() const {
  return true;
}

void FamilyMember::InternalSwap(FamilyMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FamilyMember, _impl_.role_)
      + sizeof(FamilyMember::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(FamilyMember, _impl_.persondocument_)>(
          reinterpret_cast<char*>(&_impl_.persondocument_),
          reinterpret_cast<char*>(&other->_impl_.persondocument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FamilyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[7]);
}

// ===================================================================

class Onboarding::_Internal {
 public:
  using HasBits = decltype(std::declval<Onboarding>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Onboarding::Onboarding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.Onboarding)
}
Onboarding::Onboarding(const Onboarding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Onboarding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.Onboarding)
}

inline void Onboarding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
  };
}

Onboarding::~Onboarding() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.Onboarding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Onboarding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Onboarding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Onboarding::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.Onboarding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Onboarding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Onboarding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.Onboarding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.Onboarding)
  return target;
}

size_t Onboarding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.Onboarding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Onboarding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Onboarding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Onboarding::GetClassData() const { return &_class_data_; }


void Onboarding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Onboarding*>(&to_msg);
  auto& from = static_cast<const Onboarding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.Onboarding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Onboarding::CopyFrom(const Onboarding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.Onboarding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Onboarding::IsInitialized() const {
  return true;
}

void Onboarding::InternalSwap(Onboarding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Onboarding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[8]);
}

// ===================================================================

class Onboardings::_Internal {
 public:
};

Onboardings::Onboardings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.Onboardings)
}
Onboardings::Onboardings(const Onboardings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Onboardings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.onboarding_){from._impl_.onboarding_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.Onboardings)
}

inline void Onboardings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.onboarding_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Onboardings::~Onboardings() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.Onboardings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Onboardings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.onboarding_.~RepeatedPtrField();
}

void Onboardings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Onboardings::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.Onboardings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.onboarding_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Onboardings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.settings.Onboarding onboarding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_onboarding(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Onboardings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.Onboardings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.Onboarding onboarding = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_onboarding_size()); i < n; i++) {
    const auto& repfield = this->_internal_onboarding(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.Onboardings)
  return target;
}

size_t Onboardings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.Onboardings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.Onboarding onboarding = 1;
  total_size += 1UL * this->_internal_onboarding_size();
  for (const auto& msg : this->_impl_.onboarding_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Onboardings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Onboardings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Onboardings::GetClassData() const { return &_class_data_; }


void Onboardings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Onboardings*>(&to_msg);
  auto& from = static_cast<const Onboardings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.Onboardings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.onboarding_.MergeFrom(from._impl_.onboarding_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Onboardings::CopyFrom(const Onboardings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.Onboardings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Onboardings::IsInitialized() const {
  return true;
}

void Onboardings::InternalSwap(Onboardings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.onboarding_.InternalSwap(&other->_impl_.onboarding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Onboardings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[9]);
}

// ===================================================================

class UserSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSettings>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::settings::MarketingSettings& marketingsettings(const UserSettings* msg);
  static void set_has_marketingsettings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::settings::PrivacySettings& privacysettings(const UserSettings* msg);
  static void set_has_privacysettings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::settings::FamilyInfo& familyinfo(const UserSettings* msg);
  static void set_has_familyinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::settings::Onboardings& dismissedonboardings(const UserSettings* msg);
  static void set_has_dismissedonboardings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::playapi::proto::finsky::settings::MarketingSettings&
UserSettings::_Internal::marketingsettings(const UserSettings* msg) {
  return *msg->_impl_.marketingsettings_;
}
const ::playapi::proto::finsky::settings::PrivacySettings&
UserSettings::_Internal::privacysettings(const UserSettings* msg) {
  return *msg->_impl_.privacysettings_;
}
const ::playapi::proto::finsky::settings::FamilyInfo&
UserSettings::_Internal::familyinfo(const UserSettings* msg) {
  return *msg->_impl_.familyinfo_;
}
const ::playapi::proto::finsky::settings::Onboardings&
UserSettings::_Internal::dismissedonboardings(const UserSettings* msg) {
  return *msg->_impl_.dismissedonboardings_;
}
UserSettings::UserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.UserSettings)
}
UserSettings::UserSettings(const UserSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.marketingsettings_){nullptr}
    , decltype(_impl_.privacysettings_){nullptr}
    , decltype(_impl_.familyinfo_){nullptr}
    , decltype(_impl_.dismissedonboardings_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_marketingsettings()) {
    _this->_impl_.marketingsettings_ = new ::playapi::proto::finsky::settings::MarketingSettings(*from._impl_.marketingsettings_);
  }
  if (from._internal_has_privacysettings()) {
    _this->_impl_.privacysettings_ = new ::playapi::proto::finsky::settings::PrivacySettings(*from._impl_.privacysettings_);
  }
  if (from._internal_has_familyinfo()) {
    _this->_impl_.familyinfo_ = new ::playapi::proto::finsky::settings::FamilyInfo(*from._impl_.familyinfo_);
  }
  if (from._internal_has_dismissedonboardings()) {
    _this->_impl_.dismissedonboardings_ = new ::playapi::proto::finsky::settings::Onboardings(*from._impl_.dismissedonboardings_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.UserSettings)
}

inline void UserSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.marketingsettings_){nullptr}
    , decltype(_impl_.privacysettings_){nullptr}
    , decltype(_impl_.familyinfo_){nullptr}
    , decltype(_impl_.dismissedonboardings_){nullptr}
  };
}

UserSettings::~UserSettings() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.UserSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.marketingsettings_;
  if (this != internal_default_instance()) delete _impl_.privacysettings_;
  if (this != internal_default_instance()) delete _impl_.familyinfo_;
  if (this != internal_default_instance()) delete _impl_.dismissedonboardings_;
}

void UserSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.UserSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.marketingsettings_ != nullptr);
      _impl_.marketingsettings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.privacysettings_ != nullptr);
      _impl_.privacysettings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.familyinfo_ != nullptr);
      _impl_.familyinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.dismissedonboardings_ != nullptr);
      _impl_.dismissedonboardings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.settings.MarketingSettings marketingSettings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketingsettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.PrivacySettings privacySettings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_privacysettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.FamilyInfo familyInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_familyinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.Onboardings dismissedOnboardings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dismissedonboardings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.UserSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.settings.MarketingSettings marketingSettings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::marketingsettings(this),
        _Internal::marketingsettings(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.settings.PrivacySettings privacySettings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::privacysettings(this),
        _Internal::privacysettings(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.settings.FamilyInfo familyInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::familyinfo(this),
        _Internal::familyinfo(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.settings.Onboardings dismissedOnboardings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dismissedonboardings(this),
        _Internal::dismissedonboardings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.UserSettings)
  return target;
}

size_t UserSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.UserSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .playapi.proto.finsky.settings.MarketingSettings marketingSettings = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.marketingsettings_);
    }

    // optional .playapi.proto.finsky.settings.PrivacySettings privacySettings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.privacysettings_);
    }

    // optional .playapi.proto.finsky.settings.FamilyInfo familyInfo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.familyinfo_);
    }

    // optional .playapi.proto.finsky.settings.Onboardings dismissedOnboardings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dismissedonboardings_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSettings::GetClassData() const { return &_class_data_; }


void UserSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSettings*>(&to_msg);
  auto& from = static_cast<const UserSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.UserSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_marketingsettings()->::playapi::proto::finsky::settings::MarketingSettings::MergeFrom(
          from._internal_marketingsettings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_privacysettings()->::playapi::proto::finsky::settings::PrivacySettings::MergeFrom(
          from._internal_privacysettings());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_familyinfo()->::playapi::proto::finsky::settings::FamilyInfo::MergeFrom(
          from._internal_familyinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dismissedonboardings()->::playapi::proto::finsky::settings::Onboardings::MergeFrom(
          from._internal_dismissedonboardings());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSettings::CopyFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings::IsInitialized() const {
  return true;
}

void UserSettings::InternalSwap(UserSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSettings, _impl_.dismissedonboardings_)
      + sizeof(UserSettings::_impl_.dismissedonboardings_)
      - PROTOBUF_FIELD_OFFSET(UserSettings, _impl_.marketingsettings_)>(
          reinterpret_cast<char*>(&_impl_.marketingsettings_),
          reinterpret_cast<char*>(&other->_impl_.marketingsettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[10]);
}

// ===================================================================

class OBSOLETEUserSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETEUserSettings>()._impl_._has_bits_);
  static void set_has_toscheckboxmarketingemailsoptedin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OBSOLETEUserSettings::OBSOLETEUserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.OBSOLETEUserSettings)
}
OBSOLETEUserSettings::OBSOLETEUserSettings(const OBSOLETEUserSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OBSOLETEUserSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privacysetting_){from._impl_.privacysetting_}
    , decltype(_impl_.toscheckboxmarketingemailsoptedin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.toscheckboxmarketingemailsoptedin_ = from._impl_.toscheckboxmarketingemailsoptedin_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.OBSOLETEUserSettings)
}

inline void OBSOLETEUserSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privacysetting_){arena}
    , decltype(_impl_.toscheckboxmarketingemailsoptedin_){false}
  };
}

OBSOLETEUserSettings::~OBSOLETEUserSettings() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OBSOLETEUserSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privacysetting_.~RepeatedPtrField();
}

void OBSOLETEUserSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OBSOLETEUserSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privacysetting_.Clear();
  _impl_.toscheckboxmarketingemailsoptedin_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBSOLETEUserSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool tosCheckboxMarketingEmailsOptedIn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_toscheckboxmarketingemailsoptedin(&has_bits);
          _impl_.toscheckboxmarketingemailsoptedin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.settings.PrivacySetting privacySetting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_privacysetting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OBSOLETEUserSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool tosCheckboxMarketingEmailsOptedIn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_toscheckboxmarketingemailsoptedin(), target);
  }

  // repeated .playapi.proto.finsky.settings.PrivacySetting privacySetting = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_privacysetting_size()); i < n; i++) {
    const auto& repfield = this->_internal_privacysetting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  return target;
}

size_t OBSOLETEUserSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.PrivacySetting privacySetting = 2;
  total_size += 1UL * this->_internal_privacysetting_size();
  for (const auto& msg : this->_impl_.privacysetting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool tosCheckboxMarketingEmailsOptedIn = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OBSOLETEUserSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OBSOLETEUserSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OBSOLETEUserSettings::GetClassData() const { return &_class_data_; }


void OBSOLETEUserSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OBSOLETEUserSettings*>(&to_msg);
  auto& from = static_cast<const OBSOLETEUserSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privacysetting_.MergeFrom(from._impl_.privacysetting_);
  if (from._internal_has_toscheckboxmarketingemailsoptedin()) {
    _this->_internal_set_toscheckboxmarketingemailsoptedin(from._internal_toscheckboxmarketingemailsoptedin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OBSOLETEUserSettings::CopyFrom(const OBSOLETEUserSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.OBSOLETEUserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETEUserSettings::IsInitialized() const {
  return true;
}

void OBSOLETEUserSettings::InternalSwap(OBSOLETEUserSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.privacysetting_.InternalSwap(&other->_impl_.privacysetting_);
  swap(_impl_.toscheckboxmarketingemailsoptedin_, other->_impl_.toscheckboxmarketingemailsoptedin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OBSOLETEUserSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[11]);
}

// ===================================================================

class UserSettingDirtyData::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSettingDirtyData>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens& consistencytokens(const UserSettingDirtyData* msg);
  static void set_has_consistencytokens(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens&
UserSettingDirtyData::_Internal::consistencytokens(const UserSettingDirtyData* msg) {
  return *msg->_impl_.consistencytokens_;
}
UserSettingDirtyData::UserSettingDirtyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.UserSettingDirtyData)
}
UserSettingDirtyData::UserSettingDirtyData(const UserSettingDirtyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSettingDirtyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.consistencytokens_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consistencytokens()) {
    _this->_impl_.consistencytokens_ = new ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens(*from._impl_.consistencytokens_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.UserSettingDirtyData)
}

inline void UserSettingDirtyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.consistencytokens_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

UserSettingDirtyData::~UserSettingDirtyData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.UserSettingDirtyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSettingDirtyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.consistencytokens_;
}

void UserSettingDirtyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSettingDirtyData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.UserSettingDirtyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.consistencytokens_ != nullptr);
    _impl_.consistencytokens_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettingDirtyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.UserSettingsConsistencyTokens consistencyTokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistencytokens(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSettingDirtyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.UserSettingDirtyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional .playapi.proto.finsky.settings.UserSettingsConsistencyTokens consistencyTokens = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consistencytokens(this),
        _Internal::consistencytokens(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.UserSettingDirtyData)
  return target;
}

size_t UserSettingDirtyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.UserSettingDirtyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.settings.UserSettingsConsistencyTokens consistencyTokens = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consistencytokens_);
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSettingDirtyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSettingDirtyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSettingDirtyData::GetClassData() const { return &_class_data_; }


void UserSettingDirtyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSettingDirtyData*>(&to_msg);
  auto& from = static_cast<const UserSettingDirtyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.UserSettingDirtyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_consistencytokens()->::playapi::proto::finsky::settings::UserSettingsConsistencyTokens::MergeFrom(
          from._internal_consistencytokens());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSettingDirtyData::CopyFrom(const UserSettingDirtyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.UserSettingDirtyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettingDirtyData::IsInitialized() const {
  return true;
}

void UserSettingDirtyData::InternalSwap(UserSettingDirtyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSettingDirtyData, _impl_.type_)
      + sizeof(UserSettingDirtyData::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(UserSettingDirtyData, _impl_.consistencytokens_)>(
          reinterpret_cast<char*>(&_impl_.consistencytokens_),
          reinterpret_cast<char*>(&other->_impl_.consistencytokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettingDirtyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[12]);
}

// ===================================================================

class GetUserSettingsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserSettingsResponse>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::settings::UserSettings& usersettings(const GetUserSettingsResponse* msg);
  static void set_has_usersettings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens& consistencytokens(const GetUserSettingsResponse* msg);
  static void set_has_consistencytokens(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::settings::UserSettings&
GetUserSettingsResponse::_Internal::usersettings(const GetUserSettingsResponse* msg) {
  return *msg->_impl_.usersettings_;
}
const ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens&
GetUserSettingsResponse::_Internal::consistencytokens(const GetUserSettingsResponse* msg) {
  return *msg->_impl_.consistencytokens_;
}
GetUserSettingsResponse::GetUserSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.settings.GetUserSettingsResponse)
}
GetUserSettingsResponse::GetUserSettingsResponse(const GetUserSettingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserSettingsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.usersettings_){nullptr}
    , decltype(_impl_.consistencytokens_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_usersettings()) {
    _this->_impl_.usersettings_ = new ::playapi::proto::finsky::settings::UserSettings(*from._impl_.usersettings_);
  }
  if (from._internal_has_consistencytokens()) {
    _this->_impl_.consistencytokens_ = new ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens(*from._impl_.consistencytokens_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.settings.GetUserSettingsResponse)
}

inline void GetUserSettingsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.usersettings_){nullptr}
    , decltype(_impl_.consistencytokens_){nullptr}
  };
}

GetUserSettingsResponse::~GetUserSettingsResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.settings.GetUserSettingsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserSettingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.usersettings_;
  if (this != internal_default_instance()) delete _impl_.consistencytokens_;
}

void GetUserSettingsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserSettingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.settings.GetUserSettingsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.usersettings_ != nullptr);
      _impl_.usersettings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.consistencytokens_ != nullptr);
      _impl_.consistencytokens_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserSettingsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.settings.UserSettings userSettings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_usersettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.UserSettingsConsistencyTokens consistencyTokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistencytokens(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserSettingsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.settings.GetUserSettingsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.settings.UserSettings userSettings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::usersettings(this),
        _Internal::usersettings(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.settings.UserSettingsConsistencyTokens consistencyTokens = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consistencytokens(this),
        _Internal::consistencytokens(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.settings.GetUserSettingsResponse)
  return target;
}

size_t GetUserSettingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.settings.GetUserSettingsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.settings.UserSettings userSettings = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.usersettings_);
    }

    // optional .playapi.proto.finsky.settings.UserSettingsConsistencyTokens consistencyTokens = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consistencytokens_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserSettingsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserSettingsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserSettingsResponse::GetClassData() const { return &_class_data_; }


void GetUserSettingsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserSettingsResponse*>(&to_msg);
  auto& from = static_cast<const GetUserSettingsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.settings.GetUserSettingsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_usersettings()->::playapi::proto::finsky::settings::UserSettings::MergeFrom(
          from._internal_usersettings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_consistencytokens()->::playapi::proto::finsky::settings::UserSettingsConsistencyTokens::MergeFrom(
          from._internal_consistencytokens());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserSettingsResponse::CopyFrom(const GetUserSettingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.settings.GetUserSettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserSettingsResponse::IsInitialized() const {
  return true;
}

void GetUserSettingsResponse::InternalSwap(GetUserSettingsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserSettingsResponse, _impl_.consistencytokens_)
      + sizeof(GetUserSettingsResponse::_impl_.consistencytokens_)
      - PROTOBUF_FIELD_OFFSET(GetUserSettingsResponse, _impl_.usersettings_)>(
          reinterpret_cast<char*>(&_impl_.usersettings_),
          reinterpret_cast<char*>(&other->_impl_.usersettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserSettingsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsettings_2eproto_getter, &descriptor_table_play_5fsettings_2eproto_once,
      file_level_metadata_play_5fsettings_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace settings
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens_ConsistencyTokenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::UserSettingsConsistencyTokens >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::MarketingSettings*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::MarketingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::MarketingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::PrivacySetting*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::PrivacySetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::PrivacySetting >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::PrivacySettings*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::PrivacySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::PrivacySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::FamilyInfo*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::FamilyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::FamilyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::Family*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::Family >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::Family >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::FamilyMember*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::FamilyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::FamilyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::Onboarding*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::Onboarding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::Onboarding >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::Onboardings*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::Onboardings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::Onboardings >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::UserSettings*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::UserSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::UserSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::OBSOLETEUserSettings*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::OBSOLETEUserSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::OBSOLETEUserSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::UserSettingDirtyData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::UserSettingDirtyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::UserSettingDirtyData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::settings::GetUserSettingsResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::settings::GetUserSettingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::settings::GetUserSettingsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
