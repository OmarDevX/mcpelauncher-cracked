// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsf.proto

#include "gsf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace gsf {
PROTOBUF_CONSTEXPR AndroidCheckinRequest::AndroidCheckinRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.macaddr_)*/{}
  , /*decltype(_impl_.accountcookie_)*/{}
  , /*decltype(_impl_.otacert_)*/{}
  , /*decltype(_impl_.macaddrtype_)*/{}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desiredbuild_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marketcheckin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.esn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.droidguardresult_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicedataversioninfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.checkin_)*/nullptr
  , /*decltype(_impl_.deviceconfiguration_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.loggingid_)*/int64_t{0}
  , /*decltype(_impl_.securitytoken_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.fragment_)*/0
  , /*decltype(_impl_.userserialnumber_)*/0
  , /*decltype(_impl_.fetchsystemupdates_)*/false} {}
struct AndroidCheckinRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCheckinRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCheckinRequestDefaultTypeInternal() {}
  union {
    AndroidCheckinRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCheckinRequestDefaultTypeInternal _AndroidCheckinRequest_default_instance_;
PROTOBUF_CONSTEXPR AndroidCheckinResponse::AndroidCheckinResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.intent_)*/{}
  , /*decltype(_impl_.setting_)*/{}
  , /*decltype(_impl_.deletesetting_)*/{}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicedataversioninfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timemsec_)*/int64_t{0}
  , /*decltype(_impl_.androidid_)*/uint64_t{0u}
  , /*decltype(_impl_.securitytoken_)*/uint64_t{0u}
  , /*decltype(_impl_.statsok_)*/false
  , /*decltype(_impl_.marketok_)*/false
  , /*decltype(_impl_.settingsdiff_)*/false} {}
struct AndroidCheckinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCheckinResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCheckinResponseDefaultTypeInternal() {}
  union {
    AndroidCheckinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCheckinResponseDefaultTypeInternal _AndroidCheckinResponse_default_instance_;
PROTOBUF_CONSTEXPR GservicesSetting::GservicesSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GservicesSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GservicesSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GservicesSettingDefaultTypeInternal() {}
  union {
    GservicesSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GservicesSettingDefaultTypeInternal _GservicesSetting_default_instance_;
PROTOBUF_CONSTEXPR DeviceConfigurationProto_FeatureWithGLVersion::DeviceConfigurationProto_FeatureWithGLVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.glesversion_)*/0} {}
struct DeviceConfigurationProto_FeatureWithGLVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceConfigurationProto_FeatureWithGLVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceConfigurationProto_FeatureWithGLVersionDefaultTypeInternal() {}
  union {
    DeviceConfigurationProto_FeatureWithGLVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceConfigurationProto_FeatureWithGLVersionDefaultTypeInternal _DeviceConfigurationProto_FeatureWithGLVersion_default_instance_;
PROTOBUF_CONSTEXPR DeviceConfigurationProto::DeviceConfigurationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.systemsharedlibrary_)*/{}
  , /*decltype(_impl_.systemavailablefeature_)*/{}
  , /*decltype(_impl_.nativeplatform_)*/{}
  , /*decltype(_impl_.systemsupportedlocale_)*/{}
  , /*decltype(_impl_.glextension_)*/{}
  , /*decltype(_impl_.newsystemavailablefeature_)*/{}
  , /*decltype(_impl_.touchscreen_)*/0
  , /*decltype(_impl_.keyboard_)*/0
  , /*decltype(_impl_.navigation_)*/0
  , /*decltype(_impl_.screenlayout_)*/0
  , /*decltype(_impl_.screendensity_)*/0
  , /*decltype(_impl_.glesversion_)*/0
  , /*decltype(_impl_.screenwidth_)*/0
  , /*decltype(_impl_.screenheight_)*/0
  , /*decltype(_impl_.hashardkeyboard_)*/false
  , /*decltype(_impl_.hasfivewaynavigation_)*/false
  , /*decltype(_impl_.lowramdevice_)*/false
  , /*decltype(_impl_.keyguarddevicesecure_)*/false
  , /*decltype(_impl_.maxapkdownloadsizemb_)*/0
  , /*decltype(_impl_.smallestscreenwidthdp_)*/0
  , /*decltype(_impl_.maxnumofcpucores_)*/0
  , /*decltype(_impl_.totalmemorybytes_)*/int64_t{0}
  , /*decltype(_impl_.screenlayout2_)*/0} {}
struct DeviceConfigurationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceConfigurationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceConfigurationProtoDefaultTypeInternal() {}
  union {
    DeviceConfigurationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceConfigurationProtoDefaultTypeInternal _DeviceConfigurationProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidBuildProto_PackageVersion::AndroidBuildProto_PackageVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0} {}
struct AndroidBuildProto_PackageVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidBuildProto_PackageVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidBuildProto_PackageVersionDefaultTypeInternal() {}
  union {
    AndroidBuildProto_PackageVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidBuildProto_PackageVersionDefaultTypeInternal _AndroidBuildProto_PackageVersion_default_instance_;
PROTOBUF_CONSTEXPR AndroidBuildProto::AndroidBuildProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.googlepackage_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.carrier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.radio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bootloader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manufacturer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buildproduct_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitypatch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.googleservices_)*/0
  , /*decltype(_impl_.sdkversion_)*/0
  , /*decltype(_impl_.otainstalled_)*/false} {}
struct AndroidBuildProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidBuildProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidBuildProtoDefaultTypeInternal() {}
  union {
    AndroidBuildProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidBuildProtoDefaultTypeInternal _AndroidBuildProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidCheckinReasonProto::AndroidCheckinReasonProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sourcepackage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourceclass_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reasontype_)*/0
  , /*decltype(_impl_.attemptcount_)*/0
  , /*decltype(_impl_.sourceforce_)*/false} {}
struct AndroidCheckinReasonProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCheckinReasonProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCheckinReasonProtoDefaultTypeInternal() {}
  union {
    AndroidCheckinReasonProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCheckinReasonProtoDefaultTypeInternal _AndroidCheckinReasonProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidCheckinProto::AndroidCheckinProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_.stat_)*/{}
  , /*decltype(_impl_.requestedgroup_)*/{}
  , /*decltype(_impl_.celloperator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.simoperator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roaming_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.build_)*/nullptr
  , /*decltype(_impl_.reason_)*/nullptr
  , /*decltype(_impl_.lastcheckinmsec_)*/int64_t{0}
  , /*decltype(_impl_.usernumber_)*/0
  , /*decltype(_impl_.devicetype_)*/0
  , /*decltype(_impl_.voicecapable_)*/false} {}
struct AndroidCheckinProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCheckinProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCheckinProtoDefaultTypeInternal() {}
  union {
    AndroidCheckinProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidEventProto::AndroidEventProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timemsec_)*/int64_t{0}} {}
struct AndroidEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidEventProtoDefaultTypeInternal() {}
  union {
    AndroidEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidEventProtoDefaultTypeInternal _AndroidEventProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidIntentProto_Extra::AndroidIntentProto_Extra(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AndroidIntentProto_ExtraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidIntentProto_ExtraDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidIntentProto_ExtraDefaultTypeInternal() {}
  union {
    AndroidIntentProto_Extra _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidIntentProto_ExtraDefaultTypeInternal _AndroidIntentProto_Extra_default_instance_;
PROTOBUF_CONSTEXPR AndroidIntentProto::AndroidIntentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datauri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.javaclass_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AndroidIntentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidIntentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidIntentProtoDefaultTypeInternal() {}
  union {
    AndroidIntentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidIntentProtoDefaultTypeInternal _AndroidIntentProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidStatisticProto::AndroidStatisticProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.sum_)*/0} {}
struct AndroidStatisticProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidStatisticProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidStatisticProtoDefaultTypeInternal() {}
  union {
    AndroidStatisticProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidStatisticProtoDefaultTypeInternal _AndroidStatisticProto_default_instance_;
}  // namespace gsf
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_gsf_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gsf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gsf_2eproto = nullptr;

const uint32_t TableStruct_gsf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.checkin_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.desiredbuild_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.loggingid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.marketcheckin_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.macaddr_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.meid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.accountcookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.securitytoken_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.otacert_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.serialnumber_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.esn_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.deviceconfiguration_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.macaddrtype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.fragment_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.userserialnumber_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.droidguardresult_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.devicedataversioninfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinRequest, _impl_.fetchsystemupdates_),
  0,
  14,
  1,
  12,
  2,
  3,
  15,
  4,
  ~0u,
  5,
  ~0u,
  6,
  16,
  17,
  ~0u,
  7,
  8,
  13,
  ~0u,
  18,
  9,
  19,
  10,
  11,
  20,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.statsok_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.intent_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.timemsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.setting_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.marketok_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.androidid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.securitytoken_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.settingsdiff_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.deletesetting_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinResponse, _impl_.devicedataversioninfo_),
  5,
  ~0u,
  2,
  0,
  ~0u,
  6,
  3,
  4,
  7,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::GservicesSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::GservicesSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::GservicesSetting, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::GservicesSetting, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion, _impl_.glesversion_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.touchscreen_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.keyboard_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.navigation_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.screenlayout_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.hashardkeyboard_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.hasfivewaynavigation_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.screendensity_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.glesversion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.systemsharedlibrary_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.systemavailablefeature_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.nativeplatform_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.screenwidth_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.screenheight_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.systemsupportedlocale_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.glextension_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.maxapkdownloadsizemb_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.smallestscreenwidthdp_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.lowramdevice_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.totalmemorybytes_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.maxnumofcpucores_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.newsystemavailablefeature_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.screenlayout2_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::DeviceConfigurationProto, _impl_.keyguarddevicesecure_),
  0,
  1,
  2,
  3,
  8,
  9,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  ~0u,
  ~0u,
  12,
  13,
  10,
  15,
  14,
  ~0u,
  16,
  11,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto_PackageVersion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto_PackageVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto_PackageVersion, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto_PackageVersion, _impl_.name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.carrier_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.radio_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.bootloader_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.googleservices_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.sdkversion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.manufacturer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.buildproduct_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.otainstalled_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.googlepackage_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidBuildProto, _impl_.securitypatch_),
  0,
  1,
  2,
  3,
  4,
  5,
  11,
  12,
  6,
  13,
  7,
  8,
  9,
  14,
  ~0u,
  10,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _impl_.reasontype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _impl_.attemptcount_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _impl_.sourcepackage_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _impl_.sourceclass_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinReasonProto, _impl_.sourceforce_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.lastcheckinmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.stat_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.requestedgroup_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.celloperator_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.simoperator_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.roaming_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.usernumber_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.devicetype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidCheckinProto, _impl_.voicecapable_),
  3,
  5,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  6,
  7,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidEventProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidEventProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidEventProto, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidEventProto, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidEventProto, _impl_.timemsec_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto_Extra, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto_Extra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto_Extra, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto_Extra, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _impl_.datauri_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _impl_.javaclass_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidIntentProto, _impl_.extra_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidStatisticProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidStatisticProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidStatisticProto, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidStatisticProto, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::gsf::AndroidStatisticProto, _impl_.sum_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 31, -1, sizeof(::playapi::proto::gsf::AndroidCheckinRequest)},
  { 56, 73, -1, sizeof(::playapi::proto::gsf::AndroidCheckinResponse)},
  { 84, 92, -1, sizeof(::playapi::proto::gsf::GservicesSetting)},
  { 94, 102, -1, sizeof(::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion)},
  { 104, 133, -1, sizeof(::playapi::proto::gsf::DeviceConfigurationProto)},
  { 156, 164, -1, sizeof(::playapi::proto::gsf::AndroidBuildProto_PackageVersion)},
  { 166, 188, -1, sizeof(::playapi::proto::gsf::AndroidBuildProto)},
  { 204, 215, -1, sizeof(::playapi::proto::gsf::AndroidCheckinReasonProto)},
  { 220, 238, -1, sizeof(::playapi::proto::gsf::AndroidCheckinProto)},
  { 250, 259, -1, sizeof(::playapi::proto::gsf::AndroidEventProto)},
  { 262, 270, -1, sizeof(::playapi::proto::gsf::AndroidIntentProto_Extra)},
  { 272, 283, -1, sizeof(::playapi::proto::gsf::AndroidIntentProto)},
  { 288, 297, -1, sizeof(::playapi::proto::gsf::AndroidStatisticProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::gsf::_AndroidCheckinRequest_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidCheckinResponse_default_instance_._instance,
  &::playapi::proto::gsf::_GservicesSetting_default_instance_._instance,
  &::playapi::proto::gsf::_DeviceConfigurationProto_FeatureWithGLVersion_default_instance_._instance,
  &::playapi::proto::gsf::_DeviceConfigurationProto_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidBuildProto_PackageVersion_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidBuildProto_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidCheckinReasonProto_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidCheckinProto_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidEventProto_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidIntentProto_Extra_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidIntentProto_default_instance_._instance,
  &::playapi::proto::gsf::_AndroidStatisticProto_default_instance_._instance,
};

const char descriptor_table_protodef_gsf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgsf.proto\022\021playapi.proto.gsf\"\340\004\n\025Andro"
  "idCheckinRequest\022\014\n\004imei\030\001 \001(\t\022\n\n\002id\030\002 \001"
  "(\003\022\016\n\006digest\030\003 \001(\t\0227\n\007checkin\030\004 \001(\0132&.pl"
  "ayapi.proto.gsf.AndroidCheckinProto\022\024\n\014d"
  "esiredBuild\030\005 \001(\t\022\016\n\006locale\030\006 \001(\t\022\021\n\tlog"
  "gingId\030\007 \001(\003\022\025\n\rmarketCheckin\030\010 \001(\t\022\017\n\007m"
  "acAddr\030\t \003(\t\022\014\n\004meid\030\n \001(\t\022\025\n\raccountCoo"
  "kie\030\013 \003(\t\022\020\n\010timeZone\030\014 \001(\t\022\025\n\rsecurityT"
  "oken\030\r \001(\006\022\017\n\007version\030\016 \001(\005\022\017\n\007otaCert\030\017"
  " \003(\t\022\024\n\014serialNumber\030\020 \001(\t\022\013\n\003esn\030\021 \001(\t\022"
  "H\n\023deviceConfiguration\030\022 \001(\0132+.playapi.p"
  "roto.gsf.DeviceConfigurationProto\022\023\n\013mac"
  "AddrType\030\023 \003(\t\022\020\n\010fragment\030\024 \001(\005\022\020\n\010user"
  "Name\030\025 \001(\t\022\030\n\020userSerialNumber\030\026 \001(\005\022\030\n\020"
  "droidguardResult\030\030 \001(\t\022\035\n\025deviceDataVers"
  "ionInfo\030\031 \001(\t\022\032\n\022fetchSystemUpdates\030\035 \001("
  "\010\"\300\002\n\026AndroidCheckinResponse\022\017\n\007statsOk\030"
  "\001 \001(\010\0225\n\006intent\030\002 \003(\0132%.playapi.proto.gs"
  "f.AndroidIntentProto\022\020\n\010timeMsec\030\003 \001(\003\022\016"
  "\n\006digest\030\004 \001(\t\0224\n\007setting\030\005 \003(\0132#.playap"
  "i.proto.gsf.GservicesSetting\022\020\n\010marketOk"
  "\030\006 \001(\010\022\021\n\tandroidId\030\007 \001(\006\022\025\n\rsecurityTok"
  "en\030\010 \001(\006\022\024\n\014settingsDiff\030\t \001(\010\022\025\n\rdelete"
  "Setting\030\n \003(\t\022\035\n\025deviceDataVersionInfo\030\014"
  " \001(\t\"/\n\020GservicesSetting\022\014\n\004name\030\001 \001(\014\022\r"
  "\n\005value\030\002 \001(\014\"\336\005\n\030DeviceConfigurationPro"
  "to\022\023\n\013touchScreen\030\001 \001(\005\022\020\n\010keyboard\030\002 \001("
  "\005\022\022\n\nnavigation\030\003 \001(\005\022\024\n\014screenLayout\030\004 "
  "\001(\005\022\027\n\017hasHardKeyboard\030\005 \001(\010\022\034\n\024hasFiveW"
  "ayNavigation\030\006 \001(\010\022\025\n\rscreenDensity\030\007 \001("
  "\005\022\023\n\013glEsVersion\030\010 \001(\005\022\033\n\023systemSharedLi"
  "brary\030\t \003(\t\022\036\n\026systemAvailableFeature\030\n "
  "\003(\t\022\026\n\016nativePlatform\030\013 \003(\t\022\023\n\013screenWid"
  "th\030\014 \001(\005\022\024\n\014screenHeight\030\r \001(\005\022\035\n\025system"
  "SupportedLocale\030\016 \003(\t\022\023\n\013glExtension\030\017 \003"
  "(\t\022\034\n\024maxApkDownloadSizeMb\030\021 \001(\005\022\035\n\025smal"
  "lestScreenWidthDp\030\022 \001(\005\022\024\n\014lowRamDevice\030"
  "\023 \001(\010\022\030\n\020totalMemoryBytes\030\024 \001(\003\022\030\n\020maxNu"
  "mOfCpuCores\030\025 \001(\005\022c\n\031newSystemAvailableF"
  "eature\030\032 \003(\0132@.playapi.proto.gsf.DeviceC"
  "onfigurationProto.FeatureWithGLVersion\022\025"
  "\n\rscreenLayout2\030\033 \001(\005\022\034\n\024keyguardDeviceS"
  "ecure\030\034 \001(\010\0329\n\024FeatureWithGLVersion\022\014\n\004n"
  "ame\030\001 \001(\t\022\023\n\013glEsVersion\030\002 \001(\005\"\250\003\n\021Andro"
  "idBuildProto\022\n\n\002id\030\001 \001(\t\022\017\n\007product\030\002 \001("
  "\t\022\017\n\007carrier\030\003 \001(\t\022\r\n\005radio\030\004 \001(\t\022\022\n\nboo"
  "tloader\030\005 \001(\t\022\016\n\006client\030\006 \001(\t\022\021\n\ttimesta"
  "mp\030\007 \001(\003\022\026\n\016googleServices\030\010 \001(\005\022\016\n\006devi"
  "ce\030\t \001(\t\022\022\n\nsdkVersion\030\n \001(\005\022\r\n\005model\030\013 "
  "\001(\t\022\024\n\014manufacturer\030\014 \001(\t\022\024\n\014buildProduc"
  "t\030\r \001(\t\022\024\n\014otaInstalled\030\016 \001(\010\022J\n\rgoogleP"
  "ackage\030\017 \003(\01323.playapi.proto.gsf.Android"
  "BuildProto.PackageVersion\022\025\n\rsecurityPat"
  "ch\030\023 \001(\t\032/\n\016PackageVersion\022\017\n\007version\030\001 "
  "\001(\005\022\014\n\004name\030\002 \001(\t\"\206\001\n\031AndroidCheckinReas"
  "onProto\022\022\n\nreasonType\030\001 \001(\005\022\024\n\014attemptCo"
  "unt\030\002 \001(\005\022\025\n\rsourcePackage\030\003 \001(\t\022\023\n\013sour"
  "ceClass\030\004 \001(\t\022\023\n\013sourceForce\030\005 \001(\010\"\240\003\n\023A"
  "ndroidCheckinProto\0223\n\005build\030\001 \001(\0132$.play"
  "api.proto.gsf.AndroidBuildProto\022\027\n\017lastC"
  "heckinMsec\030\002 \001(\003\0223\n\005event\030\003 \003(\0132$.playap"
  "i.proto.gsf.AndroidEventProto\0226\n\004stat\030\004 "
  "\003(\0132(.playapi.proto.gsf.AndroidStatistic"
  "Proto\022\026\n\016requestedGroup\030\005 \003(\t\022\024\n\014cellOpe"
  "rator\030\006 \001(\t\022\023\n\013simOperator\030\007 \001(\t\022\017\n\007roam"
  "ing\030\010 \001(\t\022\022\n\nuserNumber\030\t \001(\005\022\022\n\ndeviceT"
  "ype\030\016 \001(\005\022<\n\006reason\030\017 \001(\0132,.playapi.prot"
  "o.gsf.AndroidCheckinReasonProto\022\024\n\014voice"
  "Capable\030\022 \001(\010\"A\n\021AndroidEventProto\022\013\n\003ta"
  "g\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\020\n\010timeMsec\030\003 \001(\003"
  "\"\274\001\n\022AndroidIntentProto\022\016\n\006action\030\001 \001(\t\022"
  "\017\n\007dataUri\030\002 \001(\t\022\020\n\010mimeType\030\003 \001(\t\022\021\n\tja"
  "vaClass\030\004 \001(\t\022:\n\005extra\030\005 \003(\n2+.playapi.p"
  "roto.gsf.AndroidIntentProto.Extra\032$\n\005Ext"
  "ra\022\014\n\004name\030\006 \001(\t\022\r\n\005value\030\007 \001(\t\"@\n\025Andro"
  "idStatisticProto\022\013\n\003tag\030\001 \001(\t\022\r\n\005count\030\002"
  " \001(\005\022\013\n\003sum\030\003 \001(\002"
  ;
static ::_pbi::once_flag descriptor_table_gsf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gsf_2eproto = {
    false, false, 3057, descriptor_table_protodef_gsf_2eproto,
    "gsf.proto",
    &descriptor_table_gsf_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_gsf_2eproto::offsets,
    file_level_metadata_gsf_2eproto, file_level_enum_descriptors_gsf_2eproto,
    file_level_service_descriptors_gsf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gsf_2eproto_getter() {
  return &descriptor_table_gsf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gsf_2eproto(&descriptor_table_gsf_2eproto);
namespace playapi {
namespace proto {
namespace gsf {

// ===================================================================

class AndroidCheckinRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCheckinRequest>()._impl_._has_bits_);
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::gsf::AndroidCheckinProto& checkin(const AndroidCheckinRequest* msg);
  static void set_has_checkin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_desiredbuild(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_loggingid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_marketcheckin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_meid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_securitytoken(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_serialnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_esn(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::gsf::DeviceConfigurationProto& deviceconfiguration(const AndroidCheckinRequest* msg);
  static void set_has_deviceconfiguration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_userserialnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_droidguardresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_devicedataversioninfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fetchsystemupdates(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::playapi::proto::gsf::AndroidCheckinProto&
AndroidCheckinRequest::_Internal::checkin(const AndroidCheckinRequest* msg) {
  return *msg->_impl_.checkin_;
}
const ::playapi::proto::gsf::DeviceConfigurationProto&
AndroidCheckinRequest::_Internal::deviceconfiguration(const AndroidCheckinRequest* msg) {
  return *msg->_impl_.deviceconfiguration_;
}
AndroidCheckinRequest::AndroidCheckinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidCheckinRequest)
}
AndroidCheckinRequest::AndroidCheckinRequest(const AndroidCheckinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidCheckinRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.macaddr_){from._impl_.macaddr_}
    , decltype(_impl_.accountcookie_){from._impl_.accountcookie_}
    , decltype(_impl_.otacert_){from._impl_.otacert_}
    , decltype(_impl_.macaddrtype_){from._impl_.macaddrtype_}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.desiredbuild_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.marketcheckin_){}
    , decltype(_impl_.meid_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.serialnumber_){}
    , decltype(_impl_.esn_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.droidguardresult_){}
    , decltype(_impl_.devicedataversioninfo_){}
    , decltype(_impl_.checkin_){nullptr}
    , decltype(_impl_.deviceconfiguration_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.loggingid_){}
    , decltype(_impl_.securitytoken_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.fragment_){}
    , decltype(_impl_.userserialnumber_){}
    , decltype(_impl_.fetchsystemupdates_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desiredbuild_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desiredbuild_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desiredbuild()) {
    _this->_impl_.desiredbuild_.Set(from._internal_desiredbuild(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.marketcheckin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketcheckin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_marketcheckin()) {
    _this->_impl_.marketcheckin_.Set(from._internal_marketcheckin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.meid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_meid()) {
    _this->_impl_.meid_.Set(from._internal_meid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timezone()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serialnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialnumber()) {
    _this->_impl_.serialnumber_.Set(from._internal_serialnumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.esn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.esn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_esn()) {
    _this->_impl_.esn_.Set(from._internal_esn(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.droidguardresult_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.droidguardresult_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_droidguardresult()) {
    _this->_impl_.droidguardresult_.Set(from._internal_droidguardresult(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicedataversioninfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicedataversioninfo()) {
    _this->_impl_.devicedataversioninfo_.Set(from._internal_devicedataversioninfo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_checkin()) {
    _this->_impl_.checkin_ = new ::playapi::proto::gsf::AndroidCheckinProto(*from._impl_.checkin_);
  }
  if (from._internal_has_deviceconfiguration()) {
    _this->_impl_.deviceconfiguration_ = new ::playapi::proto::gsf::DeviceConfigurationProto(*from._impl_.deviceconfiguration_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fetchsystemupdates_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.fetchsystemupdates_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidCheckinRequest)
}

inline void AndroidCheckinRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.macaddr_){arena}
    , decltype(_impl_.accountcookie_){arena}
    , decltype(_impl_.otacert_){arena}
    , decltype(_impl_.macaddrtype_){arena}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.desiredbuild_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.marketcheckin_){}
    , decltype(_impl_.meid_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.serialnumber_){}
    , decltype(_impl_.esn_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.droidguardresult_){}
    , decltype(_impl_.devicedataversioninfo_){}
    , decltype(_impl_.checkin_){nullptr}
    , decltype(_impl_.deviceconfiguration_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.loggingid_){int64_t{0}}
    , decltype(_impl_.securitytoken_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.fragment_){0}
    , decltype(_impl_.userserialnumber_){0}
    , decltype(_impl_.fetchsystemupdates_){false}
  };
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desiredbuild_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desiredbuild_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketcheckin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketcheckin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serialnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.esn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.esn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.droidguardresult_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.droidguardresult_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicedataversioninfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCheckinRequest::~AndroidCheckinRequest() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidCheckinRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCheckinRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.macaddr_.~RepeatedPtrField();
  _impl_.accountcookie_.~RepeatedPtrField();
  _impl_.otacert_.~RepeatedPtrField();
  _impl_.macaddrtype_.~RepeatedPtrField();
  _impl_.imei_.Destroy();
  _impl_.digest_.Destroy();
  _impl_.desiredbuild_.Destroy();
  _impl_.locale_.Destroy();
  _impl_.marketcheckin_.Destroy();
  _impl_.meid_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.serialnumber_.Destroy();
  _impl_.esn_.Destroy();
  _impl_.username_.Destroy();
  _impl_.droidguardresult_.Destroy();
  _impl_.devicedataversioninfo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.checkin_;
  if (this != internal_default_instance()) delete _impl_.deviceconfiguration_;
}

void AndroidCheckinRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCheckinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidCheckinRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.macaddr_.Clear();
  _impl_.accountcookie_.Clear();
  _impl_.otacert_.Clear();
  _impl_.macaddrtype_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.desiredbuild_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.marketcheckin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.meid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.timezone_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.serialnumber_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.esn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.droidguardresult_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.devicedataversioninfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.checkin_ != nullptr);
      _impl_.checkin_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.deviceconfiguration_ != nullptr);
      _impl_.deviceconfiguration_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.loggingid_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.loggingid_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.securitytoken_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fetchsystemupdates_) -
        reinterpret_cast<char*>(&_impl_.securitytoken_)) + sizeof(_impl_.fetchsystemupdates_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidCheckinRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string imei = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string digest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.digest");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.gsf.AndroidCheckinProto checkin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desiredBuild = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desiredbuild();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.desiredBuild");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.locale");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 loggingId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_loggingid(&has_bits);
          _impl_.loggingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string marketCheckin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_marketcheckin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.marketCheckin");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string macAddr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_macaddr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.macAddr");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string meid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_meid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.meid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string accountCookie = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accountcookie();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.accountCookie");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string timeZone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.timeZone");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 securityToken = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_securitytoken(&has_bits);
          _impl_.securitytoken_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string otaCert = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_otacert();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.otaCert");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string serialNumber = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_serialnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.serialNumber");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string esn = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_esn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.esn");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceconfiguration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string macAddrType = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_macaddrtype();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.macAddrType");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 fragment = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_fragment(&has_bits);
          _impl_.fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string userName = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.userName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 userSerialNumber = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_userserialnumber(&has_bits);
          _impl_.userserialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string droidguardResult = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_droidguardresult();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.droidguardResult");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deviceDataVersionInfo = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_devicedataversioninfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool fetchSystemUpdates = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_fetchsystemupdates(&has_bits);
          _impl_.fetchsystemupdates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCheckinRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidCheckinRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string imei = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.imei");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imei(), target);
  }

  // optional int64 id = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // optional string digest = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.digest");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_digest(), target);
  }

  // optional .playapi.proto.gsf.AndroidCheckinProto checkin = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::checkin(this),
        _Internal::checkin(this).GetCachedSize(), target, stream);
  }

  // optional string desiredBuild = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desiredbuild().data(), static_cast<int>(this->_internal_desiredbuild().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.desiredBuild");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desiredbuild(), target);
  }

  // optional string locale = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.locale");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_locale(), target);
  }

  // optional int64 loggingId = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_loggingid(), target);
  }

  // optional string marketCheckin = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marketcheckin().data(), static_cast<int>(this->_internal_marketcheckin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.marketCheckin");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_marketcheckin(), target);
  }

  // repeated string macAddr = 9;
  for (int i = 0, n = this->_internal_macaddr_size(); i < n; i++) {
    const auto& s = this->_internal_macaddr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.macAddr");
    target = stream->WriteString(9, s, target);
  }

  // optional string meid = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_meid().data(), static_cast<int>(this->_internal_meid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.meid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_meid(), target);
  }

  // repeated string accountCookie = 11;
  for (int i = 0, n = this->_internal_accountcookie_size(); i < n; i++) {
    const auto& s = this->_internal_accountcookie(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.accountCookie");
    target = stream->WriteString(11, s, target);
  }

  // optional string timeZone = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.timeZone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_timezone(), target);
  }

  // optional fixed64 securityToken = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(13, this->_internal_securitytoken(), target);
  }

  // optional int32 version = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_version(), target);
  }

  // repeated string otaCert = 15;
  for (int i = 0, n = this->_internal_otacert_size(); i < n; i++) {
    const auto& s = this->_internal_otacert(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.otaCert");
    target = stream->WriteString(15, s, target);
  }

  // optional string serialNumber = 16;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serialnumber().data(), static_cast<int>(this->_internal_serialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.serialNumber");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_serialnumber(), target);
  }

  // optional string esn = 17;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_esn().data(), static_cast<int>(this->_internal_esn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.esn");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_esn(), target);
  }

  // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::deviceconfiguration(this),
        _Internal::deviceconfiguration(this).GetCachedSize(), target, stream);
  }

  // repeated string macAddrType = 19;
  for (int i = 0, n = this->_internal_macaddrtype_size(); i < n; i++) {
    const auto& s = this->_internal_macaddrtype(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.macAddrType");
    target = stream->WriteString(19, s, target);
  }

  // optional int32 fragment = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_fragment(), target);
  }

  // optional string userName = 21;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.userName");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_username(), target);
  }

  // optional int32 userSerialNumber = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_userserialnumber(), target);
  }

  // optional string droidguardResult = 24;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_droidguardresult().data(), static_cast<int>(this->_internal_droidguardresult().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.droidguardResult");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_droidguardresult(), target);
  }

  // optional string deviceDataVersionInfo = 25;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_devicedataversioninfo().data(), static_cast<int>(this->_internal_devicedataversioninfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_devicedataversioninfo(), target);
  }

  // optional bool fetchSystemUpdates = 29;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_fetchsystemupdates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidCheckinRequest)
  return target;
}

size_t AndroidCheckinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidCheckinRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string macAddr = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.macaddr_.size());
  for (int i = 0, n = _impl_.macaddr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.macaddr_.Get(i));
  }

  // repeated string accountCookie = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.accountcookie_.size());
  for (int i = 0, n = _impl_.accountcookie_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.accountcookie_.Get(i));
  }

  // repeated string otaCert = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.otacert_.size());
  for (int i = 0, n = _impl_.otacert_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.otacert_.Get(i));
  }

  // repeated string macAddrType = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.macaddrtype_.size());
  for (int i = 0, n = _impl_.macaddrtype_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.macaddrtype_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string imei = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

    // optional string digest = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional string desiredBuild = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desiredbuild());
    }

    // optional string locale = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional string marketCheckin = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marketcheckin());
    }

    // optional string meid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_meid());
    }

    // optional string timeZone = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone());
    }

    // optional string serialNumber = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialnumber());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string esn = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_esn());
    }

    // optional string userName = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string droidguardResult = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_droidguardresult());
    }

    // optional string deviceDataVersionInfo = 25;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicedataversioninfo());
    }

    // optional .playapi.proto.gsf.AndroidCheckinProto checkin = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.checkin_);
    }

    // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deviceconfiguration_);
    }

    // optional int64 id = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int64 loggingId = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_loggingid());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional fixed64 securityToken = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional int32 fragment = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_fragment());
    }

    // optional int32 userSerialNumber = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_userserialnumber());
    }

    // optional bool fetchSystemUpdates = 29;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidCheckinRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidCheckinRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidCheckinRequest::GetClassData() const { return &_class_data_; }


void AndroidCheckinRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidCheckinRequest*>(&to_msg);
  auto& from = static_cast<const AndroidCheckinRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidCheckinRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.macaddr_.MergeFrom(from._impl_.macaddr_);
  _this->_impl_.accountcookie_.MergeFrom(from._impl_.accountcookie_);
  _this->_impl_.otacert_.MergeFrom(from._impl_.otacert_);
  _this->_impl_.macaddrtype_.MergeFrom(from._impl_.macaddrtype_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_desiredbuild(from._internal_desiredbuild());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_marketcheckin(from._internal_marketcheckin());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_meid(from._internal_meid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_timezone(from._internal_timezone());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_serialnumber(from._internal_serialnumber());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_esn(from._internal_esn());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_droidguardresult(from._internal_droidguardresult());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_devicedataversioninfo(from._internal_devicedataversioninfo());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_checkin()->::playapi::proto::gsf::AndroidCheckinProto::MergeFrom(
          from._internal_checkin());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_deviceconfiguration()->::playapi::proto::gsf::DeviceConfigurationProto::MergeFrom(
          from._internal_deviceconfiguration());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.loggingid_ = from._impl_.loggingid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.securitytoken_ = from._impl_.securitytoken_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.fragment_ = from._impl_.fragment_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.userserialnumber_ = from._impl_.userserialnumber_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.fetchsystemupdates_ = from._impl_.fetchsystemupdates_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidCheckinRequest::CopyFrom(const AndroidCheckinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidCheckinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCheckinRequest::IsInitialized() const {
  return true;
}

void AndroidCheckinRequest::InternalSwap(AndroidCheckinRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.macaddr_.InternalSwap(&other->_impl_.macaddr_);
  _impl_.accountcookie_.InternalSwap(&other->_impl_.accountcookie_);
  _impl_.otacert_.InternalSwap(&other->_impl_.otacert_);
  _impl_.macaddrtype_.InternalSwap(&other->_impl_.macaddrtype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desiredbuild_, lhs_arena,
      &other->_impl_.desiredbuild_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.marketcheckin_, lhs_arena,
      &other->_impl_.marketcheckin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meid_, lhs_arena,
      &other->_impl_.meid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialnumber_, lhs_arena,
      &other->_impl_.serialnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.esn_, lhs_arena,
      &other->_impl_.esn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.droidguardresult_, lhs_arena,
      &other->_impl_.droidguardresult_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicedataversioninfo_, lhs_arena,
      &other->_impl_.devicedataversioninfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCheckinRequest, _impl_.fetchsystemupdates_)
      + sizeof(AndroidCheckinRequest::_impl_.fetchsystemupdates_)
      - PROTOBUF_FIELD_OFFSET(AndroidCheckinRequest, _impl_.checkin_)>(
          reinterpret_cast<char*>(&_impl_.checkin_),
          reinterpret_cast<char*>(&other->_impl_.checkin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidCheckinRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[0]);
}

// ===================================================================

class AndroidCheckinResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCheckinResponse>()._impl_._has_bits_);
  static void set_has_statsok(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timemsec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marketok(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_androidid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_securitytoken(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_settingsdiff(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_devicedataversioninfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidCheckinResponse::AndroidCheckinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidCheckinResponse)
}
AndroidCheckinResponse::AndroidCheckinResponse(const AndroidCheckinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidCheckinResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.intent_){from._impl_.intent_}
    , decltype(_impl_.setting_){from._impl_.setting_}
    , decltype(_impl_.deletesetting_){from._impl_.deletesetting_}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.devicedataversioninfo_){}
    , decltype(_impl_.timemsec_){}
    , decltype(_impl_.androidid_){}
    , decltype(_impl_.securitytoken_){}
    , decltype(_impl_.statsok_){}
    , decltype(_impl_.marketok_){}
    , decltype(_impl_.settingsdiff_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicedataversioninfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicedataversioninfo()) {
    _this->_impl_.devicedataversioninfo_.Set(from._internal_devicedataversioninfo(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timemsec_, &from._impl_.timemsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.settingsdiff_) -
    reinterpret_cast<char*>(&_impl_.timemsec_)) + sizeof(_impl_.settingsdiff_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidCheckinResponse)
}

inline void AndroidCheckinResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.intent_){arena}
    , decltype(_impl_.setting_){arena}
    , decltype(_impl_.deletesetting_){arena}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.devicedataversioninfo_){}
    , decltype(_impl_.timemsec_){int64_t{0}}
    , decltype(_impl_.androidid_){uint64_t{0u}}
    , decltype(_impl_.securitytoken_){uint64_t{0u}}
    , decltype(_impl_.statsok_){false}
    , decltype(_impl_.marketok_){false}
    , decltype(_impl_.settingsdiff_){false}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicedataversioninfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCheckinResponse::~AndroidCheckinResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidCheckinResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCheckinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intent_.~RepeatedPtrField();
  _impl_.setting_.~RepeatedPtrField();
  _impl_.deletesetting_.~RepeatedPtrField();
  _impl_.digest_.Destroy();
  _impl_.devicedataversioninfo_.Destroy();
}

void AndroidCheckinResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCheckinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidCheckinResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intent_.Clear();
  _impl_.setting_.Clear();
  _impl_.deletesetting_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicedataversioninfo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.timemsec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.settingsdiff_) -
        reinterpret_cast<char*>(&_impl_.timemsec_)) + sizeof(_impl_.settingsdiff_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidCheckinResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool statsOk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_statsok(&has_bits);
          _impl_.statsok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.gsf.AndroidIntentProto intent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 timeMsec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timemsec(&has_bits);
          _impl_.timemsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string digest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinResponse.digest");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.gsf.GservicesSetting setting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_setting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool marketOk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_marketok(&has_bits);
          _impl_.marketok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 androidId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_androidid(&has_bits);
          _impl_.androidid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 securityToken = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_securitytoken(&has_bits);
          _impl_.securitytoken_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool settingsDiff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_settingsdiff(&has_bits);
          _impl_.settingsdiff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string deleteSetting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deletesetting();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinResponse.deleteSetting");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string deviceDataVersionInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_devicedataversioninfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCheckinResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidCheckinResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool statsOk = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_statsok(), target);
  }

  // repeated .playapi.proto.gsf.AndroidIntentProto intent = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intent_size()); i < n; i++) {
    const auto& repfield = this->_internal_intent(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 timeMsec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timemsec(), target);
  }

  // optional string digest = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinResponse.digest");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_digest(), target);
  }

  // repeated .playapi.proto.gsf.GservicesSetting setting = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_setting_size()); i < n; i++) {
    const auto& repfield = this->_internal_setting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool marketOk = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_marketok(), target);
  }

  // optional fixed64 androidId = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_androidid(), target);
  }

  // optional fixed64 securityToken = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_securitytoken(), target);
  }

  // optional bool settingsDiff = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_settingsdiff(), target);
  }

  // repeated string deleteSetting = 10;
  for (int i = 0, n = this->_internal_deletesetting_size(); i < n; i++) {
    const auto& s = this->_internal_deletesetting(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinResponse.deleteSetting");
    target = stream->WriteString(10, s, target);
  }

  // optional string deviceDataVersionInfo = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_devicedataversioninfo().data(), static_cast<int>(this->_internal_devicedataversioninfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_devicedataversioninfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidCheckinResponse)
  return target;
}

size_t AndroidCheckinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidCheckinResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.gsf.AndroidIntentProto intent = 2;
  total_size += 1UL * this->_internal_intent_size();
  for (const auto& msg : this->_impl_.intent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.gsf.GservicesSetting setting = 5;
  total_size += 1UL * this->_internal_setting_size();
  for (const auto& msg : this->_impl_.setting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string deleteSetting = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.deletesetting_.size());
  for (int i = 0, n = _impl_.deletesetting_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.deletesetting_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string digest = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional string deviceDataVersionInfo = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicedataversioninfo());
    }

    // optional int64 timeMsec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timemsec());
    }

    // optional fixed64 androidId = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 securityToken = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool statsOk = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool marketOk = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool settingsDiff = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidCheckinResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidCheckinResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidCheckinResponse::GetClassData() const { return &_class_data_; }


void AndroidCheckinResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidCheckinResponse*>(&to_msg);
  auto& from = static_cast<const AndroidCheckinResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidCheckinResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.intent_.MergeFrom(from._impl_.intent_);
  _this->_impl_.setting_.MergeFrom(from._impl_.setting_);
  _this->_impl_.deletesetting_.MergeFrom(from._impl_.deletesetting_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicedataversioninfo(from._internal_devicedataversioninfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timemsec_ = from._impl_.timemsec_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.androidid_ = from._impl_.androidid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.securitytoken_ = from._impl_.securitytoken_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.statsok_ = from._impl_.statsok_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.marketok_ = from._impl_.marketok_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.settingsdiff_ = from._impl_.settingsdiff_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidCheckinResponse::CopyFrom(const AndroidCheckinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidCheckinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCheckinResponse::IsInitialized() const {
  return true;
}

void AndroidCheckinResponse::InternalSwap(AndroidCheckinResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.intent_.InternalSwap(&other->_impl_.intent_);
  _impl_.setting_.InternalSwap(&other->_impl_.setting_);
  _impl_.deletesetting_.InternalSwap(&other->_impl_.deletesetting_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicedataversioninfo_, lhs_arena,
      &other->_impl_.devicedataversioninfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCheckinResponse, _impl_.settingsdiff_)
      + sizeof(AndroidCheckinResponse::_impl_.settingsdiff_)
      - PROTOBUF_FIELD_OFFSET(AndroidCheckinResponse, _impl_.timemsec_)>(
          reinterpret_cast<char*>(&_impl_.timemsec_),
          reinterpret_cast<char*>(&other->_impl_.timemsec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidCheckinResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[1]);
}

// ===================================================================

class GservicesSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<GservicesSetting>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GservicesSetting::GservicesSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.GservicesSetting)
}
GservicesSetting::GservicesSetting(const GservicesSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GservicesSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.GservicesSetting)
}

inline void GservicesSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GservicesSetting::~GservicesSetting() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.GservicesSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GservicesSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void GservicesSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GservicesSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.GservicesSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GservicesSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GservicesSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.GservicesSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.GservicesSetting)
  return target;
}

size_t GservicesSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.GservicesSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GservicesSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GservicesSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GservicesSetting::GetClassData() const { return &_class_data_; }


void GservicesSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GservicesSetting*>(&to_msg);
  auto& from = static_cast<const GservicesSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.GservicesSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GservicesSetting::CopyFrom(const GservicesSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.GservicesSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GservicesSetting::IsInitialized() const {
  return true;
}

void GservicesSetting::InternalSwap(GservicesSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GservicesSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[2]);
}

// ===================================================================

class DeviceConfigurationProto_FeatureWithGLVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceConfigurationProto_FeatureWithGLVersion>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_glesversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceConfigurationProto_FeatureWithGLVersion::DeviceConfigurationProto_FeatureWithGLVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
}
DeviceConfigurationProto_FeatureWithGLVersion::DeviceConfigurationProto_FeatureWithGLVersion(const DeviceConfigurationProto_FeatureWithGLVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceConfigurationProto_FeatureWithGLVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.glesversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.glesversion_ = from._impl_.glesversion_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
}

inline void DeviceConfigurationProto_FeatureWithGLVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.glesversion_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceConfigurationProto_FeatureWithGLVersion::~DeviceConfigurationProto_FeatureWithGLVersion() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceConfigurationProto_FeatureWithGLVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeviceConfigurationProto_FeatureWithGLVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceConfigurationProto_FeatureWithGLVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.glesversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfigurationProto_FeatureWithGLVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 glEsVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_glesversion(&has_bits);
          _impl_.glesversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceConfigurationProto_FeatureWithGLVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 glEsVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_glesversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  return target;
}

size_t DeviceConfigurationProto_FeatureWithGLVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 glEsVersion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_glesversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceConfigurationProto_FeatureWithGLVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceConfigurationProto_FeatureWithGLVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceConfigurationProto_FeatureWithGLVersion::GetClassData() const { return &_class_data_; }


void DeviceConfigurationProto_FeatureWithGLVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceConfigurationProto_FeatureWithGLVersion*>(&to_msg);
  auto& from = static_cast<const DeviceConfigurationProto_FeatureWithGLVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.glesversion_ = from._impl_.glesversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceConfigurationProto_FeatureWithGLVersion::CopyFrom(const DeviceConfigurationProto_FeatureWithGLVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigurationProto_FeatureWithGLVersion::IsInitialized() const {
  return true;
}

void DeviceConfigurationProto_FeatureWithGLVersion::InternalSwap(DeviceConfigurationProto_FeatureWithGLVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.glesversion_, other->_impl_.glesversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfigurationProto_FeatureWithGLVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[3]);
}

// ===================================================================

class DeviceConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceConfigurationProto>()._impl_._has_bits_);
  static void set_has_touchscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_navigation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_screenlayout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hashardkeyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hasfivewaynavigation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_screendensity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_glesversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_screenwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_screenheight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_maxapkdownloadsizemb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_smallestscreenwidthdp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lowramdevice(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_totalmemorybytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_maxnumofcpucores(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_screenlayout2(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_keyguarddevicesecure(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

DeviceConfigurationProto::DeviceConfigurationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.DeviceConfigurationProto)
}
DeviceConfigurationProto::DeviceConfigurationProto(const DeviceConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceConfigurationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.systemsharedlibrary_){from._impl_.systemsharedlibrary_}
    , decltype(_impl_.systemavailablefeature_){from._impl_.systemavailablefeature_}
    , decltype(_impl_.nativeplatform_){from._impl_.nativeplatform_}
    , decltype(_impl_.systemsupportedlocale_){from._impl_.systemsupportedlocale_}
    , decltype(_impl_.glextension_){from._impl_.glextension_}
    , decltype(_impl_.newsystemavailablefeature_){from._impl_.newsystemavailablefeature_}
    , decltype(_impl_.touchscreen_){}
    , decltype(_impl_.keyboard_){}
    , decltype(_impl_.navigation_){}
    , decltype(_impl_.screenlayout_){}
    , decltype(_impl_.screendensity_){}
    , decltype(_impl_.glesversion_){}
    , decltype(_impl_.screenwidth_){}
    , decltype(_impl_.screenheight_){}
    , decltype(_impl_.hashardkeyboard_){}
    , decltype(_impl_.hasfivewaynavigation_){}
    , decltype(_impl_.lowramdevice_){}
    , decltype(_impl_.keyguarddevicesecure_){}
    , decltype(_impl_.maxapkdownloadsizemb_){}
    , decltype(_impl_.smallestscreenwidthdp_){}
    , decltype(_impl_.maxnumofcpucores_){}
    , decltype(_impl_.totalmemorybytes_){}
    , decltype(_impl_.screenlayout2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.touchscreen_, &from._impl_.touchscreen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.screenlayout2_) -
    reinterpret_cast<char*>(&_impl_.touchscreen_)) + sizeof(_impl_.screenlayout2_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.DeviceConfigurationProto)
}

inline void DeviceConfigurationProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.systemsharedlibrary_){arena}
    , decltype(_impl_.systemavailablefeature_){arena}
    , decltype(_impl_.nativeplatform_){arena}
    , decltype(_impl_.systemsupportedlocale_){arena}
    , decltype(_impl_.glextension_){arena}
    , decltype(_impl_.newsystemavailablefeature_){arena}
    , decltype(_impl_.touchscreen_){0}
    , decltype(_impl_.keyboard_){0}
    , decltype(_impl_.navigation_){0}
    , decltype(_impl_.screenlayout_){0}
    , decltype(_impl_.screendensity_){0}
    , decltype(_impl_.glesversion_){0}
    , decltype(_impl_.screenwidth_){0}
    , decltype(_impl_.screenheight_){0}
    , decltype(_impl_.hashardkeyboard_){false}
    , decltype(_impl_.hasfivewaynavigation_){false}
    , decltype(_impl_.lowramdevice_){false}
    , decltype(_impl_.keyguarddevicesecure_){false}
    , decltype(_impl_.maxapkdownloadsizemb_){0}
    , decltype(_impl_.smallestscreenwidthdp_){0}
    , decltype(_impl_.maxnumofcpucores_){0}
    , decltype(_impl_.totalmemorybytes_){int64_t{0}}
    , decltype(_impl_.screenlayout2_){0}
  };
}

DeviceConfigurationProto::~DeviceConfigurationProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.DeviceConfigurationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceConfigurationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.systemsharedlibrary_.~RepeatedPtrField();
  _impl_.systemavailablefeature_.~RepeatedPtrField();
  _impl_.nativeplatform_.~RepeatedPtrField();
  _impl_.systemsupportedlocale_.~RepeatedPtrField();
  _impl_.glextension_.~RepeatedPtrField();
  _impl_.newsystemavailablefeature_.~RepeatedPtrField();
}

void DeviceConfigurationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.DeviceConfigurationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.systemsharedlibrary_.Clear();
  _impl_.systemavailablefeature_.Clear();
  _impl_.nativeplatform_.Clear();
  _impl_.systemsupportedlocale_.Clear();
  _impl_.glextension_.Clear();
  _impl_.newsystemavailablefeature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.touchscreen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.screenheight_) -
        reinterpret_cast<char*>(&_impl_.touchscreen_)) + sizeof(_impl_.screenheight_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.hashardkeyboard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.totalmemorybytes_) -
        reinterpret_cast<char*>(&_impl_.hashardkeyboard_)) + sizeof(_impl_.totalmemorybytes_));
  }
  _impl_.screenlayout2_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfigurationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 touchScreen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_touchscreen(&has_bits);
          _impl_.touchscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 keyboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_keyboard(&has_bits);
          _impl_.keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 navigation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_navigation(&has_bits);
          _impl_.navigation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 screenLayout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_screenlayout(&has_bits);
          _impl_.screenlayout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasHardKeyboard = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hashardkeyboard(&has_bits);
          _impl_.hashardkeyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasFiveWayNavigation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_hasfivewaynavigation(&has_bits);
          _impl_.hasfivewaynavigation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 screenDensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_screendensity(&has_bits);
          _impl_.screendensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 glEsVersion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_glesversion(&has_bits);
          _impl_.glesversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string systemSharedLibrary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_systemsharedlibrary();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string systemAvailableFeature = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_systemavailablefeature();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string nativePlatform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nativeplatform();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.DeviceConfigurationProto.nativePlatform");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 screenWidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_screenwidth(&has_bits);
          _impl_.screenwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 screenHeight = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_screenheight(&has_bits);
          _impl_.screenheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string systemSupportedLocale = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_systemsupportedlocale();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string glExtension = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_glextension();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.DeviceConfigurationProto.glExtension");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 maxApkDownloadSizeMb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_maxapkdownloadsizemb(&has_bits);
          _impl_.maxapkdownloadsizemb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 smallestScreenWidthDp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_smallestscreenwidthdp(&has_bits);
          _impl_.smallestscreenwidthdp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool lowRamDevice = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_lowramdevice(&has_bits);
          _impl_.lowramdevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 totalMemoryBytes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_totalmemorybytes(&has_bits);
          _impl_.totalmemorybytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maxNumOfCpuCores = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_maxnumofcpucores(&has_bits);
          _impl_.maxnumofcpucores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion newSystemAvailableFeature = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_newsystemavailablefeature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 screenLayout2 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_screenlayout2(&has_bits);
          _impl_.screenlayout2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keyguardDeviceSecure = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_keyguarddevicesecure(&has_bits);
          _impl_.keyguarddevicesecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceConfigurationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.DeviceConfigurationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 touchScreen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_touchscreen(), target);
  }

  // optional int32 keyboard = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_keyboard(), target);
  }

  // optional int32 navigation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_navigation(), target);
  }

  // optional int32 screenLayout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_screenlayout(), target);
  }

  // optional bool hasHardKeyboard = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_hashardkeyboard(), target);
  }

  // optional bool hasFiveWayNavigation = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_hasfivewaynavigation(), target);
  }

  // optional int32 screenDensity = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_screendensity(), target);
  }

  // optional int32 glEsVersion = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_glesversion(), target);
  }

  // repeated string systemSharedLibrary = 9;
  for (int i = 0, n = this->_internal_systemsharedlibrary_size(); i < n; i++) {
    const auto& s = this->_internal_systemsharedlibrary(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary");
    target = stream->WriteString(9, s, target);
  }

  // repeated string systemAvailableFeature = 10;
  for (int i = 0, n = this->_internal_systemavailablefeature_size(); i < n; i++) {
    const auto& s = this->_internal_systemavailablefeature(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature");
    target = stream->WriteString(10, s, target);
  }

  // repeated string nativePlatform = 11;
  for (int i = 0, n = this->_internal_nativeplatform_size(); i < n; i++) {
    const auto& s = this->_internal_nativeplatform(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.DeviceConfigurationProto.nativePlatform");
    target = stream->WriteString(11, s, target);
  }

  // optional int32 screenWidth = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_screenwidth(), target);
  }

  // optional int32 screenHeight = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_screenheight(), target);
  }

  // repeated string systemSupportedLocale = 14;
  for (int i = 0, n = this->_internal_systemsupportedlocale_size(); i < n; i++) {
    const auto& s = this->_internal_systemsupportedlocale(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale");
    target = stream->WriteString(14, s, target);
  }

  // repeated string glExtension = 15;
  for (int i = 0, n = this->_internal_glextension_size(); i < n; i++) {
    const auto& s = this->_internal_glextension(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.DeviceConfigurationProto.glExtension");
    target = stream->WriteString(15, s, target);
  }

  // optional int32 maxApkDownloadSizeMb = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_maxapkdownloadsizemb(), target);
  }

  // optional int32 smallestScreenWidthDp = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_smallestscreenwidthdp(), target);
  }

  // optional bool lowRamDevice = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_lowramdevice(), target);
  }

  // optional int64 totalMemoryBytes = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_totalmemorybytes(), target);
  }

  // optional int32 maxNumOfCpuCores = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_maxnumofcpucores(), target);
  }

  // repeated .playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion newSystemAvailableFeature = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_newsystemavailablefeature_size()); i < n; i++) {
    const auto& repfield = this->_internal_newsystemavailablefeature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 screenLayout2 = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_screenlayout2(), target);
  }

  // optional bool keyguardDeviceSecure = 28;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_keyguarddevicesecure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.DeviceConfigurationProto)
  return target;
}

size_t DeviceConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.DeviceConfigurationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string systemSharedLibrary = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.systemsharedlibrary_.size());
  for (int i = 0, n = _impl_.systemsharedlibrary_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.systemsharedlibrary_.Get(i));
  }

  // repeated string systemAvailableFeature = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.systemavailablefeature_.size());
  for (int i = 0, n = _impl_.systemavailablefeature_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.systemavailablefeature_.Get(i));
  }

  // repeated string nativePlatform = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.nativeplatform_.size());
  for (int i = 0, n = _impl_.nativeplatform_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.nativeplatform_.Get(i));
  }

  // repeated string systemSupportedLocale = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.systemsupportedlocale_.size());
  for (int i = 0, n = _impl_.systemsupportedlocale_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.systemsupportedlocale_.Get(i));
  }

  // repeated string glExtension = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.glextension_.size());
  for (int i = 0, n = _impl_.glextension_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.glextension_.Get(i));
  }

  // repeated .playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion newSystemAvailableFeature = 26;
  total_size += 2UL * this->_internal_newsystemavailablefeature_size();
  for (const auto& msg : this->_impl_.newsystemavailablefeature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 touchScreen = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_touchscreen());
    }

    // optional int32 keyboard = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keyboard());
    }

    // optional int32 navigation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_navigation());
    }

    // optional int32 screenLayout = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_screenlayout());
    }

    // optional int32 screenDensity = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_screendensity());
    }

    // optional int32 glEsVersion = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_glesversion());
    }

    // optional int32 screenWidth = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_screenwidth());
    }

    // optional int32 screenHeight = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_screenheight());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool hasHardKeyboard = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hasFiveWayNavigation = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool lowRamDevice = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool keyguardDeviceSecure = 28;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int32 maxApkDownloadSizeMb = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_maxapkdownloadsizemb());
    }

    // optional int32 smallestScreenWidthDp = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_smallestscreenwidthdp());
    }

    // optional int32 maxNumOfCpuCores = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_maxnumofcpucores());
    }

    // optional int64 totalMemoryBytes = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_totalmemorybytes());
    }

  }
  // optional int32 screenLayout2 = 27;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_screenlayout2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceConfigurationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceConfigurationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceConfigurationProto::GetClassData() const { return &_class_data_; }


void DeviceConfigurationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceConfigurationProto*>(&to_msg);
  auto& from = static_cast<const DeviceConfigurationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.DeviceConfigurationProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.systemsharedlibrary_.MergeFrom(from._impl_.systemsharedlibrary_);
  _this->_impl_.systemavailablefeature_.MergeFrom(from._impl_.systemavailablefeature_);
  _this->_impl_.nativeplatform_.MergeFrom(from._impl_.nativeplatform_);
  _this->_impl_.systemsupportedlocale_.MergeFrom(from._impl_.systemsupportedlocale_);
  _this->_impl_.glextension_.MergeFrom(from._impl_.glextension_);
  _this->_impl_.newsystemavailablefeature_.MergeFrom(from._impl_.newsystemavailablefeature_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.touchscreen_ = from._impl_.touchscreen_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.keyboard_ = from._impl_.keyboard_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.navigation_ = from._impl_.navigation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.screenlayout_ = from._impl_.screenlayout_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.screendensity_ = from._impl_.screendensity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.glesversion_ = from._impl_.glesversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.screenwidth_ = from._impl_.screenwidth_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.screenheight_ = from._impl_.screenheight_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hashardkeyboard_ = from._impl_.hashardkeyboard_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.hasfivewaynavigation_ = from._impl_.hasfivewaynavigation_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lowramdevice_ = from._impl_.lowramdevice_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.keyguarddevicesecure_ = from._impl_.keyguarddevicesecure_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.maxapkdownloadsizemb_ = from._impl_.maxapkdownloadsizemb_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.smallestscreenwidthdp_ = from._impl_.smallestscreenwidthdp_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.maxnumofcpucores_ = from._impl_.maxnumofcpucores_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.totalmemorybytes_ = from._impl_.totalmemorybytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_screenlayout2(from._internal_screenlayout2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceConfigurationProto::CopyFrom(const DeviceConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.DeviceConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigurationProto::IsInitialized() const {
  return true;
}

void DeviceConfigurationProto::InternalSwap(DeviceConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.systemsharedlibrary_.InternalSwap(&other->_impl_.systemsharedlibrary_);
  _impl_.systemavailablefeature_.InternalSwap(&other->_impl_.systemavailablefeature_);
  _impl_.nativeplatform_.InternalSwap(&other->_impl_.nativeplatform_);
  _impl_.systemsupportedlocale_.InternalSwap(&other->_impl_.systemsupportedlocale_);
  _impl_.glextension_.InternalSwap(&other->_impl_.glextension_);
  _impl_.newsystemavailablefeature_.InternalSwap(&other->_impl_.newsystemavailablefeature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConfigurationProto, _impl_.screenlayout2_)
      + sizeof(DeviceConfigurationProto::_impl_.screenlayout2_)
      - PROTOBUF_FIELD_OFFSET(DeviceConfigurationProto, _impl_.touchscreen_)>(
          reinterpret_cast<char*>(&_impl_.touchscreen_),
          reinterpret_cast<char*>(&other->_impl_.touchscreen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfigurationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[4]);
}

// ===================================================================

class AndroidBuildProto_PackageVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidBuildProto_PackageVersion>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidBuildProto_PackageVersion::AndroidBuildProto_PackageVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
}
AndroidBuildProto_PackageVersion::AndroidBuildProto_PackageVersion(const AndroidBuildProto_PackageVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidBuildProto_PackageVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
}

inline void AndroidBuildProto_PackageVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidBuildProto_PackageVersion::~AndroidBuildProto_PackageVersion() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidBuildProto_PackageVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void AndroidBuildProto_PackageVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidBuildProto_PackageVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidBuildProto_PackageVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.PackageVersion.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidBuildProto_PackageVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.PackageVersion.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  return target;
}

size_t AndroidBuildProto_PackageVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidBuildProto_PackageVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidBuildProto_PackageVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidBuildProto_PackageVersion::GetClassData() const { return &_class_data_; }


void AndroidBuildProto_PackageVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidBuildProto_PackageVersion*>(&to_msg);
  auto& from = static_cast<const AndroidBuildProto_PackageVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidBuildProto_PackageVersion::CopyFrom(const AndroidBuildProto_PackageVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidBuildProto_PackageVersion::IsInitialized() const {
  return true;
}

void AndroidBuildProto_PackageVersion::InternalSwap(AndroidBuildProto_PackageVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidBuildProto_PackageVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[5]);
}

// ===================================================================

class AndroidBuildProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidBuildProto>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_carrier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_radio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bootloader(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_googleservices(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sdkversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_buildproduct(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_otainstalled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_securitypatch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

AndroidBuildProto::AndroidBuildProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidBuildProto)
}
AndroidBuildProto::AndroidBuildProto(const AndroidBuildProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidBuildProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.googlepackage_){from._impl_.googlepackage_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.carrier_){}
    , decltype(_impl_.radio_){}
    , decltype(_impl_.bootloader_){}
    , decltype(_impl_.client_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.buildproduct_){}
    , decltype(_impl_.securitypatch_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.googleservices_){}
    , decltype(_impl_.sdkversion_){}
    , decltype(_impl_.otainstalled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product()) {
    _this->_impl_.product_.Set(from._internal_product(), 
      _this->GetArenaForAllocation());
  }
  _impl_.carrier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carrier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_carrier()) {
    _this->_impl_.carrier_.Set(from._internal_carrier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.radio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.radio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_radio()) {
    _this->_impl_.radio_.Set(from._internal_radio(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bootloader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bootloader()) {
    _this->_impl_.bootloader_.Set(from._internal_bootloader(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client()) {
    _this->_impl_.client_.Set(from._internal_client(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manufacturer()) {
    _this->_impl_.manufacturer_.Set(from._internal_manufacturer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buildproduct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildproduct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buildproduct()) {
    _this->_impl_.buildproduct_.Set(from._internal_buildproduct(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitypatch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_securitypatch()) {
    _this->_impl_.securitypatch_.Set(from._internal_securitypatch(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.otainstalled_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.otainstalled_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidBuildProto)
}

inline void AndroidBuildProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.googlepackage_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.carrier_){}
    , decltype(_impl_.radio_){}
    , decltype(_impl_.bootloader_){}
    , decltype(_impl_.client_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.buildproduct_){}
    , decltype(_impl_.securitypatch_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.googleservices_){0}
    , decltype(_impl_.sdkversion_){0}
    , decltype(_impl_.otainstalled_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.carrier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carrier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.radio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.radio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bootloader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buildproduct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildproduct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitypatch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidBuildProto::~AndroidBuildProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidBuildProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidBuildProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.googlepackage_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.product_.Destroy();
  _impl_.carrier_.Destroy();
  _impl_.radio_.Destroy();
  _impl_.bootloader_.Destroy();
  _impl_.client_.Destroy();
  _impl_.device_.Destroy();
  _impl_.model_.Destroy();
  _impl_.manufacturer_.Destroy();
  _impl_.buildproduct_.Destroy();
  _impl_.securitypatch_.Destroy();
}

void AndroidBuildProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidBuildProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidBuildProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.googlepackage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.carrier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.radio_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bootloader_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.client_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.model_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.buildproduct_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.securitypatch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.otainstalled_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.otainstalled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidBuildProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.product");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string carrier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_carrier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.carrier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string radio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_radio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.radio");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string bootloader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bootloader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.bootloader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string client = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_client();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.client");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 googleServices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_googleservices(&has_bits);
          _impl_.googleservices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.device");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 sdkVersion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_sdkversion(&has_bits);
          _impl_.sdkversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.model");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string manufacturer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.manufacturer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string buildProduct = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_buildproduct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.buildProduct");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool otaInstalled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_otainstalled(&has_bits);
          _impl_.otainstalled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.gsf.AndroidBuildProto.PackageVersion googlePackage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_googlepackage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string securityPatch = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_securitypatch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidBuildProto.securityPatch");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidBuildProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidBuildProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string product = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.product");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product(), target);
  }

  // optional string carrier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_carrier().data(), static_cast<int>(this->_internal_carrier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.carrier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_carrier(), target);
  }

  // optional string radio = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radio().data(), static_cast<int>(this->_internal_radio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.radio");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_radio(), target);
  }

  // optional string bootloader = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bootloader().data(), static_cast<int>(this->_internal_bootloader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.bootloader");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bootloader(), target);
  }

  // optional string client = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client().data(), static_cast<int>(this->_internal_client().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.client");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_client(), target);
  }

  // optional int64 timestamp = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_timestamp(), target);
  }

  // optional int32 googleServices = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_googleservices(), target);
  }

  // optional string device = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.device");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_device(), target);
  }

  // optional int32 sdkVersion = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_sdkversion(), target);
  }

  // optional string model = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.model");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_model(), target);
  }

  // optional string manufacturer = 12;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.manufacturer");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_manufacturer(), target);
  }

  // optional string buildProduct = 13;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buildproduct().data(), static_cast<int>(this->_internal_buildproduct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.buildProduct");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_buildproduct(), target);
  }

  // optional bool otaInstalled = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_otainstalled(), target);
  }

  // repeated .playapi.proto.gsf.AndroidBuildProto.PackageVersion googlePackage = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_googlepackage_size()); i < n; i++) {
    const auto& repfield = this->_internal_googlepackage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string securityPatch = 19;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securitypatch().data(), static_cast<int>(this->_internal_securitypatch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidBuildProto.securityPatch");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_securitypatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidBuildProto)
  return target;
}

size_t AndroidBuildProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidBuildProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.gsf.AndroidBuildProto.PackageVersion googlePackage = 15;
  total_size += 1UL * this->_internal_googlepackage_size();
  for (const auto& msg : this->_impl_.googlepackage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string product = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product());
    }

    // optional string carrier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_carrier());
    }

    // optional string radio = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radio());
    }

    // optional string bootloader = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bootloader());
    }

    // optional string client = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client());
    }

    // optional string device = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device());
    }

    // optional string model = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string manufacturer = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer());
    }

    // optional string buildProduct = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buildproduct());
    }

    // optional string securityPatch = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_securitypatch());
    }

    // optional int64 timestamp = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 googleServices = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_googleservices());
    }

    // optional int32 sdkVersion = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sdkversion());
    }

    // optional bool otaInstalled = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidBuildProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidBuildProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidBuildProto::GetClassData() const { return &_class_data_; }


void AndroidBuildProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidBuildProto*>(&to_msg);
  auto& from = static_cast<const AndroidBuildProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidBuildProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.googlepackage_.MergeFrom(from._impl_.googlepackage_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_product(from._internal_product());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_carrier(from._internal_carrier());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_radio(from._internal_radio());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_bootloader(from._internal_bootloader());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_client(from._internal_client());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_device(from._internal_device());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_model(from._internal_model());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_manufacturer(from._internal_manufacturer());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_buildproduct(from._internal_buildproduct());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_securitypatch(from._internal_securitypatch());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.googleservices_ = from._impl_.googleservices_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.sdkversion_ = from._impl_.sdkversion_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.otainstalled_ = from._impl_.otainstalled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidBuildProto::CopyFrom(const AndroidBuildProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidBuildProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidBuildProto::IsInitialized() const {
  return true;
}

void AndroidBuildProto::InternalSwap(AndroidBuildProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.googlepackage_.InternalSwap(&other->_impl_.googlepackage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_, lhs_arena,
      &other->_impl_.product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.carrier_, lhs_arena,
      &other->_impl_.carrier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.radio_, lhs_arena,
      &other->_impl_.radio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bootloader_, lhs_arena,
      &other->_impl_.bootloader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_, lhs_arena,
      &other->_impl_.client_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manufacturer_, lhs_arena,
      &other->_impl_.manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buildproduct_, lhs_arena,
      &other->_impl_.buildproduct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitypatch_, lhs_arena,
      &other->_impl_.securitypatch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidBuildProto, _impl_.otainstalled_)
      + sizeof(AndroidBuildProto::_impl_.otainstalled_)
      - PROTOBUF_FIELD_OFFSET(AndroidBuildProto, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidBuildProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[6]);
}

// ===================================================================

class AndroidCheckinReasonProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCheckinReasonProto>()._impl_._has_bits_);
  static void set_has_reasontype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attemptcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sourcepackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sourceclass(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourceforce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AndroidCheckinReasonProto::AndroidCheckinReasonProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidCheckinReasonProto)
}
AndroidCheckinReasonProto::AndroidCheckinReasonProto(const AndroidCheckinReasonProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidCheckinReasonProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sourcepackage_){}
    , decltype(_impl_.sourceclass_){}
    , decltype(_impl_.reasontype_){}
    , decltype(_impl_.attemptcount_){}
    , decltype(_impl_.sourceforce_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sourcepackage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcepackage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourcepackage()) {
    _this->_impl_.sourcepackage_.Set(from._internal_sourcepackage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourceclass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceclass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourceclass()) {
    _this->_impl_.sourceclass_.Set(from._internal_sourceclass(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reasontype_, &from._impl_.reasontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourceforce_) -
    reinterpret_cast<char*>(&_impl_.reasontype_)) + sizeof(_impl_.sourceforce_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidCheckinReasonProto)
}

inline void AndroidCheckinReasonProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sourcepackage_){}
    , decltype(_impl_.sourceclass_){}
    , decltype(_impl_.reasontype_){0}
    , decltype(_impl_.attemptcount_){0}
    , decltype(_impl_.sourceforce_){false}
  };
  _impl_.sourcepackage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcepackage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourceclass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceclass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCheckinReasonProto::~AndroidCheckinReasonProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidCheckinReasonProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCheckinReasonProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourcepackage_.Destroy();
  _impl_.sourceclass_.Destroy();
}

void AndroidCheckinReasonProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCheckinReasonProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidCheckinReasonProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sourcepackage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sourceclass_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.reasontype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sourceforce_) -
        reinterpret_cast<char*>(&_impl_.reasontype_)) + sizeof(_impl_.sourceforce_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidCheckinReasonProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 reasonType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reasontype(&has_bits);
          _impl_.reasontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attemptCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attemptcount(&has_bits);
          _impl_.attemptcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sourcePackage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sourcepackage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sourceClass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sourceclass();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool sourceForce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sourceforce(&has_bits);
          _impl_.sourceforce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCheckinReasonProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidCheckinReasonProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 reasonType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_reasontype(), target);
  }

  // optional int32 attemptCount = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_attemptcount(), target);
  }

  // optional string sourcePackage = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcepackage().data(), static_cast<int>(this->_internal_sourcepackage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sourcepackage(), target);
  }

  // optional string sourceClass = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceclass().data(), static_cast<int>(this->_internal_sourceclass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sourceclass(), target);
  }

  // optional bool sourceForce = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_sourceforce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidCheckinReasonProto)
  return target;
}

size_t AndroidCheckinReasonProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidCheckinReasonProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string sourcePackage = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcepackage());
    }

    // optional string sourceClass = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourceclass());
    }

    // optional int32 reasonType = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reasontype());
    }

    // optional int32 attemptCount = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attemptcount());
    }

    // optional bool sourceForce = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidCheckinReasonProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidCheckinReasonProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidCheckinReasonProto::GetClassData() const { return &_class_data_; }


void AndroidCheckinReasonProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidCheckinReasonProto*>(&to_msg);
  auto& from = static_cast<const AndroidCheckinReasonProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidCheckinReasonProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sourcepackage(from._internal_sourcepackage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sourceclass(from._internal_sourceclass());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reasontype_ = from._impl_.reasontype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.attemptcount_ = from._impl_.attemptcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sourceforce_ = from._impl_.sourceforce_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidCheckinReasonProto::CopyFrom(const AndroidCheckinReasonProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidCheckinReasonProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCheckinReasonProto::IsInitialized() const {
  return true;
}

void AndroidCheckinReasonProto::InternalSwap(AndroidCheckinReasonProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcepackage_, lhs_arena,
      &other->_impl_.sourcepackage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourceclass_, lhs_arena,
      &other->_impl_.sourceclass_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCheckinReasonProto, _impl_.sourceforce_)
      + sizeof(AndroidCheckinReasonProto::_impl_.sourceforce_)
      - PROTOBUF_FIELD_OFFSET(AndroidCheckinReasonProto, _impl_.reasontype_)>(
          reinterpret_cast<char*>(&_impl_.reasontype_),
          reinterpret_cast<char*>(&other->_impl_.reasontype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidCheckinReasonProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[7]);
}

// ===================================================================

class AndroidCheckinProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCheckinProto>()._impl_._has_bits_);
  static const ::playapi::proto::gsf::AndroidBuildProto& build(const AndroidCheckinProto* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lastcheckinmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_celloperator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_simoperator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roaming(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_usernumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::gsf::AndroidCheckinReasonProto& reason(const AndroidCheckinProto* msg);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voicecapable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::playapi::proto::gsf::AndroidBuildProto&
AndroidCheckinProto::_Internal::build(const AndroidCheckinProto* msg) {
  return *msg->_impl_.build_;
}
const ::playapi::proto::gsf::AndroidCheckinReasonProto&
AndroidCheckinProto::_Internal::reason(const AndroidCheckinProto* msg) {
  return *msg->_impl_.reason_;
}
AndroidCheckinProto::AndroidCheckinProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidCheckinProto)
}
AndroidCheckinProto::AndroidCheckinProto(const AndroidCheckinProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidCheckinProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){from._impl_.event_}
    , decltype(_impl_.stat_){from._impl_.stat_}
    , decltype(_impl_.requestedgroup_){from._impl_.requestedgroup_}
    , decltype(_impl_.celloperator_){}
    , decltype(_impl_.simoperator_){}
    , decltype(_impl_.roaming_){}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.reason_){nullptr}
    , decltype(_impl_.lastcheckinmsec_){}
    , decltype(_impl_.usernumber_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.voicecapable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.celloperator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.celloperator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_celloperator()) {
    _this->_impl_.celloperator_.Set(from._internal_celloperator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.simoperator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.simoperator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_simoperator()) {
    _this->_impl_.simoperator_.Set(from._internal_simoperator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.roaming_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roaming_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_roaming()) {
    _this->_impl_.roaming_.Set(from._internal_roaming(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::playapi::proto::gsf::AndroidBuildProto(*from._impl_.build_);
  }
  if (from._internal_has_reason()) {
    _this->_impl_.reason_ = new ::playapi::proto::gsf::AndroidCheckinReasonProto(*from._impl_.reason_);
  }
  ::memcpy(&_impl_.lastcheckinmsec_, &from._impl_.lastcheckinmsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.voicecapable_) -
    reinterpret_cast<char*>(&_impl_.lastcheckinmsec_)) + sizeof(_impl_.voicecapable_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidCheckinProto)
}

inline void AndroidCheckinProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){arena}
    , decltype(_impl_.stat_){arena}
    , decltype(_impl_.requestedgroup_){arena}
    , decltype(_impl_.celloperator_){}
    , decltype(_impl_.simoperator_){}
    , decltype(_impl_.roaming_){}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.reason_){nullptr}
    , decltype(_impl_.lastcheckinmsec_){int64_t{0}}
    , decltype(_impl_.usernumber_){0}
    , decltype(_impl_.devicetype_){0}
    , decltype(_impl_.voicecapable_){false}
  };
  _impl_.celloperator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.celloperator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.simoperator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.simoperator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.roaming_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roaming_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCheckinProto::~AndroidCheckinProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidCheckinProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCheckinProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_.~RepeatedPtrField();
  _impl_.stat_.~RepeatedPtrField();
  _impl_.requestedgroup_.~RepeatedPtrField();
  _impl_.celloperator_.Destroy();
  _impl_.simoperator_.Destroy();
  _impl_.roaming_.Destroy();
  if (this != internal_default_instance()) delete _impl_.build_;
  if (this != internal_default_instance()) delete _impl_.reason_;
}

void AndroidCheckinProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCheckinProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidCheckinProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_.Clear();
  _impl_.stat_.Clear();
  _impl_.requestedgroup_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.celloperator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.simoperator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.roaming_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.build_ != nullptr);
      _impl_.build_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.reason_ != nullptr);
      _impl_.reason_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.lastcheckinmsec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.devicetype_) -
        reinterpret_cast<char*>(&_impl_.lastcheckinmsec_)) + sizeof(_impl_.devicetype_));
  }
  _impl_.voicecapable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidCheckinProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.gsf.AndroidBuildProto build = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 lastCheckinMsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lastcheckinmsec(&has_bits);
          _impl_.lastcheckinmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.gsf.AndroidEventProto event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.gsf.AndroidStatisticProto stat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string requestedGroup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requestedgroup();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinProto.requestedGroup");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string cellOperator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_celloperator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinProto.cellOperator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string simOperator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_simoperator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinProto.simOperator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string roaming = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_roaming();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidCheckinProto.roaming");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 userNumber = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_usernumber(&has_bits);
          _impl_.usernumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_devicetype(&has_bits);
          _impl_.devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.gsf.AndroidCheckinReasonProto reason = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool voiceCapable = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_voicecapable(&has_bits);
          _impl_.voicecapable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCheckinProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidCheckinProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.gsf.AndroidBuildProto build = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // optional int64 lastCheckinMsec = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_lastcheckinmsec(), target);
  }

  // repeated .playapi.proto.gsf.AndroidEventProto event = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.gsf.AndroidStatisticProto stat = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stat_size()); i < n; i++) {
    const auto& repfield = this->_internal_stat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string requestedGroup = 5;
  for (int i = 0, n = this->_internal_requestedgroup_size(); i < n; i++) {
    const auto& s = this->_internal_requestedgroup(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinProto.requestedGroup");
    target = stream->WriteString(5, s, target);
  }

  // optional string cellOperator = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_celloperator().data(), static_cast<int>(this->_internal_celloperator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinProto.cellOperator");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_celloperator(), target);
  }

  // optional string simOperator = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_simoperator().data(), static_cast<int>(this->_internal_simoperator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinProto.simOperator");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_simoperator(), target);
  }

  // optional string roaming = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roaming().data(), static_cast<int>(this->_internal_roaming().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidCheckinProto.roaming");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_roaming(), target);
  }

  // optional int32 userNumber = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_usernumber(), target);
  }

  // optional int32 deviceType = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_devicetype(), target);
  }

  // optional .playapi.proto.gsf.AndroidCheckinReasonProto reason = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::reason(this),
        _Internal::reason(this).GetCachedSize(), target, stream);
  }

  // optional bool voiceCapable = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_voicecapable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidCheckinProto)
  return target;
}

size_t AndroidCheckinProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidCheckinProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.gsf.AndroidEventProto event = 3;
  total_size += 1UL * this->_internal_event_size();
  for (const auto& msg : this->_impl_.event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.gsf.AndroidStatisticProto stat = 4;
  total_size += 1UL * this->_internal_stat_size();
  for (const auto& msg : this->_impl_.stat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string requestedGroup = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.requestedgroup_.size());
  for (int i = 0, n = _impl_.requestedgroup_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.requestedgroup_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cellOperator = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_celloperator());
    }

    // optional string simOperator = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_simoperator());
    }

    // optional string roaming = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roaming());
    }

    // optional .playapi.proto.gsf.AndroidBuildProto build = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_);
    }

    // optional .playapi.proto.gsf.AndroidCheckinReasonProto reason = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reason_);
    }

    // optional int64 lastCheckinMsec = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastcheckinmsec());
    }

    // optional int32 userNumber = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usernumber());
    }

    // optional int32 deviceType = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devicetype());
    }

  }
  // optional bool voiceCapable = 18;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidCheckinProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidCheckinProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidCheckinProto::GetClassData() const { return &_class_data_; }


void AndroidCheckinProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidCheckinProto*>(&to_msg);
  auto& from = static_cast<const AndroidCheckinProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidCheckinProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_.MergeFrom(from._impl_.event_);
  _this->_impl_.stat_.MergeFrom(from._impl_.stat_);
  _this->_impl_.requestedgroup_.MergeFrom(from._impl_.requestedgroup_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_celloperator(from._internal_celloperator());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_simoperator(from._internal_simoperator());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_roaming(from._internal_roaming());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_build()->::playapi::proto::gsf::AndroidBuildProto::MergeFrom(
          from._internal_build());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_reason()->::playapi::proto::gsf::AndroidCheckinReasonProto::MergeFrom(
          from._internal_reason());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.lastcheckinmsec_ = from._impl_.lastcheckinmsec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.usernumber_ = from._impl_.usernumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.devicetype_ = from._impl_.devicetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_voicecapable(from._internal_voicecapable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidCheckinProto::CopyFrom(const AndroidCheckinProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidCheckinProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCheckinProto::IsInitialized() const {
  return true;
}

void AndroidCheckinProto::InternalSwap(AndroidCheckinProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.event_.InternalSwap(&other->_impl_.event_);
  _impl_.stat_.InternalSwap(&other->_impl_.stat_);
  _impl_.requestedgroup_.InternalSwap(&other->_impl_.requestedgroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.celloperator_, lhs_arena,
      &other->_impl_.celloperator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.simoperator_, lhs_arena,
      &other->_impl_.simoperator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roaming_, lhs_arena,
      &other->_impl_.roaming_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCheckinProto, _impl_.voicecapable_)
      + sizeof(AndroidCheckinProto::_impl_.voicecapable_)
      - PROTOBUF_FIELD_OFFSET(AndroidCheckinProto, _impl_.build_)>(
          reinterpret_cast<char*>(&_impl_.build_),
          reinterpret_cast<char*>(&other->_impl_.build_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidCheckinProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[8]);
}

// ===================================================================

class AndroidEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidEventProto>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timemsec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AndroidEventProto::AndroidEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidEventProto)
}
AndroidEventProto::AndroidEventProto(const AndroidEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidEventProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.timemsec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timemsec_ = from._impl_.timemsec_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidEventProto)
}

inline void AndroidEventProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.timemsec_){int64_t{0}}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidEventProto::~AndroidEventProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.value_.Destroy();
}

void AndroidEventProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.timemsec_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidEventProto.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidEventProto.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 timeMsec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timemsec(&has_bits);
          _impl_.timemsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidEventProto.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidEventProto.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional int64 timeMsec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timemsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidEventProto)
  return target;
}

size_t AndroidEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional int64 timeMsec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timemsec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidEventProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidEventProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidEventProto::GetClassData() const { return &_class_data_; }


void AndroidEventProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidEventProto*>(&to_msg);
  auto& from = static_cast<const AndroidEventProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidEventProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timemsec_ = from._impl_.timemsec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidEventProto::CopyFrom(const AndroidEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidEventProto::IsInitialized() const {
  return true;
}

void AndroidEventProto::InternalSwap(AndroidEventProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.timemsec_, other->_impl_.timemsec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidEventProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[9]);
}

// ===================================================================

class AndroidIntentProto_Extra::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidIntentProto_Extra>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidIntentProto_Extra::AndroidIntentProto_Extra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidIntentProto.Extra)
}
AndroidIntentProto_Extra::AndroidIntentProto_Extra(const AndroidIntentProto_Extra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidIntentProto_Extra* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidIntentProto.Extra)
}

inline void AndroidIntentProto_Extra::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidIntentProto_Extra::~AndroidIntentProto_Extra() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidIntentProto.Extra)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidIntentProto_Extra::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void AndroidIntentProto_Extra::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidIntentProto_Extra::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidIntentProto.Extra)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidIntentProto_Extra::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidIntentProto.Extra.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidIntentProto.Extra.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidIntentProto_Extra::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidIntentProto.Extra)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidIntentProto.Extra.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional string value = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidIntentProto.Extra.value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidIntentProto.Extra)
  return target;
}

size_t AndroidIntentProto_Extra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidIntentProto.Extra)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidIntentProto_Extra::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidIntentProto_Extra::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidIntentProto_Extra::GetClassData() const { return &_class_data_; }


void AndroidIntentProto_Extra::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidIntentProto_Extra*>(&to_msg);
  auto& from = static_cast<const AndroidIntentProto_Extra&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidIntentProto.Extra)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidIntentProto_Extra::CopyFrom(const AndroidIntentProto_Extra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidIntentProto.Extra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidIntentProto_Extra::IsInitialized() const {
  return true;
}

void AndroidIntentProto_Extra::InternalSwap(AndroidIntentProto_Extra* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidIntentProto_Extra::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[10]);
}

// ===================================================================

class AndroidIntentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidIntentProto>()._impl_._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datauri(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_javaclass(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AndroidIntentProto::AndroidIntentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidIntentProto)
}
AndroidIntentProto::AndroidIntentProto(const AndroidIntentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidIntentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_){from._impl_.extra_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.datauri_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.javaclass_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.datauri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datauri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_datauri()) {
    _this->_impl_.datauri_.Set(from._internal_datauri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.javaclass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.javaclass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_javaclass()) {
    _this->_impl_.javaclass_.Set(from._internal_javaclass(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidIntentProto)
}

inline void AndroidIntentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.datauri_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.javaclass_){}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.datauri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datauri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.javaclass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.javaclass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidIntentProto::~AndroidIntentProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidIntentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidIntentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  _impl_.datauri_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.javaclass_.Destroy();
}

void AndroidIntentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidIntentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidIntentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.datauri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.javaclass_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidIntentProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidIntentProto.action");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dataUri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_datauri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidIntentProto.dataUri");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimeType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidIntentProto.mimeType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string javaClass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_javaclass();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidIntentProto.javaClass");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated group Extra = 5 { ... };
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 43)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_extra(), ptr, 43);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<43>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidIntentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidIntentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidIntentProto.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  // optional string dataUri = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_datauri().data(), static_cast<int>(this->_internal_datauri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidIntentProto.dataUri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_datauri(), target);
  }

  // optional string mimeType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidIntentProto.mimeType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mimetype(), target);
  }

  // optional string javaClass = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_javaclass().data(), static_cast<int>(this->_internal_javaclass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidIntentProto.javaClass");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_javaclass(), target);
  }

  // repeated group Extra = 5 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(5, this->_internal_extra(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidIntentProto)
  return target;
}

size_t AndroidIntentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidIntentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Extra = 5 { ... };
  total_size += 2UL * this->_internal_extra_size();
  for (const auto& msg : this->_impl_.extra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string dataUri = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_datauri());
    }

    // optional string mimeType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string javaClass = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_javaclass());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidIntentProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidIntentProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidIntentProto::GetClassData() const { return &_class_data_; }


void AndroidIntentProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidIntentProto*>(&to_msg);
  auto& from = static_cast<const AndroidIntentProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidIntentProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_.MergeFrom(from._impl_.extra_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_datauri(from._internal_datauri());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_javaclass(from._internal_javaclass());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidIntentProto::CopyFrom(const AndroidIntentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidIntentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidIntentProto::IsInitialized() const {
  return true;
}

void AndroidIntentProto::InternalSwap(AndroidIntentProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extra_.InternalSwap(&other->_impl_.extra_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.datauri_, lhs_arena,
      &other->_impl_.datauri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.javaclass_, lhs_arena,
      &other->_impl_.javaclass_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidIntentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[11]);
}

// ===================================================================

class AndroidStatisticProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidStatisticProto>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AndroidStatisticProto::AndroidStatisticProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.gsf.AndroidStatisticProto)
}
AndroidStatisticProto::AndroidStatisticProto(const AndroidStatisticProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidStatisticProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.sum_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sum_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.sum_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.gsf.AndroidStatisticProto)
}

inline void AndroidStatisticProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.sum_){0}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidStatisticProto::~AndroidStatisticProto() {
  // @@protoc_insertion_point(destructor:playapi.proto.gsf.AndroidStatisticProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidStatisticProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void AndroidStatisticProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidStatisticProto::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.gsf.AndroidStatisticProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sum_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.sum_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidStatisticProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.gsf.AndroidStatisticProto.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_sum(&has_bits);
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidStatisticProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.gsf.AndroidStatisticProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.gsf.AndroidStatisticProto.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional float sum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.gsf.AndroidStatisticProto)
  return target;
}

size_t AndroidStatisticProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.gsf.AndroidStatisticProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional float sum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidStatisticProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidStatisticProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidStatisticProto::GetClassData() const { return &_class_data_; }


void AndroidStatisticProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidStatisticProto*>(&to_msg);
  auto& from = static_cast<const AndroidStatisticProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.gsf.AndroidStatisticProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sum_ = from._impl_.sum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidStatisticProto::CopyFrom(const AndroidStatisticProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.gsf.AndroidStatisticProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidStatisticProto::IsInitialized() const {
  return true;
}

void AndroidStatisticProto::InternalSwap(AndroidStatisticProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidStatisticProto, _impl_.sum_)
      + sizeof(AndroidStatisticProto::_impl_.sum_)
      - PROTOBUF_FIELD_OFFSET(AndroidStatisticProto, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidStatisticProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gsf_2eproto_getter, &descriptor_table_gsf_2eproto_once,
      file_level_metadata_gsf_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gsf
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidCheckinRequest*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidCheckinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidCheckinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidCheckinResponse*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidCheckinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidCheckinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::GservicesSetting*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::GservicesSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::GservicesSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::DeviceConfigurationProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::DeviceConfigurationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::DeviceConfigurationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidBuildProto_PackageVersion*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidBuildProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidBuildProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidBuildProto >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidCheckinReasonProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidCheckinReasonProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidCheckinReasonProto >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidCheckinProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidCheckinProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidCheckinProto >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidEventProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidIntentProto_Extra*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidIntentProto_Extra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidIntentProto_Extra >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidIntentProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidIntentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidIntentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::gsf::AndroidStatisticProto*
Arena::CreateMaybeMessage< ::playapi::proto::gsf::AndroidStatisticProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::gsf::AndroidStatisticProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
