// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_ownership.proto

#include "play_ownership.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace ownership {
PROTOBUF_CONSTEXPR OwnershipInfo::OwnershipInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.developerpurchaseinfo_)*/nullptr
  , /*decltype(_impl_.rentalterms_)*/nullptr
  , /*decltype(_impl_.grouplicenseinfo_)*/nullptr
  , /*decltype(_impl_.licenseddocumentinfo_)*/nullptr
  , /*decltype(_impl_.libraryvoucher_)*/nullptr
  , /*decltype(_impl_.bundledocid_)*/nullptr
  , /*decltype(_impl_.initiationtimestampmsec_)*/int64_t{0}
  , /*decltype(_impl_.validuntiltimestampmsec_)*/int64_t{0}
  , /*decltype(_impl_.refundtimeouttimestampmsec_)*/int64_t{0}
  , /*decltype(_impl_.postdeliveryrefundwindowmsec_)*/int64_t{0}
  , /*decltype(_impl_.autorenewing_)*/false
  , /*decltype(_impl_.preordered_)*/false
  , /*decltype(_impl_.hidden_)*/false
  , /*decltype(_impl_.bonus_)*/false
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_.libraryexpirationtimestampmsec_)*/int64_t{0}
  , /*decltype(_impl_.storedvaliduntiltimestampmsec_)*/int64_t{0}} {}
struct OwnershipInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnershipInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnershipInfoDefaultTypeInternal() {}
  union {
    OwnershipInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnershipInfoDefaultTypeInternal _OwnershipInfo_default_instance_;
}  // namespace ownership
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fownership_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fownership_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fownership_2eproto = nullptr;

const uint32_t TableStruct_play_5fownership_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.initiationtimestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.validuntiltimestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.autorenewing_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.refundtimeouttimestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.postdeliveryrefundwindowmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.developerpurchaseinfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.preordered_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.hidden_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.rentalterms_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.grouplicenseinfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.licenseddocumentinfo_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.libraryexpirationtimestampmsec_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.libraryvoucher_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.bundledocid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.bonus_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::ownership::OwnershipInfo, _impl_.storedvaliduntiltimestampmsec_),
  6,
  7,
  10,
  8,
  9,
  0,
  11,
  12,
  1,
  2,
  3,
  14,
  15,
  4,
  5,
  13,
  16,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, -1, sizeof(::playapi::proto::finsky::ownership::OwnershipInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::ownership::_OwnershipInfo_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fownership_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024play_ownership.proto\022\036playapi.proto.fi"
  "nsky.ownership\032\021play_common.proto\"\272\005\n\rOw"
  "nershipInfo\022\037\n\027initiationTimestampMsec\030\001"
  " \001(\003\022\037\n\027validUntilTimestampMsec\030\002 \001(\003\022\024\n"
  "\014autoRenewing\030\003 \001(\010\022\"\n\032refundTimeoutTime"
  "stampMsec\030\004 \001(\003\022$\n\034postDeliveryRefundWin"
  "dowMsec\030\005 \001(\003\022\?\n\025developerPurchaseInfo\030\006"
  " \001(\0132 .playapi.proto.finsky.SignedData\022\022"
  "\n\npreordered\030\007 \001(\010\022\016\n\006hidden\030\010 \001(\010\0226\n\013re"
  "ntalTerms\030\t \001(\0132!.playapi.proto.finsky.R"
  "entalTerms\022@\n\020groupLicenseInfo\030\n \001(\0132&.p"
  "layapi.proto.finsky.GroupLicenseInfo\022H\n\024"
  "licensedDocumentInfo\030\013 \001(\0132*.playapi.pro"
  "to.finsky.LicensedDocumentInfo\022\020\n\010quanti"
  "ty\030\014 \001(\005\022&\n\036libraryExpirationTimestampMs"
  "ec\030\016 \001(\003\022<\n\016libraryVoucher\030\017 \001(\0132$.playa"
  "pi.proto.finsky.LibraryVoucher\0220\n\013bundle"
  "Docid\030\020 \001(\0132\033.playapi.proto.finsky.Docid"
  "\022\r\n\005bonus\030\021 \001(\010\022%\n\035storedValidUntilTimes"
  "tampMsec\030\022 \001(\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fownership_2eproto_deps[1] = {
  &::descriptor_table_play_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fownership_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fownership_2eproto = {
    false, false, 774, descriptor_table_protodef_play_5fownership_2eproto,
    "play_ownership.proto",
    &descriptor_table_play_5fownership_2eproto_once, descriptor_table_play_5fownership_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_play_5fownership_2eproto::offsets,
    file_level_metadata_play_5fownership_2eproto, file_level_enum_descriptors_play_5fownership_2eproto,
    file_level_service_descriptors_play_5fownership_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fownership_2eproto_getter() {
  return &descriptor_table_play_5fownership_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fownership_2eproto(&descriptor_table_play_5fownership_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace ownership {

// ===================================================================

class OwnershipInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnershipInfo>()._impl_._has_bits_);
  static void set_has_initiationtimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_validuntiltimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_autorenewing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_refundtimeouttimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_postdeliveryrefundwindowmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::playapi::proto::finsky::SignedData& developerpurchaseinfo(const OwnershipInfo* msg);
  static void set_has_developerpurchaseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preordered(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::playapi::proto::finsky::RentalTerms& rentalterms(const OwnershipInfo* msg);
  static void set_has_rentalterms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::GroupLicenseInfo& grouplicenseinfo(const OwnershipInfo* msg);
  static void set_has_grouplicenseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::LicensedDocumentInfo& licenseddocumentinfo(const OwnershipInfo* msg);
  static void set_has_licenseddocumentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_libraryexpirationtimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::playapi::proto::finsky::LibraryVoucher& libraryvoucher(const OwnershipInfo* msg);
  static void set_has_libraryvoucher(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::Docid& bundledocid(const OwnershipInfo* msg);
  static void set_has_bundledocid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_storedvaliduntiltimestampmsec(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::playapi::proto::finsky::SignedData&
OwnershipInfo::_Internal::developerpurchaseinfo(const OwnershipInfo* msg) {
  return *msg->_impl_.developerpurchaseinfo_;
}
const ::playapi::proto::finsky::RentalTerms&
OwnershipInfo::_Internal::rentalterms(const OwnershipInfo* msg) {
  return *msg->_impl_.rentalterms_;
}
const ::playapi::proto::finsky::GroupLicenseInfo&
OwnershipInfo::_Internal::grouplicenseinfo(const OwnershipInfo* msg) {
  return *msg->_impl_.grouplicenseinfo_;
}
const ::playapi::proto::finsky::LicensedDocumentInfo&
OwnershipInfo::_Internal::licenseddocumentinfo(const OwnershipInfo* msg) {
  return *msg->_impl_.licenseddocumentinfo_;
}
const ::playapi::proto::finsky::LibraryVoucher&
OwnershipInfo::_Internal::libraryvoucher(const OwnershipInfo* msg) {
  return *msg->_impl_.libraryvoucher_;
}
const ::playapi::proto::finsky::Docid&
OwnershipInfo::_Internal::bundledocid(const OwnershipInfo* msg) {
  return *msg->_impl_.bundledocid_;
}
void OwnershipInfo::clear_developerpurchaseinfo() {
  if (_impl_.developerpurchaseinfo_ != nullptr) _impl_.developerpurchaseinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OwnershipInfo::clear_rentalterms() {
  if (_impl_.rentalterms_ != nullptr) _impl_.rentalterms_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OwnershipInfo::clear_grouplicenseinfo() {
  if (_impl_.grouplicenseinfo_ != nullptr) _impl_.grouplicenseinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void OwnershipInfo::clear_licenseddocumentinfo() {
  if (_impl_.licenseddocumentinfo_ != nullptr) _impl_.licenseddocumentinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void OwnershipInfo::clear_libraryvoucher() {
  if (_impl_.libraryvoucher_ != nullptr) _impl_.libraryvoucher_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void OwnershipInfo::clear_bundledocid() {
  if (_impl_.bundledocid_ != nullptr) _impl_.bundledocid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
OwnershipInfo::OwnershipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.ownership.OwnershipInfo)
}
OwnershipInfo::OwnershipInfo(const OwnershipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnershipInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.developerpurchaseinfo_){nullptr}
    , decltype(_impl_.rentalterms_){nullptr}
    , decltype(_impl_.grouplicenseinfo_){nullptr}
    , decltype(_impl_.licenseddocumentinfo_){nullptr}
    , decltype(_impl_.libraryvoucher_){nullptr}
    , decltype(_impl_.bundledocid_){nullptr}
    , decltype(_impl_.initiationtimestampmsec_){}
    , decltype(_impl_.validuntiltimestampmsec_){}
    , decltype(_impl_.refundtimeouttimestampmsec_){}
    , decltype(_impl_.postdeliveryrefundwindowmsec_){}
    , decltype(_impl_.autorenewing_){}
    , decltype(_impl_.preordered_){}
    , decltype(_impl_.hidden_){}
    , decltype(_impl_.bonus_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.libraryexpirationtimestampmsec_){}
    , decltype(_impl_.storedvaliduntiltimestampmsec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_developerpurchaseinfo()) {
    _this->_impl_.developerpurchaseinfo_ = new ::playapi::proto::finsky::SignedData(*from._impl_.developerpurchaseinfo_);
  }
  if (from._internal_has_rentalterms()) {
    _this->_impl_.rentalterms_ = new ::playapi::proto::finsky::RentalTerms(*from._impl_.rentalterms_);
  }
  if (from._internal_has_grouplicenseinfo()) {
    _this->_impl_.grouplicenseinfo_ = new ::playapi::proto::finsky::GroupLicenseInfo(*from._impl_.grouplicenseinfo_);
  }
  if (from._internal_has_licenseddocumentinfo()) {
    _this->_impl_.licenseddocumentinfo_ = new ::playapi::proto::finsky::LicensedDocumentInfo(*from._impl_.licenseddocumentinfo_);
  }
  if (from._internal_has_libraryvoucher()) {
    _this->_impl_.libraryvoucher_ = new ::playapi::proto::finsky::LibraryVoucher(*from._impl_.libraryvoucher_);
  }
  if (from._internal_has_bundledocid()) {
    _this->_impl_.bundledocid_ = new ::playapi::proto::finsky::Docid(*from._impl_.bundledocid_);
  }
  ::memcpy(&_impl_.initiationtimestampmsec_, &from._impl_.initiationtimestampmsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.storedvaliduntiltimestampmsec_) -
    reinterpret_cast<char*>(&_impl_.initiationtimestampmsec_)) + sizeof(_impl_.storedvaliduntiltimestampmsec_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.ownership.OwnershipInfo)
}

inline void OwnershipInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.developerpurchaseinfo_){nullptr}
    , decltype(_impl_.rentalterms_){nullptr}
    , decltype(_impl_.grouplicenseinfo_){nullptr}
    , decltype(_impl_.licenseddocumentinfo_){nullptr}
    , decltype(_impl_.libraryvoucher_){nullptr}
    , decltype(_impl_.bundledocid_){nullptr}
    , decltype(_impl_.initiationtimestampmsec_){int64_t{0}}
    , decltype(_impl_.validuntiltimestampmsec_){int64_t{0}}
    , decltype(_impl_.refundtimeouttimestampmsec_){int64_t{0}}
    , decltype(_impl_.postdeliveryrefundwindowmsec_){int64_t{0}}
    , decltype(_impl_.autorenewing_){false}
    , decltype(_impl_.preordered_){false}
    , decltype(_impl_.hidden_){false}
    , decltype(_impl_.bonus_){false}
    , decltype(_impl_.quantity_){0}
    , decltype(_impl_.libraryexpirationtimestampmsec_){int64_t{0}}
    , decltype(_impl_.storedvaliduntiltimestampmsec_){int64_t{0}}
  };
}

OwnershipInfo::~OwnershipInfo() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.ownership.OwnershipInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnershipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.developerpurchaseinfo_;
  if (this != internal_default_instance()) delete _impl_.rentalterms_;
  if (this != internal_default_instance()) delete _impl_.grouplicenseinfo_;
  if (this != internal_default_instance()) delete _impl_.licenseddocumentinfo_;
  if (this != internal_default_instance()) delete _impl_.libraryvoucher_;
  if (this != internal_default_instance()) delete _impl_.bundledocid_;
}

void OwnershipInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnershipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.ownership.OwnershipInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.developerpurchaseinfo_ != nullptr);
      _impl_.developerpurchaseinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rentalterms_ != nullptr);
      _impl_.rentalterms_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.grouplicenseinfo_ != nullptr);
      _impl_.grouplicenseinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.licenseddocumentinfo_ != nullptr);
      _impl_.licenseddocumentinfo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.libraryvoucher_ != nullptr);
      _impl_.libraryvoucher_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.bundledocid_ != nullptr);
      _impl_.bundledocid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.initiationtimestampmsec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.validuntiltimestampmsec_) -
        reinterpret_cast<char*>(&_impl_.initiationtimestampmsec_)) + sizeof(_impl_.validuntiltimestampmsec_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.refundtimeouttimestampmsec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.libraryexpirationtimestampmsec_) -
        reinterpret_cast<char*>(&_impl_.refundtimeouttimestampmsec_)) + sizeof(_impl_.libraryexpirationtimestampmsec_));
  }
  _impl_.storedvaliduntiltimestampmsec_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnershipInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 initiationTimestampMsec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_initiationtimestampmsec(&has_bits);
          _impl_.initiationtimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 validUntilTimestampMsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_validuntiltimestampmsec(&has_bits);
          _impl_.validuntiltimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool autoRenewing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_autorenewing(&has_bits);
          _impl_.autorenewing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 refundTimeoutTimestampMsec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_refundtimeouttimestampmsec(&has_bits);
          _impl_.refundtimeouttimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 postDeliveryRefundWindowMsec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_postdeliveryrefundwindowmsec(&has_bits);
          _impl_.postdeliveryrefundwindowmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.SignedData developerPurchaseInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_developerpurchaseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preordered = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_preordered(&has_bits);
          _impl_.preordered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_hidden(&has_bits);
          _impl_.hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.RentalTerms rentalTerms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rentalterms(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.GroupLicenseInfo groupLicenseInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouplicenseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.LicensedDocumentInfo licensedDocumentInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_licenseddocumentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 libraryExpirationTimestampMsec = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_libraryexpirationtimestampmsec(&has_bits);
          _impl_.libraryexpirationtimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.LibraryVoucher libraryVoucher = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_libraryvoucher(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Docid bundleDocid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundledocid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bonus = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_bonus(&has_bits);
          _impl_.bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 storedValidUntilTimestampMsec = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_storedvaliduntiltimestampmsec(&has_bits);
          _impl_.storedvaliduntiltimestampmsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnershipInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.ownership.OwnershipInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 initiationTimestampMsec = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_initiationtimestampmsec(), target);
  }

  // optional int64 validUntilTimestampMsec = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_validuntiltimestampmsec(), target);
  }

  // optional bool autoRenewing = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_autorenewing(), target);
  }

  // optional int64 refundTimeoutTimestampMsec = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_refundtimeouttimestampmsec(), target);
  }

  // optional int64 postDeliveryRefundWindowMsec = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_postdeliveryrefundwindowmsec(), target);
  }

  // optional .playapi.proto.finsky.SignedData developerPurchaseInfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::developerpurchaseinfo(this),
        _Internal::developerpurchaseinfo(this).GetCachedSize(), target, stream);
  }

  // optional bool preordered = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_preordered(), target);
  }

  // optional bool hidden = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_hidden(), target);
  }

  // optional .playapi.proto.finsky.RentalTerms rentalTerms = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::rentalterms(this),
        _Internal::rentalterms(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.GroupLicenseInfo groupLicenseInfo = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::grouplicenseinfo(this),
        _Internal::grouplicenseinfo(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.LicensedDocumentInfo licensedDocumentInfo = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::licenseddocumentinfo(this),
        _Internal::licenseddocumentinfo(this).GetCachedSize(), target, stream);
  }

  // optional int32 quantity = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_quantity(), target);
  }

  // optional int64 libraryExpirationTimestampMsec = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_libraryexpirationtimestampmsec(), target);
  }

  // optional .playapi.proto.finsky.LibraryVoucher libraryVoucher = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::libraryvoucher(this),
        _Internal::libraryvoucher(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.Docid bundleDocid = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::bundledocid(this),
        _Internal::bundledocid(this).GetCachedSize(), target, stream);
  }

  // optional bool bonus = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_bonus(), target);
  }

  // optional int64 storedValidUntilTimestampMsec = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_storedvaliduntiltimestampmsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.ownership.OwnershipInfo)
  return target;
}

size_t OwnershipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.ownership.OwnershipInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .playapi.proto.finsky.SignedData developerPurchaseInfo = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.developerpurchaseinfo_);
    }

    // optional .playapi.proto.finsky.RentalTerms rentalTerms = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rentalterms_);
    }

    // optional .playapi.proto.finsky.GroupLicenseInfo groupLicenseInfo = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouplicenseinfo_);
    }

    // optional .playapi.proto.finsky.LicensedDocumentInfo licensedDocumentInfo = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.licenseddocumentinfo_);
    }

    // optional .playapi.proto.finsky.LibraryVoucher libraryVoucher = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.libraryvoucher_);
    }

    // optional .playapi.proto.finsky.Docid bundleDocid = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bundledocid_);
    }

    // optional int64 initiationTimestampMsec = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_initiationtimestampmsec());
    }

    // optional int64 validUntilTimestampMsec = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_validuntiltimestampmsec());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 refundTimeoutTimestampMsec = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_refundtimeouttimestampmsec());
    }

    // optional int64 postDeliveryRefundWindowMsec = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_postdeliveryrefundwindowmsec());
    }

    // optional bool autoRenewing = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool preordered = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool hidden = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool bonus = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int32 quantity = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
    }

    // optional int64 libraryExpirationTimestampMsec = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_libraryexpirationtimestampmsec());
    }

  }
  // optional int64 storedValidUntilTimestampMsec = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_storedvaliduntiltimestampmsec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnershipInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnershipInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnershipInfo::GetClassData() const { return &_class_data_; }


void OwnershipInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnershipInfo*>(&to_msg);
  auto& from = static_cast<const OwnershipInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.ownership.OwnershipInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_developerpurchaseinfo()->::playapi::proto::finsky::SignedData::MergeFrom(
          from._internal_developerpurchaseinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rentalterms()->::playapi::proto::finsky::RentalTerms::MergeFrom(
          from._internal_rentalterms());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_grouplicenseinfo()->::playapi::proto::finsky::GroupLicenseInfo::MergeFrom(
          from._internal_grouplicenseinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_licenseddocumentinfo()->::playapi::proto::finsky::LicensedDocumentInfo::MergeFrom(
          from._internal_licenseddocumentinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_libraryvoucher()->::playapi::proto::finsky::LibraryVoucher::MergeFrom(
          from._internal_libraryvoucher());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_bundledocid()->::playapi::proto::finsky::Docid::MergeFrom(
          from._internal_bundledocid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.initiationtimestampmsec_ = from._impl_.initiationtimestampmsec_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.validuntiltimestampmsec_ = from._impl_.validuntiltimestampmsec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.refundtimeouttimestampmsec_ = from._impl_.refundtimeouttimestampmsec_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.postdeliveryrefundwindowmsec_ = from._impl_.postdeliveryrefundwindowmsec_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.autorenewing_ = from._impl_.autorenewing_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.preordered_ = from._impl_.preordered_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bonus_ = from._impl_.bonus_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.libraryexpirationtimestampmsec_ = from._impl_.libraryexpirationtimestampmsec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_storedvaliduntiltimestampmsec(from._internal_storedvaliduntiltimestampmsec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnershipInfo::CopyFrom(const OwnershipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.ownership.OwnershipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnershipInfo::IsInitialized() const {
  return true;
}

void OwnershipInfo::InternalSwap(OwnershipInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnershipInfo, _impl_.storedvaliduntiltimestampmsec_)
      + sizeof(OwnershipInfo::_impl_.storedvaliduntiltimestampmsec_)
      - PROTOBUF_FIELD_OFFSET(OwnershipInfo, _impl_.developerpurchaseinfo_)>(
          reinterpret_cast<char*>(&_impl_.developerpurchaseinfo_),
          reinterpret_cast<char*>(&other->_impl_.developerpurchaseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnershipInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fownership_2eproto_getter, &descriptor_table_play_5fownership_2eproto_once,
      file_level_metadata_play_5fownership_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ownership
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::ownership::OwnershipInfo*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::ownership::OwnershipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::ownership::OwnershipInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
