// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_link.proto

#include "play_link.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace link {
PROTOBUF_CONSTEXPR Link::Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resolvedlink_)*/nullptr
  , /*decltype(_impl_.uribackend_)*/0} {}
struct LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkDefaultTypeInternal _Link_default_instance_;
PROTOBUF_CONSTEXPR OverflowLink::OverflowLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.link_)*/nullptr} {}
struct OverflowLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverflowLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverflowLinkDefaultTypeInternal() {}
  union {
    OverflowLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverflowLinkDefaultTypeInternal _OverflowLink_default_instance_;
PROTOBUF_CONSTEXPR DirectPurchase::DirectPurchase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.purchasedocid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentdocid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offertype_)*/0} {}
struct DirectPurchaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectPurchaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectPurchaseDefaultTypeInternal() {}
  union {
    DirectPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectPurchaseDefaultTypeInternal _DirectPurchase_default_instance_;
PROTOBUF_CONSTEXPR HelpCenter::HelpCenter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contextid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HelpCenterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelpCenterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelpCenterDefaultTypeInternal() {}
  union {
    HelpCenter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelpCenterDefaultTypeInternal _HelpCenter_default_instance_;
PROTOBUF_CONSTEXPR RedeemGiftCard::RedeemGiftCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prefillcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partnerpayload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RedeemGiftCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedeemGiftCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedeemGiftCardDefaultTypeInternal() {}
  union {
    RedeemGiftCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedeemGiftCardDefaultTypeInternal _RedeemGiftCard_default_instance_;
PROTOBUF_CONSTEXPR ResolvedLink::ResolvedLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detailsurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.browseurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.searchurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.homeurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wishlisturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.myaccounturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gifturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpurchase_)*/nullptr
  , /*decltype(_impl_.redeemgiftcard_)*/nullptr
  , /*decltype(_impl_.docid_)*/nullptr
  , /*decltype(_impl_.helpcenter_)*/nullptr
  , /*decltype(_impl_.backend_)*/0} {}
struct ResolvedLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedLinkDefaultTypeInternal() {}
  union {
    ResolvedLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedLinkDefaultTypeInternal _ResolvedLink_default_instance_;
}  // namespace link
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5flink_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5flink_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5flink_2eproto = nullptr;

const uint32_t TableStruct_play_5flink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::Link, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::Link, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::Link, _impl_.resolvedlink_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::Link, _impl_.uribackend_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::OverflowLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::OverflowLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::OverflowLink, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::OverflowLink, _impl_.link_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::DirectPurchase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::DirectPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::DirectPurchase, _impl_.detailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::DirectPurchase, _impl_.purchasedocid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::DirectPurchase, _impl_.parentdocid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::DirectPurchase, _impl_.offertype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::HelpCenter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::HelpCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::HelpCenter, _impl_.contextid_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::RedeemGiftCard, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::RedeemGiftCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::RedeemGiftCard, _impl_.prefillcode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::RedeemGiftCard, _impl_.partnerpayload_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.detailsurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.browseurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.searchurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.directpurchase_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.homeurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.redeemgiftcard_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.docid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.wishlisturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.backend_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.myaccounturl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.helpcenter_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::link::ResolvedLink, _impl_.gifturl_),
  0,
  1,
  2,
  9,
  3,
  10,
  4,
  11,
  5,
  13,
  6,
  7,
  12,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::playapi::proto::finsky::link::Link)},
  { 12, 20, -1, sizeof(::playapi::proto::finsky::link::OverflowLink)},
  { 22, 32, -1, sizeof(::playapi::proto::finsky::link::DirectPurchase)},
  { 36, 43, -1, sizeof(::playapi::proto::finsky::link::HelpCenter)},
  { 44, 52, -1, sizeof(::playapi::proto::finsky::link::RedeemGiftCard)},
  { 54, 74, -1, sizeof(::playapi::proto::finsky::link::ResolvedLink)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::link::_Link_default_instance_._instance,
  &::playapi::proto::finsky::link::_OverflowLink_default_instance_._instance,
  &::playapi::proto::finsky::link::_DirectPurchase_default_instance_._instance,
  &::playapi::proto::finsky::link::_HelpCenter_default_instance_._instance,
  &::playapi::proto::finsky::link::_RedeemGiftCard_default_instance_._instance,
  &::playapi::proto::finsky::link::_ResolvedLink_default_instance_._instance,
};

const char descriptor_table_protodef_play_5flink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017play_link.proto\022\031playapi.proto.finsky."
  "link\032\021play_common.proto\"f\n\004Link\022\013\n\003uri\030\001"
  " \001(\t\022=\n\014resolvedLink\030\002 \001(\0132\'.playapi.pro"
  "to.finsky.link.ResolvedLink\022\022\n\nuriBacken"
  "d\030\003 \001(\005\"L\n\014OverflowLink\022\r\n\005title\030\001 \001(\t\022-"
  "\n\004link\030\002 \001(\0132\037.playapi.proto.finsky.link"
  ".Link\"c\n\016DirectPurchase\022\022\n\ndetailsUrl\030\001 "
  "\001(\t\022\025\n\rpurchaseDocid\030\002 \001(\t\022\023\n\013parentDoci"
  "d\030\003 \001(\t\022\021\n\tofferType\030\004 \001(\005\"\037\n\nHelpCenter"
  "\022\021\n\tcontextId\030\001 \001(\t\"=\n\016RedeemGiftCard\022\023\n"
  "\013prefillCode\030\001 \001(\t\022\026\n\016partnerPayload\030\002 \001"
  "(\t\"\274\003\n\014ResolvedLink\022\022\n\ndetailsUrl\030\001 \001(\t\022"
  "\021\n\tbrowseUrl\030\002 \001(\t\022\021\n\tsearchUrl\030\003 \001(\t\022A\n"
  "\016directPurchase\030\004 \001(\0132).playapi.proto.fi"
  "nsky.link.DirectPurchase\022\017\n\007homeUrl\030\005 \001("
  "\t\022A\n\016redeemGiftCard\030\006 \001(\0132).playapi.prot"
  "o.finsky.link.RedeemGiftCard\022\030\n\020serverLo"
  "gsCookie\030\007 \001(\014\022*\n\005docid\030\010 \001(\0132\033.playapi."
  "proto.finsky.Docid\022\023\n\013wishlistUrl\030\t \001(\t\022"
  "\017\n\007backend\030\n \001(\005\022\r\n\005query\030\013 \001(\t\022\024\n\014myAcc"
  "ountUrl\030\014 \001(\t\0229\n\nhelpCenter\030\r \001(\0132%.play"
  "api.proto.finsky.link.HelpCenter\022\017\n\007gift"
  "Url\030\016 \001(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5flink_2eproto_deps[1] = {
  &::descriptor_table_play_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5flink_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5flink_2eproto = {
    false, false, 889, descriptor_table_protodef_play_5flink_2eproto,
    "play_link.proto",
    &descriptor_table_play_5flink_2eproto_once, descriptor_table_play_5flink_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_play_5flink_2eproto::offsets,
    file_level_metadata_play_5flink_2eproto, file_level_enum_descriptors_play_5flink_2eproto,
    file_level_service_descriptors_play_5flink_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5flink_2eproto_getter() {
  return &descriptor_table_play_5flink_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5flink_2eproto(&descriptor_table_play_5flink_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace link {

// ===================================================================

class Link::_Internal {
 public:
  using HasBits = decltype(std::declval<Link>()._impl_._has_bits_);
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::link::ResolvedLink& resolvedlink(const Link* msg);
  static void set_has_resolvedlink(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uribackend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::link::ResolvedLink&
Link::_Internal::resolvedlink(const Link* msg) {
  return *msg->_impl_.resolvedlink_;
}
Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.link.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.resolvedlink_){nullptr}
    , decltype(_impl_.uribackend_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resolvedlink()) {
    _this->_impl_.resolvedlink_ = new ::playapi::proto::finsky::link::ResolvedLink(*from._impl_.resolvedlink_);
  }
  _this->_impl_.uribackend_ = from._impl_.uribackend_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.link.Link)
}

inline void Link::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.resolvedlink_){nullptr}
    , decltype(_impl_.uribackend_){0}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.link.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resolvedlink_;
}

void Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.link.Link)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.resolvedlink_ != nullptr);
      _impl_.resolvedlink_->Clear();
    }
  }
  _impl_.uribackend_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.Link.uri");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.ResolvedLink resolvedLink = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolvedlink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 uriBackend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uribackend(&has_bits);
          _impl_.uribackend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Link::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.link.Link)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.Link.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // optional .playapi.proto.finsky.link.ResolvedLink resolvedLink = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resolvedlink(this),
        _Internal::resolvedlink(this).GetCachedSize(), target, stream);
  }

  // optional int32 uriBackend = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_uribackend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.link.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.link.Link)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional .playapi.proto.finsky.link.ResolvedLink resolvedLink = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resolvedlink_);
    }

    // optional int32 uriBackend = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uribackend());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }


void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Link*>(&to_msg);
  auto& from = static_cast<const Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.link.Link)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_resolvedlink()->::playapi::proto::finsky::link::ResolvedLink::MergeFrom(
          from._internal_resolvedlink());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uribackend_ = from._impl_.uribackend_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.link.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Link, _impl_.uribackend_)
      + sizeof(Link::_impl_.uribackend_)
      - PROTOBUF_FIELD_OFFSET(Link, _impl_.resolvedlink_)>(
          reinterpret_cast<char*>(&_impl_.resolvedlink_),
          reinterpret_cast<char*>(&other->_impl_.resolvedlink_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5flink_2eproto_getter, &descriptor_table_play_5flink_2eproto_once,
      file_level_metadata_play_5flink_2eproto[0]);
}

// ===================================================================

class OverflowLink::_Internal {
 public:
  using HasBits = decltype(std::declval<OverflowLink>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::link::Link& link(const OverflowLink* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::playapi::proto::finsky::link::Link&
OverflowLink::_Internal::link(const OverflowLink* msg) {
  return *msg->_impl_.link_;
}
OverflowLink::OverflowLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.link.OverflowLink)
}
OverflowLink::OverflowLink(const OverflowLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverflowLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.link_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_link()) {
    _this->_impl_.link_ = new ::playapi::proto::finsky::link::Link(*from._impl_.link_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.link.OverflowLink)
}

inline void OverflowLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.link_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverflowLink::~OverflowLink() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.link.OverflowLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverflowLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.link_;
}

void OverflowLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverflowLink::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.link.OverflowLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.link_ != nullptr);
      _impl_.link_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverflowLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.OverflowLink.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverflowLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.link.OverflowLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.OverflowLink.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional .playapi.proto.finsky.link.Link link = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.link.OverflowLink)
  return target;
}

size_t OverflowLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.link.OverflowLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional .playapi.proto.finsky.link.Link link = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverflowLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverflowLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverflowLink::GetClassData() const { return &_class_data_; }


void OverflowLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverflowLink*>(&to_msg);
  auto& from = static_cast<const OverflowLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.link.OverflowLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_link()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_link());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverflowLink::CopyFrom(const OverflowLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.link.OverflowLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverflowLink::IsInitialized() const {
  return true;
}

void OverflowLink::InternalSwap(OverflowLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  swap(_impl_.link_, other->_impl_.link_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverflowLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5flink_2eproto_getter, &descriptor_table_play_5flink_2eproto_once,
      file_level_metadata_play_5flink_2eproto[1]);
}

// ===================================================================

class DirectPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectPurchase>()._impl_._has_bits_);
  static void set_has_detailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_purchasedocid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parentdocid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DirectPurchase::DirectPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.link.DirectPurchase)
}
DirectPurchase::DirectPurchase(const DirectPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectPurchase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.purchasedocid_){}
    , decltype(_impl_.parentdocid_){}
    , decltype(_impl_.offertype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailsurl()) {
    _this->_impl_.detailsurl_.Set(from._internal_detailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.purchasedocid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasedocid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_purchasedocid()) {
    _this->_impl_.purchasedocid_.Set(from._internal_purchasedocid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentdocid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdocid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentdocid()) {
    _this->_impl_.parentdocid_.Set(from._internal_parentdocid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.offertype_ = from._impl_.offertype_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.link.DirectPurchase)
}

inline void DirectPurchase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.purchasedocid_){}
    , decltype(_impl_.parentdocid_){}
    , decltype(_impl_.offertype_){0}
  };
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.purchasedocid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.purchasedocid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentdocid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdocid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirectPurchase::~DirectPurchase() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.link.DirectPurchase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detailsurl_.Destroy();
  _impl_.purchasedocid_.Destroy();
  _impl_.parentdocid_.Destroy();
}

void DirectPurchase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.link.DirectPurchase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.detailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.purchasedocid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.parentdocid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.offertype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectPurchase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string detailsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_detailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.DirectPurchase.detailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string purchaseDocid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_purchasedocid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.DirectPurchase.purchaseDocid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string parentDocid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parentdocid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.DirectPurchase.parentDocid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 offerType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_offertype(&has_bits);
          _impl_.offertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectPurchase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.link.DirectPurchase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string detailsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailsurl().data(), static_cast<int>(this->_internal_detailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.DirectPurchase.detailsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detailsurl(), target);
  }

  // optional string purchaseDocid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purchasedocid().data(), static_cast<int>(this->_internal_purchasedocid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.DirectPurchase.purchaseDocid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_purchasedocid(), target);
  }

  // optional string parentDocid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentdocid().data(), static_cast<int>(this->_internal_parentdocid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.DirectPurchase.parentDocid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parentdocid(), target);
  }

  // optional int32 offerType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_offertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.link.DirectPurchase)
  return target;
}

size_t DirectPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.link.DirectPurchase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string detailsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailsurl());
    }

    // optional string purchaseDocid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purchasedocid());
    }

    // optional string parentDocid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentdocid());
    }

    // optional int32 offerType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offertype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectPurchase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectPurchase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectPurchase::GetClassData() const { return &_class_data_; }


void DirectPurchase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectPurchase*>(&to_msg);
  auto& from = static_cast<const DirectPurchase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.link.DirectPurchase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_detailsurl(from._internal_detailsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_purchasedocid(from._internal_purchasedocid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_parentdocid(from._internal_parentdocid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.offertype_ = from._impl_.offertype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectPurchase::CopyFrom(const DirectPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.link.DirectPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectPurchase::IsInitialized() const {
  return true;
}

void DirectPurchase::InternalSwap(DirectPurchase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailsurl_, lhs_arena,
      &other->_impl_.detailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.purchasedocid_, lhs_arena,
      &other->_impl_.purchasedocid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentdocid_, lhs_arena,
      &other->_impl_.parentdocid_, rhs_arena
  );
  swap(_impl_.offertype_, other->_impl_.offertype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectPurchase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5flink_2eproto_getter, &descriptor_table_play_5flink_2eproto_once,
      file_level_metadata_play_5flink_2eproto[2]);
}

// ===================================================================

class HelpCenter::_Internal {
 public:
  using HasBits = decltype(std::declval<HelpCenter>()._impl_._has_bits_);
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HelpCenter::HelpCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.link.HelpCenter)
}
HelpCenter::HelpCenter(const HelpCenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelpCenter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contextid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contextid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contextid()) {
    _this->_impl_.contextid_.Set(from._internal_contextid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.link.HelpCenter)
}

inline void HelpCenter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextid_){}
  };
  _impl_.contextid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contextid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelpCenter::~HelpCenter() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.link.HelpCenter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelpCenter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contextid_.Destroy();
}

void HelpCenter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelpCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.link.HelpCenter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.contextid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelpCenter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string contextId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contextid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.HelpCenter.contextId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelpCenter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.link.HelpCenter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string contextId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contextid().data(), static_cast<int>(this->_internal_contextid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.HelpCenter.contextId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contextid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.link.HelpCenter)
  return target;
}

size_t HelpCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.link.HelpCenter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string contextId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contextid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelpCenter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelpCenter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelpCenter::GetClassData() const { return &_class_data_; }


void HelpCenter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelpCenter*>(&to_msg);
  auto& from = static_cast<const HelpCenter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.link.HelpCenter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contextid()) {
    _this->_internal_set_contextid(from._internal_contextid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelpCenter::CopyFrom(const HelpCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.link.HelpCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpCenter::IsInitialized() const {
  return true;
}

void HelpCenter::InternalSwap(HelpCenter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contextid_, lhs_arena,
      &other->_impl_.contextid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelpCenter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5flink_2eproto_getter, &descriptor_table_play_5flink_2eproto_once,
      file_level_metadata_play_5flink_2eproto[3]);
}

// ===================================================================

class RedeemGiftCard::_Internal {
 public:
  using HasBits = decltype(std::declval<RedeemGiftCard>()._impl_._has_bits_);
  static void set_has_prefillcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_partnerpayload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RedeemGiftCard::RedeemGiftCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.link.RedeemGiftCard)
}
RedeemGiftCard::RedeemGiftCard(const RedeemGiftCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedeemGiftCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefillcode_){}
    , decltype(_impl_.partnerpayload_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefillcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefillcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefillcode()) {
    _this->_impl_.prefillcode_.Set(from._internal_prefillcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partnerpayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partnerpayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partnerpayload()) {
    _this->_impl_.partnerpayload_.Set(from._internal_partnerpayload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.link.RedeemGiftCard)
}

inline void RedeemGiftCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefillcode_){}
    , decltype(_impl_.partnerpayload_){}
  };
  _impl_.prefillcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefillcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partnerpayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partnerpayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedeemGiftCard::~RedeemGiftCard() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.link.RedeemGiftCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedeemGiftCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefillcode_.Destroy();
  _impl_.partnerpayload_.Destroy();
}

void RedeemGiftCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedeemGiftCard::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.link.RedeemGiftCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.prefillcode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.partnerpayload_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedeemGiftCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string prefillCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefillcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.RedeemGiftCard.prefillCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string partnerPayload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partnerpayload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.RedeemGiftCard.partnerPayload");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RedeemGiftCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.link.RedeemGiftCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string prefillCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefillcode().data(), static_cast<int>(this->_internal_prefillcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.RedeemGiftCard.prefillCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefillcode(), target);
  }

  // optional string partnerPayload = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_partnerpayload().data(), static_cast<int>(this->_internal_partnerpayload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.RedeemGiftCard.partnerPayload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partnerpayload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.link.RedeemGiftCard)
  return target;
}

size_t RedeemGiftCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.link.RedeemGiftCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string prefillCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefillcode());
    }

    // optional string partnerPayload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_partnerpayload());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedeemGiftCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedeemGiftCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedeemGiftCard::GetClassData() const { return &_class_data_; }


void RedeemGiftCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedeemGiftCard*>(&to_msg);
  auto& from = static_cast<const RedeemGiftCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.link.RedeemGiftCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prefillcode(from._internal_prefillcode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_partnerpayload(from._internal_partnerpayload());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedeemGiftCard::CopyFrom(const RedeemGiftCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.link.RedeemGiftCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedeemGiftCard::IsInitialized() const {
  return true;
}

void RedeemGiftCard::InternalSwap(RedeemGiftCard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefillcode_, lhs_arena,
      &other->_impl_.prefillcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partnerpayload_, lhs_arena,
      &other->_impl_.partnerpayload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RedeemGiftCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5flink_2eproto_getter, &descriptor_table_play_5flink_2eproto_once,
      file_level_metadata_play_5flink_2eproto[4]);
}

// ===================================================================

class ResolvedLink::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedLink>()._impl_._has_bits_);
  static void set_has_detailsurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_browseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_searchurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::link::DirectPurchase& directpurchase(const ResolvedLink* msg);
  static void set_has_directpurchase(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_homeurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::link::RedeemGiftCard& redeemgiftcard(const ResolvedLink* msg);
  static void set_has_redeemgiftcard(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::Docid& docid(const ResolvedLink* msg);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wishlisturl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_myaccounturl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::link::HelpCenter& helpcenter(const ResolvedLink* msg);
  static void set_has_helpcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gifturl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::playapi::proto::finsky::link::DirectPurchase&
ResolvedLink::_Internal::directpurchase(const ResolvedLink* msg) {
  return *msg->_impl_.directpurchase_;
}
const ::playapi::proto::finsky::link::RedeemGiftCard&
ResolvedLink::_Internal::redeemgiftcard(const ResolvedLink* msg) {
  return *msg->_impl_.redeemgiftcard_;
}
const ::playapi::proto::finsky::Docid&
ResolvedLink::_Internal::docid(const ResolvedLink* msg) {
  return *msg->_impl_.docid_;
}
const ::playapi::proto::finsky::link::HelpCenter&
ResolvedLink::_Internal::helpcenter(const ResolvedLink* msg) {
  return *msg->_impl_.helpcenter_;
}
void ResolvedLink::clear_docid() {
  if (_impl_.docid_ != nullptr) _impl_.docid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
ResolvedLink::ResolvedLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.link.ResolvedLink)
}
ResolvedLink::ResolvedLink(const ResolvedLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.searchurl_){}
    , decltype(_impl_.homeurl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.wishlisturl_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.myaccounturl_){}
    , decltype(_impl_.gifturl_){}
    , decltype(_impl_.directpurchase_){nullptr}
    , decltype(_impl_.redeemgiftcard_){nullptr}
    , decltype(_impl_.docid_){nullptr}
    , decltype(_impl_.helpcenter_){nullptr}
    , decltype(_impl_.backend_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailsurl()) {
    _this->_impl_.detailsurl_.Set(from._internal_detailsurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_browseurl()) {
    _this->_impl_.browseurl_.Set(from._internal_browseurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.searchurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.searchurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_searchurl()) {
    _this->_impl_.searchurl_.Set(from._internal_searchurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.homeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.homeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_homeurl()) {
    _this->_impl_.homeurl_.Set(from._internal_homeurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wishlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wishlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wishlisturl()) {
    _this->_impl_.wishlisturl_.Set(from._internal_wishlisturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_query()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.myaccounturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.myaccounturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_myaccounturl()) {
    _this->_impl_.myaccounturl_.Set(from._internal_myaccounturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gifturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gifturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gifturl()) {
    _this->_impl_.gifturl_.Set(from._internal_gifturl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_directpurchase()) {
    _this->_impl_.directpurchase_ = new ::playapi::proto::finsky::link::DirectPurchase(*from._impl_.directpurchase_);
  }
  if (from._internal_has_redeemgiftcard()) {
    _this->_impl_.redeemgiftcard_ = new ::playapi::proto::finsky::link::RedeemGiftCard(*from._impl_.redeemgiftcard_);
  }
  if (from._internal_has_docid()) {
    _this->_impl_.docid_ = new ::playapi::proto::finsky::Docid(*from._impl_.docid_);
  }
  if (from._internal_has_helpcenter()) {
    _this->_impl_.helpcenter_ = new ::playapi::proto::finsky::link::HelpCenter(*from._impl_.helpcenter_);
  }
  _this->_impl_.backend_ = from._impl_.backend_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.link.ResolvedLink)
}

inline void ResolvedLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsurl_){}
    , decltype(_impl_.browseurl_){}
    , decltype(_impl_.searchurl_){}
    , decltype(_impl_.homeurl_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.wishlisturl_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.myaccounturl_){}
    , decltype(_impl_.gifturl_){}
    , decltype(_impl_.directpurchase_){nullptr}
    , decltype(_impl_.redeemgiftcard_){nullptr}
    , decltype(_impl_.docid_){nullptr}
    , decltype(_impl_.helpcenter_){nullptr}
    , decltype(_impl_.backend_){0}
  };
  _impl_.detailsurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailsurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.browseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.searchurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.searchurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.homeurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.homeurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wishlisturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wishlisturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.myaccounturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.myaccounturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gifturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gifturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedLink::~ResolvedLink() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.link.ResolvedLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detailsurl_.Destroy();
  _impl_.browseurl_.Destroy();
  _impl_.searchurl_.Destroy();
  _impl_.homeurl_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  _impl_.wishlisturl_.Destroy();
  _impl_.query_.Destroy();
  _impl_.myaccounturl_.Destroy();
  _impl_.gifturl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.directpurchase_;
  if (this != internal_default_instance()) delete _impl_.redeemgiftcard_;
  if (this != internal_default_instance()) delete _impl_.docid_;
  if (this != internal_default_instance()) delete _impl_.helpcenter_;
}

void ResolvedLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedLink::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.link.ResolvedLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.detailsurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.browseurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.searchurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.homeurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.wishlisturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.myaccounturl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.gifturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.directpurchase_ != nullptr);
      _impl_.directpurchase_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.redeemgiftcard_ != nullptr);
      _impl_.redeemgiftcard_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.docid_ != nullptr);
      _impl_.docid_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.helpcenter_ != nullptr);
      _impl_.helpcenter_->Clear();
    }
  }
  _impl_.backend_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string detailsUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_detailsurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.detailsUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string browseUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_browseurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.browseUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string searchUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_searchurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.searchUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.DirectPurchase directPurchase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_directpurchase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string homeUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_homeurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.homeUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.RedeemGiftCard redeemGiftCard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_redeemgiftcard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Docid docid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_docid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string wishlistUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_wishlisturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.wishlistUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 backend = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_backend(&has_bits);
          _impl_.backend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string query = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.query");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string myAccountUrl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_myaccounturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.myAccountUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.HelpCenter helpCenter = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_helpcenter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string giftUrl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_gifturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.link.ResolvedLink.giftUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.link.ResolvedLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string detailsUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailsurl().data(), static_cast<int>(this->_internal_detailsurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.detailsUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detailsurl(), target);
  }

  // optional string browseUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_browseurl().data(), static_cast<int>(this->_internal_browseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.browseUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_browseurl(), target);
  }

  // optional string searchUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_searchurl().data(), static_cast<int>(this->_internal_searchurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.searchUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_searchurl(), target);
  }

  // optional .playapi.proto.finsky.link.DirectPurchase directPurchase = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::directpurchase(this),
        _Internal::directpurchase(this).GetCachedSize(), target, stream);
  }

  // optional string homeUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_homeurl().data(), static_cast<int>(this->_internal_homeurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.homeUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_homeurl(), target);
  }

  // optional .playapi.proto.finsky.link.RedeemGiftCard redeemGiftCard = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::redeemgiftcard(this),
        _Internal::redeemgiftcard(this).GetCachedSize(), target, stream);
  }

  // optional bytes serverLogsCookie = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_serverlogscookie(), target);
  }

  // optional .playapi.proto.finsky.Docid docid = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::docid(this),
        _Internal::docid(this).GetCachedSize(), target, stream);
  }

  // optional string wishlistUrl = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wishlisturl().data(), static_cast<int>(this->_internal_wishlisturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.wishlistUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_wishlisturl(), target);
  }

  // optional int32 backend = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_backend(), target);
  }

  // optional string query = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.query");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_query(), target);
  }

  // optional string myAccountUrl = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_myaccounturl().data(), static_cast<int>(this->_internal_myaccounturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.myAccountUrl");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_myaccounturl(), target);
  }

  // optional .playapi.proto.finsky.link.HelpCenter helpCenter = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::helpcenter(this),
        _Internal::helpcenter(this).GetCachedSize(), target, stream);
  }

  // optional string giftUrl = 14;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gifturl().data(), static_cast<int>(this->_internal_gifturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.link.ResolvedLink.giftUrl");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_gifturl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.link.ResolvedLink)
  return target;
}

size_t ResolvedLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.link.ResolvedLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string detailsUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailsurl());
    }

    // optional string browseUrl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_browseurl());
    }

    // optional string searchUrl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_searchurl());
    }

    // optional string homeUrl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_homeurl());
    }

    // optional bytes serverLogsCookie = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional string wishlistUrl = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wishlisturl());
    }

    // optional string query = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query());
    }

    // optional string myAccountUrl = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_myaccounturl());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional string giftUrl = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gifturl());
    }

    // optional .playapi.proto.finsky.link.DirectPurchase directPurchase = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.directpurchase_);
    }

    // optional .playapi.proto.finsky.link.RedeemGiftCard redeemGiftCard = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redeemgiftcard_);
    }

    // optional .playapi.proto.finsky.Docid docid = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.docid_);
    }

    // optional .playapi.proto.finsky.link.HelpCenter helpCenter = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.helpcenter_);
    }

    // optional int32 backend = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backend());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResolvedLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedLink::GetClassData() const { return &_class_data_; }


void ResolvedLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResolvedLink*>(&to_msg);
  auto& from = static_cast<const ResolvedLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.link.ResolvedLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_detailsurl(from._internal_detailsurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_browseurl(from._internal_browseurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_searchurl(from._internal_searchurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_homeurl(from._internal_homeurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_wishlisturl(from._internal_wishlisturl());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_myaccounturl(from._internal_myaccounturl());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_gifturl(from._internal_gifturl());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_directpurchase()->::playapi::proto::finsky::link::DirectPurchase::MergeFrom(
          from._internal_directpurchase());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_redeemgiftcard()->::playapi::proto::finsky::link::RedeemGiftCard::MergeFrom(
          from._internal_redeemgiftcard());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_docid()->::playapi::proto::finsky::Docid::MergeFrom(
          from._internal_docid());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_helpcenter()->::playapi::proto::finsky::link::HelpCenter::MergeFrom(
          from._internal_helpcenter());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.backend_ = from._impl_.backend_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedLink::CopyFrom(const ResolvedLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.link.ResolvedLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedLink::IsInitialized() const {
  return true;
}

void ResolvedLink::InternalSwap(ResolvedLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailsurl_, lhs_arena,
      &other->_impl_.detailsurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.browseurl_, lhs_arena,
      &other->_impl_.browseurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.searchurl_, lhs_arena,
      &other->_impl_.searchurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.homeurl_, lhs_arena,
      &other->_impl_.homeurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wishlisturl_, lhs_arena,
      &other->_impl_.wishlisturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.myaccounturl_, lhs_arena,
      &other->_impl_.myaccounturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gifturl_, lhs_arena,
      &other->_impl_.gifturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResolvedLink, _impl_.backend_)
      + sizeof(ResolvedLink::_impl_.backend_)
      - PROTOBUF_FIELD_OFFSET(ResolvedLink, _impl_.directpurchase_)>(
          reinterpret_cast<char*>(&_impl_.directpurchase_),
          reinterpret_cast<char*>(&other->_impl_.directpurchase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5flink_2eproto_getter, &descriptor_table_play_5flink_2eproto_once,
      file_level_metadata_play_5flink_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace link
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::link::Link*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::link::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::link::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::link::OverflowLink*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::link::OverflowLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::link::OverflowLink >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::link::DirectPurchase*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::link::DirectPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::link::DirectPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::link::HelpCenter*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::link::HelpCenter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::link::HelpCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::link::RedeemGiftCard*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::link::RedeemGiftCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::link::RedeemGiftCard >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::link::ResolvedLink*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::link::ResolvedLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::link::ResolvedLink >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
