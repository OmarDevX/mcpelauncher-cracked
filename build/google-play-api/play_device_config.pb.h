// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_device_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_5fdevice_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_5fdevice_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gsf.pb.h"
#include "play_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_5fdevice_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_5fdevice_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_5fdevice_5fconfig_2eproto;
namespace playapi {
namespace proto {
namespace finsky {
namespace device_config {
class AccountInfo;
struct AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class DataServiceSubscriber;
struct DataServiceSubscriberDefaultTypeInternal;
extern DataServiceSubscriberDefaultTypeInternal _DataServiceSubscriber_default_instance_;
class MobileSubscriber;
struct MobileSubscriberDefaultTypeInternal;
extern MobileSubscriberDefaultTypeInternal _MobileSubscriber_default_instance_;
class ShortDescription;
struct ShortDescriptionDefaultTypeInternal;
extern ShortDescriptionDefaultTypeInternal _ShortDescription_default_instance_;
class UploadDeviceConfigRequest;
struct UploadDeviceConfigRequestDefaultTypeInternal;
extern UploadDeviceConfigRequestDefaultTypeInternal _UploadDeviceConfigRequest_default_instance_;
class UploadDeviceConfigResponse;
struct UploadDeviceConfigResponseDefaultTypeInternal;
extern UploadDeviceConfigResponseDefaultTypeInternal _UploadDeviceConfigResponse_default_instance_;
}  // namespace device_config
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> ::playapi::proto::finsky::device_config::AccountInfo* Arena::CreateMaybeMessage<::playapi::proto::finsky::device_config::AccountInfo>(Arena*);
template<> ::playapi::proto::finsky::device_config::DataServiceSubscriber* Arena::CreateMaybeMessage<::playapi::proto::finsky::device_config::DataServiceSubscriber>(Arena*);
template<> ::playapi::proto::finsky::device_config::MobileSubscriber* Arena::CreateMaybeMessage<::playapi::proto::finsky::device_config::MobileSubscriber>(Arena*);
template<> ::playapi::proto::finsky::device_config::ShortDescription* Arena::CreateMaybeMessage<::playapi::proto::finsky::device_config::ShortDescription>(Arena*);
template<> ::playapi::proto::finsky::device_config::UploadDeviceConfigRequest* Arena::CreateMaybeMessage<::playapi::proto::finsky::device_config::UploadDeviceConfigRequest>(Arena*);
template<> ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse* Arena::CreateMaybeMessage<::playapi::proto::finsky::device_config::UploadDeviceConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playapi {
namespace proto {
namespace finsky {
namespace device_config {

// ===================================================================

class MobileSubscriber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.device_config.MobileSubscriber) */ {
 public:
  inline MobileSubscriber() : MobileSubscriber(nullptr) {}
  ~MobileSubscriber() override;
  explicit PROTOBUF_CONSTEXPR MobileSubscriber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobileSubscriber(const MobileSubscriber& from);
  MobileSubscriber(MobileSubscriber&& from) noexcept
    : MobileSubscriber() {
    *this = ::std::move(from);
  }

  inline MobileSubscriber& operator=(const MobileSubscriber& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobileSubscriber& operator=(MobileSubscriber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobileSubscriber& default_instance() {
    return *internal_default_instance();
  }
  static inline const MobileSubscriber* internal_default_instance() {
    return reinterpret_cast<const MobileSubscriber*>(
               &_MobileSubscriber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MobileSubscriber& a, MobileSubscriber& b) {
    a.Swap(&b);
  }
  inline void Swap(MobileSubscriber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobileSubscriber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MobileSubscriber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MobileSubscriber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MobileSubscriber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MobileSubscriber& from) {
    MobileSubscriber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobileSubscriber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.device_config.MobileSubscriber";
  }
  protected:
  explicit MobileSubscriber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpnFieldNumber = 2,
    kGid1FieldNumber = 3,
    kImsiFieldNumber = 1,
  };
  // optional string spn = 2;
  bool has_spn() const;
  private:
  bool _internal_has_spn() const;
  public:
  void clear_spn();
  const std::string& spn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spn();
  PROTOBUF_NODISCARD std::string* release_spn();
  void set_allocated_spn(std::string* spn);
  private:
  const std::string& _internal_spn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spn(const std::string& value);
  std::string* _internal_mutable_spn();
  public:

  // optional string gid1 = 3;
  bool has_gid1() const;
  private:
  bool _internal_has_gid1() const;
  public:
  void clear_gid1();
  const std::string& gid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid1();
  PROTOBUF_NODISCARD std::string* release_gid1();
  void set_allocated_gid1(std::string* gid1);
  private:
  const std::string& _internal_gid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid1(const std::string& value);
  std::string* _internal_mutable_gid1();
  public:

  // optional int64 imsi = 1;
  bool has_imsi() const;
  private:
  bool _internal_has_imsi() const;
  public:
  void clear_imsi();
  int64_t imsi() const;
  void set_imsi(int64_t value);
  private:
  int64_t _internal_imsi() const;
  void _internal_set_imsi(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.device_config.MobileSubscriber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid1_;
    int64_t imsi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DataServiceSubscriber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.device_config.DataServiceSubscriber) */ {
 public:
  inline DataServiceSubscriber() : DataServiceSubscriber(nullptr) {}
  ~DataServiceSubscriber() override;
  explicit PROTOBUF_CONSTEXPR DataServiceSubscriber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataServiceSubscriber(const DataServiceSubscriber& from);
  DataServiceSubscriber(DataServiceSubscriber&& from) noexcept
    : DataServiceSubscriber() {
    *this = ::std::move(from);
  }

  inline DataServiceSubscriber& operator=(const DataServiceSubscriber& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServiceSubscriber& operator=(DataServiceSubscriber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataServiceSubscriber& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataServiceSubscriber* internal_default_instance() {
    return reinterpret_cast<const DataServiceSubscriber*>(
               &_DataServiceSubscriber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataServiceSubscriber& a, DataServiceSubscriber& b) {
    a.Swap(&b);
  }
  inline void Swap(DataServiceSubscriber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServiceSubscriber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataServiceSubscriber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataServiceSubscriber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataServiceSubscriber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataServiceSubscriber& from) {
    DataServiceSubscriber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataServiceSubscriber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.device_config.DataServiceSubscriber";
  }
  protected:
  explicit DataServiceSubscriber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileSubscriberFieldNumber = 1,
  };
  // optional .playapi.proto.finsky.device_config.MobileSubscriber mobileSubscriber = 1;
  bool has_mobilesubscriber() const;
  private:
  bool _internal_has_mobilesubscriber() const;
  public:
  void clear_mobilesubscriber();
  const ::playapi::proto::finsky::device_config::MobileSubscriber& mobilesubscriber() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::device_config::MobileSubscriber* release_mobilesubscriber();
  ::playapi::proto::finsky::device_config::MobileSubscriber* mutable_mobilesubscriber();
  void set_allocated_mobilesubscriber(::playapi::proto::finsky::device_config::MobileSubscriber* mobilesubscriber);
  private:
  const ::playapi::proto::finsky::device_config::MobileSubscriber& _internal_mobilesubscriber() const;
  ::playapi::proto::finsky::device_config::MobileSubscriber* _internal_mutable_mobilesubscriber();
  public:
  void unsafe_arena_set_allocated_mobilesubscriber(
      ::playapi::proto::finsky::device_config::MobileSubscriber* mobilesubscriber);
  ::playapi::proto::finsky::device_config::MobileSubscriber* unsafe_arena_release_mobilesubscriber();

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.device_config.DataServiceSubscriber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::playapi::proto::finsky::device_config::MobileSubscriber* mobilesubscriber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ShortDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.device_config.ShortDescription) */ {
 public:
  inline ShortDescription() : ShortDescription(nullptr) {}
  ~ShortDescription() override;
  explicit PROTOBUF_CONSTEXPR ShortDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortDescription(const ShortDescription& from);
  ShortDescription(ShortDescription&& from) noexcept
    : ShortDescription() {
    *this = ::std::move(from);
  }

  inline ShortDescription& operator=(const ShortDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortDescription& operator=(ShortDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShortDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortDescription* internal_default_instance() {
    return reinterpret_cast<const ShortDescription*>(
               &_ShortDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShortDescription& a, ShortDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ShortDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShortDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShortDescription& from) {
    ShortDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.device_config.ShortDescription";
  }
  protected:
  explicit ShortDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 2,
    kFingerprintFieldNumber = 3,
    kManufacturerFieldNumber = 6,
    kSecurityPatchFieldNumber = 7,
    kSerialHashFieldNumber = 4,
    kUserCountFieldNumber = 5,
  };
  // optional string brand = 2;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  const std::string& brand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brand();
  PROTOBUF_NODISCARD std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // optional string fingerprint = 3;
  bool has_fingerprint() const;
  private:
  bool _internal_has_fingerprint() const;
  public:
  void clear_fingerprint();
  const std::string& fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fingerprint();
  PROTOBUF_NODISCARD std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);
  private:
  const std::string& _internal_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint(const std::string& value);
  std::string* _internal_mutable_fingerprint();
  public:

  // optional string manufacturer = 6;
  bool has_manufacturer() const;
  private:
  bool _internal_has_manufacturer() const;
  public:
  void clear_manufacturer();
  const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // optional string securityPatch = 7;
  bool has_securitypatch() const;
  private:
  bool _internal_has_securitypatch() const;
  public:
  void clear_securitypatch();
  const std::string& securitypatch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitypatch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitypatch();
  PROTOBUF_NODISCARD std::string* release_securitypatch();
  void set_allocated_securitypatch(std::string* securitypatch);
  private:
  const std::string& _internal_securitypatch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitypatch(const std::string& value);
  std::string* _internal_mutable_securitypatch();
  public:

  // optional fixed64 serialHash = 4;
  bool has_serialhash() const;
  private:
  bool _internal_has_serialhash() const;
  public:
  void clear_serialhash();
  uint64_t serialhash() const;
  void set_serialhash(uint64_t value);
  private:
  uint64_t _internal_serialhash() const;
  void _internal_set_serialhash(uint64_t value);
  public:

  // optional int32 userCount = 5;
  bool has_usercount() const;
  private:
  bool _internal_has_usercount() const;
  public:
  void clear_usercount();
  int32_t usercount() const;
  void set_usercount(int32_t value);
  private:
  int32_t _internal_usercount() const;
  void _internal_set_usercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.device_config.ShortDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitypatch_;
    uint64_t serialhash_;
    int32_t usercount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AccountInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.device_config.AccountInfo) */ {
 public:
  inline AccountInfo() : AccountInfo(nullptr) {}
  ~AccountInfo() override;
  explicit PROTOBUF_CONSTEXPR AccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountInfo& from) {
    AccountInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.device_config.AccountInfo";
  }
  protected:
  explicit AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAndroidIdAndUserHashFieldNumber = 1,
  };
  // optional string androidIdAndUserHash = 1;
  bool has_androididanduserhash() const;
  private:
  bool _internal_has_androididanduserhash() const;
  public:
  void clear_androididanduserhash();
  const std::string& androididanduserhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_androididanduserhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_androididanduserhash();
  PROTOBUF_NODISCARD std::string* release_androididanduserhash();
  void set_allocated_androididanduserhash(std::string* androididanduserhash);
  private:
  const std::string& _internal_androididanduserhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_androididanduserhash(const std::string& value);
  std::string* _internal_mutable_androididanduserhash();
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.device_config.AccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr androididanduserhash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class UploadDeviceConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.device_config.UploadDeviceConfigRequest) */ {
 public:
  inline UploadDeviceConfigRequest() : UploadDeviceConfigRequest(nullptr) {}
  ~UploadDeviceConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadDeviceConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadDeviceConfigRequest(const UploadDeviceConfigRequest& from);
  UploadDeviceConfigRequest(UploadDeviceConfigRequest&& from) noexcept
    : UploadDeviceConfigRequest() {
    *this = ::std::move(from);
  }

  inline UploadDeviceConfigRequest& operator=(const UploadDeviceConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadDeviceConfigRequest& operator=(UploadDeviceConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadDeviceConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadDeviceConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UploadDeviceConfigRequest*>(
               &_UploadDeviceConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UploadDeviceConfigRequest& a, UploadDeviceConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadDeviceConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadDeviceConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadDeviceConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadDeviceConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadDeviceConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadDeviceConfigRequest& from) {
    UploadDeviceConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadDeviceConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.device_config.UploadDeviceConfigRequest";
  }
  protected:
  explicit UploadDeviceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 2,
    kGcmRegistrationIdFieldNumber = 3,
    kDeviceConfigurationFieldNumber = 1,
    kDataServiceSubscriberFieldNumber = 4,
    kShortDescriptionFieldNumber = 6,
    kAccountInfoFieldNumber = 7,
  };
  // optional string manufacturer = 2;
  bool has_manufacturer() const;
  private:
  bool _internal_has_manufacturer() const;
  public:
  void clear_manufacturer();
  const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // optional string gcmRegistrationId = 3;
  bool has_gcmregistrationid() const;
  private:
  bool _internal_has_gcmregistrationid() const;
  public:
  void clear_gcmregistrationid();
  const std::string& gcmregistrationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gcmregistrationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gcmregistrationid();
  PROTOBUF_NODISCARD std::string* release_gcmregistrationid();
  void set_allocated_gcmregistrationid(std::string* gcmregistrationid);
  private:
  const std::string& _internal_gcmregistrationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcmregistrationid(const std::string& value);
  std::string* _internal_mutable_gcmregistrationid();
  public:

  // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 1;
  bool has_deviceconfiguration() const;
  private:
  bool _internal_has_deviceconfiguration() const;
  public:
  void clear_deviceconfiguration();
  const ::playapi::proto::gsf::DeviceConfigurationProto& deviceconfiguration() const;
  PROTOBUF_NODISCARD ::playapi::proto::gsf::DeviceConfigurationProto* release_deviceconfiguration();
  ::playapi::proto::gsf::DeviceConfigurationProto* mutable_deviceconfiguration();
  void set_allocated_deviceconfiguration(::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration);
  private:
  const ::playapi::proto::gsf::DeviceConfigurationProto& _internal_deviceconfiguration() const;
  ::playapi::proto::gsf::DeviceConfigurationProto* _internal_mutable_deviceconfiguration();
  public:
  void unsafe_arena_set_allocated_deviceconfiguration(
      ::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration);
  ::playapi::proto::gsf::DeviceConfigurationProto* unsafe_arena_release_deviceconfiguration();

  // optional .playapi.proto.finsky.device_config.DataServiceSubscriber dataServiceSubscriber = 4;
  bool has_dataservicesubscriber() const;
  private:
  bool _internal_has_dataservicesubscriber() const;
  public:
  void clear_dataservicesubscriber();
  const ::playapi::proto::finsky::device_config::DataServiceSubscriber& dataservicesubscriber() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::device_config::DataServiceSubscriber* release_dataservicesubscriber();
  ::playapi::proto::finsky::device_config::DataServiceSubscriber* mutable_dataservicesubscriber();
  void set_allocated_dataservicesubscriber(::playapi::proto::finsky::device_config::DataServiceSubscriber* dataservicesubscriber);
  private:
  const ::playapi::proto::finsky::device_config::DataServiceSubscriber& _internal_dataservicesubscriber() const;
  ::playapi::proto::finsky::device_config::DataServiceSubscriber* _internal_mutable_dataservicesubscriber();
  public:
  void unsafe_arena_set_allocated_dataservicesubscriber(
      ::playapi::proto::finsky::device_config::DataServiceSubscriber* dataservicesubscriber);
  ::playapi::proto::finsky::device_config::DataServiceSubscriber* unsafe_arena_release_dataservicesubscriber();

  // optional .playapi.proto.finsky.device_config.ShortDescription shortDescription = 6;
  bool has_shortdescription() const;
  private:
  bool _internal_has_shortdescription() const;
  public:
  void clear_shortdescription();
  const ::playapi::proto::finsky::device_config::ShortDescription& shortdescription() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::device_config::ShortDescription* release_shortdescription();
  ::playapi::proto::finsky::device_config::ShortDescription* mutable_shortdescription();
  void set_allocated_shortdescription(::playapi::proto::finsky::device_config::ShortDescription* shortdescription);
  private:
  const ::playapi::proto::finsky::device_config::ShortDescription& _internal_shortdescription() const;
  ::playapi::proto::finsky::device_config::ShortDescription* _internal_mutable_shortdescription();
  public:
  void unsafe_arena_set_allocated_shortdescription(
      ::playapi::proto::finsky::device_config::ShortDescription* shortdescription);
  ::playapi::proto::finsky::device_config::ShortDescription* unsafe_arena_release_shortdescription();

  // optional .playapi.proto.finsky.device_config.AccountInfo accountInfo = 7;
  bool has_accountinfo() const;
  private:
  bool _internal_has_accountinfo() const;
  public:
  void clear_accountinfo();
  const ::playapi::proto::finsky::device_config::AccountInfo& accountinfo() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::device_config::AccountInfo* release_accountinfo();
  ::playapi::proto::finsky::device_config::AccountInfo* mutable_accountinfo();
  void set_allocated_accountinfo(::playapi::proto::finsky::device_config::AccountInfo* accountinfo);
  private:
  const ::playapi::proto::finsky::device_config::AccountInfo& _internal_accountinfo() const;
  ::playapi::proto::finsky::device_config::AccountInfo* _internal_mutable_accountinfo();
  public:
  void unsafe_arena_set_allocated_accountinfo(
      ::playapi::proto::finsky::device_config::AccountInfo* accountinfo);
  ::playapi::proto::finsky::device_config::AccountInfo* unsafe_arena_release_accountinfo();

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.device_config.UploadDeviceConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcmregistrationid_;
    ::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration_;
    ::playapi::proto::finsky::device_config::DataServiceSubscriber* dataservicesubscriber_;
    ::playapi::proto::finsky::device_config::ShortDescription* shortdescription_;
    ::playapi::proto::finsky::device_config::AccountInfo* accountinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class UploadDeviceConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.device_config.UploadDeviceConfigResponse) */ {
 public:
  inline UploadDeviceConfigResponse() : UploadDeviceConfigResponse(nullptr) {}
  ~UploadDeviceConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadDeviceConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadDeviceConfigResponse(const UploadDeviceConfigResponse& from);
  UploadDeviceConfigResponse(UploadDeviceConfigResponse&& from) noexcept
    : UploadDeviceConfigResponse() {
    *this = ::std::move(from);
  }

  inline UploadDeviceConfigResponse& operator=(const UploadDeviceConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadDeviceConfigResponse& operator=(UploadDeviceConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadDeviceConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadDeviceConfigResponse* internal_default_instance() {
    return reinterpret_cast<const UploadDeviceConfigResponse*>(
               &_UploadDeviceConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UploadDeviceConfigResponse& a, UploadDeviceConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadDeviceConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadDeviceConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadDeviceConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadDeviceConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadDeviceConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadDeviceConfigResponse& from) {
    UploadDeviceConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadDeviceConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.device_config.UploadDeviceConfigResponse";
  }
  protected:
  explicit UploadDeviceConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadDeviceConfigTokenFieldNumber = 1,
  };
  // optional string uploadDeviceConfigToken = 1;
  bool has_uploaddeviceconfigtoken() const;
  private:
  bool _internal_has_uploaddeviceconfigtoken() const;
  public:
  void clear_uploaddeviceconfigtoken();
  const std::string& uploaddeviceconfigtoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uploaddeviceconfigtoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uploaddeviceconfigtoken();
  PROTOBUF_NODISCARD std::string* release_uploaddeviceconfigtoken();
  void set_allocated_uploaddeviceconfigtoken(std::string* uploaddeviceconfigtoken);
  private:
  const std::string& _internal_uploaddeviceconfigtoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uploaddeviceconfigtoken(const std::string& value);
  std::string* _internal_mutable_uploaddeviceconfigtoken();
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.device_config.UploadDeviceConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploaddeviceconfigtoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdevice_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MobileSubscriber

// optional int64 imsi = 1;
inline bool MobileSubscriber::_internal_has_imsi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MobileSubscriber::has_imsi() const {
  return _internal_has_imsi();
}
inline void MobileSubscriber::clear_imsi() {
  _impl_.imsi_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t MobileSubscriber::_internal_imsi() const {
  return _impl_.imsi_;
}
inline int64_t MobileSubscriber::imsi() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.MobileSubscriber.imsi)
  return _internal_imsi();
}
inline void MobileSubscriber::_internal_set_imsi(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.imsi_ = value;
}
inline void MobileSubscriber::set_imsi(int64_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.MobileSubscriber.imsi)
}

// optional string spn = 2;
inline bool MobileSubscriber::_internal_has_spn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MobileSubscriber::has_spn() const {
  return _internal_has_spn();
}
inline void MobileSubscriber::clear_spn() {
  _impl_.spn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MobileSubscriber::spn() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.MobileSubscriber.spn)
  return _internal_spn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MobileSubscriber::set_spn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.spn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.MobileSubscriber.spn)
}
inline std::string* MobileSubscriber::mutable_spn() {
  std::string* _s = _internal_mutable_spn();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.MobileSubscriber.spn)
  return _s;
}
inline const std::string& MobileSubscriber::_internal_spn() const {
  return _impl_.spn_.Get();
}
inline void MobileSubscriber::_internal_set_spn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.spn_.Set(value, GetArenaForAllocation());
}
inline std::string* MobileSubscriber::_internal_mutable_spn() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.spn_.Mutable(GetArenaForAllocation());
}
inline std::string* MobileSubscriber::release_spn() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.MobileSubscriber.spn)
  if (!_internal_has_spn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.spn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spn_.IsDefault()) {
    _impl_.spn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MobileSubscriber::set_allocated_spn(std::string* spn) {
  if (spn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.spn_.SetAllocated(spn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spn_.IsDefault()) {
    _impl_.spn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.MobileSubscriber.spn)
}

// optional string gid1 = 3;
inline bool MobileSubscriber::_internal_has_gid1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MobileSubscriber::has_gid1() const {
  return _internal_has_gid1();
}
inline void MobileSubscriber::clear_gid1() {
  _impl_.gid1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MobileSubscriber::gid1() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.MobileSubscriber.gid1)
  return _internal_gid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MobileSubscriber::set_gid1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.gid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.MobileSubscriber.gid1)
}
inline std::string* MobileSubscriber::mutable_gid1() {
  std::string* _s = _internal_mutable_gid1();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.MobileSubscriber.gid1)
  return _s;
}
inline const std::string& MobileSubscriber::_internal_gid1() const {
  return _impl_.gid1_.Get();
}
inline void MobileSubscriber::_internal_set_gid1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gid1_.Set(value, GetArenaForAllocation());
}
inline std::string* MobileSubscriber::_internal_mutable_gid1() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.gid1_.Mutable(GetArenaForAllocation());
}
inline std::string* MobileSubscriber::release_gid1() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.MobileSubscriber.gid1)
  if (!_internal_has_gid1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.gid1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gid1_.IsDefault()) {
    _impl_.gid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MobileSubscriber::set_allocated_gid1(std::string* gid1) {
  if (gid1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gid1_.SetAllocated(gid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gid1_.IsDefault()) {
    _impl_.gid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.MobileSubscriber.gid1)
}

// -------------------------------------------------------------------

// DataServiceSubscriber

// optional .playapi.proto.finsky.device_config.MobileSubscriber mobileSubscriber = 1;
inline bool DataServiceSubscriber::_internal_has_mobilesubscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mobilesubscriber_ != nullptr);
  return value;
}
inline bool DataServiceSubscriber::has_mobilesubscriber() const {
  return _internal_has_mobilesubscriber();
}
inline void DataServiceSubscriber::clear_mobilesubscriber() {
  if (_impl_.mobilesubscriber_ != nullptr) _impl_.mobilesubscriber_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::playapi::proto::finsky::device_config::MobileSubscriber& DataServiceSubscriber::_internal_mobilesubscriber() const {
  const ::playapi::proto::finsky::device_config::MobileSubscriber* p = _impl_.mobilesubscriber_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::device_config::MobileSubscriber&>(
      ::playapi::proto::finsky::device_config::_MobileSubscriber_default_instance_);
}
inline const ::playapi::proto::finsky::device_config::MobileSubscriber& DataServiceSubscriber::mobilesubscriber() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.DataServiceSubscriber.mobileSubscriber)
  return _internal_mobilesubscriber();
}
inline void DataServiceSubscriber::unsafe_arena_set_allocated_mobilesubscriber(
    ::playapi::proto::finsky::device_config::MobileSubscriber* mobilesubscriber) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobilesubscriber_);
  }
  _impl_.mobilesubscriber_ = mobilesubscriber;
  if (mobilesubscriber) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.device_config.DataServiceSubscriber.mobileSubscriber)
}
inline ::playapi::proto::finsky::device_config::MobileSubscriber* DataServiceSubscriber::release_mobilesubscriber() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::device_config::MobileSubscriber* temp = _impl_.mobilesubscriber_;
  _impl_.mobilesubscriber_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::device_config::MobileSubscriber* DataServiceSubscriber::unsafe_arena_release_mobilesubscriber() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.DataServiceSubscriber.mobileSubscriber)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::device_config::MobileSubscriber* temp = _impl_.mobilesubscriber_;
  _impl_.mobilesubscriber_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::device_config::MobileSubscriber* DataServiceSubscriber::_internal_mutable_mobilesubscriber() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mobilesubscriber_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::device_config::MobileSubscriber>(GetArenaForAllocation());
    _impl_.mobilesubscriber_ = p;
  }
  return _impl_.mobilesubscriber_;
}
inline ::playapi::proto::finsky::device_config::MobileSubscriber* DataServiceSubscriber::mutable_mobilesubscriber() {
  ::playapi::proto::finsky::device_config::MobileSubscriber* _msg = _internal_mutable_mobilesubscriber();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.DataServiceSubscriber.mobileSubscriber)
  return _msg;
}
inline void DataServiceSubscriber::set_allocated_mobilesubscriber(::playapi::proto::finsky::device_config::MobileSubscriber* mobilesubscriber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mobilesubscriber_;
  }
  if (mobilesubscriber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mobilesubscriber);
    if (message_arena != submessage_arena) {
      mobilesubscriber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobilesubscriber, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mobilesubscriber_ = mobilesubscriber;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.DataServiceSubscriber.mobileSubscriber)
}

// -------------------------------------------------------------------

// ShortDescription

// optional string brand = 2;
inline bool ShortDescription::_internal_has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShortDescription::has_brand() const {
  return _internal_has_brand();
}
inline void ShortDescription::clear_brand() {
  _impl_.brand_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShortDescription::brand() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.ShortDescription.brand)
  return _internal_brand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortDescription::set_brand(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.brand_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.ShortDescription.brand)
}
inline std::string* ShortDescription::mutable_brand() {
  std::string* _s = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.ShortDescription.brand)
  return _s;
}
inline const std::string& ShortDescription::_internal_brand() const {
  return _impl_.brand_.Get();
}
inline void ShortDescription::_internal_set_brand(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brand_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortDescription::_internal_mutable_brand() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.brand_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortDescription::release_brand() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.ShortDescription.brand)
  if (!_internal_has_brand()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.brand_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.brand_.IsDefault()) {
    _impl_.brand_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortDescription::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.brand_.SetAllocated(brand, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.brand_.IsDefault()) {
    _impl_.brand_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.ShortDescription.brand)
}

// optional string fingerprint = 3;
inline bool ShortDescription::_internal_has_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShortDescription::has_fingerprint() const {
  return _internal_has_fingerprint();
}
inline void ShortDescription::clear_fingerprint() {
  _impl_.fingerprint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShortDescription::fingerprint() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.ShortDescription.fingerprint)
  return _internal_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortDescription::set_fingerprint(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.fingerprint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.ShortDescription.fingerprint)
}
inline std::string* ShortDescription::mutable_fingerprint() {
  std::string* _s = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.ShortDescription.fingerprint)
  return _s;
}
inline const std::string& ShortDescription::_internal_fingerprint() const {
  return _impl_.fingerprint_.Get();
}
inline void ShortDescription::_internal_set_fingerprint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortDescription::_internal_mutable_fingerprint() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.fingerprint_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortDescription::release_fingerprint() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.ShortDescription.fingerprint)
  if (!_internal_has_fingerprint()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.fingerprint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_.IsDefault()) {
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortDescription::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fingerprint_.SetAllocated(fingerprint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fingerprint_.IsDefault()) {
    _impl_.fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.ShortDescription.fingerprint)
}

// optional fixed64 serialHash = 4;
inline bool ShortDescription::_internal_has_serialhash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShortDescription::has_serialhash() const {
  return _internal_has_serialhash();
}
inline void ShortDescription::clear_serialhash() {
  _impl_.serialhash_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ShortDescription::_internal_serialhash() const {
  return _impl_.serialhash_;
}
inline uint64_t ShortDescription::serialhash() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.ShortDescription.serialHash)
  return _internal_serialhash();
}
inline void ShortDescription::_internal_set_serialhash(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.serialhash_ = value;
}
inline void ShortDescription::set_serialhash(uint64_t value) {
  _internal_set_serialhash(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.ShortDescription.serialHash)
}

// optional int32 userCount = 5;
inline bool ShortDescription::_internal_has_usercount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShortDescription::has_usercount() const {
  return _internal_has_usercount();
}
inline void ShortDescription::clear_usercount() {
  _impl_.usercount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ShortDescription::_internal_usercount() const {
  return _impl_.usercount_;
}
inline int32_t ShortDescription::usercount() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.ShortDescription.userCount)
  return _internal_usercount();
}
inline void ShortDescription::_internal_set_usercount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.usercount_ = value;
}
inline void ShortDescription::set_usercount(int32_t value) {
  _internal_set_usercount(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.ShortDescription.userCount)
}

// optional string manufacturer = 6;
inline bool ShortDescription::_internal_has_manufacturer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShortDescription::has_manufacturer() const {
  return _internal_has_manufacturer();
}
inline void ShortDescription::clear_manufacturer() {
  _impl_.manufacturer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShortDescription::manufacturer() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.ShortDescription.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortDescription::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.manufacturer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.ShortDescription.manufacturer)
}
inline std::string* ShortDescription::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.ShortDescription.manufacturer)
  return _s;
}
inline const std::string& ShortDescription::_internal_manufacturer() const {
  return _impl_.manufacturer_.Get();
}
inline void ShortDescription::_internal_set_manufacturer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortDescription::_internal_mutable_manufacturer() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.manufacturer_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortDescription::release_manufacturer() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.ShortDescription.manufacturer)
  if (!_internal_has_manufacturer()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.manufacturer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manufacturer_.IsDefault()) {
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortDescription::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.manufacturer_.SetAllocated(manufacturer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manufacturer_.IsDefault()) {
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.ShortDescription.manufacturer)
}

// optional string securityPatch = 7;
inline bool ShortDescription::_internal_has_securitypatch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShortDescription::has_securitypatch() const {
  return _internal_has_securitypatch();
}
inline void ShortDescription::clear_securitypatch() {
  _impl_.securitypatch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ShortDescription::securitypatch() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.ShortDescription.securityPatch)
  return _internal_securitypatch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortDescription::set_securitypatch(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.securitypatch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.ShortDescription.securityPatch)
}
inline std::string* ShortDescription::mutable_securitypatch() {
  std::string* _s = _internal_mutable_securitypatch();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.ShortDescription.securityPatch)
  return _s;
}
inline const std::string& ShortDescription::_internal_securitypatch() const {
  return _impl_.securitypatch_.Get();
}
inline void ShortDescription::_internal_set_securitypatch(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.securitypatch_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortDescription::_internal_mutable_securitypatch() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.securitypatch_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortDescription::release_securitypatch() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.ShortDescription.securityPatch)
  if (!_internal_has_securitypatch()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.securitypatch_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitypatch_.IsDefault()) {
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortDescription::set_allocated_securitypatch(std::string* securitypatch) {
  if (securitypatch != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.securitypatch_.SetAllocated(securitypatch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitypatch_.IsDefault()) {
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.ShortDescription.securityPatch)
}

// -------------------------------------------------------------------

// AccountInfo

// optional string androidIdAndUserHash = 1;
inline bool AccountInfo::_internal_has_androididanduserhash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountInfo::has_androididanduserhash() const {
  return _internal_has_androididanduserhash();
}
inline void AccountInfo::clear_androididanduserhash() {
  _impl_.androididanduserhash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountInfo::androididanduserhash() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash)
  return _internal_androididanduserhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_androididanduserhash(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.androididanduserhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash)
}
inline std::string* AccountInfo::mutable_androididanduserhash() {
  std::string* _s = _internal_mutable_androididanduserhash();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash)
  return _s;
}
inline const std::string& AccountInfo::_internal_androididanduserhash() const {
  return _impl_.androididanduserhash_.Get();
}
inline void AccountInfo::_internal_set_androididanduserhash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.androididanduserhash_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_androididanduserhash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.androididanduserhash_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountInfo::release_androididanduserhash() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash)
  if (!_internal_has_androididanduserhash()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.androididanduserhash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.androididanduserhash_.IsDefault()) {
    _impl_.androididanduserhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountInfo::set_allocated_androididanduserhash(std::string* androididanduserhash) {
  if (androididanduserhash != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.androididanduserhash_.SetAllocated(androididanduserhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.androididanduserhash_.IsDefault()) {
    _impl_.androididanduserhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.AccountInfo.androidIdAndUserHash)
}

// -------------------------------------------------------------------

// UploadDeviceConfigRequest

// optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 1;
inline bool UploadDeviceConfigRequest::_internal_has_deviceconfiguration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deviceconfiguration_ != nullptr);
  return value;
}
inline bool UploadDeviceConfigRequest::has_deviceconfiguration() const {
  return _internal_has_deviceconfiguration();
}
inline const ::playapi::proto::gsf::DeviceConfigurationProto& UploadDeviceConfigRequest::_internal_deviceconfiguration() const {
  const ::playapi::proto::gsf::DeviceConfigurationProto* p = _impl_.deviceconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::gsf::DeviceConfigurationProto&>(
      ::playapi::proto::gsf::_DeviceConfigurationProto_default_instance_);
}
inline const ::playapi::proto::gsf::DeviceConfigurationProto& UploadDeviceConfigRequest::deviceconfiguration() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.deviceConfiguration)
  return _internal_deviceconfiguration();
}
inline void UploadDeviceConfigRequest::unsafe_arena_set_allocated_deviceconfiguration(
    ::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceconfiguration_);
  }
  _impl_.deviceconfiguration_ = deviceconfiguration;
  if (deviceconfiguration) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.deviceConfiguration)
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* UploadDeviceConfigRequest::release_deviceconfiguration() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::gsf::DeviceConfigurationProto* temp = _impl_.deviceconfiguration_;
  _impl_.deviceconfiguration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* UploadDeviceConfigRequest::unsafe_arena_release_deviceconfiguration() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.deviceConfiguration)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::playapi::proto::gsf::DeviceConfigurationProto* temp = _impl_.deviceconfiguration_;
  _impl_.deviceconfiguration_ = nullptr;
  return temp;
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* UploadDeviceConfigRequest::_internal_mutable_deviceconfiguration() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.deviceconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::gsf::DeviceConfigurationProto>(GetArenaForAllocation());
    _impl_.deviceconfiguration_ = p;
  }
  return _impl_.deviceconfiguration_;
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* UploadDeviceConfigRequest::mutable_deviceconfiguration() {
  ::playapi::proto::gsf::DeviceConfigurationProto* _msg = _internal_mutable_deviceconfiguration();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.deviceConfiguration)
  return _msg;
}
inline void UploadDeviceConfigRequest::set_allocated_deviceconfiguration(::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceconfiguration_);
  }
  if (deviceconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceconfiguration));
    if (message_arena != submessage_arena) {
      deviceconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceconfiguration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.deviceconfiguration_ = deviceconfiguration;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.deviceConfiguration)
}

// optional string manufacturer = 2;
inline bool UploadDeviceConfigRequest::_internal_has_manufacturer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UploadDeviceConfigRequest::has_manufacturer() const {
  return _internal_has_manufacturer();
}
inline void UploadDeviceConfigRequest::clear_manufacturer() {
  _impl_.manufacturer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadDeviceConfigRequest::manufacturer() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadDeviceConfigRequest::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.manufacturer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer)
}
inline std::string* UploadDeviceConfigRequest::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer)
  return _s;
}
inline const std::string& UploadDeviceConfigRequest::_internal_manufacturer() const {
  return _impl_.manufacturer_.Get();
}
inline void UploadDeviceConfigRequest::_internal_set_manufacturer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadDeviceConfigRequest::_internal_mutable_manufacturer() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.manufacturer_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadDeviceConfigRequest::release_manufacturer() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer)
  if (!_internal_has_manufacturer()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.manufacturer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manufacturer_.IsDefault()) {
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UploadDeviceConfigRequest::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.manufacturer_.SetAllocated(manufacturer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manufacturer_.IsDefault()) {
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.manufacturer)
}

// optional string gcmRegistrationId = 3;
inline bool UploadDeviceConfigRequest::_internal_has_gcmregistrationid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UploadDeviceConfigRequest::has_gcmregistrationid() const {
  return _internal_has_gcmregistrationid();
}
inline void UploadDeviceConfigRequest::clear_gcmregistrationid() {
  _impl_.gcmregistrationid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UploadDeviceConfigRequest::gcmregistrationid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId)
  return _internal_gcmregistrationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadDeviceConfigRequest::set_gcmregistrationid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.gcmregistrationid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId)
}
inline std::string* UploadDeviceConfigRequest::mutable_gcmregistrationid() {
  std::string* _s = _internal_mutable_gcmregistrationid();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId)
  return _s;
}
inline const std::string& UploadDeviceConfigRequest::_internal_gcmregistrationid() const {
  return _impl_.gcmregistrationid_.Get();
}
inline void UploadDeviceConfigRequest::_internal_set_gcmregistrationid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gcmregistrationid_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadDeviceConfigRequest::_internal_mutable_gcmregistrationid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.gcmregistrationid_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadDeviceConfigRequest::release_gcmregistrationid() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId)
  if (!_internal_has_gcmregistrationid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.gcmregistrationid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gcmregistrationid_.IsDefault()) {
    _impl_.gcmregistrationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UploadDeviceConfigRequest::set_allocated_gcmregistrationid(std::string* gcmregistrationid) {
  if (gcmregistrationid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gcmregistrationid_.SetAllocated(gcmregistrationid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gcmregistrationid_.IsDefault()) {
    _impl_.gcmregistrationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.gcmRegistrationId)
}

// optional .playapi.proto.finsky.device_config.DataServiceSubscriber dataServiceSubscriber = 4;
inline bool UploadDeviceConfigRequest::_internal_has_dataservicesubscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dataservicesubscriber_ != nullptr);
  return value;
}
inline bool UploadDeviceConfigRequest::has_dataservicesubscriber() const {
  return _internal_has_dataservicesubscriber();
}
inline void UploadDeviceConfigRequest::clear_dataservicesubscriber() {
  if (_impl_.dataservicesubscriber_ != nullptr) _impl_.dataservicesubscriber_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::playapi::proto::finsky::device_config::DataServiceSubscriber& UploadDeviceConfigRequest::_internal_dataservicesubscriber() const {
  const ::playapi::proto::finsky::device_config::DataServiceSubscriber* p = _impl_.dataservicesubscriber_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::device_config::DataServiceSubscriber&>(
      ::playapi::proto::finsky::device_config::_DataServiceSubscriber_default_instance_);
}
inline const ::playapi::proto::finsky::device_config::DataServiceSubscriber& UploadDeviceConfigRequest::dataservicesubscriber() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.dataServiceSubscriber)
  return _internal_dataservicesubscriber();
}
inline void UploadDeviceConfigRequest::unsafe_arena_set_allocated_dataservicesubscriber(
    ::playapi::proto::finsky::device_config::DataServiceSubscriber* dataservicesubscriber) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataservicesubscriber_);
  }
  _impl_.dataservicesubscriber_ = dataservicesubscriber;
  if (dataservicesubscriber) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.dataServiceSubscriber)
}
inline ::playapi::proto::finsky::device_config::DataServiceSubscriber* UploadDeviceConfigRequest::release_dataservicesubscriber() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::device_config::DataServiceSubscriber* temp = _impl_.dataservicesubscriber_;
  _impl_.dataservicesubscriber_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::device_config::DataServiceSubscriber* UploadDeviceConfigRequest::unsafe_arena_release_dataservicesubscriber() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.dataServiceSubscriber)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::device_config::DataServiceSubscriber* temp = _impl_.dataservicesubscriber_;
  _impl_.dataservicesubscriber_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::device_config::DataServiceSubscriber* UploadDeviceConfigRequest::_internal_mutable_dataservicesubscriber() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dataservicesubscriber_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::device_config::DataServiceSubscriber>(GetArenaForAllocation());
    _impl_.dataservicesubscriber_ = p;
  }
  return _impl_.dataservicesubscriber_;
}
inline ::playapi::proto::finsky::device_config::DataServiceSubscriber* UploadDeviceConfigRequest::mutable_dataservicesubscriber() {
  ::playapi::proto::finsky::device_config::DataServiceSubscriber* _msg = _internal_mutable_dataservicesubscriber();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.dataServiceSubscriber)
  return _msg;
}
inline void UploadDeviceConfigRequest::set_allocated_dataservicesubscriber(::playapi::proto::finsky::device_config::DataServiceSubscriber* dataservicesubscriber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dataservicesubscriber_;
  }
  if (dataservicesubscriber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dataservicesubscriber);
    if (message_arena != submessage_arena) {
      dataservicesubscriber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataservicesubscriber, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.dataservicesubscriber_ = dataservicesubscriber;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.dataServiceSubscriber)
}

// optional .playapi.proto.finsky.device_config.ShortDescription shortDescription = 6;
inline bool UploadDeviceConfigRequest::_internal_has_shortdescription() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shortdescription_ != nullptr);
  return value;
}
inline bool UploadDeviceConfigRequest::has_shortdescription() const {
  return _internal_has_shortdescription();
}
inline void UploadDeviceConfigRequest::clear_shortdescription() {
  if (_impl_.shortdescription_ != nullptr) _impl_.shortdescription_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::playapi::proto::finsky::device_config::ShortDescription& UploadDeviceConfigRequest::_internal_shortdescription() const {
  const ::playapi::proto::finsky::device_config::ShortDescription* p = _impl_.shortdescription_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::device_config::ShortDescription&>(
      ::playapi::proto::finsky::device_config::_ShortDescription_default_instance_);
}
inline const ::playapi::proto::finsky::device_config::ShortDescription& UploadDeviceConfigRequest::shortdescription() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.shortDescription)
  return _internal_shortdescription();
}
inline void UploadDeviceConfigRequest::unsafe_arena_set_allocated_shortdescription(
    ::playapi::proto::finsky::device_config::ShortDescription* shortdescription) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortdescription_);
  }
  _impl_.shortdescription_ = shortdescription;
  if (shortdescription) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.shortDescription)
}
inline ::playapi::proto::finsky::device_config::ShortDescription* UploadDeviceConfigRequest::release_shortdescription() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::finsky::device_config::ShortDescription* temp = _impl_.shortdescription_;
  _impl_.shortdescription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::device_config::ShortDescription* UploadDeviceConfigRequest::unsafe_arena_release_shortdescription() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.shortDescription)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::finsky::device_config::ShortDescription* temp = _impl_.shortdescription_;
  _impl_.shortdescription_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::device_config::ShortDescription* UploadDeviceConfigRequest::_internal_mutable_shortdescription() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.shortdescription_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::device_config::ShortDescription>(GetArenaForAllocation());
    _impl_.shortdescription_ = p;
  }
  return _impl_.shortdescription_;
}
inline ::playapi::proto::finsky::device_config::ShortDescription* UploadDeviceConfigRequest::mutable_shortdescription() {
  ::playapi::proto::finsky::device_config::ShortDescription* _msg = _internal_mutable_shortdescription();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.shortDescription)
  return _msg;
}
inline void UploadDeviceConfigRequest::set_allocated_shortdescription(::playapi::proto::finsky::device_config::ShortDescription* shortdescription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shortdescription_;
  }
  if (shortdescription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shortdescription);
    if (message_arena != submessage_arena) {
      shortdescription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortdescription, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.shortdescription_ = shortdescription;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.shortDescription)
}

// optional .playapi.proto.finsky.device_config.AccountInfo accountInfo = 7;
inline bool UploadDeviceConfigRequest::_internal_has_accountinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accountinfo_ != nullptr);
  return value;
}
inline bool UploadDeviceConfigRequest::has_accountinfo() const {
  return _internal_has_accountinfo();
}
inline void UploadDeviceConfigRequest::clear_accountinfo() {
  if (_impl_.accountinfo_ != nullptr) _impl_.accountinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::playapi::proto::finsky::device_config::AccountInfo& UploadDeviceConfigRequest::_internal_accountinfo() const {
  const ::playapi::proto::finsky::device_config::AccountInfo* p = _impl_.accountinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::device_config::AccountInfo&>(
      ::playapi::proto::finsky::device_config::_AccountInfo_default_instance_);
}
inline const ::playapi::proto::finsky::device_config::AccountInfo& UploadDeviceConfigRequest::accountinfo() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.accountInfo)
  return _internal_accountinfo();
}
inline void UploadDeviceConfigRequest::unsafe_arena_set_allocated_accountinfo(
    ::playapi::proto::finsky::device_config::AccountInfo* accountinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountinfo_);
  }
  _impl_.accountinfo_ = accountinfo;
  if (accountinfo) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.accountInfo)
}
inline ::playapi::proto::finsky::device_config::AccountInfo* UploadDeviceConfigRequest::release_accountinfo() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::playapi::proto::finsky::device_config::AccountInfo* temp = _impl_.accountinfo_;
  _impl_.accountinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::device_config::AccountInfo* UploadDeviceConfigRequest::unsafe_arena_release_accountinfo() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.accountInfo)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::playapi::proto::finsky::device_config::AccountInfo* temp = _impl_.accountinfo_;
  _impl_.accountinfo_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::device_config::AccountInfo* UploadDeviceConfigRequest::_internal_mutable_accountinfo() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.accountinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::device_config::AccountInfo>(GetArenaForAllocation());
    _impl_.accountinfo_ = p;
  }
  return _impl_.accountinfo_;
}
inline ::playapi::proto::finsky::device_config::AccountInfo* UploadDeviceConfigRequest::mutable_accountinfo() {
  ::playapi::proto::finsky::device_config::AccountInfo* _msg = _internal_mutable_accountinfo();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.accountInfo)
  return _msg;
}
inline void UploadDeviceConfigRequest::set_allocated_accountinfo(::playapi::proto::finsky::device_config::AccountInfo* accountinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.accountinfo_;
  }
  if (accountinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accountinfo);
    if (message_arena != submessage_arena) {
      accountinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.accountinfo_ = accountinfo;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigRequest.accountInfo)
}

// -------------------------------------------------------------------

// UploadDeviceConfigResponse

// optional string uploadDeviceConfigToken = 1;
inline bool UploadDeviceConfigResponse::_internal_has_uploaddeviceconfigtoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UploadDeviceConfigResponse::has_uploaddeviceconfigtoken() const {
  return _internal_has_uploaddeviceconfigtoken();
}
inline void UploadDeviceConfigResponse::clear_uploaddeviceconfigtoken() {
  _impl_.uploaddeviceconfigtoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadDeviceConfigResponse::uploaddeviceconfigtoken() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken)
  return _internal_uploaddeviceconfigtoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadDeviceConfigResponse::set_uploaddeviceconfigtoken(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uploaddeviceconfigtoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken)
}
inline std::string* UploadDeviceConfigResponse::mutable_uploaddeviceconfigtoken() {
  std::string* _s = _internal_mutable_uploaddeviceconfigtoken();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken)
  return _s;
}
inline const std::string& UploadDeviceConfigResponse::_internal_uploaddeviceconfigtoken() const {
  return _impl_.uploaddeviceconfigtoken_.Get();
}
inline void UploadDeviceConfigResponse::_internal_set_uploaddeviceconfigtoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uploaddeviceconfigtoken_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadDeviceConfigResponse::_internal_mutable_uploaddeviceconfigtoken() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uploaddeviceconfigtoken_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadDeviceConfigResponse::release_uploaddeviceconfigtoken() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken)
  if (!_internal_has_uploaddeviceconfigtoken()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uploaddeviceconfigtoken_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uploaddeviceconfigtoken_.IsDefault()) {
    _impl_.uploaddeviceconfigtoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UploadDeviceConfigResponse::set_allocated_uploaddeviceconfigtoken(std::string* uploaddeviceconfigtoken) {
  if (uploaddeviceconfigtoken != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uploaddeviceconfigtoken_.SetAllocated(uploaddeviceconfigtoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uploaddeviceconfigtoken_.IsDefault()) {
    _impl_.uploaddeviceconfigtoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.device_config.UploadDeviceConfigResponse.uploadDeviceConfigToken)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace device_config
}  // namespace finsky
}  // namespace proto
}  // namespace playapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_5fdevice_5fconfig_2eproto
