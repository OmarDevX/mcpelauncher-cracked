// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_respone.proto

#include "play_respone.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace response {
PROTOBUF_CONSTEXPR ServerCommands::ServerCommands(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.usersettingdirtydata_)*/{}
  , /*decltype(_impl_.displayerrormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logerrorstacktrace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clearcache_)*/false} {}
struct ServerCommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCommandsDefaultTypeInternal() {}
  union {
    ServerCommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCommandsDefaultTypeInternal _ServerCommands_default_instance_;
PROTOBUF_CONSTEXPR PreFetch::PreFetch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.etag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/int64_t{0}
  , /*decltype(_impl_.softttl_)*/int64_t{0}} {}
struct PreFetchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreFetchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreFetchDefaultTypeInternal() {}
  union {
    PreFetch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreFetchDefaultTypeInternal _PreFetch_default_instance_;
PROTOBUF_CONSTEXPR AndroidAppNotificationData::AndroidAppNotificationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.assetid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.installreferrer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.installdetails_)*/nullptr
  , /*decltype(_impl_.versioncode_)*/0} {}
struct AndroidAppNotificationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidAppNotificationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidAppNotificationDataDefaultTypeInternal() {}
  union {
    AndroidAppNotificationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidAppNotificationDataDefaultTypeInternal _AndroidAppNotificationData_default_instance_;
PROTOBUF_CONSTEXPR PurchaseRemovalData::PurchaseRemovalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.malicious_)*/false} {}
struct PurchaseRemovalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PurchaseRemovalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PurchaseRemovalDataDefaultTypeInternal() {}
  union {
    PurchaseRemovalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PurchaseRemovalDataDefaultTypeInternal _PurchaseRemovalData_default_instance_;
PROTOBUF_CONSTEXPR UserNotificationData::UserNotificationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notificationtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notificationtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tickertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dialogtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dialogtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserNotificationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserNotificationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserNotificationDataDefaultTypeInternal() {}
  union {
    UserNotificationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserNotificationDataDefaultTypeInternal _UserNotificationData_default_instance_;
PROTOBUF_CONSTEXPR InAppNotificationData::InAppNotificationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.checkoutorderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inappnotificationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct InAppNotificationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InAppNotificationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InAppNotificationDataDefaultTypeInternal() {}
  union {
    InAppNotificationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InAppNotificationDataDefaultTypeInternal _InAppNotificationData_default_instance_;
PROTOBUF_CONSTEXPR PurchaseDeclinedData::PurchaseDeclinedData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.shownotification_)*/false} {}
struct PurchaseDeclinedDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PurchaseDeclinedDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PurchaseDeclinedDataDefaultTypeInternal() {}
  union {
    PurchaseDeclinedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PurchaseDeclinedDataDefaultTypeInternal _PurchaseDeclinedData_default_instance_;
PROTOBUF_CONSTEXPR LibraryDirtyData::LibraryDirtyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.libraryid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backend_)*/0} {}
struct LibraryDirtyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LibraryDirtyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LibraryDirtyDataDefaultTypeInternal() {}
  union {
    LibraryDirtyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LibraryDirtyDataDefaultTypeInternal _LibraryDirtyData_default_instance_;
PROTOBUF_CONSTEXPR Notification::Notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.doctitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.useremail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notificationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.docid_)*/nullptr
  , /*decltype(_impl_.appdata_)*/nullptr
  , /*decltype(_impl_.appdeliverydata_)*/nullptr
  , /*decltype(_impl_.purchaseremovaldata_)*/nullptr
  , /*decltype(_impl_.usernotificationdata_)*/nullptr
  , /*decltype(_impl_.inappnotificationdata_)*/nullptr
  , /*decltype(_impl_.purchasedeclineddata_)*/nullptr
  , /*decltype(_impl_.librarydirtydata_)*/nullptr
  , /*decltype(_impl_.usersettingdirtydata_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.notificationtype_)*/0
  , /*decltype(_impl_.notificationackrequired_)*/false} {}
struct NotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDefaultTypeInternal _Notification_default_instance_;
PROTOBUF_CONSTEXPR ServerMetadata::ServerMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latencymillis_)*/int64_t{0}} {}
struct ServerMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMetadataDefaultTypeInternal() {}
  union {
    ServerMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMetadataDefaultTypeInternal _ServerMetadata_default_instance_;
PROTOBUF_CONSTEXPR Targets::Targets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.targetid_)*/{}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TargetsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetsDefaultTypeInternal() {}
  union {
    Targets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetsDefaultTypeInternal _Targets_default_instance_;
PROTOBUF_CONSTEXPR ServerCookie::ServerCookie(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0} {}
struct ServerCookieDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCookieDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCookieDefaultTypeInternal() {}
  union {
    ServerCookie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCookieDefaultTypeInternal _ServerCookie_default_instance_;
PROTOBUF_CONSTEXPR ServerCookies::ServerCookies(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servercookie_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerCookiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCookiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCookiesDefaultTypeInternal() {}
  union {
    ServerCookies _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCookiesDefaultTypeInternal _ServerCookies_default_instance_;
PROTOBUF_CONSTEXPR AcceptTosResponse::AcceptTosResponse(
    ::_pbi::ConstantInitialized) {}
struct AcceptTosResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptTosResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptTosResponseDefaultTypeInternal() {}
  union {
    AcceptTosResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptTosResponseDefaultTypeInternal _AcceptTosResponse_default_instance_;
PROTOBUF_CONSTEXPR Payload::Payload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detailsresponse_)*/nullptr
  , /*decltype(_impl_.searchresponse_)*/nullptr
  , /*decltype(_impl_.tocresponse_)*/nullptr
  , /*decltype(_impl_.browseresponse_)*/nullptr
  , /*decltype(_impl_.bulkdetailsresponse_)*/nullptr
  , /*decltype(_impl_.deliveryresponse_)*/nullptr
  , /*decltype(_impl_.accepttosresponse_)*/nullptr
  , /*decltype(_impl_.uploaddeviceconfigresponse_)*/nullptr
  , /*decltype(_impl_.searchsuggestresponse_)*/nullptr
  , /*decltype(_impl_.getusersettingsresponse_)*/nullptr} {}
struct PayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PayloadDefaultTypeInternal() {}
  union {
    Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PayloadDefaultTypeInternal _Payload_default_instance_;
PROTOBUF_CONSTEXPR ResponseWrapper::ResponseWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prefetch_)*/{}
  , /*decltype(_impl_.notification_)*/{}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.commands_)*/nullptr
  , /*decltype(_impl_.servermetadata_)*/nullptr
  , /*decltype(_impl_.targets_)*/nullptr
  , /*decltype(_impl_.servercookies_)*/nullptr} {}
struct ResponseWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseWrapperDefaultTypeInternal() {}
  union {
    ResponseWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseWrapperDefaultTypeInternal _ResponseWrapper_default_instance_;
}  // namespace response
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5frespone_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5frespone_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5frespone_2eproto = nullptr;

const uint32_t TableStruct_play_5frespone_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCommands, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCommands, _impl_.clearcache_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCommands, _impl_.displayerrormessage_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCommands, _impl_.logerrorstacktrace_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCommands, _impl_.usersettingdirtydata_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _impl_.etag_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PreFetch, _impl_.softttl_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AndroidAppNotificationData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AndroidAppNotificationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AndroidAppNotificationData, _impl_.versioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AndroidAppNotificationData, _impl_.assetid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AndroidAppNotificationData, _impl_.installreferrer_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AndroidAppNotificationData, _impl_.installdetails_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseRemovalData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseRemovalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseRemovalData, _impl_.malicious_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _impl_.notificationtitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _impl_.notificationtext_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _impl_.tickertext_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _impl_.dialogtitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::UserNotificationData, _impl_.dialogtext_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::InAppNotificationData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::InAppNotificationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::InAppNotificationData, _impl_.checkoutorderid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::InAppNotificationData, _impl_.inappnotificationid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseDeclinedData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseDeclinedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseDeclinedData, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::PurchaseDeclinedData, _impl_.shownotification_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::LibraryDirtyData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::LibraryDirtyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::LibraryDirtyData, _impl_.backend_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::LibraryDirtyData, _impl_.libraryid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.notificationtype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.docid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.doctitle_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.useremail_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.appdata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.appdeliverydata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.purchaseremovaldata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.usernotificationdata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.inappnotificationdata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.purchasedeclineddata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.notificationid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.librarydirtydata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.usersettingdirtydata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Notification, _impl_.notificationackrequired_),
  13,
  12,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  2,
  10,
  11,
  14,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerMetadata, _impl_.latencymillis_),
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Targets, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Targets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Targets, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Targets, _impl_.signature_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCookie, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCookie, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCookie, _impl_.token_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCookies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ServerCookies, _impl_.servercookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::AcceptTosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.detailsresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.searchresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.tocresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.browseresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.bulkdetailsresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.deliveryresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.accepttosresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.uploaddeviceconfigresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.searchsuggestresponse_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::Payload, _impl_.getusersettingsresponse_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.prefetch_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.notification_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.servermetadata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.targets_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.servercookies_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::response::ResponseWrapper, _impl_.serverlogscookie_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  5,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::playapi::proto::finsky::response::ServerCommands)},
  { 14, 25, -1, sizeof(::playapi::proto::finsky::response::PreFetch)},
  { 30, 40, -1, sizeof(::playapi::proto::finsky::response::AndroidAppNotificationData)},
  { 44, 51, -1, sizeof(::playapi::proto::finsky::response::PurchaseRemovalData)},
  { 52, 63, -1, sizeof(::playapi::proto::finsky::response::UserNotificationData)},
  { 68, 76, -1, sizeof(::playapi::proto::finsky::response::InAppNotificationData)},
  { 78, 86, -1, sizeof(::playapi::proto::finsky::response::PurchaseDeclinedData)},
  { 88, 96, -1, sizeof(::playapi::proto::finsky::response::LibraryDirtyData)},
  { 98, 119, -1, sizeof(::playapi::proto::finsky::response::Notification)},
  { 134, 141, -1, sizeof(::playapi::proto::finsky::response::ServerMetadata)},
  { 142, 150, -1, sizeof(::playapi::proto::finsky::response::Targets)},
  { 152, 160, -1, sizeof(::playapi::proto::finsky::response::ServerCookie)},
  { 162, -1, -1, sizeof(::playapi::proto::finsky::response::ServerCookies)},
  { 169, -1, -1, sizeof(::playapi::proto::finsky::response::AcceptTosResponse)},
  { 175, 191, -1, sizeof(::playapi::proto::finsky::response::Payload)},
  { 201, 215, -1, sizeof(::playapi::proto::finsky::response::ResponseWrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::response::_ServerCommands_default_instance_._instance,
  &::playapi::proto::finsky::response::_PreFetch_default_instance_._instance,
  &::playapi::proto::finsky::response::_AndroidAppNotificationData_default_instance_._instance,
  &::playapi::proto::finsky::response::_PurchaseRemovalData_default_instance_._instance,
  &::playapi::proto::finsky::response::_UserNotificationData_default_instance_._instance,
  &::playapi::proto::finsky::response::_InAppNotificationData_default_instance_._instance,
  &::playapi::proto::finsky::response::_PurchaseDeclinedData_default_instance_._instance,
  &::playapi::proto::finsky::response::_LibraryDirtyData_default_instance_._instance,
  &::playapi::proto::finsky::response::_Notification_default_instance_._instance,
  &::playapi::proto::finsky::response::_ServerMetadata_default_instance_._instance,
  &::playapi::proto::finsky::response::_Targets_default_instance_._instance,
  &::playapi::proto::finsky::response::_ServerCookie_default_instance_._instance,
  &::playapi::proto::finsky::response::_ServerCookies_default_instance_._instance,
  &::playapi::proto::finsky::response::_AcceptTosResponse_default_instance_._instance,
  &::playapi::proto::finsky::response::_Payload_default_instance_._instance,
  &::playapi::proto::finsky::response::_ResponseWrapper_default_instance_._instance,
};

const char descriptor_table_protodef_play_5frespone_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022play_respone.proto\022\035playapi.proto.fins"
  "ky.response\032\021play_common.proto\032\023play_dow"
  "nload.proto\032\023play_settings.proto\032\016play_t"
  "oc.proto\032\030play_device_config.proto\032\021play"
  "_search.proto\032\021play_browse.proto\032\022play_d"
  "etails.proto\"\260\001\n\016ServerCommands\022\022\n\nclear"
  "Cache\030\001 \001(\010\022\033\n\023displayErrorMessage\030\002 \001(\t"
  "\022\032\n\022logErrorStacktrace\030\003 \001(\t\022Q\n\024userSett"
  "ingDirtyData\030\004 \003(\01323.playapi.proto.finsk"
  "y.settings.UserSettingDirtyData\"U\n\010PreFe"
  "tch\022\013\n\003url\030\001 \001(\t\022\020\n\010response\030\002 \001(\014\022\014\n\004et"
  "ag\030\003 \001(\t\022\013\n\003ttl\030\004 \001(\003\022\017\n\007softTtl\030\005 \001(\003\"\242"
  "\001\n\032AndroidAppNotificationData\022\023\n\013version"
  "Code\030\001 \001(\005\022\017\n\007assetId\030\002 \001(\t\022\027\n\017installRe"
  "ferrer\030\003 \001(\t\022E\n\016installDetails\030\004 \001(\0132-.p"
  "layapi.proto.finsky.download.InstallDeta"
  "ils\"(\n\023PurchaseRemovalData\022\021\n\tmalicious\030"
  "\001 \001(\010\"\210\001\n\024UserNotificationData\022\031\n\021notifi"
  "cationTitle\030\001 \001(\t\022\030\n\020notificationText\030\002 "
  "\001(\t\022\022\n\ntickerText\030\003 \001(\t\022\023\n\013dialogTitle\030\004"
  " \001(\t\022\022\n\ndialogText\030\005 \001(\t\"M\n\025InAppNotific"
  "ationData\022\027\n\017checkoutOrderId\030\001 \001(\t\022\033\n\023in"
  "AppNotificationId\030\002 \001(\t\"@\n\024PurchaseDecli"
  "nedData\022\016\n\006reason\030\001 \001(\005\022\030\n\020showNotificat"
  "ion\030\002 \001(\010\"6\n\020LibraryDirtyData\022\017\n\007backend"
  "\030\001 \001(\005\022\021\n\tlibraryId\030\002 \001(\t\"\313\006\n\014Notificati"
  "on\022\030\n\020notificationType\030\001 \001(\005\022\021\n\ttimestam"
  "p\030\003 \001(\003\022*\n\005docid\030\004 \001(\0132\033.playapi.proto.f"
  "insky.Docid\022\020\n\010docTitle\030\005 \001(\t\022\021\n\tuserEma"
  "il\030\006 \001(\t\022J\n\007appData\030\007 \001(\01329.playapi.prot"
  "o.finsky.response.AndroidAppNotification"
  "Data\022N\n\017appDeliveryData\030\010 \001(\01325.playapi."
  "proto.finsky.download.AndroidAppDelivery"
  "Data\022O\n\023purchaseRemovalData\030\t \001(\01322.play"
  "api.proto.finsky.response.PurchaseRemova"
  "lData\022Q\n\024userNotificationData\030\n \001(\01323.pl"
  "ayapi.proto.finsky.response.UserNotifica"
  "tionData\022S\n\025inAppNotificationData\030\013 \001(\0132"
  "4.playapi.proto.finsky.response.InAppNot"
  "ificationData\022Q\n\024purchaseDeclinedData\030\014 "
  "\001(\01323.playapi.proto.finsky.response.Purc"
  "haseDeclinedData\022\026\n\016notificationId\030\r \001(\t"
  "\022I\n\020libraryDirtyData\030\017 \001(\0132/.playapi.pro"
  "to.finsky.response.LibraryDirtyData\022Q\n\024u"
  "serSettingDirtyData\030\020 \001(\01323.playapi.prot"
  "o.finsky.settings.UserSettingDirtyData\022\037"
  "\n\027notificationAckRequired\030\021 \001(\010\"\'\n\016Serve"
  "rMetadata\022\025\n\rlatencyMillis\030\001 \001(\003\".\n\007Targ"
  "ets\022\020\n\010targetId\030\001 \003(\003\022\021\n\tsignature\030\002 \001(\014"
  "\"+\n\014ServerCookie\022\014\n\004type\030\001 \001(\005\022\r\n\005token\030"
  "\002 \001(\014\"R\n\rServerCookies\022A\n\014serverCookie\030\001"
  " \003(\0132+.playapi.proto.finsky.response.Ser"
  "verCookie\"\023\n\021AcceptTosResponse\"\217\006\n\007Paylo"
  "ad\022F\n\017detailsResponse\030\002 \001(\0132-.playapi.pr"
  "oto.finsky.details.DetailsResponse\022C\n\016se"
  "archResponse\030\005 \001(\0132+.playapi.proto.finsk"
  "y.search.SearchResponse\022:\n\013tocResponse\030\006"
  " \001(\0132%.playapi.proto.finsky.toc.TocRespo"
  "nse\022C\n\016browseResponse\030\007 \001(\0132+.playapi.pr"
  "oto.finsky.browse.BrowseResponse\022N\n\023bulk"
  "DetailsResponse\030\023 \001(\01321.playapi.proto.fi"
  "nsky.details.BulkDetailsResponse\022I\n\020deli"
  "veryResponse\030\025 \001(\0132/.playapi.proto.finsk"
  "y.download.DeliveryResponse\022K\n\021acceptTos"
  "Response\030\026 \001(\01320.playapi.proto.finsky.re"
  "sponse.AcceptTosResponse\022b\n\032uploadDevice"
  "ConfigResponse\030\034 \001(\0132>.playapi.proto.fin"
  "sky.device_config.UploadDeviceConfigResp"
  "onse\022Q\n\025searchSuggestResponse\030( \001(\01322.pl"
  "ayapi.proto.finsky.search.SearchSuggestR"
  "esponse\022W\n\027getUserSettingsResponse\0306 \001(\013"
  "26.playapi.proto.finsky.settings.GetUser"
  "SettingsResponse\"\350\003\n\017ResponseWrapper\0227\n\007"
  "payload\030\001 \001(\0132&.playapi.proto.finsky.res"
  "ponse.Payload\022\?\n\010commands\030\002 \001(\0132-.playap"
  "i.proto.finsky.response.ServerCommands\0229"
  "\n\010preFetch\030\003 \003(\0132\'.playapi.proto.finsky."
  "response.PreFetch\022A\n\014notification\030\004 \003(\0132"
  "+.playapi.proto.finsky.response.Notifica"
  "tion\022E\n\016serverMetadata\030\005 \001(\0132-.playapi.p"
  "roto.finsky.response.ServerMetadata\0227\n\007t"
  "argets\030\006 \001(\0132&.playapi.proto.finsky.resp"
  "onse.Targets\022C\n\rserverCookies\030\007 \001(\0132,.pl"
  "ayapi.proto.finsky.response.ServerCookie"
  "s\022\030\n\020serverLogsCookie\030\t \001(\014"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5frespone_2eproto_deps[8] = {
  &::descriptor_table_play_5fbrowse_2eproto,
  &::descriptor_table_play_5fcommon_2eproto,
  &::descriptor_table_play_5fdetails_2eproto,
  &::descriptor_table_play_5fdevice_5fconfig_2eproto,
  &::descriptor_table_play_5fdownload_2eproto,
  &::descriptor_table_play_5fsearch_2eproto,
  &::descriptor_table_play_5fsettings_2eproto,
  &::descriptor_table_play_5ftoc_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5frespone_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5frespone_2eproto = {
    false, false, 3387, descriptor_table_protodef_play_5frespone_2eproto,
    "play_respone.proto",
    &descriptor_table_play_5frespone_2eproto_once, descriptor_table_play_5frespone_2eproto_deps, 8, 16,
    schemas, file_default_instances, TableStruct_play_5frespone_2eproto::offsets,
    file_level_metadata_play_5frespone_2eproto, file_level_enum_descriptors_play_5frespone_2eproto,
    file_level_service_descriptors_play_5frespone_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5frespone_2eproto_getter() {
  return &descriptor_table_play_5frespone_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5frespone_2eproto(&descriptor_table_play_5frespone_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace response {

// ===================================================================

class ServerCommands::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerCommands>()._impl_._has_bits_);
  static void set_has_clearcache(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_displayerrormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logerrorstacktrace(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ServerCommands::clear_usersettingdirtydata() {
  _impl_.usersettingdirtydata_.Clear();
}
ServerCommands::ServerCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.ServerCommands)
}
ServerCommands::ServerCommands(const ServerCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerCommands* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.usersettingdirtydata_){from._impl_.usersettingdirtydata_}
    , decltype(_impl_.displayerrormessage_){}
    , decltype(_impl_.logerrorstacktrace_){}
    , decltype(_impl_.clearcache_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayerrormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayerrormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayerrormessage()) {
    _this->_impl_.displayerrormessage_.Set(from._internal_displayerrormessage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logerrorstacktrace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logerrorstacktrace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_logerrorstacktrace()) {
    _this->_impl_.logerrorstacktrace_.Set(from._internal_logerrorstacktrace(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.clearcache_ = from._impl_.clearcache_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.ServerCommands)
}

inline void ServerCommands::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.usersettingdirtydata_){arena}
    , decltype(_impl_.displayerrormessage_){}
    , decltype(_impl_.logerrorstacktrace_){}
    , decltype(_impl_.clearcache_){false}
  };
  _impl_.displayerrormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayerrormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logerrorstacktrace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logerrorstacktrace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerCommands::~ServerCommands() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.ServerCommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usersettingdirtydata_.~RepeatedPtrField();
  _impl_.displayerrormessage_.Destroy();
  _impl_.logerrorstacktrace_.Destroy();
}

void ServerCommands::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.ServerCommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usersettingdirtydata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayerrormessage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.logerrorstacktrace_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.clearcache_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool clearCache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clearcache(&has_bits);
          _impl_.clearcache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string displayErrorMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_displayerrormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.ServerCommands.displayErrorMessage");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string logErrorStacktrace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_logerrorstacktrace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.ServerCommands.logErrorStacktrace");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.settings.UserSettingDirtyData userSettingDirtyData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usersettingdirtydata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerCommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.ServerCommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool clearCache = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_clearcache(), target);
  }

  // optional string displayErrorMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayerrormessage().data(), static_cast<int>(this->_internal_displayerrormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.ServerCommands.displayErrorMessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayerrormessage(), target);
  }

  // optional string logErrorStacktrace = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_logerrorstacktrace().data(), static_cast<int>(this->_internal_logerrorstacktrace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.ServerCommands.logErrorStacktrace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logerrorstacktrace(), target);
  }

  // repeated .playapi.proto.finsky.settings.UserSettingDirtyData userSettingDirtyData = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_usersettingdirtydata_size()); i < n; i++) {
    const auto& repfield = this->_internal_usersettingdirtydata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.ServerCommands)
  return target;
}

size_t ServerCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.ServerCommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.settings.UserSettingDirtyData userSettingDirtyData = 4;
  total_size += 1UL * this->_internal_usersettingdirtydata_size();
  for (const auto& msg : this->_impl_.usersettingdirtydata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string displayErrorMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayerrormessage());
    }

    // optional string logErrorStacktrace = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logerrorstacktrace());
    }

    // optional bool clearCache = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerCommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerCommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerCommands::GetClassData() const { return &_class_data_; }


void ServerCommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerCommands*>(&to_msg);
  auto& from = static_cast<const ServerCommands&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.ServerCommands)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.usersettingdirtydata_.MergeFrom(from._impl_.usersettingdirtydata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayerrormessage(from._internal_displayerrormessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_logerrorstacktrace(from._internal_logerrorstacktrace());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.clearcache_ = from._impl_.clearcache_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerCommands::CopyFrom(const ServerCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.ServerCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCommands::IsInitialized() const {
  return true;
}

void ServerCommands::InternalSwap(ServerCommands* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.usersettingdirtydata_.InternalSwap(&other->_impl_.usersettingdirtydata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayerrormessage_, lhs_arena,
      &other->_impl_.displayerrormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logerrorstacktrace_, lhs_arena,
      &other->_impl_.logerrorstacktrace_, rhs_arena
  );
  swap(_impl_.clearcache_, other->_impl_.clearcache_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[0]);
}

// ===================================================================

class PreFetch::_Internal {
 public:
  using HasBits = decltype(std::declval<PreFetch>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_etag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_softttl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PreFetch::PreFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.PreFetch)
}
PreFetch::PreFetch(const PreFetch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PreFetch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.etag_){}
    , decltype(_impl_.ttl_){}
    , decltype(_impl_.softttl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response()) {
    _this->_impl_.response_.Set(from._internal_response(), 
      _this->GetArenaForAllocation());
  }
  _impl_.etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_etag()) {
    _this->_impl_.etag_.Set(from._internal_etag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ttl_, &from._impl_.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.softttl_) -
    reinterpret_cast<char*>(&_impl_.ttl_)) + sizeof(_impl_.softttl_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.PreFetch)
}

inline void PreFetch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.etag_){}
    , decltype(_impl_.ttl_){int64_t{0}}
    , decltype(_impl_.softttl_){int64_t{0}}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreFetch::~PreFetch() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.PreFetch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreFetch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.response_.Destroy();
  _impl_.etag_.Destroy();
}

void PreFetch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PreFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.PreFetch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.response_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.etag_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.ttl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.softttl_) -
        reinterpret_cast<char*>(&_impl_.ttl_)) + sizeof(_impl_.softttl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreFetch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.PreFetch.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string etag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.PreFetch.etag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ttl(&has_bits);
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 softTtl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_softttl(&has_bits);
          _impl_.softttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreFetch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.PreFetch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.PreFetch.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bytes response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_response(), target);
  }

  // optional string etag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.PreFetch.etag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_etag(), target);
  }

  // optional int64 ttl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_ttl(), target);
  }

  // optional int64 softTtl = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_softttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.PreFetch)
  return target;
}

size_t PreFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.PreFetch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_response());
    }

    // optional string etag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_etag());
    }

    // optional int64 ttl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
    }

    // optional int64 softTtl = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_softttl());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreFetch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PreFetch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreFetch::GetClassData() const { return &_class_data_; }


void PreFetch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PreFetch*>(&to_msg);
  auto& from = static_cast<const PreFetch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.PreFetch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_response(from._internal_response());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_etag(from._internal_etag());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ttl_ = from._impl_.ttl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.softttl_ = from._impl_.softttl_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreFetch::CopyFrom(const PreFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.PreFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreFetch::IsInitialized() const {
  return true;
}

void PreFetch::InternalSwap(PreFetch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.etag_, lhs_arena,
      &other->_impl_.etag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreFetch, _impl_.softttl_)
      + sizeof(PreFetch::_impl_.softttl_)
      - PROTOBUF_FIELD_OFFSET(PreFetch, _impl_.ttl_)>(
          reinterpret_cast<char*>(&_impl_.ttl_),
          reinterpret_cast<char*>(&other->_impl_.ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreFetch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[1]);
}

// ===================================================================

class AndroidAppNotificationData::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidAppNotificationData>()._impl_._has_bits_);
  static void set_has_versioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_installreferrer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::download::InstallDetails& installdetails(const AndroidAppNotificationData* msg);
  static void set_has_installdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::download::InstallDetails&
AndroidAppNotificationData::_Internal::installdetails(const AndroidAppNotificationData* msg) {
  return *msg->_impl_.installdetails_;
}
void AndroidAppNotificationData::clear_installdetails() {
  if (_impl_.installdetails_ != nullptr) _impl_.installdetails_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AndroidAppNotificationData::AndroidAppNotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.AndroidAppNotificationData)
}
AndroidAppNotificationData::AndroidAppNotificationData(const AndroidAppNotificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidAppNotificationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assetid_){}
    , decltype(_impl_.installreferrer_){}
    , decltype(_impl_.installdetails_){nullptr}
    , decltype(_impl_.versioncode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.assetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_assetid()) {
    _this->_impl_.assetid_.Set(from._internal_assetid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.installreferrer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installreferrer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_installreferrer()) {
    _this->_impl_.installreferrer_.Set(from._internal_installreferrer(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_installdetails()) {
    _this->_impl_.installdetails_ = new ::playapi::proto::finsky::download::InstallDetails(*from._impl_.installdetails_);
  }
  _this->_impl_.versioncode_ = from._impl_.versioncode_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.AndroidAppNotificationData)
}

inline void AndroidAppNotificationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assetid_){}
    , decltype(_impl_.installreferrer_){}
    , decltype(_impl_.installdetails_){nullptr}
    , decltype(_impl_.versioncode_){0}
  };
  _impl_.assetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.installreferrer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installreferrer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidAppNotificationData::~AndroidAppNotificationData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.AndroidAppNotificationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidAppNotificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assetid_.Destroy();
  _impl_.installreferrer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.installdetails_;
}

void AndroidAppNotificationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidAppNotificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.AndroidAppNotificationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.assetid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.installreferrer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.installdetails_ != nullptr);
      _impl_.installdetails_->Clear();
    }
  }
  _impl_.versioncode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidAppNotificationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 versionCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_versioncode(&has_bits);
          _impl_.versioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string assetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_assetid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.AndroidAppNotificationData.assetId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string installReferrer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_installreferrer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.AndroidAppNotificationData.installReferrer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.InstallDetails installDetails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_installdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidAppNotificationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.AndroidAppNotificationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 versionCode = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_versioncode(), target);
  }

  // optional string assetId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assetid().data(), static_cast<int>(this->_internal_assetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.AndroidAppNotificationData.assetId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_assetid(), target);
  }

  // optional string installReferrer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_installreferrer().data(), static_cast<int>(this->_internal_installreferrer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.AndroidAppNotificationData.installReferrer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_installreferrer(), target);
  }

  // optional .playapi.proto.finsky.download.InstallDetails installDetails = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::installdetails(this),
        _Internal::installdetails(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.AndroidAppNotificationData)
  return target;
}

size_t AndroidAppNotificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.AndroidAppNotificationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string assetId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_assetid());
    }

    // optional string installReferrer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_installreferrer());
    }

    // optional .playapi.proto.finsky.download.InstallDetails installDetails = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.installdetails_);
    }

    // optional int32 versionCode = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versioncode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidAppNotificationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidAppNotificationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidAppNotificationData::GetClassData() const { return &_class_data_; }


void AndroidAppNotificationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidAppNotificationData*>(&to_msg);
  auto& from = static_cast<const AndroidAppNotificationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.AndroidAppNotificationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_assetid(from._internal_assetid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_installreferrer(from._internal_installreferrer());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_installdetails()->::playapi::proto::finsky::download::InstallDetails::MergeFrom(
          from._internal_installdetails());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.versioncode_ = from._impl_.versioncode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidAppNotificationData::CopyFrom(const AndroidAppNotificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.AndroidAppNotificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidAppNotificationData::IsInitialized() const {
  return true;
}

void AndroidAppNotificationData::InternalSwap(AndroidAppNotificationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.assetid_, lhs_arena,
      &other->_impl_.assetid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.installreferrer_, lhs_arena,
      &other->_impl_.installreferrer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidAppNotificationData, _impl_.versioncode_)
      + sizeof(AndroidAppNotificationData::_impl_.versioncode_)
      - PROTOBUF_FIELD_OFFSET(AndroidAppNotificationData, _impl_.installdetails_)>(
          reinterpret_cast<char*>(&_impl_.installdetails_),
          reinterpret_cast<char*>(&other->_impl_.installdetails_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidAppNotificationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[2]);
}

// ===================================================================

class PurchaseRemovalData::_Internal {
 public:
  using HasBits = decltype(std::declval<PurchaseRemovalData>()._impl_._has_bits_);
  static void set_has_malicious(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PurchaseRemovalData::PurchaseRemovalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.PurchaseRemovalData)
}
PurchaseRemovalData::PurchaseRemovalData(const PurchaseRemovalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PurchaseRemovalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.malicious_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.malicious_ = from._impl_.malicious_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.PurchaseRemovalData)
}

inline void PurchaseRemovalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.malicious_){false}
  };
}

PurchaseRemovalData::~PurchaseRemovalData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.PurchaseRemovalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PurchaseRemovalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PurchaseRemovalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PurchaseRemovalData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.PurchaseRemovalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.malicious_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseRemovalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool malicious = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_malicious(&has_bits);
          _impl_.malicious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PurchaseRemovalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.PurchaseRemovalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool malicious = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_malicious(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.PurchaseRemovalData)
  return target;
}

size_t PurchaseRemovalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.PurchaseRemovalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool malicious = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PurchaseRemovalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PurchaseRemovalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PurchaseRemovalData::GetClassData() const { return &_class_data_; }


void PurchaseRemovalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PurchaseRemovalData*>(&to_msg);
  auto& from = static_cast<const PurchaseRemovalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.PurchaseRemovalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_malicious()) {
    _this->_internal_set_malicious(from._internal_malicious());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PurchaseRemovalData::CopyFrom(const PurchaseRemovalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.PurchaseRemovalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseRemovalData::IsInitialized() const {
  return true;
}

void PurchaseRemovalData::InternalSwap(PurchaseRemovalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.malicious_, other->_impl_.malicious_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseRemovalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[3]);
}

// ===================================================================

class UserNotificationData::_Internal {
 public:
  using HasBits = decltype(std::declval<UserNotificationData>()._impl_._has_bits_);
  static void set_has_notificationtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notificationtext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tickertext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dialogtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dialogtext(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

UserNotificationData::UserNotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.UserNotificationData)
}
UserNotificationData::UserNotificationData(const UserNotificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserNotificationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notificationtitle_){}
    , decltype(_impl_.notificationtext_){}
    , decltype(_impl_.tickertext_){}
    , decltype(_impl_.dialogtitle_){}
    , decltype(_impl_.dialogtext_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notificationtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notificationtitle()) {
    _this->_impl_.notificationtitle_.Set(from._internal_notificationtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notificationtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notificationtext()) {
    _this->_impl_.notificationtext_.Set(from._internal_notificationtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tickertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tickertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tickertext()) {
    _this->_impl_.tickertext_.Set(from._internal_tickertext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dialogtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialogtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dialogtitle()) {
    _this->_impl_.dialogtitle_.Set(from._internal_dialogtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dialogtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialogtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dialogtext()) {
    _this->_impl_.dialogtext_.Set(from._internal_dialogtext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.UserNotificationData)
}

inline void UserNotificationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notificationtitle_){}
    , decltype(_impl_.notificationtext_){}
    , decltype(_impl_.tickertext_){}
    , decltype(_impl_.dialogtitle_){}
    , decltype(_impl_.dialogtext_){}
  };
  _impl_.notificationtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notificationtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tickertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tickertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dialogtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialogtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dialogtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialogtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserNotificationData::~UserNotificationData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.UserNotificationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserNotificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notificationtitle_.Destroy();
  _impl_.notificationtext_.Destroy();
  _impl_.tickertext_.Destroy();
  _impl_.dialogtitle_.Destroy();
  _impl_.dialogtext_.Destroy();
}

void UserNotificationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserNotificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.UserNotificationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.notificationtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.notificationtext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.tickertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.dialogtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dialogtext_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserNotificationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string notificationTitle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notificationtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.UserNotificationData.notificationTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string notificationText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_notificationtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.UserNotificationData.notificationText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tickerText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tickertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.UserNotificationData.tickerText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dialogTitle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dialogtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.UserNotificationData.dialogTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dialogText = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dialogtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.UserNotificationData.dialogText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserNotificationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.UserNotificationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string notificationTitle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notificationtitle().data(), static_cast<int>(this->_internal_notificationtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.UserNotificationData.notificationTitle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notificationtitle(), target);
  }

  // optional string notificationText = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notificationtext().data(), static_cast<int>(this->_internal_notificationtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.UserNotificationData.notificationText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notificationtext(), target);
  }

  // optional string tickerText = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tickertext().data(), static_cast<int>(this->_internal_tickertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.UserNotificationData.tickerText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tickertext(), target);
  }

  // optional string dialogTitle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dialogtitle().data(), static_cast<int>(this->_internal_dialogtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.UserNotificationData.dialogTitle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dialogtitle(), target);
  }

  // optional string dialogText = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dialogtext().data(), static_cast<int>(this->_internal_dialogtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.UserNotificationData.dialogText");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dialogtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.UserNotificationData)
  return target;
}

size_t UserNotificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.UserNotificationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string notificationTitle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notificationtitle());
    }

    // optional string notificationText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notificationtext());
    }

    // optional string tickerText = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tickertext());
    }

    // optional string dialogTitle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dialogtitle());
    }

    // optional string dialogText = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dialogtext());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserNotificationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserNotificationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserNotificationData::GetClassData() const { return &_class_data_; }


void UserNotificationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserNotificationData*>(&to_msg);
  auto& from = static_cast<const UserNotificationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.UserNotificationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_notificationtitle(from._internal_notificationtitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_notificationtext(from._internal_notificationtext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_tickertext(from._internal_tickertext());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_dialogtitle(from._internal_dialogtitle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_dialogtext(from._internal_dialogtext());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserNotificationData::CopyFrom(const UserNotificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.UserNotificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNotificationData::IsInitialized() const {
  return true;
}

void UserNotificationData::InternalSwap(UserNotificationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notificationtitle_, lhs_arena,
      &other->_impl_.notificationtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notificationtext_, lhs_arena,
      &other->_impl_.notificationtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tickertext_, lhs_arena,
      &other->_impl_.tickertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dialogtitle_, lhs_arena,
      &other->_impl_.dialogtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dialogtext_, lhs_arena,
      &other->_impl_.dialogtext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserNotificationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[4]);
}

// ===================================================================

class InAppNotificationData::_Internal {
 public:
  using HasBits = decltype(std::declval<InAppNotificationData>()._impl_._has_bits_);
  static void set_has_checkoutorderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inappnotificationid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InAppNotificationData::InAppNotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.InAppNotificationData)
}
InAppNotificationData::InAppNotificationData(const InAppNotificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InAppNotificationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.checkoutorderid_){}
    , decltype(_impl_.inappnotificationid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.checkoutorderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkoutorderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_checkoutorderid()) {
    _this->_impl_.checkoutorderid_.Set(from._internal_checkoutorderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inappnotificationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inappnotificationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_inappnotificationid()) {
    _this->_impl_.inappnotificationid_.Set(from._internal_inappnotificationid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.InAppNotificationData)
}

inline void InAppNotificationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.checkoutorderid_){}
    , decltype(_impl_.inappnotificationid_){}
  };
  _impl_.checkoutorderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkoutorderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inappnotificationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inappnotificationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InAppNotificationData::~InAppNotificationData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.InAppNotificationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InAppNotificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.checkoutorderid_.Destroy();
  _impl_.inappnotificationid_.Destroy();
}

void InAppNotificationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InAppNotificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.InAppNotificationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.checkoutorderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.inappnotificationid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InAppNotificationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string checkoutOrderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_checkoutorderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.InAppNotificationData.checkoutOrderId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string inAppNotificationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_inappnotificationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.InAppNotificationData.inAppNotificationId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InAppNotificationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.InAppNotificationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string checkoutOrderId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_checkoutorderid().data(), static_cast<int>(this->_internal_checkoutorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.InAppNotificationData.checkoutOrderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_checkoutorderid(), target);
  }

  // optional string inAppNotificationId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inappnotificationid().data(), static_cast<int>(this->_internal_inappnotificationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.InAppNotificationData.inAppNotificationId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_inappnotificationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.InAppNotificationData)
  return target;
}

size_t InAppNotificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.InAppNotificationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string checkoutOrderId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_checkoutorderid());
    }

    // optional string inAppNotificationId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inappnotificationid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InAppNotificationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InAppNotificationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InAppNotificationData::GetClassData() const { return &_class_data_; }


void InAppNotificationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InAppNotificationData*>(&to_msg);
  auto& from = static_cast<const InAppNotificationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.InAppNotificationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_checkoutorderid(from._internal_checkoutorderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_inappnotificationid(from._internal_inappnotificationid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InAppNotificationData::CopyFrom(const InAppNotificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.InAppNotificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InAppNotificationData::IsInitialized() const {
  return true;
}

void InAppNotificationData::InternalSwap(InAppNotificationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkoutorderid_, lhs_arena,
      &other->_impl_.checkoutorderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inappnotificationid_, lhs_arena,
      &other->_impl_.inappnotificationid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InAppNotificationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[5]);
}

// ===================================================================

class PurchaseDeclinedData::_Internal {
 public:
  using HasBits = decltype(std::declval<PurchaseDeclinedData>()._impl_._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shownotification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PurchaseDeclinedData::PurchaseDeclinedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.PurchaseDeclinedData)
}
PurchaseDeclinedData::PurchaseDeclinedData(const PurchaseDeclinedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PurchaseDeclinedData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.shownotification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reason_, &from._impl_.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shownotification_) -
    reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.shownotification_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.PurchaseDeclinedData)
}

inline void PurchaseDeclinedData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.shownotification_){false}
  };
}

PurchaseDeclinedData::~PurchaseDeclinedData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.PurchaseDeclinedData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PurchaseDeclinedData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PurchaseDeclinedData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PurchaseDeclinedData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.PurchaseDeclinedData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shownotification_) -
        reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.shownotification_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseDeclinedData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool showNotification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shownotification(&has_bits);
          _impl_.shownotification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PurchaseDeclinedData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.PurchaseDeclinedData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_reason(), target);
  }

  // optional bool showNotification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_shownotification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.PurchaseDeclinedData)
  return target;
}

size_t PurchaseDeclinedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.PurchaseDeclinedData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 reason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
    }

    // optional bool showNotification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PurchaseDeclinedData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PurchaseDeclinedData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PurchaseDeclinedData::GetClassData() const { return &_class_data_; }


void PurchaseDeclinedData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PurchaseDeclinedData*>(&to_msg);
  auto& from = static_cast<const PurchaseDeclinedData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.PurchaseDeclinedData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shownotification_ = from._impl_.shownotification_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PurchaseDeclinedData::CopyFrom(const PurchaseDeclinedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.PurchaseDeclinedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseDeclinedData::IsInitialized() const {
  return true;
}

void PurchaseDeclinedData::InternalSwap(PurchaseDeclinedData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PurchaseDeclinedData, _impl_.shownotification_)
      + sizeof(PurchaseDeclinedData::_impl_.shownotification_)
      - PROTOBUF_FIELD_OFFSET(PurchaseDeclinedData, _impl_.reason_)>(
          reinterpret_cast<char*>(&_impl_.reason_),
          reinterpret_cast<char*>(&other->_impl_.reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseDeclinedData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[6]);
}

// ===================================================================

class LibraryDirtyData::_Internal {
 public:
  using HasBits = decltype(std::declval<LibraryDirtyData>()._impl_._has_bits_);
  static void set_has_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_libraryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LibraryDirtyData::LibraryDirtyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.LibraryDirtyData)
}
LibraryDirtyData::LibraryDirtyData(const LibraryDirtyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LibraryDirtyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.libraryid_){}
    , decltype(_impl_.backend_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.libraryid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.libraryid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_libraryid()) {
    _this->_impl_.libraryid_.Set(from._internal_libraryid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.backend_ = from._impl_.backend_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.LibraryDirtyData)
}

inline void LibraryDirtyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.libraryid_){}
    , decltype(_impl_.backend_){0}
  };
  _impl_.libraryid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.libraryid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LibraryDirtyData::~LibraryDirtyData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.LibraryDirtyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LibraryDirtyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.libraryid_.Destroy();
}

void LibraryDirtyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LibraryDirtyData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.LibraryDirtyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.libraryid_.ClearNonDefaultToEmpty();
  }
  _impl_.backend_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryDirtyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 backend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_backend(&has_bits);
          _impl_.backend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string libraryId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_libraryid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.LibraryDirtyData.libraryId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryDirtyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.LibraryDirtyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 backend = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_backend(), target);
  }

  // optional string libraryId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_libraryid().data(), static_cast<int>(this->_internal_libraryid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.LibraryDirtyData.libraryId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_libraryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.LibraryDirtyData)
  return target;
}

size_t LibraryDirtyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.LibraryDirtyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string libraryId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_libraryid());
    }

    // optional int32 backend = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backend());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryDirtyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LibraryDirtyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryDirtyData::GetClassData() const { return &_class_data_; }


void LibraryDirtyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LibraryDirtyData*>(&to_msg);
  auto& from = static_cast<const LibraryDirtyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.LibraryDirtyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_libraryid(from._internal_libraryid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.backend_ = from._impl_.backend_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryDirtyData::CopyFrom(const LibraryDirtyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.LibraryDirtyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryDirtyData::IsInitialized() const {
  return true;
}

void LibraryDirtyData::InternalSwap(LibraryDirtyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.libraryid_, lhs_arena,
      &other->_impl_.libraryid_, rhs_arena
  );
  swap(_impl_.backend_, other->_impl_.backend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryDirtyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[7]);
}

// ===================================================================

class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._impl_._has_bits_);
  static void set_has_notificationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::playapi::proto::finsky::Docid& docid(const Notification* msg);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doctitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_useremail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::response::AndroidAppNotificationData& appdata(const Notification* msg);
  static void set_has_appdata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::download::AndroidAppDeliveryData& appdeliverydata(const Notification* msg);
  static void set_has_appdeliverydata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::playapi::proto::finsky::response::PurchaseRemovalData& purchaseremovaldata(const Notification* msg);
  static void set_has_purchaseremovaldata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::playapi::proto::finsky::response::UserNotificationData& usernotificationdata(const Notification* msg);
  static void set_has_usernotificationdata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::response::InAppNotificationData& inappnotificationdata(const Notification* msg);
  static void set_has_inappnotificationdata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::finsky::response::PurchaseDeclinedData& purchasedeclineddata(const Notification* msg);
  static void set_has_purchasedeclineddata(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_notificationid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::response::LibraryDirtyData& librarydirtydata(const Notification* msg);
  static void set_has_librarydirtydata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::playapi::proto::finsky::settings::UserSettingDirtyData& usersettingdirtydata(const Notification* msg);
  static void set_has_usersettingdirtydata(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_notificationackrequired(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::playapi::proto::finsky::Docid&
Notification::_Internal::docid(const Notification* msg) {
  return *msg->_impl_.docid_;
}
const ::playapi::proto::finsky::response::AndroidAppNotificationData&
Notification::_Internal::appdata(const Notification* msg) {
  return *msg->_impl_.appdata_;
}
const ::playapi::proto::finsky::download::AndroidAppDeliveryData&
Notification::_Internal::appdeliverydata(const Notification* msg) {
  return *msg->_impl_.appdeliverydata_;
}
const ::playapi::proto::finsky::response::PurchaseRemovalData&
Notification::_Internal::purchaseremovaldata(const Notification* msg) {
  return *msg->_impl_.purchaseremovaldata_;
}
const ::playapi::proto::finsky::response::UserNotificationData&
Notification::_Internal::usernotificationdata(const Notification* msg) {
  return *msg->_impl_.usernotificationdata_;
}
const ::playapi::proto::finsky::response::InAppNotificationData&
Notification::_Internal::inappnotificationdata(const Notification* msg) {
  return *msg->_impl_.inappnotificationdata_;
}
const ::playapi::proto::finsky::response::PurchaseDeclinedData&
Notification::_Internal::purchasedeclineddata(const Notification* msg) {
  return *msg->_impl_.purchasedeclineddata_;
}
const ::playapi::proto::finsky::response::LibraryDirtyData&
Notification::_Internal::librarydirtydata(const Notification* msg) {
  return *msg->_impl_.librarydirtydata_;
}
const ::playapi::proto::finsky::settings::UserSettingDirtyData&
Notification::_Internal::usersettingdirtydata(const Notification* msg) {
  return *msg->_impl_.usersettingdirtydata_;
}
void Notification::clear_docid() {
  if (_impl_.docid_ != nullptr) _impl_.docid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Notification::clear_appdeliverydata() {
  if (_impl_.appdeliverydata_ != nullptr) _impl_.appdeliverydata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Notification::clear_usersettingdirtydata() {
  if (_impl_.usersettingdirtydata_ != nullptr) _impl_.usersettingdirtydata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Notification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.doctitle_){}
    , decltype(_impl_.useremail_){}
    , decltype(_impl_.notificationid_){}
    , decltype(_impl_.docid_){nullptr}
    , decltype(_impl_.appdata_){nullptr}
    , decltype(_impl_.appdeliverydata_){nullptr}
    , decltype(_impl_.purchaseremovaldata_){nullptr}
    , decltype(_impl_.usernotificationdata_){nullptr}
    , decltype(_impl_.inappnotificationdata_){nullptr}
    , decltype(_impl_.purchasedeclineddata_){nullptr}
    , decltype(_impl_.librarydirtydata_){nullptr}
    , decltype(_impl_.usersettingdirtydata_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.notificationtype_){}
    , decltype(_impl_.notificationackrequired_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.doctitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doctitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doctitle()) {
    _this->_impl_.doctitle_.Set(from._internal_doctitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.useremail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.useremail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_useremail()) {
    _this->_impl_.useremail_.Set(from._internal_useremail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notificationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notificationid()) {
    _this->_impl_.notificationid_.Set(from._internal_notificationid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_docid()) {
    _this->_impl_.docid_ = new ::playapi::proto::finsky::Docid(*from._impl_.docid_);
  }
  if (from._internal_has_appdata()) {
    _this->_impl_.appdata_ = new ::playapi::proto::finsky::response::AndroidAppNotificationData(*from._impl_.appdata_);
  }
  if (from._internal_has_appdeliverydata()) {
    _this->_impl_.appdeliverydata_ = new ::playapi::proto::finsky::download::AndroidAppDeliveryData(*from._impl_.appdeliverydata_);
  }
  if (from._internal_has_purchaseremovaldata()) {
    _this->_impl_.purchaseremovaldata_ = new ::playapi::proto::finsky::response::PurchaseRemovalData(*from._impl_.purchaseremovaldata_);
  }
  if (from._internal_has_usernotificationdata()) {
    _this->_impl_.usernotificationdata_ = new ::playapi::proto::finsky::response::UserNotificationData(*from._impl_.usernotificationdata_);
  }
  if (from._internal_has_inappnotificationdata()) {
    _this->_impl_.inappnotificationdata_ = new ::playapi::proto::finsky::response::InAppNotificationData(*from._impl_.inappnotificationdata_);
  }
  if (from._internal_has_purchasedeclineddata()) {
    _this->_impl_.purchasedeclineddata_ = new ::playapi::proto::finsky::response::PurchaseDeclinedData(*from._impl_.purchasedeclineddata_);
  }
  if (from._internal_has_librarydirtydata()) {
    _this->_impl_.librarydirtydata_ = new ::playapi::proto::finsky::response::LibraryDirtyData(*from._impl_.librarydirtydata_);
  }
  if (from._internal_has_usersettingdirtydata()) {
    _this->_impl_.usersettingdirtydata_ = new ::playapi::proto::finsky::settings::UserSettingDirtyData(*from._impl_.usersettingdirtydata_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notificationackrequired_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.notificationackrequired_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.Notification)
}

inline void Notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.doctitle_){}
    , decltype(_impl_.useremail_){}
    , decltype(_impl_.notificationid_){}
    , decltype(_impl_.docid_){nullptr}
    , decltype(_impl_.appdata_){nullptr}
    , decltype(_impl_.appdeliverydata_){nullptr}
    , decltype(_impl_.purchaseremovaldata_){nullptr}
    , decltype(_impl_.usernotificationdata_){nullptr}
    , decltype(_impl_.inappnotificationdata_){nullptr}
    , decltype(_impl_.purchasedeclineddata_){nullptr}
    , decltype(_impl_.librarydirtydata_){nullptr}
    , decltype(_impl_.usersettingdirtydata_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.notificationtype_){0}
    , decltype(_impl_.notificationackrequired_){false}
  };
  _impl_.doctitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doctitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.useremail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.useremail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notificationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.Notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.doctitle_.Destroy();
  _impl_.useremail_.Destroy();
  _impl_.notificationid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.docid_;
  if (this != internal_default_instance()) delete _impl_.appdata_;
  if (this != internal_default_instance()) delete _impl_.appdeliverydata_;
  if (this != internal_default_instance()) delete _impl_.purchaseremovaldata_;
  if (this != internal_default_instance()) delete _impl_.usernotificationdata_;
  if (this != internal_default_instance()) delete _impl_.inappnotificationdata_;
  if (this != internal_default_instance()) delete _impl_.purchasedeclineddata_;
  if (this != internal_default_instance()) delete _impl_.librarydirtydata_;
  if (this != internal_default_instance()) delete _impl_.usersettingdirtydata_;
}

void Notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.doctitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.useremail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.notificationid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.docid_ != nullptr);
      _impl_.docid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.appdata_ != nullptr);
      _impl_.appdata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.appdeliverydata_ != nullptr);
      _impl_.appdeliverydata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.purchaseremovaldata_ != nullptr);
      _impl_.purchaseremovaldata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.usernotificationdata_ != nullptr);
      _impl_.usernotificationdata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.inappnotificationdata_ != nullptr);
      _impl_.inappnotificationdata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.purchasedeclineddata_ != nullptr);
      _impl_.purchasedeclineddata_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.librarydirtydata_ != nullptr);
      _impl_.librarydirtydata_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.usersettingdirtydata_ != nullptr);
      _impl_.usersettingdirtydata_->Clear();
    }
  }
  if (cached_has_bits & 0x00007000u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.notificationackrequired_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.notificationackrequired_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 notificationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_notificationtype(&has_bits);
          _impl_.notificationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Docid docid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_docid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string docTitle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_doctitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.Notification.docTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string userEmail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_useremail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.Notification.userEmail");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.AndroidAppNotificationData appData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_appdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_appdeliverydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.PurchaseRemovalData purchaseRemovalData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchaseremovaldata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.UserNotificationData userNotificationData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_usernotificationdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.InAppNotificationData inAppNotificationData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_inappnotificationdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.PurchaseDeclinedData purchaseDeclinedData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchasedeclineddata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string notificationId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_notificationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.response.Notification.notificationId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.LibraryDirtyData libraryDirtyData = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_librarydirtydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.UserSettingDirtyData userSettingDirtyData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_usersettingdirtydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notificationAckRequired = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_notificationackrequired(&has_bits);
          _impl_.notificationackrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 notificationType = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_notificationtype(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // optional .playapi.proto.finsky.Docid docid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::docid(this),
        _Internal::docid(this).GetCachedSize(), target, stream);
  }

  // optional string docTitle = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doctitle().data(), static_cast<int>(this->_internal_doctitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.Notification.docTitle");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_doctitle(), target);
  }

  // optional string userEmail = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_useremail().data(), static_cast<int>(this->_internal_useremail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.Notification.userEmail");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_useremail(), target);
  }

  // optional .playapi.proto.finsky.response.AndroidAppNotificationData appData = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::appdata(this),
        _Internal::appdata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::appdeliverydata(this),
        _Internal::appdeliverydata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.PurchaseRemovalData purchaseRemovalData = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::purchaseremovaldata(this),
        _Internal::purchaseremovaldata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.UserNotificationData userNotificationData = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::usernotificationdata(this),
        _Internal::usernotificationdata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.InAppNotificationData inAppNotificationData = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::inappnotificationdata(this),
        _Internal::inappnotificationdata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.PurchaseDeclinedData purchaseDeclinedData = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::purchasedeclineddata(this),
        _Internal::purchasedeclineddata(this).GetCachedSize(), target, stream);
  }

  // optional string notificationId = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notificationid().data(), static_cast<int>(this->_internal_notificationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.response.Notification.notificationId");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_notificationid(), target);
  }

  // optional .playapi.proto.finsky.response.LibraryDirtyData libraryDirtyData = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::librarydirtydata(this),
        _Internal::librarydirtydata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.settings.UserSettingDirtyData userSettingDirtyData = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::usersettingdirtydata(this),
        _Internal::usersettingdirtydata(this).GetCachedSize(), target, stream);
  }

  // optional bool notificationAckRequired = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_notificationackrequired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string docTitle = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doctitle());
    }

    // optional string userEmail = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_useremail());
    }

    // optional string notificationId = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notificationid());
    }

    // optional .playapi.proto.finsky.Docid docid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.docid_);
    }

    // optional .playapi.proto.finsky.response.AndroidAppNotificationData appData = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appdata_);
    }

    // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appdeliverydata_);
    }

    // optional .playapi.proto.finsky.response.PurchaseRemovalData purchaseRemovalData = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.purchaseremovaldata_);
    }

    // optional .playapi.proto.finsky.response.UserNotificationData userNotificationData = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.usernotificationdata_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .playapi.proto.finsky.response.InAppNotificationData inAppNotificationData = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inappnotificationdata_);
    }

    // optional .playapi.proto.finsky.response.PurchaseDeclinedData purchaseDeclinedData = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.purchasedeclineddata_);
    }

    // optional .playapi.proto.finsky.response.LibraryDirtyData libraryDirtyData = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.librarydirtydata_);
    }

    // optional .playapi.proto.finsky.settings.UserSettingDirtyData userSettingDirtyData = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.usersettingdirtydata_);
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 notificationType = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_notificationtype());
    }

    // optional bool notificationAckRequired = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }


void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Notification*>(&to_msg);
  auto& from = static_cast<const Notification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.Notification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_doctitle(from._internal_doctitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_useremail(from._internal_useremail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_notificationid(from._internal_notificationid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_docid()->::playapi::proto::finsky::Docid::MergeFrom(
          from._internal_docid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_appdata()->::playapi::proto::finsky::response::AndroidAppNotificationData::MergeFrom(
          from._internal_appdata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_appdeliverydata()->::playapi::proto::finsky::download::AndroidAppDeliveryData::MergeFrom(
          from._internal_appdeliverydata());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_purchaseremovaldata()->::playapi::proto::finsky::response::PurchaseRemovalData::MergeFrom(
          from._internal_purchaseremovaldata());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_usernotificationdata()->::playapi::proto::finsky::response::UserNotificationData::MergeFrom(
          from._internal_usernotificationdata());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_inappnotificationdata()->::playapi::proto::finsky::response::InAppNotificationData::MergeFrom(
          from._internal_inappnotificationdata());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_purchasedeclineddata()->::playapi::proto::finsky::response::PurchaseDeclinedData::MergeFrom(
          from._internal_purchasedeclineddata());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_librarydirtydata()->::playapi::proto::finsky::response::LibraryDirtyData::MergeFrom(
          from._internal_librarydirtydata());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_usersettingdirtydata()->::playapi::proto::finsky::settings::UserSettingDirtyData::MergeFrom(
          from._internal_usersettingdirtydata());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.notificationtype_ = from._impl_.notificationtype_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.notificationackrequired_ = from._impl_.notificationackrequired_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doctitle_, lhs_arena,
      &other->_impl_.doctitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.useremail_, lhs_arena,
      &other->_impl_.useremail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notificationid_, lhs_arena,
      &other->_impl_.notificationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, _impl_.notificationackrequired_)
      + sizeof(Notification::_impl_.notificationackrequired_)
      - PROTOBUF_FIELD_OFFSET(Notification, _impl_.docid_)>(
          reinterpret_cast<char*>(&_impl_.docid_),
          reinterpret_cast<char*>(&other->_impl_.docid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[8]);
}

// ===================================================================

class ServerMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerMetadata>()._impl_._has_bits_);
  static void set_has_latencymillis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerMetadata::ServerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.ServerMetadata)
}
ServerMetadata::ServerMetadata(const ServerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latencymillis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.latencymillis_ = from._impl_.latencymillis_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.ServerMetadata)
}

inline void ServerMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latencymillis_){int64_t{0}}
  };
}

ServerMetadata::~ServerMetadata() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.ServerMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.ServerMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.latencymillis_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 latencyMillis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_latencymillis(&has_bits);
          _impl_.latencymillis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.ServerMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 latencyMillis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_latencymillis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.ServerMetadata)
  return target;
}

size_t ServerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.ServerMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 latencyMillis = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_latencymillis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMetadata::GetClassData() const { return &_class_data_; }


void ServerMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMetadata*>(&to_msg);
  auto& from = static_cast<const ServerMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.ServerMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_latencymillis()) {
    _this->_internal_set_latencymillis(from._internal_latencymillis());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMetadata::CopyFrom(const ServerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.ServerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMetadata::IsInitialized() const {
  return true;
}

void ServerMetadata::InternalSwap(ServerMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.latencymillis_, other->_impl_.latencymillis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[9]);
}

// ===================================================================

class Targets::_Internal {
 public:
  using HasBits = decltype(std::declval<Targets>()._impl_._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Targets::Targets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.Targets)
}
Targets::Targets(const Targets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Targets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targetid_){from._impl_.targetid_}
    , decltype(_impl_.signature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.Targets)
}

inline void Targets::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targetid_){arena}
    , decltype(_impl_.signature_){}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Targets::~Targets() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.Targets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Targets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targetid_.~RepeatedField();
  _impl_.signature_.Destroy();
}

void Targets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Targets::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.Targets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targetid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.signature_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Targets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_targetid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_targetid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Targets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.Targets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 targetId = 1;
  for (int i = 0, n = this->_internal_targetid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_targetid(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.Targets)
  return target;
}

size_t Targets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.Targets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 targetId = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.targetid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_targetid_size());
    total_size += data_size;
  }

  // optional bytes signature = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Targets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Targets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Targets::GetClassData() const { return &_class_data_; }


void Targets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Targets*>(&to_msg);
  auto& from = static_cast<const Targets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.Targets)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targetid_.MergeFrom(from._impl_.targetid_);
  if (from._internal_has_signature()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Targets::CopyFrom(const Targets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.Targets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Targets::IsInitialized() const {
  return true;
}

void Targets::InternalSwap(Targets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.targetid_.InternalSwap(&other->_impl_.targetid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Targets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[10]);
}

// ===================================================================

class ServerCookie::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerCookie>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerCookie::ServerCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.ServerCookie)
}
ServerCookie::ServerCookie(const ServerCookie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerCookie* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.ServerCookie)
}

inline void ServerCookie::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.type_){0}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerCookie::~ServerCookie() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.ServerCookie)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerCookie::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void ServerCookie::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.ServerCookie)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCookie::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerCookie::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.ServerCookie)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.ServerCookie)
  return target;
}

size_t ServerCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.ServerCookie)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerCookie::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerCookie::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerCookie::GetClassData() const { return &_class_data_; }


void ServerCookie::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerCookie*>(&to_msg);
  auto& from = static_cast<const ServerCookie&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.ServerCookie)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerCookie::CopyFrom(const ServerCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.ServerCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCookie::IsInitialized() const {
  return true;
}

void ServerCookie::InternalSwap(ServerCookie* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCookie::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[11]);
}

// ===================================================================

class ServerCookies::_Internal {
 public:
};

ServerCookies::ServerCookies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.ServerCookies)
}
ServerCookies::ServerCookies(const ServerCookies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerCookies* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servercookie_){from._impl_.servercookie_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.ServerCookies)
}

inline void ServerCookies::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servercookie_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerCookies::~ServerCookies() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.ServerCookies)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerCookies::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servercookie_.~RepeatedPtrField();
}

void ServerCookies::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerCookies::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.ServerCookies)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servercookie_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCookies::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.response.ServerCookie serverCookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servercookie(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerCookies::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.ServerCookies)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.response.ServerCookie serverCookie = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_servercookie_size()); i < n; i++) {
    const auto& repfield = this->_internal_servercookie(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.ServerCookies)
  return target;
}

size_t ServerCookies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.ServerCookies)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.response.ServerCookie serverCookie = 1;
  total_size += 1UL * this->_internal_servercookie_size();
  for (const auto& msg : this->_impl_.servercookie_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerCookies::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerCookies::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerCookies::GetClassData() const { return &_class_data_; }


void ServerCookies::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerCookies*>(&to_msg);
  auto& from = static_cast<const ServerCookies&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.ServerCookies)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.servercookie_.MergeFrom(from._impl_.servercookie_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerCookies::CopyFrom(const ServerCookies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.ServerCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCookies::IsInitialized() const {
  return true;
}

void ServerCookies::InternalSwap(ServerCookies* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.servercookie_.InternalSwap(&other->_impl_.servercookie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCookies::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[12]);
}

// ===================================================================

class AcceptTosResponse::_Internal {
 public:
};

AcceptTosResponse::AcceptTosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.AcceptTosResponse)
}
AcceptTosResponse::AcceptTosResponse(const AcceptTosResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AcceptTosResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.AcceptTosResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptTosResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptTosResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AcceptTosResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[13]);
}

// ===================================================================

class Payload::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::details::DetailsResponse& detailsresponse(const Payload* msg);
  static void set_has_detailsresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::search::SearchResponse& searchresponse(const Payload* msg);
  static void set_has_searchresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::toc::TocResponse& tocresponse(const Payload* msg);
  static void set_has_tocresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::browse::BrowseResponse& browseresponse(const Payload* msg);
  static void set_has_browseresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::details::BulkDetailsResponse& bulkdetailsresponse(const Payload* msg);
  static void set_has_bulkdetailsresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::download::DeliveryResponse& deliveryresponse(const Payload* msg);
  static void set_has_deliveryresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::playapi::proto::finsky::response::AcceptTosResponse& accepttosresponse(const Payload* msg);
  static void set_has_accepttosresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse& uploaddeviceconfigresponse(const Payload* msg);
  static void set_has_uploaddeviceconfigresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::playapi::proto::finsky::search::SearchSuggestResponse& searchsuggestresponse(const Payload* msg);
  static void set_has_searchsuggestresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::playapi::proto::finsky::settings::GetUserSettingsResponse& getusersettingsresponse(const Payload* msg);
  static void set_has_getusersettingsresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::playapi::proto::finsky::details::DetailsResponse&
Payload::_Internal::detailsresponse(const Payload* msg) {
  return *msg->_impl_.detailsresponse_;
}
const ::playapi::proto::finsky::search::SearchResponse&
Payload::_Internal::searchresponse(const Payload* msg) {
  return *msg->_impl_.searchresponse_;
}
const ::playapi::proto::finsky::toc::TocResponse&
Payload::_Internal::tocresponse(const Payload* msg) {
  return *msg->_impl_.tocresponse_;
}
const ::playapi::proto::finsky::browse::BrowseResponse&
Payload::_Internal::browseresponse(const Payload* msg) {
  return *msg->_impl_.browseresponse_;
}
const ::playapi::proto::finsky::details::BulkDetailsResponse&
Payload::_Internal::bulkdetailsresponse(const Payload* msg) {
  return *msg->_impl_.bulkdetailsresponse_;
}
const ::playapi::proto::finsky::download::DeliveryResponse&
Payload::_Internal::deliveryresponse(const Payload* msg) {
  return *msg->_impl_.deliveryresponse_;
}
const ::playapi::proto::finsky::response::AcceptTosResponse&
Payload::_Internal::accepttosresponse(const Payload* msg) {
  return *msg->_impl_.accepttosresponse_;
}
const ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse&
Payload::_Internal::uploaddeviceconfigresponse(const Payload* msg) {
  return *msg->_impl_.uploaddeviceconfigresponse_;
}
const ::playapi::proto::finsky::search::SearchSuggestResponse&
Payload::_Internal::searchsuggestresponse(const Payload* msg) {
  return *msg->_impl_.searchsuggestresponse_;
}
const ::playapi::proto::finsky::settings::GetUserSettingsResponse&
Payload::_Internal::getusersettingsresponse(const Payload* msg) {
  return *msg->_impl_.getusersettingsresponse_;
}
void Payload::clear_detailsresponse() {
  if (_impl_.detailsresponse_ != nullptr) _impl_.detailsresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Payload::clear_searchresponse() {
  if (_impl_.searchresponse_ != nullptr) _impl_.searchresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Payload::clear_tocresponse() {
  if (_impl_.tocresponse_ != nullptr) _impl_.tocresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Payload::clear_browseresponse() {
  if (_impl_.browseresponse_ != nullptr) _impl_.browseresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Payload::clear_bulkdetailsresponse() {
  if (_impl_.bulkdetailsresponse_ != nullptr) _impl_.bulkdetailsresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Payload::clear_deliveryresponse() {
  if (_impl_.deliveryresponse_ != nullptr) _impl_.deliveryresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Payload::clear_uploaddeviceconfigresponse() {
  if (_impl_.uploaddeviceconfigresponse_ != nullptr) _impl_.uploaddeviceconfigresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Payload::clear_searchsuggestresponse() {
  if (_impl_.searchsuggestresponse_ != nullptr) _impl_.searchsuggestresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Payload::clear_getusersettingsresponse() {
  if (_impl_.getusersettingsresponse_ != nullptr) _impl_.getusersettingsresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Payload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsresponse_){nullptr}
    , decltype(_impl_.searchresponse_){nullptr}
    , decltype(_impl_.tocresponse_){nullptr}
    , decltype(_impl_.browseresponse_){nullptr}
    , decltype(_impl_.bulkdetailsresponse_){nullptr}
    , decltype(_impl_.deliveryresponse_){nullptr}
    , decltype(_impl_.accepttosresponse_){nullptr}
    , decltype(_impl_.uploaddeviceconfigresponse_){nullptr}
    , decltype(_impl_.searchsuggestresponse_){nullptr}
    , decltype(_impl_.getusersettingsresponse_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detailsresponse()) {
    _this->_impl_.detailsresponse_ = new ::playapi::proto::finsky::details::DetailsResponse(*from._impl_.detailsresponse_);
  }
  if (from._internal_has_searchresponse()) {
    _this->_impl_.searchresponse_ = new ::playapi::proto::finsky::search::SearchResponse(*from._impl_.searchresponse_);
  }
  if (from._internal_has_tocresponse()) {
    _this->_impl_.tocresponse_ = new ::playapi::proto::finsky::toc::TocResponse(*from._impl_.tocresponse_);
  }
  if (from._internal_has_browseresponse()) {
    _this->_impl_.browseresponse_ = new ::playapi::proto::finsky::browse::BrowseResponse(*from._impl_.browseresponse_);
  }
  if (from._internal_has_bulkdetailsresponse()) {
    _this->_impl_.bulkdetailsresponse_ = new ::playapi::proto::finsky::details::BulkDetailsResponse(*from._impl_.bulkdetailsresponse_);
  }
  if (from._internal_has_deliveryresponse()) {
    _this->_impl_.deliveryresponse_ = new ::playapi::proto::finsky::download::DeliveryResponse(*from._impl_.deliveryresponse_);
  }
  if (from._internal_has_accepttosresponse()) {
    _this->_impl_.accepttosresponse_ = new ::playapi::proto::finsky::response::AcceptTosResponse(*from._impl_.accepttosresponse_);
  }
  if (from._internal_has_uploaddeviceconfigresponse()) {
    _this->_impl_.uploaddeviceconfigresponse_ = new ::playapi::proto::finsky::device_config::UploadDeviceConfigResponse(*from._impl_.uploaddeviceconfigresponse_);
  }
  if (from._internal_has_searchsuggestresponse()) {
    _this->_impl_.searchsuggestresponse_ = new ::playapi::proto::finsky::search::SearchSuggestResponse(*from._impl_.searchsuggestresponse_);
  }
  if (from._internal_has_getusersettingsresponse()) {
    _this->_impl_.getusersettingsresponse_ = new ::playapi::proto::finsky::settings::GetUserSettingsResponse(*from._impl_.getusersettingsresponse_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.Payload)
}

inline void Payload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detailsresponse_){nullptr}
    , decltype(_impl_.searchresponse_){nullptr}
    , decltype(_impl_.tocresponse_){nullptr}
    , decltype(_impl_.browseresponse_){nullptr}
    , decltype(_impl_.bulkdetailsresponse_){nullptr}
    , decltype(_impl_.deliveryresponse_){nullptr}
    , decltype(_impl_.accepttosresponse_){nullptr}
    , decltype(_impl_.uploaddeviceconfigresponse_){nullptr}
    , decltype(_impl_.searchsuggestresponse_){nullptr}
    , decltype(_impl_.getusersettingsresponse_){nullptr}
  };
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.Payload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.detailsresponse_;
  if (this != internal_default_instance()) delete _impl_.searchresponse_;
  if (this != internal_default_instance()) delete _impl_.tocresponse_;
  if (this != internal_default_instance()) delete _impl_.browseresponse_;
  if (this != internal_default_instance()) delete _impl_.bulkdetailsresponse_;
  if (this != internal_default_instance()) delete _impl_.deliveryresponse_;
  if (this != internal_default_instance()) delete _impl_.accepttosresponse_;
  if (this != internal_default_instance()) delete _impl_.uploaddeviceconfigresponse_;
  if (this != internal_default_instance()) delete _impl_.searchsuggestresponse_;
  if (this != internal_default_instance()) delete _impl_.getusersettingsresponse_;
}

void Payload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.detailsresponse_ != nullptr);
      _impl_.detailsresponse_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.searchresponse_ != nullptr);
      _impl_.searchresponse_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tocresponse_ != nullptr);
      _impl_.tocresponse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.browseresponse_ != nullptr);
      _impl_.browseresponse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.bulkdetailsresponse_ != nullptr);
      _impl_.bulkdetailsresponse_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.deliveryresponse_ != nullptr);
      _impl_.deliveryresponse_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.accepttosresponse_ != nullptr);
      _impl_.accepttosresponse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.uploaddeviceconfigresponse_ != nullptr);
      _impl_.uploaddeviceconfigresponse_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.searchsuggestresponse_ != nullptr);
      _impl_.searchsuggestresponse_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.getusersettingsresponse_ != nullptr);
      _impl_.getusersettingsresponse_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.details.DetailsResponse detailsResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detailsresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.search.SearchResponse searchResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.toc.TocResponse tocResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tocresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.browse.BrowseResponse browseResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_browseresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.details.BulkDetailsResponse bulkDetailsResponse = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulkdetailsresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.DeliveryResponse deliveryResponse = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliveryresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.AcceptTosResponse acceptTosResponse = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepttosresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.device_config.UploadDeviceConfigResponse uploadDeviceConfigResponse = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_uploaddeviceconfigresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.search.SearchSuggestResponse searchSuggestResponse = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchsuggestresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.settings.GetUserSettingsResponse getUserSettingsResponse = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getusersettingsresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.details.DetailsResponse detailsResponse = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::detailsresponse(this),
        _Internal::detailsresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.search.SearchResponse searchResponse = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::searchresponse(this),
        _Internal::searchresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.toc.TocResponse tocResponse = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tocresponse(this),
        _Internal::tocresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.browse.BrowseResponse browseResponse = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::browseresponse(this),
        _Internal::browseresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.details.BulkDetailsResponse bulkDetailsResponse = 19;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::bulkdetailsresponse(this),
        _Internal::bulkdetailsresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.download.DeliveryResponse deliveryResponse = 21;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::deliveryresponse(this),
        _Internal::deliveryresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.AcceptTosResponse acceptTosResponse = 22;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::accepttosresponse(this),
        _Internal::accepttosresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.device_config.UploadDeviceConfigResponse uploadDeviceConfigResponse = 28;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::uploaddeviceconfigresponse(this),
        _Internal::uploaddeviceconfigresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.search.SearchSuggestResponse searchSuggestResponse = 40;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::searchsuggestresponse(this),
        _Internal::searchsuggestresponse(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.settings.GetUserSettingsResponse getUserSettingsResponse = 54;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::getusersettingsresponse(this),
        _Internal::getusersettingsresponse(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .playapi.proto.finsky.details.DetailsResponse detailsResponse = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.detailsresponse_);
    }

    // optional .playapi.proto.finsky.search.SearchResponse searchResponse = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.searchresponse_);
    }

    // optional .playapi.proto.finsky.toc.TocResponse tocResponse = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tocresponse_);
    }

    // optional .playapi.proto.finsky.browse.BrowseResponse browseResponse = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.browseresponse_);
    }

    // optional .playapi.proto.finsky.details.BulkDetailsResponse bulkDetailsResponse = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bulkdetailsresponse_);
    }

    // optional .playapi.proto.finsky.download.DeliveryResponse deliveryResponse = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deliveryresponse_);
    }

    // optional .playapi.proto.finsky.response.AcceptTosResponse acceptTosResponse = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accepttosresponse_);
    }

    // optional .playapi.proto.finsky.device_config.UploadDeviceConfigResponse uploadDeviceConfigResponse = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uploaddeviceconfigresponse_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .playapi.proto.finsky.search.SearchSuggestResponse searchSuggestResponse = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.searchsuggestresponse_);
    }

    // optional .playapi.proto.finsky.settings.GetUserSettingsResponse getUserSettingsResponse = 54;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.getusersettingsresponse_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload::GetClassData() const { return &_class_data_; }


void Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Payload*>(&to_msg);
  auto& from = static_cast<const Payload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.Payload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_detailsresponse()->::playapi::proto::finsky::details::DetailsResponse::MergeFrom(
          from._internal_detailsresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_searchresponse()->::playapi::proto::finsky::search::SearchResponse::MergeFrom(
          from._internal_searchresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tocresponse()->::playapi::proto::finsky::toc::TocResponse::MergeFrom(
          from._internal_tocresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_browseresponse()->::playapi::proto::finsky::browse::BrowseResponse::MergeFrom(
          from._internal_browseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_bulkdetailsresponse()->::playapi::proto::finsky::details::BulkDetailsResponse::MergeFrom(
          from._internal_bulkdetailsresponse());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_deliveryresponse()->::playapi::proto::finsky::download::DeliveryResponse::MergeFrom(
          from._internal_deliveryresponse());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_accepttosresponse()->::playapi::proto::finsky::response::AcceptTosResponse::MergeFrom(
          from._internal_accepttosresponse());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_uploaddeviceconfigresponse()->::playapi::proto::finsky::device_config::UploadDeviceConfigResponse::MergeFrom(
          from._internal_uploaddeviceconfigresponse());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_searchsuggestresponse()->::playapi::proto::finsky::search::SearchSuggestResponse::MergeFrom(
          from._internal_searchsuggestresponse());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_getusersettingsresponse()->::playapi::proto::finsky::settings::GetUserSettingsResponse::MergeFrom(
          from._internal_getusersettingsresponse());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload, _impl_.getusersettingsresponse_)
      + sizeof(Payload::_impl_.getusersettingsresponse_)
      - PROTOBUF_FIELD_OFFSET(Payload, _impl_.detailsresponse_)>(
          reinterpret_cast<char*>(&_impl_.detailsresponse_),
          reinterpret_cast<char*>(&other->_impl_.detailsresponse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[14]);
}

// ===================================================================

class ResponseWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseWrapper>()._impl_._has_bits_);
  static const ::playapi::proto::finsky::response::Payload& payload(const ResponseWrapper* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::response::ServerCommands& commands(const ResponseWrapper* msg);
  static void set_has_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::response::ServerMetadata& servermetadata(const ResponseWrapper* msg);
  static void set_has_servermetadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::response::Targets& targets(const ResponseWrapper* msg);
  static void set_has_targets(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::playapi::proto::finsky::response::ServerCookies& servercookies(const ResponseWrapper* msg);
  static void set_has_servercookies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::response::Payload&
ResponseWrapper::_Internal::payload(const ResponseWrapper* msg) {
  return *msg->_impl_.payload_;
}
const ::playapi::proto::finsky::response::ServerCommands&
ResponseWrapper::_Internal::commands(const ResponseWrapper* msg) {
  return *msg->_impl_.commands_;
}
const ::playapi::proto::finsky::response::ServerMetadata&
ResponseWrapper::_Internal::servermetadata(const ResponseWrapper* msg) {
  return *msg->_impl_.servermetadata_;
}
const ::playapi::proto::finsky::response::Targets&
ResponseWrapper::_Internal::targets(const ResponseWrapper* msg) {
  return *msg->_impl_.targets_;
}
const ::playapi::proto::finsky::response::ServerCookies&
ResponseWrapper::_Internal::servercookies(const ResponseWrapper* msg) {
  return *msg->_impl_.servercookies_;
}
ResponseWrapper::ResponseWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.response.ResponseWrapper)
}
ResponseWrapper::ResponseWrapper(const ResponseWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefetch_){from._impl_.prefetch_}
    , decltype(_impl_.notification_){from._impl_.notification_}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.commands_){nullptr}
    , decltype(_impl_.servermetadata_){nullptr}
    , decltype(_impl_.targets_){nullptr}
    , decltype(_impl_.servercookies_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::playapi::proto::finsky::response::Payload(*from._impl_.payload_);
  }
  if (from._internal_has_commands()) {
    _this->_impl_.commands_ = new ::playapi::proto::finsky::response::ServerCommands(*from._impl_.commands_);
  }
  if (from._internal_has_servermetadata()) {
    _this->_impl_.servermetadata_ = new ::playapi::proto::finsky::response::ServerMetadata(*from._impl_.servermetadata_);
  }
  if (from._internal_has_targets()) {
    _this->_impl_.targets_ = new ::playapi::proto::finsky::response::Targets(*from._impl_.targets_);
  }
  if (from._internal_has_servercookies()) {
    _this->_impl_.servercookies_ = new ::playapi::proto::finsky::response::ServerCookies(*from._impl_.servercookies_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.response.ResponseWrapper)
}

inline void ResponseWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefetch_){arena}
    , decltype(_impl_.notification_){arena}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.commands_){nullptr}
    , decltype(_impl_.servermetadata_){nullptr}
    , decltype(_impl_.targets_){nullptr}
    , decltype(_impl_.servercookies_){nullptr}
  };
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseWrapper::~ResponseWrapper() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.response.ResponseWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefetch_.~RepeatedPtrField();
  _impl_.notification_.~RepeatedPtrField();
  _impl_.serverlogscookie_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payload_;
  if (this != internal_default_instance()) delete _impl_.commands_;
  if (this != internal_default_instance()) delete _impl_.servermetadata_;
  if (this != internal_default_instance()) delete _impl_.targets_;
  if (this != internal_default_instance()) delete _impl_.servercookies_;
}

void ResponseWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.response.ResponseWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefetch_.Clear();
  _impl_.notification_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.payload_ != nullptr);
      _impl_.payload_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.commands_ != nullptr);
      _impl_.commands_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.servermetadata_ != nullptr);
      _impl_.servermetadata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.targets_ != nullptr);
      _impl_.targets_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.servercookies_ != nullptr);
      _impl_.servercookies_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .playapi.proto.finsky.response.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.ServerCommands commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.response.PreFetch preFetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefetch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.response.Notification notification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.ServerMetadata serverMetadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_servermetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.Targets targets = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_targets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.response.ServerCookies serverCookies = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_servercookies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.response.ResponseWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .playapi.proto.finsky.response.Payload payload = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.ServerCommands commands = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::commands(this),
        _Internal::commands(this).GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.response.PreFetch preFetch = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prefetch_size()); i < n; i++) {
    const auto& repfield = this->_internal_prefetch(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.response.Notification notification = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notification_size()); i < n; i++) {
    const auto& repfield = this->_internal_notification(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.ServerMetadata serverMetadata = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::servermetadata(this),
        _Internal::servermetadata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.Targets targets = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::targets(this),
        _Internal::targets(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.response.ServerCookies serverCookies = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::servercookies(this),
        _Internal::servercookies(this).GetCachedSize(), target, stream);
  }

  // optional bytes serverLogsCookie = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_serverlogscookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.response.ResponseWrapper)
  return target;
}

size_t ResponseWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.response.ResponseWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.response.PreFetch preFetch = 3;
  total_size += 1UL * this->_internal_prefetch_size();
  for (const auto& msg : this->_impl_.prefetch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.response.Notification notification = 4;
  total_size += 1UL * this->_internal_notification_size();
  for (const auto& msg : this->_impl_.notification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes serverLogsCookie = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional .playapi.proto.finsky.response.Payload payload = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_);
    }

    // optional .playapi.proto.finsky.response.ServerCommands commands = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commands_);
    }

    // optional .playapi.proto.finsky.response.ServerMetadata serverMetadata = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.servermetadata_);
    }

    // optional .playapi.proto.finsky.response.Targets targets = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.targets_);
    }

    // optional .playapi.proto.finsky.response.ServerCookies serverCookies = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.servercookies_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseWrapper::GetClassData() const { return &_class_data_; }


void ResponseWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseWrapper*>(&to_msg);
  auto& from = static_cast<const ResponseWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.response.ResponseWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prefetch_.MergeFrom(from._impl_.prefetch_);
  _this->_impl_.notification_.MergeFrom(from._impl_.notification_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_payload()->::playapi::proto::finsky::response::Payload::MergeFrom(
          from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_commands()->::playapi::proto::finsky::response::ServerCommands::MergeFrom(
          from._internal_commands());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_servermetadata()->::playapi::proto::finsky::response::ServerMetadata::MergeFrom(
          from._internal_servermetadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_targets()->::playapi::proto::finsky::response::Targets::MergeFrom(
          from._internal_targets());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_servercookies()->::playapi::proto::finsky::response::ServerCookies::MergeFrom(
          from._internal_servercookies());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseWrapper::CopyFrom(const ResponseWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.response.ResponseWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseWrapper::IsInitialized() const {
  return true;
}

void ResponseWrapper::InternalSwap(ResponseWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.prefetch_.InternalSwap(&other->_impl_.prefetch_);
  _impl_.notification_.InternalSwap(&other->_impl_.notification_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseWrapper, _impl_.servercookies_)
      + sizeof(ResponseWrapper::_impl_.servercookies_)
      - PROTOBUF_FIELD_OFFSET(ResponseWrapper, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5frespone_2eproto_getter, &descriptor_table_play_5frespone_2eproto_once,
      file_level_metadata_play_5frespone_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace response
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::ServerCommands*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::ServerCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::ServerCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::PreFetch*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::PreFetch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::PreFetch >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::AndroidAppNotificationData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::AndroidAppNotificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::AndroidAppNotificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::PurchaseRemovalData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::PurchaseRemovalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::PurchaseRemovalData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::UserNotificationData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::UserNotificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::UserNotificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::InAppNotificationData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::InAppNotificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::InAppNotificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::PurchaseDeclinedData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::PurchaseDeclinedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::PurchaseDeclinedData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::LibraryDirtyData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::LibraryDirtyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::LibraryDirtyData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::Notification*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::ServerMetadata*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::ServerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::ServerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::Targets*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::Targets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::Targets >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::ServerCookie*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::ServerCookie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::ServerCookie >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::ServerCookies*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::ServerCookies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::ServerCookies >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::AcceptTosResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::AcceptTosResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::AcceptTosResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::Payload*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::response::ResponseWrapper*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::response::ResponseWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::response::ResponseWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
