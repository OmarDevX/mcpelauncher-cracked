// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_download.proto

#include "play_download.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace download {
PROTOBUF_CONSTEXPR Install::Install(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.androidid_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.bundled_)*/false
  , /*decltype(_impl_.pending_)*/false
  , /*decltype(_impl_.lastupdatetimestampmillis_)*/int64_t{0}} {}
struct InstallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallDefaultTypeInternal() {}
  union {
    Install _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallDefaultTypeInternal _Install_default_instance_;
PROTOBUF_CONSTEXPR Dependency::Dependency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packagename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.minversioncode_)*/0
  , /*decltype(_impl_.versioncodemask_)*/0
  , /*decltype(_impl_.skippermissions_)*/false} {}
struct DependencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DependencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DependencyDefaultTypeInternal() {}
  union {
    Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DependencyDefaultTypeInternal _Dependency_default_instance_;
PROTOBUF_CONSTEXPR InstallDetails::InstallDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dependency_)*/{}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.installlocation_)*/0
  , /*decltype(_impl_.targetsdkversion_)*/0} {}
struct InstallDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallDetailsDefaultTypeInternal() {}
  union {
    InstallDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallDetailsDefaultTypeInternal _InstallDetails_default_instance_;
PROTOBUF_CONSTEXPR PatchDetails::PatchDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.baseversioncode_)*/0} {}
struct PatchDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchDetailsDefaultTypeInternal() {}
  union {
    PatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchDetailsDefaultTypeInternal _PatchDetails_default_instance_;
PROTOBUF_CONSTEXPR FileMetadata::FileMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.patchdetails_)*/{}
  , /*decltype(_impl_.splitid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filetype_)*/0
  , /*decltype(_impl_.versioncode_)*/0
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.compressedsize_)*/int64_t{0}} {}
struct FileMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileMetadataDefaultTypeInternal() {}
  union {
    FileMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
PROTOBUF_CONSTEXPR AndroidAppPatchData::AndroidAppPatchData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.basesignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baseversioncode_)*/0
  , /*decltype(_impl_.patchformat_)*/0
  , /*decltype(_impl_.maxpatchsize_)*/int64_t{0}} {}
struct AndroidAppPatchDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidAppPatchDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidAppPatchDataDefaultTypeInternal() {}
  union {
    AndroidAppPatchData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidAppPatchDataDefaultTypeInternal _AndroidAppPatchData_default_instance_;
PROTOBUF_CONSTEXPR AppFileMetadata::AppFileMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.downloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compresseddownloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.patchdata_)*/nullptr
  , /*decltype(_impl_.filetype_)*/0
  , /*decltype(_impl_.versioncode_)*/0
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.compressedsize_)*/int64_t{0}} {}
struct AppFileMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppFileMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppFileMetadataDefaultTypeInternal() {}
  union {
    AppFileMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppFileMetadataDefaultTypeInternal _AppFileMetadata_default_instance_;
PROTOBUF_CONSTEXPR EncryptionParams::EncryptionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encryptionkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hmackey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0} {}
struct EncryptionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionParamsDefaultTypeInternal() {}
  union {
    EncryptionParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionParamsDefaultTypeInternal _EncryptionParams_default_instance_;
PROTOBUF_CONSTEXPR SplitDeliveryData::SplitDeliveryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gzippeddownloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.patchdata_)*/nullptr
  , /*decltype(_impl_.downloadsize_)*/int64_t{0}
  , /*decltype(_impl_.gzippeddownloadsize_)*/int64_t{0}} {}
struct SplitDeliveryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitDeliveryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitDeliveryDataDefaultTypeInternal() {}
  union {
    SplitDeliveryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitDeliveryDataDefaultTypeInternal _SplitDeliveryData_default_instance_;
PROTOBUF_CONSTEXPR AndroidAppDeliveryData::AndroidAppDeliveryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additionalfile_)*/{}
  , /*decltype(_impl_.downloadauthcookie_)*/{}
  , /*decltype(_impl_.splitdeliverydata_)*/{}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gzippeddownloadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.patchdata_)*/nullptr
  , /*decltype(_impl_.encryptionparams_)*/nullptr
  , /*decltype(_impl_.downloadsize_)*/int64_t{0}
  , /*decltype(_impl_.refundtimeout_)*/int64_t{0}
  , /*decltype(_impl_.postinstallrefundwindowmillis_)*/int64_t{0}
  , /*decltype(_impl_.forwardlocked_)*/false
  , /*decltype(_impl_.serverinitiated_)*/false
  , /*decltype(_impl_.immediatestartneeded_)*/false
  , /*decltype(_impl_.everexternallyhosted_)*/false
  , /*decltype(_impl_.installlocation_)*/0
  , /*decltype(_impl_.gzippeddownloadsize_)*/int64_t{0}} {}
struct AndroidAppDeliveryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidAppDeliveryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidAppDeliveryDataDefaultTypeInternal() {}
  union {
    AndroidAppDeliveryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidAppDeliveryDataDefaultTypeInternal _AndroidAppDeliveryData_default_instance_;
PROTOBUF_CONSTEXPR DeliveryResponse::DeliveryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appdeliverydata_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct DeliveryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeliveryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeliveryResponseDefaultTypeInternal() {}
  union {
    DeliveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeliveryResponseDefaultTypeInternal _DeliveryResponse_default_instance_;
}  // namespace download
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fdownload_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fdownload_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fdownload_2eproto = nullptr;

const uint32_t TableStruct_play_5fdownload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _impl_.androidid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _impl_.bundled_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _impl_.pending_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Install, _impl_.lastupdatetimestampmillis_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Dependency, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Dependency, _impl_.packagename_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Dependency, _impl_.minversioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Dependency, _impl_.versioncodemask_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::Dependency, _impl_.skippermissions_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::InstallDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::InstallDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::InstallDetails, _impl_.installlocation_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::InstallDetails, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::InstallDetails, _impl_.dependency_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::InstallDetails, _impl_.targetsdkversion_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::PatchDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::PatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::PatchDetails, _impl_.baseversioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::PatchDetails, _impl_.size_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_.filetype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_.versioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_.splitid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_.compressedsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::FileMetadata, _impl_.patchdetails_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _impl_.baseversioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _impl_.basesignature_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _impl_.downloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _impl_.patchformat_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppPatchData, _impl_.maxpatchsize_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.filetype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.versioncode_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.downloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.patchdata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.compressedsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.compresseddownloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AppFileMetadata, _impl_.signature_),
  4,
  5,
  6,
  0,
  3,
  7,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::EncryptionParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::EncryptionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::EncryptionParams, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::EncryptionParams, _impl_.encryptionkey_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::EncryptionParams, _impl_.hmackey_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.downloadsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.gzippeddownloadsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.downloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.gzippeddownloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::SplitDeliveryData, _impl_.patchdata_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.downloadsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.downloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.additionalfile_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.downloadauthcookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.forwardlocked_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.refundtimeout_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.serverinitiated_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.postinstallrefundwindowmillis_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.immediatestartneeded_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.patchdata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.encryptionparams_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.gzippeddownloadurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.gzippeddownloadsize_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.splitdeliverydata_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.installlocation_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::AndroidAppDeliveryData, _impl_.everexternallyhosted_),
  5,
  0,
  1,
  ~0u,
  ~0u,
  8,
  6,
  9,
  7,
  10,
  3,
  4,
  2,
  13,
  ~0u,
  12,
  11,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::DeliveryResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::DeliveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::DeliveryResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::download::DeliveryResponse, _impl_.appdeliverydata_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::playapi::proto::finsky::download::Install)},
  { 16, 26, -1, sizeof(::playapi::proto::finsky::download::Dependency)},
  { 30, 40, -1, sizeof(::playapi::proto::finsky::download::InstallDetails)},
  { 44, 52, -1, sizeof(::playapi::proto::finsky::download::PatchDetails)},
  { 54, 66, -1, sizeof(::playapi::proto::finsky::download::FileMetadata)},
  { 72, 83, -1, sizeof(::playapi::proto::finsky::download::AndroidAppPatchData)},
  { 88, 102, -1, sizeof(::playapi::proto::finsky::download::AppFileMetadata)},
  { 110, 119, -1, sizeof(::playapi::proto::finsky::download::EncryptionParams)},
  { 122, 135, -1, sizeof(::playapi::proto::finsky::download::SplitDeliveryData)},
  { 142, 165, -1, sizeof(::playapi::proto::finsky::download::AndroidAppDeliveryData)},
  { 182, 190, -1, sizeof(::playapi::proto::finsky::download::DeliveryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::download::_Install_default_instance_._instance,
  &::playapi::proto::finsky::download::_Dependency_default_instance_._instance,
  &::playapi::proto::finsky::download::_InstallDetails_default_instance_._instance,
  &::playapi::proto::finsky::download::_PatchDetails_default_instance_._instance,
  &::playapi::proto::finsky::download::_FileMetadata_default_instance_._instance,
  &::playapi::proto::finsky::download::_AndroidAppPatchData_default_instance_._instance,
  &::playapi::proto::finsky::download::_AppFileMetadata_default_instance_._instance,
  &::playapi::proto::finsky::download::_EncryptionParams_default_instance_._instance,
  &::playapi::proto::finsky::download::_SplitDeliveryData_default_instance_._instance,
  &::playapi::proto::finsky::download::_AndroidAppDeliveryData_default_instance_._instance,
  &::playapi::proto::finsky::download::_DeliveryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fdownload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023play_download.proto\022\035playapi.proto.fin"
  "sky.download\032\021play_common.proto\"r\n\007Insta"
  "ll\022\021\n\tandroidId\030\001 \001(\006\022\017\n\007version\030\002 \001(\005\022\017"
  "\n\007bundled\030\003 \001(\010\022\017\n\007pending\030\004 \001(\010\022!\n\031last"
  "UpdateTimestampMillis\030\005 \001(\003\"k\n\nDependenc"
  "y\022\023\n\013packageName\030\001 \001(\t\022\026\n\016minVersionCode"
  "\030\002 \001(\005\022\027\n\017versionCodeMask\030\003 \001(\005\022\027\n\017skipP"
  "ermissions\030\004 \001(\010\"\220\001\n\016InstallDetails\022\027\n\017i"
  "nstallLocation\030\001 \001(\005\022\014\n\004size\030\002 \001(\003\022=\n\nde"
  "pendency\030\003 \003(\0132).playapi.proto.finsky.do"
  "wnload.Dependency\022\030\n\020targetSdkVersion\030\004 "
  "\001(\005\"5\n\014PatchDetails\022\027\n\017baseVersionCode\030\001"
  " \001(\005\022\014\n\004size\030\002 \001(\003\"\257\001\n\014FileMetadata\022\020\n\010f"
  "ileType\030\001 \001(\005\022\023\n\013versionCode\030\002 \001(\005\022\014\n\004si"
  "ze\030\003 \001(\003\022\017\n\007splitId\030\004 \001(\t\022\026\n\016compressedS"
  "ize\030\005 \001(\003\022A\n\014patchDetails\030\006 \003(\0132+.playap"
  "i.proto.finsky.download.PatchDetails\"\205\001\n"
  "\023AndroidAppPatchData\022\027\n\017baseVersionCode\030"
  "\001 \001(\005\022\025\n\rbaseSignature\030\002 \001(\t\022\023\n\013download"
  "Url\030\003 \001(\t\022\023\n\013patchFormat\030\004 \001(\005\022\024\n\014maxPat"
  "chSize\030\005 \001(\003\"\354\001\n\017AppFileMetadata\022\020\n\010file"
  "Type\030\001 \001(\005\022\023\n\013versionCode\030\002 \001(\005\022\014\n\004size\030"
  "\003 \001(\003\022\023\n\013downloadUrl\030\004 \001(\t\022E\n\tpatchData\030"
  "\005 \001(\01322.playapi.proto.finsky.download.An"
  "droidAppPatchData\022\026\n\016compressedSize\030\006 \001("
  "\003\022\035\n\025compressedDownloadUrl\030\007 \001(\t\022\021\n\tsign"
  "ature\030\010 \001(\t\"K\n\020EncryptionParams\022\017\n\007versi"
  "on\030\001 \001(\005\022\025\n\rencryptionKey\030\002 \001(\t\022\017\n\007hmacK"
  "ey\030\003 \001(\t\"\335\001\n\021SplitDeliveryData\022\n\n\002id\030\001 \001"
  "(\t\022\024\n\014downloadSize\030\002 \001(\003\022\033\n\023gzippedDownl"
  "oadSize\030\003 \001(\003\022\021\n\tsignature\030\004 \001(\t\022\023\n\013down"
  "loadUrl\030\005 \001(\t\022\032\n\022gzippedDownloadUrl\030\006 \001("
  "\t\022E\n\tpatchData\030\007 \001(\01322.playapi.proto.fin"
  "sky.download.AndroidAppPatchData\"\267\005\n\026And"
  "roidAppDeliveryData\022\024\n\014downloadSize\030\001 \001("
  "\003\022\021\n\tsignature\030\002 \001(\t\022\023\n\013downloadUrl\030\003 \001("
  "\t\022F\n\016additionalFile\030\004 \003(\0132..playapi.prot"
  "o.finsky.download.AppFileMetadata\022<\n\022dow"
  "nloadAuthCookie\030\005 \003(\0132 .playapi.proto.fi"
  "nsky.HttpCookie\022\025\n\rforwardLocked\030\006 \001(\010\022\025"
  "\n\rrefundTimeout\030\007 \001(\003\022\027\n\017serverInitiated"
  "\030\010 \001(\010\022%\n\035postInstallRefundWindowMillis\030"
  "\t \001(\003\022\034\n\024immediateStartNeeded\030\n \001(\010\022E\n\tp"
  "atchData\030\013 \001(\01322.playapi.proto.finsky.do"
  "wnload.AndroidAppPatchData\022I\n\020encryption"
  "Params\030\014 \001(\0132/.playapi.proto.finsky.down"
  "load.EncryptionParams\022\032\n\022gzippedDownload"
  "Url\030\r \001(\t\022\033\n\023gzippedDownloadSize\030\016 \001(\003\022K"
  "\n\021splitDeliveryData\030\017 \003(\01320.playapi.prot"
  "o.finsky.download.SplitDeliveryData\022\027\n\017i"
  "nstallLocation\030\020 \001(\005\022\034\n\024everExternallyHo"
  "sted\030\021 \001(\010\"r\n\020DeliveryResponse\022\016\n\006status"
  "\030\001 \001(\005\022N\n\017appDeliveryData\030\002 \001(\01325.playap"
  "i.proto.finsky.download.AndroidAppDelive"
  "ryData"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fdownload_2eproto_deps[1] = {
  &::descriptor_table_play_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fdownload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fdownload_2eproto = {
    false, false, 2166, descriptor_table_protodef_play_5fdownload_2eproto,
    "play_download.proto",
    &descriptor_table_play_5fdownload_2eproto_once, descriptor_table_play_5fdownload_2eproto_deps, 1, 11,
    schemas, file_default_instances, TableStruct_play_5fdownload_2eproto::offsets,
    file_level_metadata_play_5fdownload_2eproto, file_level_enum_descriptors_play_5fdownload_2eproto,
    file_level_service_descriptors_play_5fdownload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fdownload_2eproto_getter() {
  return &descriptor_table_play_5fdownload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fdownload_2eproto(&descriptor_table_play_5fdownload_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace download {

// ===================================================================

class Install::_Internal {
 public:
  using HasBits = decltype(std::declval<Install>()._impl_._has_bits_);
  static void set_has_androidid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bundled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lastupdatetimestampmillis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Install::Install(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.Install)
}
Install::Install(const Install& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Install* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.androidid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.bundled_){}
    , decltype(_impl_.pending_){}
    , decltype(_impl_.lastupdatetimestampmillis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.androidid_, &from._impl_.androidid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastupdatetimestampmillis_) -
    reinterpret_cast<char*>(&_impl_.androidid_)) + sizeof(_impl_.lastupdatetimestampmillis_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.Install)
}

inline void Install::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.androidid_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.bundled_){false}
    , decltype(_impl_.pending_){false}
    , decltype(_impl_.lastupdatetimestampmillis_){int64_t{0}}
  };
}

Install::~Install() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.Install)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Install::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Install::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Install::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.Install)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.androidid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lastupdatetimestampmillis_) -
        reinterpret_cast<char*>(&_impl_.androidid_)) + sizeof(_impl_.lastupdatetimestampmillis_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Install::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 androidId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_androidid(&has_bits);
          _impl_.androidid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bundled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bundled(&has_bits);
          _impl_.bundled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pending(&has_bits);
          _impl_.pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 lastUpdateTimestampMillis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lastupdatetimestampmillis(&has_bits);
          _impl_.lastupdatetimestampmillis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Install::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.Install)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 androidId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_androidid(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional bool bundled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bundled(), target);
  }

  // optional bool pending = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_pending(), target);
  }

  // optional int64 lastUpdateTimestampMillis = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_lastupdatetimestampmillis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.Install)
  return target;
}

size_t Install::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.Install)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 androidId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional bool bundled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pending = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int64 lastUpdateTimestampMillis = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastupdatetimestampmillis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Install::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Install::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Install::GetClassData() const { return &_class_data_; }


void Install::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Install*>(&to_msg);
  auto& from = static_cast<const Install&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.Install)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.androidid_ = from._impl_.androidid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bundled_ = from._impl_.bundled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pending_ = from._impl_.pending_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lastupdatetimestampmillis_ = from._impl_.lastupdatetimestampmillis_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Install::CopyFrom(const Install& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.Install)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Install::IsInitialized() const {
  return true;
}

void Install::InternalSwap(Install* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Install, _impl_.lastupdatetimestampmillis_)
      + sizeof(Install::_impl_.lastupdatetimestampmillis_)
      - PROTOBUF_FIELD_OFFSET(Install, _impl_.androidid_)>(
          reinterpret_cast<char*>(&_impl_.androidid_),
          reinterpret_cast<char*>(&other->_impl_.androidid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Install::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[0]);
}

// ===================================================================

class Dependency::_Internal {
 public:
  using HasBits = decltype(std::declval<Dependency>()._impl_._has_bits_);
  static void set_has_packagename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minversioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_versioncodemask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skippermissions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Dependency::Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.Dependency)
}
Dependency::Dependency(const Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dependency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packagename_){}
    , decltype(_impl_.minversioncode_){}
    , decltype(_impl_.versioncodemask_){}
    , decltype(_impl_.skippermissions_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_packagename()) {
    _this->_impl_.packagename_.Set(from._internal_packagename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.minversioncode_, &from._impl_.minversioncode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skippermissions_) -
    reinterpret_cast<char*>(&_impl_.minversioncode_)) + sizeof(_impl_.skippermissions_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.Dependency)
}

inline void Dependency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packagename_){}
    , decltype(_impl_.minversioncode_){0}
    , decltype(_impl_.versioncodemask_){0}
    , decltype(_impl_.skippermissions_){false}
  };
  _impl_.packagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dependency::~Dependency() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.Dependency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packagename_.Destroy();
}

void Dependency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.Dependency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.packagename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.minversioncode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.skippermissions_) -
        reinterpret_cast<char*>(&_impl_.minversioncode_)) + sizeof(_impl_.skippermissions_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dependency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string packageName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packagename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.Dependency.packageName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 minVersionCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minversioncode(&has_bits);
          _impl_.minversioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 versionCodeMask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_versioncodemask(&has_bits);
          _impl_.versioncodemask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skipPermissions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_skippermissions(&has_bits);
          _impl_.skippermissions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dependency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.Dependency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string packageName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_packagename().data(), static_cast<int>(this->_internal_packagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.Dependency.packageName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packagename(), target);
  }

  // optional int32 minVersionCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minversioncode(), target);
  }

  // optional int32 versionCodeMask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_versioncodemask(), target);
  }

  // optional bool skipPermissions = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_skippermissions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.Dependency)
  return target;
}

size_t Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.Dependency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string packageName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_packagename());
    }

    // optional int32 minVersionCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minversioncode());
    }

    // optional int32 versionCodeMask = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versioncodemask());
    }

    // optional bool skipPermissions = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dependency::GetClassData() const { return &_class_data_; }


void Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dependency*>(&to_msg);
  auto& from = static_cast<const Dependency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.Dependency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_packagename(from._internal_packagename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.minversioncode_ = from._impl_.minversioncode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.versioncodemask_ = from._impl_.versioncodemask_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.skippermissions_ = from._impl_.skippermissions_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dependency::CopyFrom(const Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dependency::IsInitialized() const {
  return true;
}

void Dependency::InternalSwap(Dependency* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packagename_, lhs_arena,
      &other->_impl_.packagename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dependency, _impl_.skippermissions_)
      + sizeof(Dependency::_impl_.skippermissions_)
      - PROTOBUF_FIELD_OFFSET(Dependency, _impl_.minversioncode_)>(
          reinterpret_cast<char*>(&_impl_.minversioncode_),
          reinterpret_cast<char*>(&other->_impl_.minversioncode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dependency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[1]);
}

// ===================================================================

class InstallDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<InstallDetails>()._impl_._has_bits_);
  static void set_has_installlocation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_targetsdkversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

InstallDetails::InstallDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.InstallDetails)
}
InstallDetails::InstallDetails(const InstallDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstallDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependency_){from._impl_.dependency_}
    , decltype(_impl_.size_){}
    , decltype(_impl_.installlocation_){}
    , decltype(_impl_.targetsdkversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetsdkversion_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.targetsdkversion_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.InstallDetails)
}

inline void InstallDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependency_){arena}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.installlocation_){0}
    , decltype(_impl_.targetsdkversion_){0}
  };
}

InstallDetails::~InstallDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.InstallDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstallDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependency_.~RepeatedPtrField();
}

void InstallDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstallDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.InstallDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependency_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.targetsdkversion_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.targetsdkversion_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 installLocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_installlocation(&has_bits);
          _impl_.installlocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.download.Dependency dependency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 targetSdkVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_targetsdkversion(&has_bits);
          _impl_.targetsdkversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstallDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.InstallDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 installLocation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_installlocation(), target);
  }

  // optional int64 size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // repeated .playapi.proto.finsky.download.Dependency dependency = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dependency_size()); i < n; i++) {
    const auto& repfield = this->_internal_dependency(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 targetSdkVersion = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_targetsdkversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.InstallDetails)
  return target;
}

size_t InstallDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.InstallDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.download.Dependency dependency = 3;
  total_size += 1UL * this->_internal_dependency_size();
  for (const auto& msg : this->_impl_.dependency_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
    }

    // optional int32 installLocation = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_installlocation());
    }

    // optional int32 targetSdkVersion = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetsdkversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstallDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallDetails::GetClassData() const { return &_class_data_; }


void InstallDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstallDetails*>(&to_msg);
  auto& from = static_cast<const InstallDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.InstallDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependency_.MergeFrom(from._impl_.dependency_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.installlocation_ = from._impl_.installlocation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.targetsdkversion_ = from._impl_.targetsdkversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallDetails::CopyFrom(const InstallDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.InstallDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallDetails::IsInitialized() const {
  return true;
}

void InstallDetails::InternalSwap(InstallDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dependency_.InternalSwap(&other->_impl_.dependency_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallDetails, _impl_.targetsdkversion_)
      + sizeof(InstallDetails::_impl_.targetsdkversion_)
      - PROTOBUF_FIELD_OFFSET(InstallDetails, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[2]);
}

// ===================================================================

class PatchDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PatchDetails>()._impl_._has_bits_);
  static void set_has_baseversioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PatchDetails::PatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.PatchDetails)
}
PatchDetails::PatchDetails(const PatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_){}
    , decltype(_impl_.baseversioncode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.baseversioncode_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.baseversioncode_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.PatchDetails)
}

inline void PatchDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.baseversioncode_){0}
  };
}

PatchDetails::~PatchDetails() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.PatchDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PatchDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.PatchDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.baseversioncode_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.baseversioncode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 baseVersionCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_baseversioncode(&has_bits);
          _impl_.baseversioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.PatchDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 baseVersionCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_baseversioncode(), target);
  }

  // optional int64 size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.PatchDetails)
  return target;
}

size_t PatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.PatchDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
    }

    // optional int32 baseVersionCode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_baseversioncode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchDetails::GetClassData() const { return &_class_data_; }


void PatchDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchDetails*>(&to_msg);
  auto& from = static_cast<const PatchDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.PatchDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.baseversioncode_ = from._impl_.baseversioncode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchDetails::CopyFrom(const PatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.PatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDetails::IsInitialized() const {
  return true;
}

void PatchDetails::InternalSwap(PatchDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchDetails, _impl_.baseversioncode_)
      + sizeof(PatchDetails::_impl_.baseversioncode_)
      - PROTOBUF_FIELD_OFFSET(PatchDetails, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[3]);
}

// ===================================================================

class FileMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<FileMetadata>()._impl_._has_bits_);
  static void set_has_filetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_versioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_splitid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compressedsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FileMetadata::FileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.FileMetadata)
}
FileMetadata::FileMetadata(const FileMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.patchdetails_){from._impl_.patchdetails_}
    , decltype(_impl_.splitid_){}
    , decltype(_impl_.filetype_){}
    , decltype(_impl_.versioncode_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.compressedsize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.splitid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.splitid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_splitid()) {
    _this->_impl_.splitid_.Set(from._internal_splitid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filetype_, &from._impl_.filetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compressedsize_) -
    reinterpret_cast<char*>(&_impl_.filetype_)) + sizeof(_impl_.compressedsize_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.FileMetadata)
}

inline void FileMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.patchdetails_){arena}
    , decltype(_impl_.splitid_){}
    , decltype(_impl_.filetype_){0}
    , decltype(_impl_.versioncode_){0}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.compressedsize_){int64_t{0}}
  };
  _impl_.splitid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.splitid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileMetadata::~FileMetadata() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.FileMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.patchdetails_.~RepeatedPtrField();
  _impl_.splitid_.Destroy();
}

void FileMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.FileMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.patchdetails_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.splitid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.filetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compressedsize_) -
        reinterpret_cast<char*>(&_impl_.filetype_)) + sizeof(_impl_.compressedsize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 fileType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_filetype(&has_bits);
          _impl_.filetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 versionCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_versioncode(&has_bits);
          _impl_.versioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string splitId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_splitid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.FileMetadata.splitId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 compressedSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_compressedsize(&has_bits);
          _impl_.compressedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.download.PatchDetails patchDetails = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patchdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.FileMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 fileType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_filetype(), target);
  }

  // optional int32 versionCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_versioncode(), target);
  }

  // optional int64 size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // optional string splitId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_splitid().data(), static_cast<int>(this->_internal_splitid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.FileMetadata.splitId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_splitid(), target);
  }

  // optional int64 compressedSize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_compressedsize(), target);
  }

  // repeated .playapi.proto.finsky.download.PatchDetails patchDetails = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_patchdetails_size()); i < n; i++) {
    const auto& repfield = this->_internal_patchdetails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.FileMetadata)
  return target;
}

size_t FileMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.FileMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.download.PatchDetails patchDetails = 6;
  total_size += 1UL * this->_internal_patchdetails_size();
  for (const auto& msg : this->_impl_.patchdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string splitId = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_splitid());
    }

    // optional int32 fileType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filetype());
    }

    // optional int32 versionCode = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versioncode());
    }

    // optional int64 size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
    }

    // optional int64 compressedSize = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compressedsize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileMetadata::GetClassData() const { return &_class_data_; }


void FileMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileMetadata*>(&to_msg);
  auto& from = static_cast<const FileMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.FileMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.patchdetails_.MergeFrom(from._impl_.patchdetails_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_splitid(from._internal_splitid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.filetype_ = from._impl_.filetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.versioncode_ = from._impl_.versioncode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.compressedsize_ = from._impl_.compressedsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileMetadata::CopyFrom(const FileMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.FileMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMetadata::IsInitialized() const {
  return true;
}

void FileMetadata::InternalSwap(FileMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.patchdetails_.InternalSwap(&other->_impl_.patchdetails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.splitid_, lhs_arena,
      &other->_impl_.splitid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileMetadata, _impl_.compressedsize_)
      + sizeof(FileMetadata::_impl_.compressedsize_)
      - PROTOBUF_FIELD_OFFSET(FileMetadata, _impl_.filetype_)>(
          reinterpret_cast<char*>(&_impl_.filetype_),
          reinterpret_cast<char*>(&other->_impl_.filetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[4]);
}

// ===================================================================

class AndroidAppPatchData::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidAppPatchData>()._impl_._has_bits_);
  static void set_has_baseversioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_basesignature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_patchformat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxpatchsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AndroidAppPatchData::AndroidAppPatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.AndroidAppPatchData)
}
AndroidAppPatchData::AndroidAppPatchData(const AndroidAppPatchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidAppPatchData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basesignature_){}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.baseversioncode_){}
    , decltype(_impl_.patchformat_){}
    , decltype(_impl_.maxpatchsize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.basesignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basesignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_basesignature()) {
    _this->_impl_.basesignature_.Set(from._internal_basesignature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_downloadurl()) {
    _this->_impl_.downloadurl_.Set(from._internal_downloadurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.baseversioncode_, &from._impl_.baseversioncode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxpatchsize_) -
    reinterpret_cast<char*>(&_impl_.baseversioncode_)) + sizeof(_impl_.maxpatchsize_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.AndroidAppPatchData)
}

inline void AndroidAppPatchData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basesignature_){}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.baseversioncode_){0}
    , decltype(_impl_.patchformat_){0}
    , decltype(_impl_.maxpatchsize_){int64_t{0}}
  };
  _impl_.basesignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basesignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidAppPatchData::~AndroidAppPatchData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.AndroidAppPatchData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidAppPatchData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.basesignature_.Destroy();
  _impl_.downloadurl_.Destroy();
}

void AndroidAppPatchData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidAppPatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.AndroidAppPatchData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.basesignature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.downloadurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.baseversioncode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.maxpatchsize_) -
        reinterpret_cast<char*>(&_impl_.baseversioncode_)) + sizeof(_impl_.maxpatchsize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidAppPatchData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 baseVersionCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_baseversioncode(&has_bits);
          _impl_.baseversioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string baseSignature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_basesignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AndroidAppPatchData.baseSignature");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string downloadUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_downloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 patchFormat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_patchformat(&has_bits);
          _impl_.patchformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 maxPatchSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_maxpatchsize(&has_bits);
          _impl_.maxpatchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidAppPatchData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.AndroidAppPatchData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 baseVersionCode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_baseversioncode(), target);
  }

  // optional string baseSignature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_basesignature().data(), static_cast<int>(this->_internal_basesignature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AndroidAppPatchData.baseSignature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_basesignature(), target);
  }

  // optional string downloadUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_downloadurl().data(), static_cast<int>(this->_internal_downloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_downloadurl(), target);
  }

  // optional int32 patchFormat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_patchformat(), target);
  }

  // optional int64 maxPatchSize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_maxpatchsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.AndroidAppPatchData)
  return target;
}

size_t AndroidAppPatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.AndroidAppPatchData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string baseSignature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_basesignature());
    }

    // optional string downloadUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_downloadurl());
    }

    // optional int32 baseVersionCode = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_baseversioncode());
    }

    // optional int32 patchFormat = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_patchformat());
    }

    // optional int64 maxPatchSize = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maxpatchsize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidAppPatchData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidAppPatchData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidAppPatchData::GetClassData() const { return &_class_data_; }


void AndroidAppPatchData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidAppPatchData*>(&to_msg);
  auto& from = static_cast<const AndroidAppPatchData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.AndroidAppPatchData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_basesignature(from._internal_basesignature());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_downloadurl(from._internal_downloadurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.baseversioncode_ = from._impl_.baseversioncode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.patchformat_ = from._impl_.patchformat_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.maxpatchsize_ = from._impl_.maxpatchsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidAppPatchData::CopyFrom(const AndroidAppPatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.AndroidAppPatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidAppPatchData::IsInitialized() const {
  return true;
}

void AndroidAppPatchData::InternalSwap(AndroidAppPatchData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basesignature_, lhs_arena,
      &other->_impl_.basesignature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadurl_, lhs_arena,
      &other->_impl_.downloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidAppPatchData, _impl_.maxpatchsize_)
      + sizeof(AndroidAppPatchData::_impl_.maxpatchsize_)
      - PROTOBUF_FIELD_OFFSET(AndroidAppPatchData, _impl_.baseversioncode_)>(
          reinterpret_cast<char*>(&_impl_.baseversioncode_),
          reinterpret_cast<char*>(&other->_impl_.baseversioncode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidAppPatchData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[5]);
}

// ===================================================================

class AppFileMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<AppFileMetadata>()._impl_._has_bits_);
  static void set_has_filetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_versioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_downloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::download::AndroidAppPatchData& patchdata(const AppFileMetadata* msg);
  static void set_has_patchdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compressedsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_compresseddownloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::download::AndroidAppPatchData&
AppFileMetadata::_Internal::patchdata(const AppFileMetadata* msg) {
  return *msg->_impl_.patchdata_;
}
AppFileMetadata::AppFileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.AppFileMetadata)
}
AppFileMetadata::AppFileMetadata(const AppFileMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppFileMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.compresseddownloadurl_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.patchdata_){nullptr}
    , decltype(_impl_.filetype_){}
    , decltype(_impl_.versioncode_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.compressedsize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_downloadurl()) {
    _this->_impl_.downloadurl_.Set(from._internal_downloadurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.compresseddownloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compresseddownloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_compresseddownloadurl()) {
    _this->_impl_.compresseddownloadurl_.Set(from._internal_compresseddownloadurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_patchdata()) {
    _this->_impl_.patchdata_ = new ::playapi::proto::finsky::download::AndroidAppPatchData(*from._impl_.patchdata_);
  }
  ::memcpy(&_impl_.filetype_, &from._impl_.filetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compressedsize_) -
    reinterpret_cast<char*>(&_impl_.filetype_)) + sizeof(_impl_.compressedsize_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.AppFileMetadata)
}

inline void AppFileMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.compresseddownloadurl_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.patchdata_){nullptr}
    , decltype(_impl_.filetype_){0}
    , decltype(_impl_.versioncode_){0}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.compressedsize_){int64_t{0}}
  };
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.compresseddownloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compresseddownloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppFileMetadata::~AppFileMetadata() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.AppFileMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppFileMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.downloadurl_.Destroy();
  _impl_.compresseddownloadurl_.Destroy();
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.patchdata_;
}

void AppFileMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppFileMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.AppFileMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.downloadurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.compresseddownloadurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.patchdata_ != nullptr);
      _impl_.patchdata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.filetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compressedsize_) -
        reinterpret_cast<char*>(&_impl_.filetype_)) + sizeof(_impl_.compressedsize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppFileMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 fileType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_filetype(&has_bits);
          _impl_.filetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 versionCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_versioncode(&has_bits);
          _impl_.versioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string downloadUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_downloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AppFileMetadata.downloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_patchdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 compressedSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_compressedsize(&has_bits);
          _impl_.compressedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string compressedDownloadUrl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_compresseddownloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string signature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AppFileMetadata.signature");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppFileMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.AppFileMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 fileType = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_filetype(), target);
  }

  // optional int32 versionCode = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_versioncode(), target);
  }

  // optional int64 size = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // optional string downloadUrl = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_downloadurl().data(), static_cast<int>(this->_internal_downloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AppFileMetadata.downloadUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_downloadurl(), target);
  }

  // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::patchdata(this),
        _Internal::patchdata(this).GetCachedSize(), target, stream);
  }

  // optional int64 compressedSize = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_compressedsize(), target);
  }

  // optional string compressedDownloadUrl = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_compresseddownloadurl().data(), static_cast<int>(this->_internal_compresseddownloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_compresseddownloadurl(), target);
  }

  // optional string signature = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AppFileMetadata.signature");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.AppFileMetadata)
  return target;
}

size_t AppFileMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.AppFileMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string downloadUrl = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_downloadurl());
    }

    // optional string compressedDownloadUrl = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_compresseddownloadurl());
    }

    // optional string signature = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.patchdata_);
    }

    // optional int32 fileType = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filetype());
    }

    // optional int32 versionCode = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_versioncode());
    }

    // optional int64 size = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
    }

    // optional int64 compressedSize = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compressedsize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppFileMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppFileMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppFileMetadata::GetClassData() const { return &_class_data_; }


void AppFileMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppFileMetadata*>(&to_msg);
  auto& from = static_cast<const AppFileMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.AppFileMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_downloadurl(from._internal_downloadurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_compresseddownloadurl(from._internal_compresseddownloadurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_patchdata()->::playapi::proto::finsky::download::AndroidAppPatchData::MergeFrom(
          from._internal_patchdata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.filetype_ = from._impl_.filetype_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.versioncode_ = from._impl_.versioncode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.compressedsize_ = from._impl_.compressedsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppFileMetadata::CopyFrom(const AppFileMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.AppFileMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppFileMetadata::IsInitialized() const {
  return true;
}

void AppFileMetadata::InternalSwap(AppFileMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadurl_, lhs_arena,
      &other->_impl_.downloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compresseddownloadurl_, lhs_arena,
      &other->_impl_.compresseddownloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppFileMetadata, _impl_.compressedsize_)
      + sizeof(AppFileMetadata::_impl_.compressedsize_)
      - PROTOBUF_FIELD_OFFSET(AppFileMetadata, _impl_.patchdata_)>(
          reinterpret_cast<char*>(&_impl_.patchdata_),
          reinterpret_cast<char*>(&other->_impl_.patchdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppFileMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[6]);
}

// ===================================================================

class EncryptionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionParams>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_encryptionkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hmackey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EncryptionParams::EncryptionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.EncryptionParams)
}
EncryptionParams::EncryptionParams(const EncryptionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncryptionParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encryptionkey_){}
    , decltype(_impl_.hmackey_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encryptionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encryptionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encryptionkey()) {
    _this->_impl_.encryptionkey_.Set(from._internal_encryptionkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hmackey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmackey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hmackey()) {
    _this->_impl_.hmackey_.Set(from._internal_hmackey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.EncryptionParams)
}

inline void EncryptionParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encryptionkey_){}
    , decltype(_impl_.hmackey_){}
    , decltype(_impl_.version_){0}
  };
  _impl_.encryptionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encryptionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hmackey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmackey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptionParams::~EncryptionParams() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.EncryptionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encryptionkey_.Destroy();
  _impl_.hmackey_.Destroy();
}

void EncryptionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.EncryptionParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encryptionkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hmackey_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string encryptionKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encryptionkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.EncryptionParams.encryptionKey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hmacKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hmackey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.EncryptionParams.hmacKey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptionParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.EncryptionParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional string encryptionKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encryptionkey().data(), static_cast<int>(this->_internal_encryptionkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.EncryptionParams.encryptionKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encryptionkey(), target);
  }

  // optional string hmacKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hmackey().data(), static_cast<int>(this->_internal_hmackey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.EncryptionParams.hmacKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hmackey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.EncryptionParams)
  return target;
}

size_t EncryptionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.EncryptionParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string encryptionKey = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encryptionkey());
    }

    // optional string hmacKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hmackey());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptionParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncryptionParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptionParams::GetClassData() const { return &_class_data_; }


void EncryptionParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncryptionParams*>(&to_msg);
  auto& from = static_cast<const EncryptionParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.EncryptionParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encryptionkey(from._internal_encryptionkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hmackey(from._internal_hmackey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptionParams::CopyFrom(const EncryptionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.EncryptionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionParams::IsInitialized() const {
  return true;
}

void EncryptionParams::InternalSwap(EncryptionParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encryptionkey_, lhs_arena,
      &other->_impl_.encryptionkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hmackey_, lhs_arena,
      &other->_impl_.hmackey_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[7]);
}

// ===================================================================

class SplitDeliveryData::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitDeliveryData>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downloadsize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gzippeddownloadsize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_downloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gzippeddownloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::download::AndroidAppPatchData& patchdata(const SplitDeliveryData* msg);
  static void set_has_patchdata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::playapi::proto::finsky::download::AndroidAppPatchData&
SplitDeliveryData::_Internal::patchdata(const SplitDeliveryData* msg) {
  return *msg->_impl_.patchdata_;
}
SplitDeliveryData::SplitDeliveryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.SplitDeliveryData)
}
SplitDeliveryData::SplitDeliveryData(const SplitDeliveryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SplitDeliveryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.gzippeddownloadurl_){}
    , decltype(_impl_.patchdata_){nullptr}
    , decltype(_impl_.downloadsize_){}
    , decltype(_impl_.gzippeddownloadsize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_downloadurl()) {
    _this->_impl_.downloadurl_.Set(from._internal_downloadurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gzippeddownloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gzippeddownloadurl()) {
    _this->_impl_.gzippeddownloadurl_.Set(from._internal_gzippeddownloadurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_patchdata()) {
    _this->_impl_.patchdata_ = new ::playapi::proto::finsky::download::AndroidAppPatchData(*from._impl_.patchdata_);
  }
  ::memcpy(&_impl_.downloadsize_, &from._impl_.downloadsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gzippeddownloadsize_) -
    reinterpret_cast<char*>(&_impl_.downloadsize_)) + sizeof(_impl_.gzippeddownloadsize_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.SplitDeliveryData)
}

inline void SplitDeliveryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.gzippeddownloadurl_){}
    , decltype(_impl_.patchdata_){nullptr}
    , decltype(_impl_.downloadsize_){int64_t{0}}
    , decltype(_impl_.gzippeddownloadsize_){int64_t{0}}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gzippeddownloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SplitDeliveryData::~SplitDeliveryData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.SplitDeliveryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SplitDeliveryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.downloadurl_.Destroy();
  _impl_.gzippeddownloadurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.patchdata_;
}

void SplitDeliveryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SplitDeliveryData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.SplitDeliveryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.downloadurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.gzippeddownloadurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.patchdata_ != nullptr);
      _impl_.patchdata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.downloadsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gzippeddownloadsize_) -
        reinterpret_cast<char*>(&_impl_.downloadsize_)) + sizeof(_impl_.gzippeddownloadsize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitDeliveryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.SplitDeliveryData.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 downloadSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_downloadsize(&has_bits);
          _impl_.downloadsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 gzippedDownloadSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gzippeddownloadsize(&has_bits);
          _impl_.gzippeddownloadsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.SplitDeliveryData.signature");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string downloadUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_downloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.SplitDeliveryData.downloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gzippedDownloadUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_gzippeddownloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_patchdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitDeliveryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.SplitDeliveryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.SplitDeliveryData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional int64 downloadSize = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_downloadsize(), target);
  }

  // optional int64 gzippedDownloadSize = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_gzippeddownloadsize(), target);
  }

  // optional string signature = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.SplitDeliveryData.signature");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_signature(), target);
  }

  // optional string downloadUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_downloadurl().data(), static_cast<int>(this->_internal_downloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.SplitDeliveryData.downloadUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_downloadurl(), target);
  }

  // optional string gzippedDownloadUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gzippeddownloadurl().data(), static_cast<int>(this->_internal_gzippeddownloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gzippeddownloadurl(), target);
  }

  // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::patchdata(this),
        _Internal::patchdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.SplitDeliveryData)
  return target;
}

size_t SplitDeliveryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.SplitDeliveryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string signature = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional string downloadUrl = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_downloadurl());
    }

    // optional string gzippedDownloadUrl = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gzippeddownloadurl());
    }

    // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.patchdata_);
    }

    // optional int64 downloadSize = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_downloadsize());
    }

    // optional int64 gzippedDownloadSize = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gzippeddownloadsize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitDeliveryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SplitDeliveryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitDeliveryData::GetClassData() const { return &_class_data_; }


void SplitDeliveryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SplitDeliveryData*>(&to_msg);
  auto& from = static_cast<const SplitDeliveryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.SplitDeliveryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_downloadurl(from._internal_downloadurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_gzippeddownloadurl(from._internal_gzippeddownloadurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_patchdata()->::playapi::proto::finsky::download::AndroidAppPatchData::MergeFrom(
          from._internal_patchdata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.downloadsize_ = from._impl_.downloadsize_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.gzippeddownloadsize_ = from._impl_.gzippeddownloadsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitDeliveryData::CopyFrom(const SplitDeliveryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.SplitDeliveryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitDeliveryData::IsInitialized() const {
  return true;
}

void SplitDeliveryData::InternalSwap(SplitDeliveryData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadurl_, lhs_arena,
      &other->_impl_.downloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gzippeddownloadurl_, lhs_arena,
      &other->_impl_.gzippeddownloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitDeliveryData, _impl_.gzippeddownloadsize_)
      + sizeof(SplitDeliveryData::_impl_.gzippeddownloadsize_)
      - PROTOBUF_FIELD_OFFSET(SplitDeliveryData, _impl_.patchdata_)>(
          reinterpret_cast<char*>(&_impl_.patchdata_),
          reinterpret_cast<char*>(&other->_impl_.patchdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitDeliveryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[8]);
}

// ===================================================================

class AndroidAppDeliveryData::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidAppDeliveryData>()._impl_._has_bits_);
  static void set_has_downloadsize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forwardlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_refundtimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_serverinitiated(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_postinstallrefundwindowmillis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_immediatestartneeded(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::playapi::proto::finsky::download::AndroidAppPatchData& patchdata(const AndroidAppDeliveryData* msg);
  static void set_has_patchdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::playapi::proto::finsky::download::EncryptionParams& encryptionparams(const AndroidAppDeliveryData* msg);
  static void set_has_encryptionparams(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gzippeddownloadurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gzippeddownloadsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_installlocation(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_everexternallyhosted(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::playapi::proto::finsky::download::AndroidAppPatchData&
AndroidAppDeliveryData::_Internal::patchdata(const AndroidAppDeliveryData* msg) {
  return *msg->_impl_.patchdata_;
}
const ::playapi::proto::finsky::download::EncryptionParams&
AndroidAppDeliveryData::_Internal::encryptionparams(const AndroidAppDeliveryData* msg) {
  return *msg->_impl_.encryptionparams_;
}
void AndroidAppDeliveryData::clear_downloadauthcookie() {
  _impl_.downloadauthcookie_.Clear();
}
AndroidAppDeliveryData::AndroidAppDeliveryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.AndroidAppDeliveryData)
}
AndroidAppDeliveryData::AndroidAppDeliveryData(const AndroidAppDeliveryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidAppDeliveryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additionalfile_){from._impl_.additionalfile_}
    , decltype(_impl_.downloadauthcookie_){from._impl_.downloadauthcookie_}
    , decltype(_impl_.splitdeliverydata_){from._impl_.splitdeliverydata_}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.gzippeddownloadurl_){}
    , decltype(_impl_.patchdata_){nullptr}
    , decltype(_impl_.encryptionparams_){nullptr}
    , decltype(_impl_.downloadsize_){}
    , decltype(_impl_.refundtimeout_){}
    , decltype(_impl_.postinstallrefundwindowmillis_){}
    , decltype(_impl_.forwardlocked_){}
    , decltype(_impl_.serverinitiated_){}
    , decltype(_impl_.immediatestartneeded_){}
    , decltype(_impl_.everexternallyhosted_){}
    , decltype(_impl_.installlocation_){}
    , decltype(_impl_.gzippeddownloadsize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_downloadurl()) {
    _this->_impl_.downloadurl_.Set(from._internal_downloadurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gzippeddownloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gzippeddownloadurl()) {
    _this->_impl_.gzippeddownloadurl_.Set(from._internal_gzippeddownloadurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_patchdata()) {
    _this->_impl_.patchdata_ = new ::playapi::proto::finsky::download::AndroidAppPatchData(*from._impl_.patchdata_);
  }
  if (from._internal_has_encryptionparams()) {
    _this->_impl_.encryptionparams_ = new ::playapi::proto::finsky::download::EncryptionParams(*from._impl_.encryptionparams_);
  }
  ::memcpy(&_impl_.downloadsize_, &from._impl_.downloadsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gzippeddownloadsize_) -
    reinterpret_cast<char*>(&_impl_.downloadsize_)) + sizeof(_impl_.gzippeddownloadsize_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.AndroidAppDeliveryData)
}

inline void AndroidAppDeliveryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additionalfile_){arena}
    , decltype(_impl_.downloadauthcookie_){arena}
    , decltype(_impl_.splitdeliverydata_){arena}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.downloadurl_){}
    , decltype(_impl_.gzippeddownloadurl_){}
    , decltype(_impl_.patchdata_){nullptr}
    , decltype(_impl_.encryptionparams_){nullptr}
    , decltype(_impl_.downloadsize_){int64_t{0}}
    , decltype(_impl_.refundtimeout_){int64_t{0}}
    , decltype(_impl_.postinstallrefundwindowmillis_){int64_t{0}}
    , decltype(_impl_.forwardlocked_){false}
    , decltype(_impl_.serverinitiated_){false}
    , decltype(_impl_.immediatestartneeded_){false}
    , decltype(_impl_.everexternallyhosted_){false}
    , decltype(_impl_.installlocation_){0}
    , decltype(_impl_.gzippeddownloadsize_){int64_t{0}}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gzippeddownloadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidAppDeliveryData::~AndroidAppDeliveryData() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.AndroidAppDeliveryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidAppDeliveryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additionalfile_.~RepeatedPtrField();
  _impl_.downloadauthcookie_.~RepeatedPtrField();
  _impl_.splitdeliverydata_.~RepeatedPtrField();
  _impl_.signature_.Destroy();
  _impl_.downloadurl_.Destroy();
  _impl_.gzippeddownloadurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.patchdata_;
  if (this != internal_default_instance()) delete _impl_.encryptionparams_;
}

void AndroidAppDeliveryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidAppDeliveryData::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.AndroidAppDeliveryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additionalfile_.Clear();
  _impl_.downloadauthcookie_.Clear();
  _impl_.splitdeliverydata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.downloadurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gzippeddownloadurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.patchdata_ != nullptr);
      _impl_.patchdata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.encryptionparams_ != nullptr);
      _impl_.encryptionparams_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.downloadsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.postinstallrefundwindowmillis_) -
        reinterpret_cast<char*>(&_impl_.downloadsize_)) + sizeof(_impl_.postinstallrefundwindowmillis_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.forwardlocked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gzippeddownloadsize_) -
        reinterpret_cast<char*>(&_impl_.forwardlocked_)) + sizeof(_impl_.gzippeddownloadsize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidAppDeliveryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 downloadSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_downloadsize(&has_bits);
          _impl_.downloadsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AndroidAppDeliveryData.signature");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string downloadUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_downloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.download.AppFileMetadata additionalFile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additionalfile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.HttpCookie downloadAuthCookie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_downloadauthcookie(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool forwardLocked = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_forwardlocked(&has_bits);
          _impl_.forwardlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 refundTimeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_refundtimeout(&has_bits);
          _impl_.refundtimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool serverInitiated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_serverinitiated(&has_bits);
          _impl_.serverinitiated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 postInstallRefundWindowMillis = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_postinstallrefundwindowmillis(&has_bits);
          _impl_.postinstallrefundwindowmillis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool immediateStartNeeded = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_immediatestartneeded(&has_bits);
          _impl_.immediatestartneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_patchdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.EncryptionParams encryptionParams = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryptionparams(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gzippedDownloadUrl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_gzippeddownloadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 gzippedDownloadSize = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_gzippeddownloadsize(&has_bits);
          _impl_.gzippeddownloadsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.download.SplitDeliveryData splitDeliveryData = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_splitdeliverydata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 installLocation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_installlocation(&has_bits);
          _impl_.installlocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool everExternallyHosted = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_everexternallyhosted(&has_bits);
          _impl_.everexternallyhosted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidAppDeliveryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.AndroidAppDeliveryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 downloadSize = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_downloadsize(), target);
  }

  // optional string signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AndroidAppDeliveryData.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // optional string downloadUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_downloadurl().data(), static_cast<int>(this->_internal_downloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_downloadurl(), target);
  }

  // repeated .playapi.proto.finsky.download.AppFileMetadata additionalFile = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additionalfile_size()); i < n; i++) {
    const auto& repfield = this->_internal_additionalfile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.HttpCookie downloadAuthCookie = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_downloadauthcookie_size()); i < n; i++) {
    const auto& repfield = this->_internal_downloadauthcookie(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool forwardLocked = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_forwardlocked(), target);
  }

  // optional int64 refundTimeout = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_refundtimeout(), target);
  }

  // optional bool serverInitiated = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_serverinitiated(), target);
  }

  // optional int64 postInstallRefundWindowMillis = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_postinstallrefundwindowmillis(), target);
  }

  // optional bool immediateStartNeeded = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_immediatestartneeded(), target);
  }

  // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::patchdata(this),
        _Internal::patchdata(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.download.EncryptionParams encryptionParams = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::encryptionparams(this),
        _Internal::encryptionparams(this).GetCachedSize(), target, stream);
  }

  // optional string gzippedDownloadUrl = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gzippeddownloadurl().data(), static_cast<int>(this->_internal_gzippeddownloadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_gzippeddownloadurl(), target);
  }

  // optional int64 gzippedDownloadSize = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_gzippeddownloadsize(), target);
  }

  // repeated .playapi.proto.finsky.download.SplitDeliveryData splitDeliveryData = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_splitdeliverydata_size()); i < n; i++) {
    const auto& repfield = this->_internal_splitdeliverydata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 installLocation = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_installlocation(), target);
  }

  // optional bool everExternallyHosted = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_everexternallyhosted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.AndroidAppDeliveryData)
  return target;
}

size_t AndroidAppDeliveryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.AndroidAppDeliveryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.download.AppFileMetadata additionalFile = 4;
  total_size += 1UL * this->_internal_additionalfile_size();
  for (const auto& msg : this->_impl_.additionalfile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.HttpCookie downloadAuthCookie = 5;
  total_size += 1UL * this->_internal_downloadauthcookie_size();
  for (const auto& msg : this->_impl_.downloadauthcookie_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.download.SplitDeliveryData splitDeliveryData = 15;
  total_size += 1UL * this->_internal_splitdeliverydata_size();
  for (const auto& msg : this->_impl_.splitdeliverydata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string signature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional string downloadUrl = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_downloadurl());
    }

    // optional string gzippedDownloadUrl = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gzippeddownloadurl());
    }

    // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.patchdata_);
    }

    // optional .playapi.proto.finsky.download.EncryptionParams encryptionParams = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encryptionparams_);
    }

    // optional int64 downloadSize = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_downloadsize());
    }

    // optional int64 refundTimeout = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_refundtimeout());
    }

    // optional int64 postInstallRefundWindowMillis = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_postinstallrefundwindowmillis());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool forwardLocked = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool serverInitiated = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool immediateStartNeeded = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool everExternallyHosted = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int32 installLocation = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_installlocation());
    }

    // optional int64 gzippedDownloadSize = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gzippeddownloadsize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidAppDeliveryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidAppDeliveryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidAppDeliveryData::GetClassData() const { return &_class_data_; }


void AndroidAppDeliveryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidAppDeliveryData*>(&to_msg);
  auto& from = static_cast<const AndroidAppDeliveryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.AndroidAppDeliveryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additionalfile_.MergeFrom(from._impl_.additionalfile_);
  _this->_impl_.downloadauthcookie_.MergeFrom(from._impl_.downloadauthcookie_);
  _this->_impl_.splitdeliverydata_.MergeFrom(from._impl_.splitdeliverydata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_downloadurl(from._internal_downloadurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_gzippeddownloadurl(from._internal_gzippeddownloadurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_patchdata()->::playapi::proto::finsky::download::AndroidAppPatchData::MergeFrom(
          from._internal_patchdata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_encryptionparams()->::playapi::proto::finsky::download::EncryptionParams::MergeFrom(
          from._internal_encryptionparams());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.downloadsize_ = from._impl_.downloadsize_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.refundtimeout_ = from._impl_.refundtimeout_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.postinstallrefundwindowmillis_ = from._impl_.postinstallrefundwindowmillis_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.forwardlocked_ = from._impl_.forwardlocked_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.serverinitiated_ = from._impl_.serverinitiated_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.immediatestartneeded_ = from._impl_.immediatestartneeded_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.everexternallyhosted_ = from._impl_.everexternallyhosted_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.installlocation_ = from._impl_.installlocation_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.gzippeddownloadsize_ = from._impl_.gzippeddownloadsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidAppDeliveryData::CopyFrom(const AndroidAppDeliveryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.AndroidAppDeliveryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidAppDeliveryData::IsInitialized() const {
  return true;
}

void AndroidAppDeliveryData::InternalSwap(AndroidAppDeliveryData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.additionalfile_.InternalSwap(&other->_impl_.additionalfile_);
  _impl_.downloadauthcookie_.InternalSwap(&other->_impl_.downloadauthcookie_);
  _impl_.splitdeliverydata_.InternalSwap(&other->_impl_.splitdeliverydata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadurl_, lhs_arena,
      &other->_impl_.downloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gzippeddownloadurl_, lhs_arena,
      &other->_impl_.gzippeddownloadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidAppDeliveryData, _impl_.gzippeddownloadsize_)
      + sizeof(AndroidAppDeliveryData::_impl_.gzippeddownloadsize_)
      - PROTOBUF_FIELD_OFFSET(AndroidAppDeliveryData, _impl_.patchdata_)>(
          reinterpret_cast<char*>(&_impl_.patchdata_),
          reinterpret_cast<char*>(&other->_impl_.patchdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidAppDeliveryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[9]);
}

// ===================================================================

class DeliveryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeliveryResponse>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::download::AndroidAppDeliveryData& appdeliverydata(const DeliveryResponse* msg);
  static void set_has_appdeliverydata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::playapi::proto::finsky::download::AndroidAppDeliveryData&
DeliveryResponse::_Internal::appdeliverydata(const DeliveryResponse* msg) {
  return *msg->_impl_.appdeliverydata_;
}
DeliveryResponse::DeliveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.download.DeliveryResponse)
}
DeliveryResponse::DeliveryResponse(const DeliveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeliveryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appdeliverydata_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_appdeliverydata()) {
    _this->_impl_.appdeliverydata_ = new ::playapi::proto::finsky::download::AndroidAppDeliveryData(*from._impl_.appdeliverydata_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.download.DeliveryResponse)
}

inline void DeliveryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appdeliverydata_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

DeliveryResponse::~DeliveryResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.download.DeliveryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeliveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.appdeliverydata_;
}

void DeliveryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeliveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.download.DeliveryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.appdeliverydata_ != nullptr);
    _impl_.appdeliverydata_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeliveryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_appdeliverydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeliveryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.download.DeliveryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::appdeliverydata(this),
        _Internal::appdeliverydata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.download.DeliveryResponse)
  return target;
}

size_t DeliveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.download.DeliveryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appdeliverydata_);
    }

    // optional int32 status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeliveryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeliveryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeliveryResponse::GetClassData() const { return &_class_data_; }


void DeliveryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeliveryResponse*>(&to_msg);
  auto& from = static_cast<const DeliveryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.download.DeliveryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_appdeliverydata()->::playapi::proto::finsky::download::AndroidAppDeliveryData::MergeFrom(
          from._internal_appdeliverydata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeliveryResponse::CopyFrom(const DeliveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.download.DeliveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryResponse::IsInitialized() const {
  return true;
}

void DeliveryResponse::InternalSwap(DeliveryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeliveryResponse, _impl_.status_)
      + sizeof(DeliveryResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(DeliveryResponse, _impl_.appdeliverydata_)>(
          reinterpret_cast<char*>(&_impl_.appdeliverydata_),
          reinterpret_cast<char*>(&other->_impl_.appdeliverydata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeliveryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fdownload_2eproto_getter, &descriptor_table_play_5fdownload_2eproto_once,
      file_level_metadata_play_5fdownload_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace download
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::Install*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::Install >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::Install >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::Dependency*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::InstallDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::InstallDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::InstallDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::PatchDetails*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::PatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::PatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::FileMetadata*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::FileMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::FileMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::AndroidAppPatchData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::AndroidAppPatchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::AndroidAppPatchData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::AppFileMetadata*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::AppFileMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::AppFileMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::EncryptionParams*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::EncryptionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::EncryptionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::SplitDeliveryData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::SplitDeliveryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::SplitDeliveryData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::AndroidAppDeliveryData*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::AndroidAppDeliveryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::AndroidAppDeliveryData >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::download::DeliveryResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::download::DeliveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::download::DeliveryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
