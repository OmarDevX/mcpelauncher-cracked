// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gsf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gsf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gsf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gsf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gsf_2eproto;
namespace playapi {
namespace proto {
namespace gsf {
class AndroidBuildProto;
struct AndroidBuildProtoDefaultTypeInternal;
extern AndroidBuildProtoDefaultTypeInternal _AndroidBuildProto_default_instance_;
class AndroidBuildProto_PackageVersion;
struct AndroidBuildProto_PackageVersionDefaultTypeInternal;
extern AndroidBuildProto_PackageVersionDefaultTypeInternal _AndroidBuildProto_PackageVersion_default_instance_;
class AndroidCheckinProto;
struct AndroidCheckinProtoDefaultTypeInternal;
extern AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
class AndroidCheckinReasonProto;
struct AndroidCheckinReasonProtoDefaultTypeInternal;
extern AndroidCheckinReasonProtoDefaultTypeInternal _AndroidCheckinReasonProto_default_instance_;
class AndroidCheckinRequest;
struct AndroidCheckinRequestDefaultTypeInternal;
extern AndroidCheckinRequestDefaultTypeInternal _AndroidCheckinRequest_default_instance_;
class AndroidCheckinResponse;
struct AndroidCheckinResponseDefaultTypeInternal;
extern AndroidCheckinResponseDefaultTypeInternal _AndroidCheckinResponse_default_instance_;
class AndroidEventProto;
struct AndroidEventProtoDefaultTypeInternal;
extern AndroidEventProtoDefaultTypeInternal _AndroidEventProto_default_instance_;
class AndroidIntentProto;
struct AndroidIntentProtoDefaultTypeInternal;
extern AndroidIntentProtoDefaultTypeInternal _AndroidIntentProto_default_instance_;
class AndroidIntentProto_Extra;
struct AndroidIntentProto_ExtraDefaultTypeInternal;
extern AndroidIntentProto_ExtraDefaultTypeInternal _AndroidIntentProto_Extra_default_instance_;
class AndroidStatisticProto;
struct AndroidStatisticProtoDefaultTypeInternal;
extern AndroidStatisticProtoDefaultTypeInternal _AndroidStatisticProto_default_instance_;
class DeviceConfigurationProto;
struct DeviceConfigurationProtoDefaultTypeInternal;
extern DeviceConfigurationProtoDefaultTypeInternal _DeviceConfigurationProto_default_instance_;
class DeviceConfigurationProto_FeatureWithGLVersion;
struct DeviceConfigurationProto_FeatureWithGLVersionDefaultTypeInternal;
extern DeviceConfigurationProto_FeatureWithGLVersionDefaultTypeInternal _DeviceConfigurationProto_FeatureWithGLVersion_default_instance_;
class GservicesSetting;
struct GservicesSettingDefaultTypeInternal;
extern GservicesSettingDefaultTypeInternal _GservicesSetting_default_instance_;
}  // namespace gsf
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> ::playapi::proto::gsf::AndroidBuildProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidBuildProto>(Arena*);
template<> ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidBuildProto_PackageVersion>(Arena*);
template<> ::playapi::proto::gsf::AndroidCheckinProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidCheckinProto>(Arena*);
template<> ::playapi::proto::gsf::AndroidCheckinReasonProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidCheckinReasonProto>(Arena*);
template<> ::playapi::proto::gsf::AndroidCheckinRequest* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidCheckinRequest>(Arena*);
template<> ::playapi::proto::gsf::AndroidCheckinResponse* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidCheckinResponse>(Arena*);
template<> ::playapi::proto::gsf::AndroidEventProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidEventProto>(Arena*);
template<> ::playapi::proto::gsf::AndroidIntentProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidIntentProto>(Arena*);
template<> ::playapi::proto::gsf::AndroidIntentProto_Extra* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidIntentProto_Extra>(Arena*);
template<> ::playapi::proto::gsf::AndroidStatisticProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::AndroidStatisticProto>(Arena*);
template<> ::playapi::proto::gsf::DeviceConfigurationProto* Arena::CreateMaybeMessage<::playapi::proto::gsf::DeviceConfigurationProto>(Arena*);
template<> ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* Arena::CreateMaybeMessage<::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion>(Arena*);
template<> ::playapi::proto::gsf::GservicesSetting* Arena::CreateMaybeMessage<::playapi::proto::gsf::GservicesSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playapi {
namespace proto {
namespace gsf {

// ===================================================================

class AndroidCheckinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidCheckinRequest) */ {
 public:
  inline AndroidCheckinRequest() : AndroidCheckinRequest(nullptr) {}
  ~AndroidCheckinRequest() override;
  explicit PROTOBUF_CONSTEXPR AndroidCheckinRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidCheckinRequest(const AndroidCheckinRequest& from);
  AndroidCheckinRequest(AndroidCheckinRequest&& from) noexcept
    : AndroidCheckinRequest() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinRequest& operator=(const AndroidCheckinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinRequest& operator=(AndroidCheckinRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidCheckinRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidCheckinRequest* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinRequest*>(
               &_AndroidCheckinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AndroidCheckinRequest& a, AndroidCheckinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidCheckinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidCheckinRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidCheckinRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidCheckinRequest& from) {
    AndroidCheckinRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidCheckinRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidCheckinRequest";
  }
  protected:
  explicit AndroidCheckinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddrFieldNumber = 9,
    kAccountCookieFieldNumber = 11,
    kOtaCertFieldNumber = 15,
    kMacAddrTypeFieldNumber = 19,
    kImeiFieldNumber = 1,
    kDigestFieldNumber = 3,
    kDesiredBuildFieldNumber = 5,
    kLocaleFieldNumber = 6,
    kMarketCheckinFieldNumber = 8,
    kMeidFieldNumber = 10,
    kTimeZoneFieldNumber = 12,
    kSerialNumberFieldNumber = 16,
    kEsnFieldNumber = 17,
    kUserNameFieldNumber = 21,
    kDroidguardResultFieldNumber = 24,
    kDeviceDataVersionInfoFieldNumber = 25,
    kCheckinFieldNumber = 4,
    kDeviceConfigurationFieldNumber = 18,
    kIdFieldNumber = 2,
    kLoggingIdFieldNumber = 7,
    kSecurityTokenFieldNumber = 13,
    kVersionFieldNumber = 14,
    kFragmentFieldNumber = 20,
    kUserSerialNumberFieldNumber = 22,
    kFetchSystemUpdatesFieldNumber = 29,
  };
  // repeated string macAddr = 9;
  int macaddr_size() const;
  private:
  int _internal_macaddr_size() const;
  public:
  void clear_macaddr();
  const std::string& macaddr(int index) const;
  std::string* mutable_macaddr(int index);
  void set_macaddr(int index, const std::string& value);
  void set_macaddr(int index, std::string&& value);
  void set_macaddr(int index, const char* value);
  void set_macaddr(int index, const char* value, size_t size);
  std::string* add_macaddr();
  void add_macaddr(const std::string& value);
  void add_macaddr(std::string&& value);
  void add_macaddr(const char* value);
  void add_macaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& macaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_macaddr();
  private:
  const std::string& _internal_macaddr(int index) const;
  std::string* _internal_add_macaddr();
  public:

  // repeated string accountCookie = 11;
  int accountcookie_size() const;
  private:
  int _internal_accountcookie_size() const;
  public:
  void clear_accountcookie();
  const std::string& accountcookie(int index) const;
  std::string* mutable_accountcookie(int index);
  void set_accountcookie(int index, const std::string& value);
  void set_accountcookie(int index, std::string&& value);
  void set_accountcookie(int index, const char* value);
  void set_accountcookie(int index, const char* value, size_t size);
  std::string* add_accountcookie();
  void add_accountcookie(const std::string& value);
  void add_accountcookie(std::string&& value);
  void add_accountcookie(const char* value);
  void add_accountcookie(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accountcookie() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accountcookie();
  private:
  const std::string& _internal_accountcookie(int index) const;
  std::string* _internal_add_accountcookie();
  public:

  // repeated string otaCert = 15;
  int otacert_size() const;
  private:
  int _internal_otacert_size() const;
  public:
  void clear_otacert();
  const std::string& otacert(int index) const;
  std::string* mutable_otacert(int index);
  void set_otacert(int index, const std::string& value);
  void set_otacert(int index, std::string&& value);
  void set_otacert(int index, const char* value);
  void set_otacert(int index, const char* value, size_t size);
  std::string* add_otacert();
  void add_otacert(const std::string& value);
  void add_otacert(std::string&& value);
  void add_otacert(const char* value);
  void add_otacert(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& otacert() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_otacert();
  private:
  const std::string& _internal_otacert(int index) const;
  std::string* _internal_add_otacert();
  public:

  // repeated string macAddrType = 19;
  int macaddrtype_size() const;
  private:
  int _internal_macaddrtype_size() const;
  public:
  void clear_macaddrtype();
  const std::string& macaddrtype(int index) const;
  std::string* mutable_macaddrtype(int index);
  void set_macaddrtype(int index, const std::string& value);
  void set_macaddrtype(int index, std::string&& value);
  void set_macaddrtype(int index, const char* value);
  void set_macaddrtype(int index, const char* value, size_t size);
  std::string* add_macaddrtype();
  void add_macaddrtype(const std::string& value);
  void add_macaddrtype(std::string&& value);
  void add_macaddrtype(const char* value);
  void add_macaddrtype(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& macaddrtype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_macaddrtype();
  private:
  const std::string& _internal_macaddrtype(int index) const;
  std::string* _internal_add_macaddrtype();
  public:

  // optional string imei = 1;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string digest = 3;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string desiredBuild = 5;
  bool has_desiredbuild() const;
  private:
  bool _internal_has_desiredbuild() const;
  public:
  void clear_desiredbuild();
  const std::string& desiredbuild() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desiredbuild(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desiredbuild();
  PROTOBUF_NODISCARD std::string* release_desiredbuild();
  void set_allocated_desiredbuild(std::string* desiredbuild);
  private:
  const std::string& _internal_desiredbuild() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desiredbuild(const std::string& value);
  std::string* _internal_mutable_desiredbuild();
  public:

  // optional string locale = 6;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional string marketCheckin = 8;
  bool has_marketcheckin() const;
  private:
  bool _internal_has_marketcheckin() const;
  public:
  void clear_marketcheckin();
  const std::string& marketcheckin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_marketcheckin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_marketcheckin();
  PROTOBUF_NODISCARD std::string* release_marketcheckin();
  void set_allocated_marketcheckin(std::string* marketcheckin);
  private:
  const std::string& _internal_marketcheckin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketcheckin(const std::string& value);
  std::string* _internal_mutable_marketcheckin();
  public:

  // optional string meid = 10;
  bool has_meid() const;
  private:
  bool _internal_has_meid() const;
  public:
  void clear_meid();
  const std::string& meid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meid();
  PROTOBUF_NODISCARD std::string* release_meid();
  void set_allocated_meid(std::string* meid);
  private:
  const std::string& _internal_meid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meid(const std::string& value);
  std::string* _internal_mutable_meid();
  public:

  // optional string timeZone = 12;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // optional string serialNumber = 16;
  bool has_serialnumber() const;
  private:
  bool _internal_has_serialnumber() const;
  public:
  void clear_serialnumber();
  const std::string& serialnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialnumber();
  PROTOBUF_NODISCARD std::string* release_serialnumber();
  void set_allocated_serialnumber(std::string* serialnumber);
  private:
  const std::string& _internal_serialnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialnumber(const std::string& value);
  std::string* _internal_mutable_serialnumber();
  public:

  // optional string esn = 17;
  bool has_esn() const;
  private:
  bool _internal_has_esn() const;
  public:
  void clear_esn();
  const std::string& esn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_esn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_esn();
  PROTOBUF_NODISCARD std::string* release_esn();
  void set_allocated_esn(std::string* esn);
  private:
  const std::string& _internal_esn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_esn(const std::string& value);
  std::string* _internal_mutable_esn();
  public:

  // optional string userName = 21;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string droidguardResult = 24;
  bool has_droidguardresult() const;
  private:
  bool _internal_has_droidguardresult() const;
  public:
  void clear_droidguardresult();
  const std::string& droidguardresult() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_droidguardresult(ArgT0&& arg0, ArgT... args);
  std::string* mutable_droidguardresult();
  PROTOBUF_NODISCARD std::string* release_droidguardresult();
  void set_allocated_droidguardresult(std::string* droidguardresult);
  private:
  const std::string& _internal_droidguardresult() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_droidguardresult(const std::string& value);
  std::string* _internal_mutable_droidguardresult();
  public:

  // optional string deviceDataVersionInfo = 25;
  bool has_devicedataversioninfo() const;
  private:
  bool _internal_has_devicedataversioninfo() const;
  public:
  void clear_devicedataversioninfo();
  const std::string& devicedataversioninfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicedataversioninfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicedataversioninfo();
  PROTOBUF_NODISCARD std::string* release_devicedataversioninfo();
  void set_allocated_devicedataversioninfo(std::string* devicedataversioninfo);
  private:
  const std::string& _internal_devicedataversioninfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicedataversioninfo(const std::string& value);
  std::string* _internal_mutable_devicedataversioninfo();
  public:

  // optional .playapi.proto.gsf.AndroidCheckinProto checkin = 4;
  bool has_checkin() const;
  private:
  bool _internal_has_checkin() const;
  public:
  void clear_checkin();
  const ::playapi::proto::gsf::AndroidCheckinProto& checkin() const;
  PROTOBUF_NODISCARD ::playapi::proto::gsf::AndroidCheckinProto* release_checkin();
  ::playapi::proto::gsf::AndroidCheckinProto* mutable_checkin();
  void set_allocated_checkin(::playapi::proto::gsf::AndroidCheckinProto* checkin);
  private:
  const ::playapi::proto::gsf::AndroidCheckinProto& _internal_checkin() const;
  ::playapi::proto::gsf::AndroidCheckinProto* _internal_mutable_checkin();
  public:
  void unsafe_arena_set_allocated_checkin(
      ::playapi::proto::gsf::AndroidCheckinProto* checkin);
  ::playapi::proto::gsf::AndroidCheckinProto* unsafe_arena_release_checkin();

  // optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 18;
  bool has_deviceconfiguration() const;
  private:
  bool _internal_has_deviceconfiguration() const;
  public:
  void clear_deviceconfiguration();
  const ::playapi::proto::gsf::DeviceConfigurationProto& deviceconfiguration() const;
  PROTOBUF_NODISCARD ::playapi::proto::gsf::DeviceConfigurationProto* release_deviceconfiguration();
  ::playapi::proto::gsf::DeviceConfigurationProto* mutable_deviceconfiguration();
  void set_allocated_deviceconfiguration(::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration);
  private:
  const ::playapi::proto::gsf::DeviceConfigurationProto& _internal_deviceconfiguration() const;
  ::playapi::proto::gsf::DeviceConfigurationProto* _internal_mutable_deviceconfiguration();
  public:
  void unsafe_arena_set_allocated_deviceconfiguration(
      ::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration);
  ::playapi::proto::gsf::DeviceConfigurationProto* unsafe_arena_release_deviceconfiguration();

  // optional int64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 loggingId = 7;
  bool has_loggingid() const;
  private:
  bool _internal_has_loggingid() const;
  public:
  void clear_loggingid();
  int64_t loggingid() const;
  void set_loggingid(int64_t value);
  private:
  int64_t _internal_loggingid() const;
  void _internal_set_loggingid(int64_t value);
  public:

  // optional fixed64 securityToken = 13;
  bool has_securitytoken() const;
  private:
  bool _internal_has_securitytoken() const;
  public:
  void clear_securitytoken();
  uint64_t securitytoken() const;
  void set_securitytoken(uint64_t value);
  private:
  uint64_t _internal_securitytoken() const;
  void _internal_set_securitytoken(uint64_t value);
  public:

  // optional int32 version = 14;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 fragment = 20;
  bool has_fragment() const;
  private:
  bool _internal_has_fragment() const;
  public:
  void clear_fragment();
  int32_t fragment() const;
  void set_fragment(int32_t value);
  private:
  int32_t _internal_fragment() const;
  void _internal_set_fragment(int32_t value);
  public:

  // optional int32 userSerialNumber = 22;
  bool has_userserialnumber() const;
  private:
  bool _internal_has_userserialnumber() const;
  public:
  void clear_userserialnumber();
  int32_t userserialnumber() const;
  void set_userserialnumber(int32_t value);
  private:
  int32_t _internal_userserialnumber() const;
  void _internal_set_userserialnumber(int32_t value);
  public:

  // optional bool fetchSystemUpdates = 29;
  bool has_fetchsystemupdates() const;
  private:
  bool _internal_has_fetchsystemupdates() const;
  public:
  void clear_fetchsystemupdates();
  bool fetchsystemupdates() const;
  void set_fetchsystemupdates(bool value);
  private:
  bool _internal_fetchsystemupdates() const;
  void _internal_set_fetchsystemupdates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidCheckinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> macaddr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accountcookie_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> otacert_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> macaddrtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desiredbuild_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketcheckin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnumber_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr esn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr droidguardresult_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicedataversioninfo_;
    ::playapi::proto::gsf::AndroidCheckinProto* checkin_;
    ::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration_;
    int64_t id_;
    int64_t loggingid_;
    uint64_t securitytoken_;
    int32_t version_;
    int32_t fragment_;
    int32_t userserialnumber_;
    bool fetchsystemupdates_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidCheckinResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidCheckinResponse) */ {
 public:
  inline AndroidCheckinResponse() : AndroidCheckinResponse(nullptr) {}
  ~AndroidCheckinResponse() override;
  explicit PROTOBUF_CONSTEXPR AndroidCheckinResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidCheckinResponse(const AndroidCheckinResponse& from);
  AndroidCheckinResponse(AndroidCheckinResponse&& from) noexcept
    : AndroidCheckinResponse() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinResponse& operator=(const AndroidCheckinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinResponse& operator=(AndroidCheckinResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidCheckinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidCheckinResponse* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinResponse*>(
               &_AndroidCheckinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidCheckinResponse& a, AndroidCheckinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidCheckinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidCheckinResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidCheckinResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidCheckinResponse& from) {
    AndroidCheckinResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidCheckinResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidCheckinResponse";
  }
  protected:
  explicit AndroidCheckinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentFieldNumber = 2,
    kSettingFieldNumber = 5,
    kDeleteSettingFieldNumber = 10,
    kDigestFieldNumber = 4,
    kDeviceDataVersionInfoFieldNumber = 12,
    kTimeMsecFieldNumber = 3,
    kAndroidIdFieldNumber = 7,
    kSecurityTokenFieldNumber = 8,
    kStatsOkFieldNumber = 1,
    kMarketOkFieldNumber = 6,
    kSettingsDiffFieldNumber = 9,
  };
  // repeated .playapi.proto.gsf.AndroidIntentProto intent = 2;
  int intent_size() const;
  private:
  int _internal_intent_size() const;
  public:
  void clear_intent();
  ::playapi::proto::gsf::AndroidIntentProto* mutable_intent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto >*
      mutable_intent();
  private:
  const ::playapi::proto::gsf::AndroidIntentProto& _internal_intent(int index) const;
  ::playapi::proto::gsf::AndroidIntentProto* _internal_add_intent();
  public:
  const ::playapi::proto::gsf::AndroidIntentProto& intent(int index) const;
  ::playapi::proto::gsf::AndroidIntentProto* add_intent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto >&
      intent() const;

  // repeated .playapi.proto.gsf.GservicesSetting setting = 5;
  int setting_size() const;
  private:
  int _internal_setting_size() const;
  public:
  void clear_setting();
  ::playapi::proto::gsf::GservicesSetting* mutable_setting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::GservicesSetting >*
      mutable_setting();
  private:
  const ::playapi::proto::gsf::GservicesSetting& _internal_setting(int index) const;
  ::playapi::proto::gsf::GservicesSetting* _internal_add_setting();
  public:
  const ::playapi::proto::gsf::GservicesSetting& setting(int index) const;
  ::playapi::proto::gsf::GservicesSetting* add_setting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::GservicesSetting >&
      setting() const;

  // repeated string deleteSetting = 10;
  int deletesetting_size() const;
  private:
  int _internal_deletesetting_size() const;
  public:
  void clear_deletesetting();
  const std::string& deletesetting(int index) const;
  std::string* mutable_deletesetting(int index);
  void set_deletesetting(int index, const std::string& value);
  void set_deletesetting(int index, std::string&& value);
  void set_deletesetting(int index, const char* value);
  void set_deletesetting(int index, const char* value, size_t size);
  std::string* add_deletesetting();
  void add_deletesetting(const std::string& value);
  void add_deletesetting(std::string&& value);
  void add_deletesetting(const char* value);
  void add_deletesetting(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deletesetting() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deletesetting();
  private:
  const std::string& _internal_deletesetting(int index) const;
  std::string* _internal_add_deletesetting();
  public:

  // optional string digest = 4;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string deviceDataVersionInfo = 12;
  bool has_devicedataversioninfo() const;
  private:
  bool _internal_has_devicedataversioninfo() const;
  public:
  void clear_devicedataversioninfo();
  const std::string& devicedataversioninfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicedataversioninfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicedataversioninfo();
  PROTOBUF_NODISCARD std::string* release_devicedataversioninfo();
  void set_allocated_devicedataversioninfo(std::string* devicedataversioninfo);
  private:
  const std::string& _internal_devicedataversioninfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicedataversioninfo(const std::string& value);
  std::string* _internal_mutable_devicedataversioninfo();
  public:

  // optional int64 timeMsec = 3;
  bool has_timemsec() const;
  private:
  bool _internal_has_timemsec() const;
  public:
  void clear_timemsec();
  int64_t timemsec() const;
  void set_timemsec(int64_t value);
  private:
  int64_t _internal_timemsec() const;
  void _internal_set_timemsec(int64_t value);
  public:

  // optional fixed64 androidId = 7;
  bool has_androidid() const;
  private:
  bool _internal_has_androidid() const;
  public:
  void clear_androidid();
  uint64_t androidid() const;
  void set_androidid(uint64_t value);
  private:
  uint64_t _internal_androidid() const;
  void _internal_set_androidid(uint64_t value);
  public:

  // optional fixed64 securityToken = 8;
  bool has_securitytoken() const;
  private:
  bool _internal_has_securitytoken() const;
  public:
  void clear_securitytoken();
  uint64_t securitytoken() const;
  void set_securitytoken(uint64_t value);
  private:
  uint64_t _internal_securitytoken() const;
  void _internal_set_securitytoken(uint64_t value);
  public:

  // optional bool statsOk = 1;
  bool has_statsok() const;
  private:
  bool _internal_has_statsok() const;
  public:
  void clear_statsok();
  bool statsok() const;
  void set_statsok(bool value);
  private:
  bool _internal_statsok() const;
  void _internal_set_statsok(bool value);
  public:

  // optional bool marketOk = 6;
  bool has_marketok() const;
  private:
  bool _internal_has_marketok() const;
  public:
  void clear_marketok();
  bool marketok() const;
  void set_marketok(bool value);
  private:
  bool _internal_marketok() const;
  void _internal_set_marketok(bool value);
  public:

  // optional bool settingsDiff = 9;
  bool has_settingsdiff() const;
  private:
  bool _internal_has_settingsdiff() const;
  public:
  void clear_settingsdiff();
  bool settingsdiff() const;
  void set_settingsdiff(bool value);
  private:
  bool _internal_settingsdiff() const;
  void _internal_set_settingsdiff(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidCheckinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto > intent_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::GservicesSetting > setting_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deletesetting_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicedataversioninfo_;
    int64_t timemsec_;
    uint64_t androidid_;
    uint64_t securitytoken_;
    bool statsok_;
    bool marketok_;
    bool settingsdiff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class GservicesSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.GservicesSetting) */ {
 public:
  inline GservicesSetting() : GservicesSetting(nullptr) {}
  ~GservicesSetting() override;
  explicit PROTOBUF_CONSTEXPR GservicesSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GservicesSetting(const GservicesSetting& from);
  GservicesSetting(GservicesSetting&& from) noexcept
    : GservicesSetting() {
    *this = ::std::move(from);
  }

  inline GservicesSetting& operator=(const GservicesSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline GservicesSetting& operator=(GservicesSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GservicesSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const GservicesSetting* internal_default_instance() {
    return reinterpret_cast<const GservicesSetting*>(
               &_GservicesSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GservicesSetting& a, GservicesSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(GservicesSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GservicesSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GservicesSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GservicesSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GservicesSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GservicesSetting& from) {
    GservicesSetting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GservicesSetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.GservicesSetting";
  }
  protected:
  explicit GservicesSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.GservicesSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfigurationProto_FeatureWithGLVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion) */ {
 public:
  inline DeviceConfigurationProto_FeatureWithGLVersion() : DeviceConfigurationProto_FeatureWithGLVersion(nullptr) {}
  ~DeviceConfigurationProto_FeatureWithGLVersion() override;
  explicit PROTOBUF_CONSTEXPR DeviceConfigurationProto_FeatureWithGLVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConfigurationProto_FeatureWithGLVersion(const DeviceConfigurationProto_FeatureWithGLVersion& from);
  DeviceConfigurationProto_FeatureWithGLVersion(DeviceConfigurationProto_FeatureWithGLVersion&& from) noexcept
    : DeviceConfigurationProto_FeatureWithGLVersion() {
    *this = ::std::move(from);
  }

  inline DeviceConfigurationProto_FeatureWithGLVersion& operator=(const DeviceConfigurationProto_FeatureWithGLVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfigurationProto_FeatureWithGLVersion& operator=(DeviceConfigurationProto_FeatureWithGLVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConfigurationProto_FeatureWithGLVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConfigurationProto_FeatureWithGLVersion* internal_default_instance() {
    return reinterpret_cast<const DeviceConfigurationProto_FeatureWithGLVersion*>(
               &_DeviceConfigurationProto_FeatureWithGLVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceConfigurationProto_FeatureWithGLVersion& a, DeviceConfigurationProto_FeatureWithGLVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfigurationProto_FeatureWithGLVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfigurationProto_FeatureWithGLVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceConfigurationProto_FeatureWithGLVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceConfigurationProto_FeatureWithGLVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConfigurationProto_FeatureWithGLVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceConfigurationProto_FeatureWithGLVersion& from) {
    DeviceConfigurationProto_FeatureWithGLVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfigurationProto_FeatureWithGLVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion";
  }
  protected:
  explicit DeviceConfigurationProto_FeatureWithGLVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGlEsVersionFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 glEsVersion = 2;
  bool has_glesversion() const;
  private:
  bool _internal_has_glesversion() const;
  public:
  void clear_glesversion();
  int32_t glesversion() const;
  void set_glesversion(int32_t value);
  private:
  int32_t _internal_glesversion() const;
  void _internal_set_glesversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t glesversion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfigurationProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.DeviceConfigurationProto) */ {
 public:
  inline DeviceConfigurationProto() : DeviceConfigurationProto(nullptr) {}
  ~DeviceConfigurationProto() override;
  explicit PROTOBUF_CONSTEXPR DeviceConfigurationProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConfigurationProto(const DeviceConfigurationProto& from);
  DeviceConfigurationProto(DeviceConfigurationProto&& from) noexcept
    : DeviceConfigurationProto() {
    *this = ::std::move(from);
  }

  inline DeviceConfigurationProto& operator=(const DeviceConfigurationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfigurationProto& operator=(DeviceConfigurationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConfigurationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConfigurationProto* internal_default_instance() {
    return reinterpret_cast<const DeviceConfigurationProto*>(
               &_DeviceConfigurationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceConfigurationProto& a, DeviceConfigurationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfigurationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfigurationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceConfigurationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceConfigurationProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConfigurationProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceConfigurationProto& from) {
    DeviceConfigurationProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfigurationProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.DeviceConfigurationProto";
  }
  protected:
  explicit DeviceConfigurationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceConfigurationProto_FeatureWithGLVersion FeatureWithGLVersion;

  // accessors -------------------------------------------------------

  enum : int {
    kSystemSharedLibraryFieldNumber = 9,
    kSystemAvailableFeatureFieldNumber = 10,
    kNativePlatformFieldNumber = 11,
    kSystemSupportedLocaleFieldNumber = 14,
    kGlExtensionFieldNumber = 15,
    kNewSystemAvailableFeatureFieldNumber = 26,
    kTouchScreenFieldNumber = 1,
    kKeyboardFieldNumber = 2,
    kNavigationFieldNumber = 3,
    kScreenLayoutFieldNumber = 4,
    kScreenDensityFieldNumber = 7,
    kGlEsVersionFieldNumber = 8,
    kScreenWidthFieldNumber = 12,
    kScreenHeightFieldNumber = 13,
    kHasHardKeyboardFieldNumber = 5,
    kHasFiveWayNavigationFieldNumber = 6,
    kLowRamDeviceFieldNumber = 19,
    kKeyguardDeviceSecureFieldNumber = 28,
    kMaxApkDownloadSizeMbFieldNumber = 17,
    kSmallestScreenWidthDpFieldNumber = 18,
    kMaxNumOfCpuCoresFieldNumber = 21,
    kTotalMemoryBytesFieldNumber = 20,
    kScreenLayout2FieldNumber = 27,
  };
  // repeated string systemSharedLibrary = 9;
  int systemsharedlibrary_size() const;
  private:
  int _internal_systemsharedlibrary_size() const;
  public:
  void clear_systemsharedlibrary();
  const std::string& systemsharedlibrary(int index) const;
  std::string* mutable_systemsharedlibrary(int index);
  void set_systemsharedlibrary(int index, const std::string& value);
  void set_systemsharedlibrary(int index, std::string&& value);
  void set_systemsharedlibrary(int index, const char* value);
  void set_systemsharedlibrary(int index, const char* value, size_t size);
  std::string* add_systemsharedlibrary();
  void add_systemsharedlibrary(const std::string& value);
  void add_systemsharedlibrary(std::string&& value);
  void add_systemsharedlibrary(const char* value);
  void add_systemsharedlibrary(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& systemsharedlibrary() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_systemsharedlibrary();
  private:
  const std::string& _internal_systemsharedlibrary(int index) const;
  std::string* _internal_add_systemsharedlibrary();
  public:

  // repeated string systemAvailableFeature = 10;
  int systemavailablefeature_size() const;
  private:
  int _internal_systemavailablefeature_size() const;
  public:
  void clear_systemavailablefeature();
  const std::string& systemavailablefeature(int index) const;
  std::string* mutable_systemavailablefeature(int index);
  void set_systemavailablefeature(int index, const std::string& value);
  void set_systemavailablefeature(int index, std::string&& value);
  void set_systemavailablefeature(int index, const char* value);
  void set_systemavailablefeature(int index, const char* value, size_t size);
  std::string* add_systemavailablefeature();
  void add_systemavailablefeature(const std::string& value);
  void add_systemavailablefeature(std::string&& value);
  void add_systemavailablefeature(const char* value);
  void add_systemavailablefeature(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& systemavailablefeature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_systemavailablefeature();
  private:
  const std::string& _internal_systemavailablefeature(int index) const;
  std::string* _internal_add_systemavailablefeature();
  public:

  // repeated string nativePlatform = 11;
  int nativeplatform_size() const;
  private:
  int _internal_nativeplatform_size() const;
  public:
  void clear_nativeplatform();
  const std::string& nativeplatform(int index) const;
  std::string* mutable_nativeplatform(int index);
  void set_nativeplatform(int index, const std::string& value);
  void set_nativeplatform(int index, std::string&& value);
  void set_nativeplatform(int index, const char* value);
  void set_nativeplatform(int index, const char* value, size_t size);
  std::string* add_nativeplatform();
  void add_nativeplatform(const std::string& value);
  void add_nativeplatform(std::string&& value);
  void add_nativeplatform(const char* value);
  void add_nativeplatform(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nativeplatform() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nativeplatform();
  private:
  const std::string& _internal_nativeplatform(int index) const;
  std::string* _internal_add_nativeplatform();
  public:

  // repeated string systemSupportedLocale = 14;
  int systemsupportedlocale_size() const;
  private:
  int _internal_systemsupportedlocale_size() const;
  public:
  void clear_systemsupportedlocale();
  const std::string& systemsupportedlocale(int index) const;
  std::string* mutable_systemsupportedlocale(int index);
  void set_systemsupportedlocale(int index, const std::string& value);
  void set_systemsupportedlocale(int index, std::string&& value);
  void set_systemsupportedlocale(int index, const char* value);
  void set_systemsupportedlocale(int index, const char* value, size_t size);
  std::string* add_systemsupportedlocale();
  void add_systemsupportedlocale(const std::string& value);
  void add_systemsupportedlocale(std::string&& value);
  void add_systemsupportedlocale(const char* value);
  void add_systemsupportedlocale(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& systemsupportedlocale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_systemsupportedlocale();
  private:
  const std::string& _internal_systemsupportedlocale(int index) const;
  std::string* _internal_add_systemsupportedlocale();
  public:

  // repeated string glExtension = 15;
  int glextension_size() const;
  private:
  int _internal_glextension_size() const;
  public:
  void clear_glextension();
  const std::string& glextension(int index) const;
  std::string* mutable_glextension(int index);
  void set_glextension(int index, const std::string& value);
  void set_glextension(int index, std::string&& value);
  void set_glextension(int index, const char* value);
  void set_glextension(int index, const char* value, size_t size);
  std::string* add_glextension();
  void add_glextension(const std::string& value);
  void add_glextension(std::string&& value);
  void add_glextension(const char* value);
  void add_glextension(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& glextension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_glextension();
  private:
  const std::string& _internal_glextension(int index) const;
  std::string* _internal_add_glextension();
  public:

  // repeated .playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion newSystemAvailableFeature = 26;
  int newsystemavailablefeature_size() const;
  private:
  int _internal_newsystemavailablefeature_size() const;
  public:
  void clear_newsystemavailablefeature();
  ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* mutable_newsystemavailablefeature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion >*
      mutable_newsystemavailablefeature();
  private:
  const ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion& _internal_newsystemavailablefeature(int index) const;
  ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* _internal_add_newsystemavailablefeature();
  public:
  const ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion& newsystemavailablefeature(int index) const;
  ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* add_newsystemavailablefeature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion >&
      newsystemavailablefeature() const;

  // optional int32 touchScreen = 1;
  bool has_touchscreen() const;
  private:
  bool _internal_has_touchscreen() const;
  public:
  void clear_touchscreen();
  int32_t touchscreen() const;
  void set_touchscreen(int32_t value);
  private:
  int32_t _internal_touchscreen() const;
  void _internal_set_touchscreen(int32_t value);
  public:

  // optional int32 keyboard = 2;
  bool has_keyboard() const;
  private:
  bool _internal_has_keyboard() const;
  public:
  void clear_keyboard();
  int32_t keyboard() const;
  void set_keyboard(int32_t value);
  private:
  int32_t _internal_keyboard() const;
  void _internal_set_keyboard(int32_t value);
  public:

  // optional int32 navigation = 3;
  bool has_navigation() const;
  private:
  bool _internal_has_navigation() const;
  public:
  void clear_navigation();
  int32_t navigation() const;
  void set_navigation(int32_t value);
  private:
  int32_t _internal_navigation() const;
  void _internal_set_navigation(int32_t value);
  public:

  // optional int32 screenLayout = 4;
  bool has_screenlayout() const;
  private:
  bool _internal_has_screenlayout() const;
  public:
  void clear_screenlayout();
  int32_t screenlayout() const;
  void set_screenlayout(int32_t value);
  private:
  int32_t _internal_screenlayout() const;
  void _internal_set_screenlayout(int32_t value);
  public:

  // optional int32 screenDensity = 7;
  bool has_screendensity() const;
  private:
  bool _internal_has_screendensity() const;
  public:
  void clear_screendensity();
  int32_t screendensity() const;
  void set_screendensity(int32_t value);
  private:
  int32_t _internal_screendensity() const;
  void _internal_set_screendensity(int32_t value);
  public:

  // optional int32 glEsVersion = 8;
  bool has_glesversion() const;
  private:
  bool _internal_has_glesversion() const;
  public:
  void clear_glesversion();
  int32_t glesversion() const;
  void set_glesversion(int32_t value);
  private:
  int32_t _internal_glesversion() const;
  void _internal_set_glesversion(int32_t value);
  public:

  // optional int32 screenWidth = 12;
  bool has_screenwidth() const;
  private:
  bool _internal_has_screenwidth() const;
  public:
  void clear_screenwidth();
  int32_t screenwidth() const;
  void set_screenwidth(int32_t value);
  private:
  int32_t _internal_screenwidth() const;
  void _internal_set_screenwidth(int32_t value);
  public:

  // optional int32 screenHeight = 13;
  bool has_screenheight() const;
  private:
  bool _internal_has_screenheight() const;
  public:
  void clear_screenheight();
  int32_t screenheight() const;
  void set_screenheight(int32_t value);
  private:
  int32_t _internal_screenheight() const;
  void _internal_set_screenheight(int32_t value);
  public:

  // optional bool hasHardKeyboard = 5;
  bool has_hashardkeyboard() const;
  private:
  bool _internal_has_hashardkeyboard() const;
  public:
  void clear_hashardkeyboard();
  bool hashardkeyboard() const;
  void set_hashardkeyboard(bool value);
  private:
  bool _internal_hashardkeyboard() const;
  void _internal_set_hashardkeyboard(bool value);
  public:

  // optional bool hasFiveWayNavigation = 6;
  bool has_hasfivewaynavigation() const;
  private:
  bool _internal_has_hasfivewaynavigation() const;
  public:
  void clear_hasfivewaynavigation();
  bool hasfivewaynavigation() const;
  void set_hasfivewaynavigation(bool value);
  private:
  bool _internal_hasfivewaynavigation() const;
  void _internal_set_hasfivewaynavigation(bool value);
  public:

  // optional bool lowRamDevice = 19;
  bool has_lowramdevice() const;
  private:
  bool _internal_has_lowramdevice() const;
  public:
  void clear_lowramdevice();
  bool lowramdevice() const;
  void set_lowramdevice(bool value);
  private:
  bool _internal_lowramdevice() const;
  void _internal_set_lowramdevice(bool value);
  public:

  // optional bool keyguardDeviceSecure = 28;
  bool has_keyguarddevicesecure() const;
  private:
  bool _internal_has_keyguarddevicesecure() const;
  public:
  void clear_keyguarddevicesecure();
  bool keyguarddevicesecure() const;
  void set_keyguarddevicesecure(bool value);
  private:
  bool _internal_keyguarddevicesecure() const;
  void _internal_set_keyguarddevicesecure(bool value);
  public:

  // optional int32 maxApkDownloadSizeMb = 17;
  bool has_maxapkdownloadsizemb() const;
  private:
  bool _internal_has_maxapkdownloadsizemb() const;
  public:
  void clear_maxapkdownloadsizemb();
  int32_t maxapkdownloadsizemb() const;
  void set_maxapkdownloadsizemb(int32_t value);
  private:
  int32_t _internal_maxapkdownloadsizemb() const;
  void _internal_set_maxapkdownloadsizemb(int32_t value);
  public:

  // optional int32 smallestScreenWidthDp = 18;
  bool has_smallestscreenwidthdp() const;
  private:
  bool _internal_has_smallestscreenwidthdp() const;
  public:
  void clear_smallestscreenwidthdp();
  int32_t smallestscreenwidthdp() const;
  void set_smallestscreenwidthdp(int32_t value);
  private:
  int32_t _internal_smallestscreenwidthdp() const;
  void _internal_set_smallestscreenwidthdp(int32_t value);
  public:

  // optional int32 maxNumOfCpuCores = 21;
  bool has_maxnumofcpucores() const;
  private:
  bool _internal_has_maxnumofcpucores() const;
  public:
  void clear_maxnumofcpucores();
  int32_t maxnumofcpucores() const;
  void set_maxnumofcpucores(int32_t value);
  private:
  int32_t _internal_maxnumofcpucores() const;
  void _internal_set_maxnumofcpucores(int32_t value);
  public:

  // optional int64 totalMemoryBytes = 20;
  bool has_totalmemorybytes() const;
  private:
  bool _internal_has_totalmemorybytes() const;
  public:
  void clear_totalmemorybytes();
  int64_t totalmemorybytes() const;
  void set_totalmemorybytes(int64_t value);
  private:
  int64_t _internal_totalmemorybytes() const;
  void _internal_set_totalmemorybytes(int64_t value);
  public:

  // optional int32 screenLayout2 = 27;
  bool has_screenlayout2() const;
  private:
  bool _internal_has_screenlayout2() const;
  public:
  void clear_screenlayout2();
  int32_t screenlayout2() const;
  void set_screenlayout2(int32_t value);
  private:
  int32_t _internal_screenlayout2() const;
  void _internal_set_screenlayout2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.DeviceConfigurationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> systemsharedlibrary_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> systemavailablefeature_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nativeplatform_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> systemsupportedlocale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> glextension_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion > newsystemavailablefeature_;
    int32_t touchscreen_;
    int32_t keyboard_;
    int32_t navigation_;
    int32_t screenlayout_;
    int32_t screendensity_;
    int32_t glesversion_;
    int32_t screenwidth_;
    int32_t screenheight_;
    bool hashardkeyboard_;
    bool hasfivewaynavigation_;
    bool lowramdevice_;
    bool keyguarddevicesecure_;
    int32_t maxapkdownloadsizemb_;
    int32_t smallestscreenwidthdp_;
    int32_t maxnumofcpucores_;
    int64_t totalmemorybytes_;
    int32_t screenlayout2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidBuildProto_PackageVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidBuildProto.PackageVersion) */ {
 public:
  inline AndroidBuildProto_PackageVersion() : AndroidBuildProto_PackageVersion(nullptr) {}
  ~AndroidBuildProto_PackageVersion() override;
  explicit PROTOBUF_CONSTEXPR AndroidBuildProto_PackageVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidBuildProto_PackageVersion(const AndroidBuildProto_PackageVersion& from);
  AndroidBuildProto_PackageVersion(AndroidBuildProto_PackageVersion&& from) noexcept
    : AndroidBuildProto_PackageVersion() {
    *this = ::std::move(from);
  }

  inline AndroidBuildProto_PackageVersion& operator=(const AndroidBuildProto_PackageVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidBuildProto_PackageVersion& operator=(AndroidBuildProto_PackageVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidBuildProto_PackageVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidBuildProto_PackageVersion* internal_default_instance() {
    return reinterpret_cast<const AndroidBuildProto_PackageVersion*>(
               &_AndroidBuildProto_PackageVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AndroidBuildProto_PackageVersion& a, AndroidBuildProto_PackageVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidBuildProto_PackageVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidBuildProto_PackageVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidBuildProto_PackageVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidBuildProto_PackageVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidBuildProto_PackageVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidBuildProto_PackageVersion& from) {
    AndroidBuildProto_PackageVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidBuildProto_PackageVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidBuildProto.PackageVersion";
  }
  protected:
  explicit AndroidBuildProto_PackageVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidBuildProto.PackageVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidBuildProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidBuildProto) */ {
 public:
  inline AndroidBuildProto() : AndroidBuildProto(nullptr) {}
  ~AndroidBuildProto() override;
  explicit PROTOBUF_CONSTEXPR AndroidBuildProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidBuildProto(const AndroidBuildProto& from);
  AndroidBuildProto(AndroidBuildProto&& from) noexcept
    : AndroidBuildProto() {
    *this = ::std::move(from);
  }

  inline AndroidBuildProto& operator=(const AndroidBuildProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidBuildProto& operator=(AndroidBuildProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidBuildProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidBuildProto* internal_default_instance() {
    return reinterpret_cast<const AndroidBuildProto*>(
               &_AndroidBuildProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AndroidBuildProto& a, AndroidBuildProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidBuildProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidBuildProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidBuildProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidBuildProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidBuildProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidBuildProto& from) {
    AndroidBuildProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidBuildProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidBuildProto";
  }
  protected:
  explicit AndroidBuildProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AndroidBuildProto_PackageVersion PackageVersion;

  // accessors -------------------------------------------------------

  enum : int {
    kGooglePackageFieldNumber = 15,
    kIdFieldNumber = 1,
    kProductFieldNumber = 2,
    kCarrierFieldNumber = 3,
    kRadioFieldNumber = 4,
    kBootloaderFieldNumber = 5,
    kClientFieldNumber = 6,
    kDeviceFieldNumber = 9,
    kModelFieldNumber = 11,
    kManufacturerFieldNumber = 12,
    kBuildProductFieldNumber = 13,
    kSecurityPatchFieldNumber = 19,
    kTimestampFieldNumber = 7,
    kGoogleServicesFieldNumber = 8,
    kSdkVersionFieldNumber = 10,
    kOtaInstalledFieldNumber = 14,
  };
  // repeated .playapi.proto.gsf.AndroidBuildProto.PackageVersion googlePackage = 15;
  int googlepackage_size() const;
  private:
  int _internal_googlepackage_size() const;
  public:
  void clear_googlepackage();
  ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* mutable_googlepackage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion >*
      mutable_googlepackage();
  private:
  const ::playapi::proto::gsf::AndroidBuildProto_PackageVersion& _internal_googlepackage(int index) const;
  ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* _internal_add_googlepackage();
  public:
  const ::playapi::proto::gsf::AndroidBuildProto_PackageVersion& googlepackage(int index) const;
  ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* add_googlepackage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion >&
      googlepackage() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // optional string carrier = 3;
  bool has_carrier() const;
  private:
  bool _internal_has_carrier() const;
  public:
  void clear_carrier();
  const std::string& carrier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_carrier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_carrier();
  PROTOBUF_NODISCARD std::string* release_carrier();
  void set_allocated_carrier(std::string* carrier);
  private:
  const std::string& _internal_carrier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_carrier(const std::string& value);
  std::string* _internal_mutable_carrier();
  public:

  // optional string radio = 4;
  bool has_radio() const;
  private:
  bool _internal_has_radio() const;
  public:
  void clear_radio();
  const std::string& radio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_radio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_radio();
  PROTOBUF_NODISCARD std::string* release_radio();
  void set_allocated_radio(std::string* radio);
  private:
  const std::string& _internal_radio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_radio(const std::string& value);
  std::string* _internal_mutable_radio();
  public:

  // optional string bootloader = 5;
  bool has_bootloader() const;
  private:
  bool _internal_has_bootloader() const;
  public:
  void clear_bootloader();
  const std::string& bootloader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bootloader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bootloader();
  PROTOBUF_NODISCARD std::string* release_bootloader();
  void set_allocated_bootloader(std::string* bootloader);
  private:
  const std::string& _internal_bootloader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bootloader(const std::string& value);
  std::string* _internal_mutable_bootloader();
  public:

  // optional string client = 6;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const std::string& client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* client);
  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(const std::string& value);
  std::string* _internal_mutable_client();
  public:

  // optional string device = 9;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const std::string& device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // optional string model = 11;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string manufacturer = 12;
  bool has_manufacturer() const;
  private:
  bool _internal_has_manufacturer() const;
  public:
  void clear_manufacturer();
  const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // optional string buildProduct = 13;
  bool has_buildproduct() const;
  private:
  bool _internal_has_buildproduct() const;
  public:
  void clear_buildproduct();
  const std::string& buildproduct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buildproduct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buildproduct();
  PROTOBUF_NODISCARD std::string* release_buildproduct();
  void set_allocated_buildproduct(std::string* buildproduct);
  private:
  const std::string& _internal_buildproduct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buildproduct(const std::string& value);
  std::string* _internal_mutable_buildproduct();
  public:

  // optional string securityPatch = 19;
  bool has_securitypatch() const;
  private:
  bool _internal_has_securitypatch() const;
  public:
  void clear_securitypatch();
  const std::string& securitypatch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitypatch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitypatch();
  PROTOBUF_NODISCARD std::string* release_securitypatch();
  void set_allocated_securitypatch(std::string* securitypatch);
  private:
  const std::string& _internal_securitypatch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitypatch(const std::string& value);
  std::string* _internal_mutable_securitypatch();
  public:

  // optional int64 timestamp = 7;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // optional int32 googleServices = 8;
  bool has_googleservices() const;
  private:
  bool _internal_has_googleservices() const;
  public:
  void clear_googleservices();
  int32_t googleservices() const;
  void set_googleservices(int32_t value);
  private:
  int32_t _internal_googleservices() const;
  void _internal_set_googleservices(int32_t value);
  public:

  // optional int32 sdkVersion = 10;
  bool has_sdkversion() const;
  private:
  bool _internal_has_sdkversion() const;
  public:
  void clear_sdkversion();
  int32_t sdkversion() const;
  void set_sdkversion(int32_t value);
  private:
  int32_t _internal_sdkversion() const;
  void _internal_set_sdkversion(int32_t value);
  public:

  // optional bool otaInstalled = 14;
  bool has_otainstalled() const;
  private:
  bool _internal_has_otainstalled() const;
  public:
  void clear_otainstalled();
  bool otainstalled() const;
  void set_otainstalled(bool value);
  private:
  bool _internal_otainstalled() const;
  void _internal_set_otainstalled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidBuildProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion > googlepackage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr carrier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radio_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootloader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildproduct_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitypatch_;
    int64_t timestamp_;
    int32_t googleservices_;
    int32_t sdkversion_;
    bool otainstalled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidCheckinReasonProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidCheckinReasonProto) */ {
 public:
  inline AndroidCheckinReasonProto() : AndroidCheckinReasonProto(nullptr) {}
  ~AndroidCheckinReasonProto() override;
  explicit PROTOBUF_CONSTEXPR AndroidCheckinReasonProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidCheckinReasonProto(const AndroidCheckinReasonProto& from);
  AndroidCheckinReasonProto(AndroidCheckinReasonProto&& from) noexcept
    : AndroidCheckinReasonProto() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinReasonProto& operator=(const AndroidCheckinReasonProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinReasonProto& operator=(AndroidCheckinReasonProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidCheckinReasonProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidCheckinReasonProto* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinReasonProto*>(
               &_AndroidCheckinReasonProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AndroidCheckinReasonProto& a, AndroidCheckinReasonProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinReasonProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinReasonProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidCheckinReasonProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidCheckinReasonProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidCheckinReasonProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidCheckinReasonProto& from) {
    AndroidCheckinReasonProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidCheckinReasonProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidCheckinReasonProto";
  }
  protected:
  explicit AndroidCheckinReasonProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePackageFieldNumber = 3,
    kSourceClassFieldNumber = 4,
    kReasonTypeFieldNumber = 1,
    kAttemptCountFieldNumber = 2,
    kSourceForceFieldNumber = 5,
  };
  // optional string sourcePackage = 3;
  bool has_sourcepackage() const;
  private:
  bool _internal_has_sourcepackage() const;
  public:
  void clear_sourcepackage();
  const std::string& sourcepackage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourcepackage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourcepackage();
  PROTOBUF_NODISCARD std::string* release_sourcepackage();
  void set_allocated_sourcepackage(std::string* sourcepackage);
  private:
  const std::string& _internal_sourcepackage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourcepackage(const std::string& value);
  std::string* _internal_mutable_sourcepackage();
  public:

  // optional string sourceClass = 4;
  bool has_sourceclass() const;
  private:
  bool _internal_has_sourceclass() const;
  public:
  void clear_sourceclass();
  const std::string& sourceclass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourceclass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourceclass();
  PROTOBUF_NODISCARD std::string* release_sourceclass();
  void set_allocated_sourceclass(std::string* sourceclass);
  private:
  const std::string& _internal_sourceclass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceclass(const std::string& value);
  std::string* _internal_mutable_sourceclass();
  public:

  // optional int32 reasonType = 1;
  bool has_reasontype() const;
  private:
  bool _internal_has_reasontype() const;
  public:
  void clear_reasontype();
  int32_t reasontype() const;
  void set_reasontype(int32_t value);
  private:
  int32_t _internal_reasontype() const;
  void _internal_set_reasontype(int32_t value);
  public:

  // optional int32 attemptCount = 2;
  bool has_attemptcount() const;
  private:
  bool _internal_has_attemptcount() const;
  public:
  void clear_attemptcount();
  int32_t attemptcount() const;
  void set_attemptcount(int32_t value);
  private:
  int32_t _internal_attemptcount() const;
  void _internal_set_attemptcount(int32_t value);
  public:

  // optional bool sourceForce = 5;
  bool has_sourceforce() const;
  private:
  bool _internal_has_sourceforce() const;
  public:
  void clear_sourceforce();
  bool sourceforce() const;
  void set_sourceforce(bool value);
  private:
  bool _internal_sourceforce() const;
  void _internal_set_sourceforce(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidCheckinReasonProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcepackage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceclass_;
    int32_t reasontype_;
    int32_t attemptcount_;
    bool sourceforce_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidCheckinProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidCheckinProto) */ {
 public:
  inline AndroidCheckinProto() : AndroidCheckinProto(nullptr) {}
  ~AndroidCheckinProto() override;
  explicit PROTOBUF_CONSTEXPR AndroidCheckinProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidCheckinProto(const AndroidCheckinProto& from);
  AndroidCheckinProto(AndroidCheckinProto&& from) noexcept
    : AndroidCheckinProto() {
    *this = ::std::move(from);
  }

  inline AndroidCheckinProto& operator=(const AndroidCheckinProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidCheckinProto& operator=(AndroidCheckinProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidCheckinProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidCheckinProto* internal_default_instance() {
    return reinterpret_cast<const AndroidCheckinProto*>(
               &_AndroidCheckinProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AndroidCheckinProto& a, AndroidCheckinProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidCheckinProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidCheckinProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidCheckinProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidCheckinProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidCheckinProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidCheckinProto& from) {
    AndroidCheckinProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidCheckinProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidCheckinProto";
  }
  protected:
  explicit AndroidCheckinProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 3,
    kStatFieldNumber = 4,
    kRequestedGroupFieldNumber = 5,
    kCellOperatorFieldNumber = 6,
    kSimOperatorFieldNumber = 7,
    kRoamingFieldNumber = 8,
    kBuildFieldNumber = 1,
    kReasonFieldNumber = 15,
    kLastCheckinMsecFieldNumber = 2,
    kUserNumberFieldNumber = 9,
    kDeviceTypeFieldNumber = 14,
    kVoiceCapableFieldNumber = 18,
  };
  // repeated .playapi.proto.gsf.AndroidEventProto event = 3;
  int event_size() const;
  private:
  int _internal_event_size() const;
  public:
  void clear_event();
  ::playapi::proto::gsf::AndroidEventProto* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidEventProto >*
      mutable_event();
  private:
  const ::playapi::proto::gsf::AndroidEventProto& _internal_event(int index) const;
  ::playapi::proto::gsf::AndroidEventProto* _internal_add_event();
  public:
  const ::playapi::proto::gsf::AndroidEventProto& event(int index) const;
  ::playapi::proto::gsf::AndroidEventProto* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidEventProto >&
      event() const;

  // repeated .playapi.proto.gsf.AndroidStatisticProto stat = 4;
  int stat_size() const;
  private:
  int _internal_stat_size() const;
  public:
  void clear_stat();
  ::playapi::proto::gsf::AndroidStatisticProto* mutable_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidStatisticProto >*
      mutable_stat();
  private:
  const ::playapi::proto::gsf::AndroidStatisticProto& _internal_stat(int index) const;
  ::playapi::proto::gsf::AndroidStatisticProto* _internal_add_stat();
  public:
  const ::playapi::proto::gsf::AndroidStatisticProto& stat(int index) const;
  ::playapi::proto::gsf::AndroidStatisticProto* add_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidStatisticProto >&
      stat() const;

  // repeated string requestedGroup = 5;
  int requestedgroup_size() const;
  private:
  int _internal_requestedgroup_size() const;
  public:
  void clear_requestedgroup();
  const std::string& requestedgroup(int index) const;
  std::string* mutable_requestedgroup(int index);
  void set_requestedgroup(int index, const std::string& value);
  void set_requestedgroup(int index, std::string&& value);
  void set_requestedgroup(int index, const char* value);
  void set_requestedgroup(int index, const char* value, size_t size);
  std::string* add_requestedgroup();
  void add_requestedgroup(const std::string& value);
  void add_requestedgroup(std::string&& value);
  void add_requestedgroup(const char* value);
  void add_requestedgroup(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requestedgroup() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requestedgroup();
  private:
  const std::string& _internal_requestedgroup(int index) const;
  std::string* _internal_add_requestedgroup();
  public:

  // optional string cellOperator = 6;
  bool has_celloperator() const;
  private:
  bool _internal_has_celloperator() const;
  public:
  void clear_celloperator();
  const std::string& celloperator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_celloperator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_celloperator();
  PROTOBUF_NODISCARD std::string* release_celloperator();
  void set_allocated_celloperator(std::string* celloperator);
  private:
  const std::string& _internal_celloperator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_celloperator(const std::string& value);
  std::string* _internal_mutable_celloperator();
  public:

  // optional string simOperator = 7;
  bool has_simoperator() const;
  private:
  bool _internal_has_simoperator() const;
  public:
  void clear_simoperator();
  const std::string& simoperator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_simoperator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_simoperator();
  PROTOBUF_NODISCARD std::string* release_simoperator();
  void set_allocated_simoperator(std::string* simoperator);
  private:
  const std::string& _internal_simoperator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_simoperator(const std::string& value);
  std::string* _internal_mutable_simoperator();
  public:

  // optional string roaming = 8;
  bool has_roaming() const;
  private:
  bool _internal_has_roaming() const;
  public:
  void clear_roaming();
  const std::string& roaming() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roaming(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roaming();
  PROTOBUF_NODISCARD std::string* release_roaming();
  void set_allocated_roaming(std::string* roaming);
  private:
  const std::string& _internal_roaming() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roaming(const std::string& value);
  std::string* _internal_mutable_roaming();
  public:

  // optional .playapi.proto.gsf.AndroidBuildProto build = 1;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::playapi::proto::gsf::AndroidBuildProto& build() const;
  PROTOBUF_NODISCARD ::playapi::proto::gsf::AndroidBuildProto* release_build();
  ::playapi::proto::gsf::AndroidBuildProto* mutable_build();
  void set_allocated_build(::playapi::proto::gsf::AndroidBuildProto* build);
  private:
  const ::playapi::proto::gsf::AndroidBuildProto& _internal_build() const;
  ::playapi::proto::gsf::AndroidBuildProto* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::playapi::proto::gsf::AndroidBuildProto* build);
  ::playapi::proto::gsf::AndroidBuildProto* unsafe_arena_release_build();

  // optional .playapi.proto.gsf.AndroidCheckinReasonProto reason = 15;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const ::playapi::proto::gsf::AndroidCheckinReasonProto& reason() const;
  PROTOBUF_NODISCARD ::playapi::proto::gsf::AndroidCheckinReasonProto* release_reason();
  ::playapi::proto::gsf::AndroidCheckinReasonProto* mutable_reason();
  void set_allocated_reason(::playapi::proto::gsf::AndroidCheckinReasonProto* reason);
  private:
  const ::playapi::proto::gsf::AndroidCheckinReasonProto& _internal_reason() const;
  ::playapi::proto::gsf::AndroidCheckinReasonProto* _internal_mutable_reason();
  public:
  void unsafe_arena_set_allocated_reason(
      ::playapi::proto::gsf::AndroidCheckinReasonProto* reason);
  ::playapi::proto::gsf::AndroidCheckinReasonProto* unsafe_arena_release_reason();

  // optional int64 lastCheckinMsec = 2;
  bool has_lastcheckinmsec() const;
  private:
  bool _internal_has_lastcheckinmsec() const;
  public:
  void clear_lastcheckinmsec();
  int64_t lastcheckinmsec() const;
  void set_lastcheckinmsec(int64_t value);
  private:
  int64_t _internal_lastcheckinmsec() const;
  void _internal_set_lastcheckinmsec(int64_t value);
  public:

  // optional int32 userNumber = 9;
  bool has_usernumber() const;
  private:
  bool _internal_has_usernumber() const;
  public:
  void clear_usernumber();
  int32_t usernumber() const;
  void set_usernumber(int32_t value);
  private:
  int32_t _internal_usernumber() const;
  void _internal_set_usernumber(int32_t value);
  public:

  // optional int32 deviceType = 14;
  bool has_devicetype() const;
  private:
  bool _internal_has_devicetype() const;
  public:
  void clear_devicetype();
  int32_t devicetype() const;
  void set_devicetype(int32_t value);
  private:
  int32_t _internal_devicetype() const;
  void _internal_set_devicetype(int32_t value);
  public:

  // optional bool voiceCapable = 18;
  bool has_voicecapable() const;
  private:
  bool _internal_has_voicecapable() const;
  public:
  void clear_voicecapable();
  bool voicecapable() const;
  void set_voicecapable(bool value);
  private:
  bool _internal_voicecapable() const;
  void _internal_set_voicecapable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidCheckinProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidEventProto > event_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidStatisticProto > stat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requestedgroup_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr celloperator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simoperator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roaming_;
    ::playapi::proto::gsf::AndroidBuildProto* build_;
    ::playapi::proto::gsf::AndroidCheckinReasonProto* reason_;
    int64_t lastcheckinmsec_;
    int32_t usernumber_;
    int32_t devicetype_;
    bool voicecapable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidEventProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidEventProto) */ {
 public:
  inline AndroidEventProto() : AndroidEventProto(nullptr) {}
  ~AndroidEventProto() override;
  explicit PROTOBUF_CONSTEXPR AndroidEventProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidEventProto(const AndroidEventProto& from);
  AndroidEventProto(AndroidEventProto&& from) noexcept
    : AndroidEventProto() {
    *this = ::std::move(from);
  }

  inline AndroidEventProto& operator=(const AndroidEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidEventProto& operator=(AndroidEventProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidEventProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidEventProto* internal_default_instance() {
    return reinterpret_cast<const AndroidEventProto*>(
               &_AndroidEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AndroidEventProto& a, AndroidEventProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidEventProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidEventProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidEventProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidEventProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidEventProto& from) {
    AndroidEventProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidEventProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidEventProto";
  }
  protected:
  explicit AndroidEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kValueFieldNumber = 2,
    kTimeMsecFieldNumber = 3,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int64 timeMsec = 3;
  bool has_timemsec() const;
  private:
  bool _internal_has_timemsec() const;
  public:
  void clear_timemsec();
  int64_t timemsec() const;
  void set_timemsec(int64_t value);
  private:
  int64_t _internal_timemsec() const;
  void _internal_set_timemsec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidEventProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int64_t timemsec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidIntentProto_Extra final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidIntentProto.Extra) */ {
 public:
  inline AndroidIntentProto_Extra() : AndroidIntentProto_Extra(nullptr) {}
  ~AndroidIntentProto_Extra() override;
  explicit PROTOBUF_CONSTEXPR AndroidIntentProto_Extra(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidIntentProto_Extra(const AndroidIntentProto_Extra& from);
  AndroidIntentProto_Extra(AndroidIntentProto_Extra&& from) noexcept
    : AndroidIntentProto_Extra() {
    *this = ::std::move(from);
  }

  inline AndroidIntentProto_Extra& operator=(const AndroidIntentProto_Extra& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidIntentProto_Extra& operator=(AndroidIntentProto_Extra&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidIntentProto_Extra& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidIntentProto_Extra* internal_default_instance() {
    return reinterpret_cast<const AndroidIntentProto_Extra*>(
               &_AndroidIntentProto_Extra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AndroidIntentProto_Extra& a, AndroidIntentProto_Extra& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidIntentProto_Extra* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidIntentProto_Extra* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidIntentProto_Extra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidIntentProto_Extra>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidIntentProto_Extra& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidIntentProto_Extra& from) {
    AndroidIntentProto_Extra::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidIntentProto_Extra* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidIntentProto.Extra";
  }
  protected:
  explicit AndroidIntentProto_Extra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kValueFieldNumber = 7,
  };
  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 7;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidIntentProto.Extra)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidIntentProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidIntentProto) */ {
 public:
  inline AndroidIntentProto() : AndroidIntentProto(nullptr) {}
  ~AndroidIntentProto() override;
  explicit PROTOBUF_CONSTEXPR AndroidIntentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidIntentProto(const AndroidIntentProto& from);
  AndroidIntentProto(AndroidIntentProto&& from) noexcept
    : AndroidIntentProto() {
    *this = ::std::move(from);
  }

  inline AndroidIntentProto& operator=(const AndroidIntentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidIntentProto& operator=(AndroidIntentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidIntentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidIntentProto* internal_default_instance() {
    return reinterpret_cast<const AndroidIntentProto*>(
               &_AndroidIntentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AndroidIntentProto& a, AndroidIntentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidIntentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidIntentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidIntentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidIntentProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidIntentProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidIntentProto& from) {
    AndroidIntentProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidIntentProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidIntentProto";
  }
  protected:
  explicit AndroidIntentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AndroidIntentProto_Extra Extra;

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 5,
    kActionFieldNumber = 1,
    kDataUriFieldNumber = 2,
    kMimeTypeFieldNumber = 3,
    kJavaClassFieldNumber = 4,
  };
  // repeated group Extra = 5 { ... };
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  ::playapi::proto::gsf::AndroidIntentProto_Extra* mutable_extra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto_Extra >*
      mutable_extra();
  private:
  const ::playapi::proto::gsf::AndroidIntentProto_Extra& _internal_extra(int index) const;
  ::playapi::proto::gsf::AndroidIntentProto_Extra* _internal_add_extra();
  public:
  const ::playapi::proto::gsf::AndroidIntentProto_Extra& extra(int index) const;
  ::playapi::proto::gsf::AndroidIntentProto_Extra* add_extra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto_Extra >&
      extra() const;

  // optional string action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional string dataUri = 2;
  bool has_datauri() const;
  private:
  bool _internal_has_datauri() const;
  public:
  void clear_datauri();
  const std::string& datauri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datauri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datauri();
  PROTOBUF_NODISCARD std::string* release_datauri();
  void set_allocated_datauri(std::string* datauri);
  private:
  const std::string& _internal_datauri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datauri(const std::string& value);
  std::string* _internal_mutable_datauri();
  public:

  // optional string mimeType = 3;
  bool has_mimetype() const;
  private:
  bool _internal_has_mimetype() const;
  public:
  void clear_mimetype();
  const std::string& mimetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mimetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mimetype();
  PROTOBUF_NODISCARD std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);
  private:
  const std::string& _internal_mimetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mimetype(const std::string& value);
  std::string* _internal_mutable_mimetype();
  public:

  // optional string javaClass = 4;
  bool has_javaclass() const;
  private:
  bool _internal_has_javaclass() const;
  public:
  void clear_javaclass();
  const std::string& javaclass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_javaclass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_javaclass();
  PROTOBUF_NODISCARD std::string* release_javaclass();
  void set_allocated_javaclass(std::string* javaclass);
  private:
  const std::string& _internal_javaclass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_javaclass(const std::string& value);
  std::string* _internal_mutable_javaclass();
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidIntentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto_Extra > extra_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datauri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr javaclass_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// -------------------------------------------------------------------

class AndroidStatisticProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.gsf.AndroidStatisticProto) */ {
 public:
  inline AndroidStatisticProto() : AndroidStatisticProto(nullptr) {}
  ~AndroidStatisticProto() override;
  explicit PROTOBUF_CONSTEXPR AndroidStatisticProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidStatisticProto(const AndroidStatisticProto& from);
  AndroidStatisticProto(AndroidStatisticProto&& from) noexcept
    : AndroidStatisticProto() {
    *this = ::std::move(from);
  }

  inline AndroidStatisticProto& operator=(const AndroidStatisticProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidStatisticProto& operator=(AndroidStatisticProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidStatisticProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidStatisticProto* internal_default_instance() {
    return reinterpret_cast<const AndroidStatisticProto*>(
               &_AndroidStatisticProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AndroidStatisticProto& a, AndroidStatisticProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidStatisticProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidStatisticProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidStatisticProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidStatisticProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidStatisticProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidStatisticProto& from) {
    AndroidStatisticProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidStatisticProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.gsf.AndroidStatisticProto";
  }
  protected:
  explicit AndroidStatisticProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kCountFieldNumber = 2,
    kSumFieldNumber = 3,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional float sum = 3;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  float sum() const;
  void set_sum(float value);
  private:
  float _internal_sum() const;
  void _internal_set_sum(float value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.gsf.AndroidStatisticProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    int32_t count_;
    float sum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gsf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AndroidCheckinRequest

// optional string imei = 1;
inline bool AndroidCheckinRequest::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_imei() const {
  return _internal_has_imei();
}
inline void AndroidCheckinRequest::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinRequest::imei() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.imei)
}
inline std::string* AndroidCheckinRequest::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.imei)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void AndroidCheckinRequest::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_imei() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.imei)
}

// optional int64 id = 2;
inline bool AndroidCheckinRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_id() const {
  return _internal_has_id();
}
inline void AndroidCheckinRequest::clear_id() {
  _impl_.id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int64_t AndroidCheckinRequest::_internal_id() const {
  return _impl_.id_;
}
inline int64_t AndroidCheckinRequest::id() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.id)
  return _internal_id();
}
inline void AndroidCheckinRequest::_internal_set_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.id_ = value;
}
inline void AndroidCheckinRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.id)
}

// optional string digest = 3;
inline bool AndroidCheckinRequest::_internal_has_digest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_digest() const {
  return _internal_has_digest();
}
inline void AndroidCheckinRequest::clear_digest() {
  _impl_.digest_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinRequest::digest() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_digest(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.digest_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.digest)
}
inline std::string* AndroidCheckinRequest::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.digest)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_digest() const {
  return _impl_.digest_.Get();
}
inline void AndroidCheckinRequest::_internal_set_digest(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.digest_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_digest() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.digest_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_digest() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.digest)
}

// optional .playapi.proto.gsf.AndroidCheckinProto checkin = 4;
inline bool AndroidCheckinRequest::_internal_has_checkin() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.checkin_ != nullptr);
  return value;
}
inline bool AndroidCheckinRequest::has_checkin() const {
  return _internal_has_checkin();
}
inline void AndroidCheckinRequest::clear_checkin() {
  if (_impl_.checkin_ != nullptr) _impl_.checkin_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::playapi::proto::gsf::AndroidCheckinProto& AndroidCheckinRequest::_internal_checkin() const {
  const ::playapi::proto::gsf::AndroidCheckinProto* p = _impl_.checkin_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::gsf::AndroidCheckinProto&>(
      ::playapi::proto::gsf::_AndroidCheckinProto_default_instance_);
}
inline const ::playapi::proto::gsf::AndroidCheckinProto& AndroidCheckinRequest::checkin() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.checkin)
  return _internal_checkin();
}
inline void AndroidCheckinRequest::unsafe_arena_set_allocated_checkin(
    ::playapi::proto::gsf::AndroidCheckinProto* checkin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkin_);
  }
  _impl_.checkin_ = checkin;
  if (checkin) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.checkin)
}
inline ::playapi::proto::gsf::AndroidCheckinProto* AndroidCheckinRequest::release_checkin() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::playapi::proto::gsf::AndroidCheckinProto* temp = _impl_.checkin_;
  _impl_.checkin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::gsf::AndroidCheckinProto* AndroidCheckinRequest::unsafe_arena_release_checkin() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.checkin)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::playapi::proto::gsf::AndroidCheckinProto* temp = _impl_.checkin_;
  _impl_.checkin_ = nullptr;
  return temp;
}
inline ::playapi::proto::gsf::AndroidCheckinProto* AndroidCheckinRequest::_internal_mutable_checkin() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.checkin_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::gsf::AndroidCheckinProto>(GetArenaForAllocation());
    _impl_.checkin_ = p;
  }
  return _impl_.checkin_;
}
inline ::playapi::proto::gsf::AndroidCheckinProto* AndroidCheckinRequest::mutable_checkin() {
  ::playapi::proto::gsf::AndroidCheckinProto* _msg = _internal_mutable_checkin();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.checkin)
  return _msg;
}
inline void AndroidCheckinRequest::set_allocated_checkin(::playapi::proto::gsf::AndroidCheckinProto* checkin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.checkin_;
  }
  if (checkin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(checkin);
    if (message_arena != submessage_arena) {
      checkin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.checkin_ = checkin;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.checkin)
}

// optional string desiredBuild = 5;
inline bool AndroidCheckinRequest::_internal_has_desiredbuild() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_desiredbuild() const {
  return _internal_has_desiredbuild();
}
inline void AndroidCheckinRequest::clear_desiredbuild() {
  _impl_.desiredbuild_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidCheckinRequest::desiredbuild() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.desiredBuild)
  return _internal_desiredbuild();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_desiredbuild(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.desiredbuild_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.desiredBuild)
}
inline std::string* AndroidCheckinRequest::mutable_desiredbuild() {
  std::string* _s = _internal_mutable_desiredbuild();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.desiredBuild)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_desiredbuild() const {
  return _impl_.desiredbuild_.Get();
}
inline void AndroidCheckinRequest::_internal_set_desiredbuild(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.desiredbuild_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_desiredbuild() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.desiredbuild_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_desiredbuild() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.desiredBuild)
  if (!_internal_has_desiredbuild()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.desiredbuild_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desiredbuild_.IsDefault()) {
    _impl_.desiredbuild_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_desiredbuild(std::string* desiredbuild) {
  if (desiredbuild != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.desiredbuild_.SetAllocated(desiredbuild, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desiredbuild_.IsDefault()) {
    _impl_.desiredbuild_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.desiredBuild)
}

// optional string locale = 6;
inline bool AndroidCheckinRequest::_internal_has_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_locale() const {
  return _internal_has_locale();
}
inline void AndroidCheckinRequest::clear_locale() {
  _impl_.locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AndroidCheckinRequest::locale() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_locale(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.locale)
}
inline std::string* AndroidCheckinRequest::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.locale)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_locale() const {
  return _impl_.locale_.Get();
}
inline void AndroidCheckinRequest::_internal_set_locale(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_locale() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.locale_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_locale() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.locale)
}

// optional int64 loggingId = 7;
inline bool AndroidCheckinRequest::_internal_has_loggingid() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_loggingid() const {
  return _internal_has_loggingid();
}
inline void AndroidCheckinRequest::clear_loggingid() {
  _impl_.loggingid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int64_t AndroidCheckinRequest::_internal_loggingid() const {
  return _impl_.loggingid_;
}
inline int64_t AndroidCheckinRequest::loggingid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.loggingId)
  return _internal_loggingid();
}
inline void AndroidCheckinRequest::_internal_set_loggingid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.loggingid_ = value;
}
inline void AndroidCheckinRequest::set_loggingid(int64_t value) {
  _internal_set_loggingid(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.loggingId)
}

// optional string marketCheckin = 8;
inline bool AndroidCheckinRequest::_internal_has_marketcheckin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_marketcheckin() const {
  return _internal_has_marketcheckin();
}
inline void AndroidCheckinRequest::clear_marketcheckin() {
  _impl_.marketcheckin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AndroidCheckinRequest::marketcheckin() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.marketCheckin)
  return _internal_marketcheckin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_marketcheckin(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.marketcheckin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.marketCheckin)
}
inline std::string* AndroidCheckinRequest::mutable_marketcheckin() {
  std::string* _s = _internal_mutable_marketcheckin();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.marketCheckin)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_marketcheckin() const {
  return _impl_.marketcheckin_.Get();
}
inline void AndroidCheckinRequest::_internal_set_marketcheckin(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.marketcheckin_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_marketcheckin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.marketcheckin_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_marketcheckin() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.marketCheckin)
  if (!_internal_has_marketcheckin()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.marketcheckin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.marketcheckin_.IsDefault()) {
    _impl_.marketcheckin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_marketcheckin(std::string* marketcheckin) {
  if (marketcheckin != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.marketcheckin_.SetAllocated(marketcheckin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.marketcheckin_.IsDefault()) {
    _impl_.marketcheckin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.marketCheckin)
}

// repeated string macAddr = 9;
inline int AndroidCheckinRequest::_internal_macaddr_size() const {
  return _impl_.macaddr_.size();
}
inline int AndroidCheckinRequest::macaddr_size() const {
  return _internal_macaddr_size();
}
inline void AndroidCheckinRequest::clear_macaddr() {
  _impl_.macaddr_.Clear();
}
inline std::string* AndroidCheckinRequest::add_macaddr() {
  std::string* _s = _internal_add_macaddr();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_macaddr(int index) const {
  return _impl_.macaddr_.Get(index);
}
inline const std::string& AndroidCheckinRequest::macaddr(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
  return _internal_macaddr(index);
}
inline std::string* AndroidCheckinRequest::mutable_macaddr(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
  return _impl_.macaddr_.Mutable(index);
}
inline void AndroidCheckinRequest::set_macaddr(int index, const std::string& value) {
  _impl_.macaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline void AndroidCheckinRequest::set_macaddr(int index, std::string&& value) {
  _impl_.macaddr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline void AndroidCheckinRequest::set_macaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.macaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline void AndroidCheckinRequest::set_macaddr(int index, const char* value, size_t size) {
  _impl_.macaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline std::string* AndroidCheckinRequest::_internal_add_macaddr() {
  return _impl_.macaddr_.Add();
}
inline void AndroidCheckinRequest::add_macaddr(const std::string& value) {
  _impl_.macaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline void AndroidCheckinRequest::add_macaddr(std::string&& value) {
  _impl_.macaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline void AndroidCheckinRequest::add_macaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.macaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline void AndroidCheckinRequest::add_macaddr(const char* value, size_t size) {
  _impl_.macaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::macaddr() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
  return _impl_.macaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_macaddr() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinRequest.macAddr)
  return &_impl_.macaddr_;
}

// optional string meid = 10;
inline bool AndroidCheckinRequest::_internal_has_meid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_meid() const {
  return _internal_has_meid();
}
inline void AndroidCheckinRequest::clear_meid() {
  _impl_.meid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AndroidCheckinRequest::meid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.meid)
  return _internal_meid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_meid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.meid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.meid)
}
inline std::string* AndroidCheckinRequest::mutable_meid() {
  std::string* _s = _internal_mutable_meid();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.meid)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_meid() const {
  return _impl_.meid_.Get();
}
inline void AndroidCheckinRequest::_internal_set_meid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.meid_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_meid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.meid_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_meid() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.meid)
  if (!_internal_has_meid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.meid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meid_.IsDefault()) {
    _impl_.meid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_meid(std::string* meid) {
  if (meid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.meid_.SetAllocated(meid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meid_.IsDefault()) {
    _impl_.meid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.meid)
}

// repeated string accountCookie = 11;
inline int AndroidCheckinRequest::_internal_accountcookie_size() const {
  return _impl_.accountcookie_.size();
}
inline int AndroidCheckinRequest::accountcookie_size() const {
  return _internal_accountcookie_size();
}
inline void AndroidCheckinRequest::clear_accountcookie() {
  _impl_.accountcookie_.Clear();
}
inline std::string* AndroidCheckinRequest::add_accountcookie() {
  std::string* _s = _internal_add_accountcookie();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_accountcookie(int index) const {
  return _impl_.accountcookie_.Get(index);
}
inline const std::string& AndroidCheckinRequest::accountcookie(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
  return _internal_accountcookie(index);
}
inline std::string* AndroidCheckinRequest::mutable_accountcookie(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
  return _impl_.accountcookie_.Mutable(index);
}
inline void AndroidCheckinRequest::set_accountcookie(int index, const std::string& value) {
  _impl_.accountcookie_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline void AndroidCheckinRequest::set_accountcookie(int index, std::string&& value) {
  _impl_.accountcookie_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline void AndroidCheckinRequest::set_accountcookie(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accountcookie_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline void AndroidCheckinRequest::set_accountcookie(int index, const char* value, size_t size) {
  _impl_.accountcookie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline std::string* AndroidCheckinRequest::_internal_add_accountcookie() {
  return _impl_.accountcookie_.Add();
}
inline void AndroidCheckinRequest::add_accountcookie(const std::string& value) {
  _impl_.accountcookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline void AndroidCheckinRequest::add_accountcookie(std::string&& value) {
  _impl_.accountcookie_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline void AndroidCheckinRequest::add_accountcookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.accountcookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline void AndroidCheckinRequest::add_accountcookie(const char* value, size_t size) {
  _impl_.accountcookie_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::accountcookie() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
  return _impl_.accountcookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_accountcookie() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinRequest.accountCookie)
  return &_impl_.accountcookie_;
}

// optional string timeZone = 12;
inline bool AndroidCheckinRequest::_internal_has_timezone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_timezone() const {
  return _internal_has_timezone();
}
inline void AndroidCheckinRequest::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AndroidCheckinRequest::timezone() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.timeZone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_timezone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.timezone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.timeZone)
}
inline std::string* AndroidCheckinRequest::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.timeZone)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void AndroidCheckinRequest::_internal_set_timezone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_timezone() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.timezone_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.timeZone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.timezone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.timezone_.SetAllocated(timezone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.timeZone)
}

// optional fixed64 securityToken = 13;
inline bool AndroidCheckinRequest::_internal_has_securitytoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_securitytoken() const {
  return _internal_has_securitytoken();
}
inline void AndroidCheckinRequest::clear_securitytoken() {
  _impl_.securitytoken_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint64_t AndroidCheckinRequest::_internal_securitytoken() const {
  return _impl_.securitytoken_;
}
inline uint64_t AndroidCheckinRequest::securitytoken() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.securityToken)
  return _internal_securitytoken();
}
inline void AndroidCheckinRequest::_internal_set_securitytoken(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.securitytoken_ = value;
}
inline void AndroidCheckinRequest::set_securitytoken(uint64_t value) {
  _internal_set_securitytoken(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.securityToken)
}

// optional int32 version = 14;
inline bool AndroidCheckinRequest::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_version() const {
  return _internal_has_version();
}
inline void AndroidCheckinRequest::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t AndroidCheckinRequest::_internal_version() const {
  return _impl_.version_;
}
inline int32_t AndroidCheckinRequest::version() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.version)
  return _internal_version();
}
inline void AndroidCheckinRequest::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.version_ = value;
}
inline void AndroidCheckinRequest::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.version)
}

// repeated string otaCert = 15;
inline int AndroidCheckinRequest::_internal_otacert_size() const {
  return _impl_.otacert_.size();
}
inline int AndroidCheckinRequest::otacert_size() const {
  return _internal_otacert_size();
}
inline void AndroidCheckinRequest::clear_otacert() {
  _impl_.otacert_.Clear();
}
inline std::string* AndroidCheckinRequest::add_otacert() {
  std::string* _s = _internal_add_otacert();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_otacert(int index) const {
  return _impl_.otacert_.Get(index);
}
inline const std::string& AndroidCheckinRequest::otacert(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
  return _internal_otacert(index);
}
inline std::string* AndroidCheckinRequest::mutable_otacert(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
  return _impl_.otacert_.Mutable(index);
}
inline void AndroidCheckinRequest::set_otacert(int index, const std::string& value) {
  _impl_.otacert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline void AndroidCheckinRequest::set_otacert(int index, std::string&& value) {
  _impl_.otacert_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline void AndroidCheckinRequest::set_otacert(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.otacert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline void AndroidCheckinRequest::set_otacert(int index, const char* value, size_t size) {
  _impl_.otacert_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline std::string* AndroidCheckinRequest::_internal_add_otacert() {
  return _impl_.otacert_.Add();
}
inline void AndroidCheckinRequest::add_otacert(const std::string& value) {
  _impl_.otacert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline void AndroidCheckinRequest::add_otacert(std::string&& value) {
  _impl_.otacert_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline void AndroidCheckinRequest::add_otacert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.otacert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline void AndroidCheckinRequest::add_otacert(const char* value, size_t size) {
  _impl_.otacert_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::otacert() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
  return _impl_.otacert_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_otacert() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinRequest.otaCert)
  return &_impl_.otacert_;
}

// optional string serialNumber = 16;
inline bool AndroidCheckinRequest::_internal_has_serialnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_serialnumber() const {
  return _internal_has_serialnumber();
}
inline void AndroidCheckinRequest::clear_serialnumber() {
  _impl_.serialnumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AndroidCheckinRequest::serialnumber() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.serialNumber)
  return _internal_serialnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_serialnumber(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.serialnumber_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.serialNumber)
}
inline std::string* AndroidCheckinRequest::mutable_serialnumber() {
  std::string* _s = _internal_mutable_serialnumber();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.serialNumber)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_serialnumber() const {
  return _impl_.serialnumber_.Get();
}
inline void AndroidCheckinRequest::_internal_set_serialnumber(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.serialnumber_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_serialnumber() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.serialnumber_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_serialnumber() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.serialNumber)
  if (!_internal_has_serialnumber()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.serialnumber_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialnumber_.IsDefault()) {
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_serialnumber(std::string* serialnumber) {
  if (serialnumber != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.serialnumber_.SetAllocated(serialnumber, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialnumber_.IsDefault()) {
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.serialNumber)
}

// optional string esn = 17;
inline bool AndroidCheckinRequest::_internal_has_esn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_esn() const {
  return _internal_has_esn();
}
inline void AndroidCheckinRequest::clear_esn() {
  _impl_.esn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& AndroidCheckinRequest::esn() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.esn)
  return _internal_esn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_esn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.esn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.esn)
}
inline std::string* AndroidCheckinRequest::mutable_esn() {
  std::string* _s = _internal_mutable_esn();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.esn)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_esn() const {
  return _impl_.esn_.Get();
}
inline void AndroidCheckinRequest::_internal_set_esn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.esn_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_esn() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.esn_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_esn() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.esn)
  if (!_internal_has_esn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.esn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.esn_.IsDefault()) {
    _impl_.esn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_esn(std::string* esn) {
  if (esn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.esn_.SetAllocated(esn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.esn_.IsDefault()) {
    _impl_.esn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.esn)
}

// optional .playapi.proto.gsf.DeviceConfigurationProto deviceConfiguration = 18;
inline bool AndroidCheckinRequest::_internal_has_deviceconfiguration() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deviceconfiguration_ != nullptr);
  return value;
}
inline bool AndroidCheckinRequest::has_deviceconfiguration() const {
  return _internal_has_deviceconfiguration();
}
inline void AndroidCheckinRequest::clear_deviceconfiguration() {
  if (_impl_.deviceconfiguration_ != nullptr) _impl_.deviceconfiguration_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::playapi::proto::gsf::DeviceConfigurationProto& AndroidCheckinRequest::_internal_deviceconfiguration() const {
  const ::playapi::proto::gsf::DeviceConfigurationProto* p = _impl_.deviceconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::gsf::DeviceConfigurationProto&>(
      ::playapi::proto::gsf::_DeviceConfigurationProto_default_instance_);
}
inline const ::playapi::proto::gsf::DeviceConfigurationProto& AndroidCheckinRequest::deviceconfiguration() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.deviceConfiguration)
  return _internal_deviceconfiguration();
}
inline void AndroidCheckinRequest::unsafe_arena_set_allocated_deviceconfiguration(
    ::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceconfiguration_);
  }
  _impl_.deviceconfiguration_ = deviceconfiguration;
  if (deviceconfiguration) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.deviceConfiguration)
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* AndroidCheckinRequest::release_deviceconfiguration() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::playapi::proto::gsf::DeviceConfigurationProto* temp = _impl_.deviceconfiguration_;
  _impl_.deviceconfiguration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* AndroidCheckinRequest::unsafe_arena_release_deviceconfiguration() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.deviceConfiguration)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::playapi::proto::gsf::DeviceConfigurationProto* temp = _impl_.deviceconfiguration_;
  _impl_.deviceconfiguration_ = nullptr;
  return temp;
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* AndroidCheckinRequest::_internal_mutable_deviceconfiguration() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.deviceconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::gsf::DeviceConfigurationProto>(GetArenaForAllocation());
    _impl_.deviceconfiguration_ = p;
  }
  return _impl_.deviceconfiguration_;
}
inline ::playapi::proto::gsf::DeviceConfigurationProto* AndroidCheckinRequest::mutable_deviceconfiguration() {
  ::playapi::proto::gsf::DeviceConfigurationProto* _msg = _internal_mutable_deviceconfiguration();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.deviceConfiguration)
  return _msg;
}
inline void AndroidCheckinRequest::set_allocated_deviceconfiguration(::playapi::proto::gsf::DeviceConfigurationProto* deviceconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.deviceconfiguration_;
  }
  if (deviceconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deviceconfiguration);
    if (message_arena != submessage_arena) {
      deviceconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceconfiguration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.deviceconfiguration_ = deviceconfiguration;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.deviceConfiguration)
}

// repeated string macAddrType = 19;
inline int AndroidCheckinRequest::_internal_macaddrtype_size() const {
  return _impl_.macaddrtype_.size();
}
inline int AndroidCheckinRequest::macaddrtype_size() const {
  return _internal_macaddrtype_size();
}
inline void AndroidCheckinRequest::clear_macaddrtype() {
  _impl_.macaddrtype_.Clear();
}
inline std::string* AndroidCheckinRequest::add_macaddrtype() {
  std::string* _s = _internal_add_macaddrtype();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_macaddrtype(int index) const {
  return _impl_.macaddrtype_.Get(index);
}
inline const std::string& AndroidCheckinRequest::macaddrtype(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
  return _internal_macaddrtype(index);
}
inline std::string* AndroidCheckinRequest::mutable_macaddrtype(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
  return _impl_.macaddrtype_.Mutable(index);
}
inline void AndroidCheckinRequest::set_macaddrtype(int index, const std::string& value) {
  _impl_.macaddrtype_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline void AndroidCheckinRequest::set_macaddrtype(int index, std::string&& value) {
  _impl_.macaddrtype_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline void AndroidCheckinRequest::set_macaddrtype(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.macaddrtype_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline void AndroidCheckinRequest::set_macaddrtype(int index, const char* value, size_t size) {
  _impl_.macaddrtype_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline std::string* AndroidCheckinRequest::_internal_add_macaddrtype() {
  return _impl_.macaddrtype_.Add();
}
inline void AndroidCheckinRequest::add_macaddrtype(const std::string& value) {
  _impl_.macaddrtype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline void AndroidCheckinRequest::add_macaddrtype(std::string&& value) {
  _impl_.macaddrtype_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline void AndroidCheckinRequest::add_macaddrtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.macaddrtype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline void AndroidCheckinRequest::add_macaddrtype(const char* value, size_t size) {
  _impl_.macaddrtype_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinRequest::macaddrtype() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
  return _impl_.macaddrtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinRequest::mutable_macaddrtype() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinRequest.macAddrType)
  return &_impl_.macaddrtype_;
}

// optional int32 fragment = 20;
inline bool AndroidCheckinRequest::_internal_has_fragment() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_fragment() const {
  return _internal_has_fragment();
}
inline void AndroidCheckinRequest::clear_fragment() {
  _impl_.fragment_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t AndroidCheckinRequest::_internal_fragment() const {
  return _impl_.fragment_;
}
inline int32_t AndroidCheckinRequest::fragment() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.fragment)
  return _internal_fragment();
}
inline void AndroidCheckinRequest::_internal_set_fragment(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.fragment_ = value;
}
inline void AndroidCheckinRequest::set_fragment(int32_t value) {
  _internal_set_fragment(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.fragment)
}

// optional string userName = 21;
inline bool AndroidCheckinRequest::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_username() const {
  return _internal_has_username();
}
inline void AndroidCheckinRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& AndroidCheckinRequest::username() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.userName)
}
inline std::string* AndroidCheckinRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.userName)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void AndroidCheckinRequest::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_username() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.userName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.userName)
}

// optional int32 userSerialNumber = 22;
inline bool AndroidCheckinRequest::_internal_has_userserialnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_userserialnumber() const {
  return _internal_has_userserialnumber();
}
inline void AndroidCheckinRequest::clear_userserialnumber() {
  _impl_.userserialnumber_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t AndroidCheckinRequest::_internal_userserialnumber() const {
  return _impl_.userserialnumber_;
}
inline int32_t AndroidCheckinRequest::userserialnumber() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.userSerialNumber)
  return _internal_userserialnumber();
}
inline void AndroidCheckinRequest::_internal_set_userserialnumber(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.userserialnumber_ = value;
}
inline void AndroidCheckinRequest::set_userserialnumber(int32_t value) {
  _internal_set_userserialnumber(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.userSerialNumber)
}

// optional string droidguardResult = 24;
inline bool AndroidCheckinRequest::_internal_has_droidguardresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_droidguardresult() const {
  return _internal_has_droidguardresult();
}
inline void AndroidCheckinRequest::clear_droidguardresult() {
  _impl_.droidguardresult_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& AndroidCheckinRequest::droidguardresult() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.droidguardResult)
  return _internal_droidguardresult();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_droidguardresult(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000400u;
 _impl_.droidguardresult_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.droidguardResult)
}
inline std::string* AndroidCheckinRequest::mutable_droidguardresult() {
  std::string* _s = _internal_mutable_droidguardresult();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.droidguardResult)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_droidguardresult() const {
  return _impl_.droidguardresult_.Get();
}
inline void AndroidCheckinRequest::_internal_set_droidguardresult(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.droidguardresult_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_droidguardresult() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.droidguardresult_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_droidguardresult() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.droidguardResult)
  if (!_internal_has_droidguardresult()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* p = _impl_.droidguardresult_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.droidguardresult_.IsDefault()) {
    _impl_.droidguardresult_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_droidguardresult(std::string* droidguardresult) {
  if (droidguardresult != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.droidguardresult_.SetAllocated(droidguardresult, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.droidguardresult_.IsDefault()) {
    _impl_.droidguardresult_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.droidguardResult)
}

// optional string deviceDataVersionInfo = 25;
inline bool AndroidCheckinRequest::_internal_has_devicedataversioninfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_devicedataversioninfo() const {
  return _internal_has_devicedataversioninfo();
}
inline void AndroidCheckinRequest::clear_devicedataversioninfo() {
  _impl_.devicedataversioninfo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& AndroidCheckinRequest::devicedataversioninfo() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo)
  return _internal_devicedataversioninfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinRequest::set_devicedataversioninfo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000800u;
 _impl_.devicedataversioninfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo)
}
inline std::string* AndroidCheckinRequest::mutable_devicedataversioninfo() {
  std::string* _s = _internal_mutable_devicedataversioninfo();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo)
  return _s;
}
inline const std::string& AndroidCheckinRequest::_internal_devicedataversioninfo() const {
  return _impl_.devicedataversioninfo_.Get();
}
inline void AndroidCheckinRequest::_internal_set_devicedataversioninfo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.devicedataversioninfo_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::_internal_mutable_devicedataversioninfo() {
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.devicedataversioninfo_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinRequest::release_devicedataversioninfo() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo)
  if (!_internal_has_devicedataversioninfo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* p = _impl_.devicedataversioninfo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicedataversioninfo_.IsDefault()) {
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinRequest::set_allocated_devicedataversioninfo(std::string* devicedataversioninfo) {
  if (devicedataversioninfo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.devicedataversioninfo_.SetAllocated(devicedataversioninfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicedataversioninfo_.IsDefault()) {
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinRequest.deviceDataVersionInfo)
}

// optional bool fetchSystemUpdates = 29;
inline bool AndroidCheckinRequest::_internal_has_fetchsystemupdates() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AndroidCheckinRequest::has_fetchsystemupdates() const {
  return _internal_has_fetchsystemupdates();
}
inline void AndroidCheckinRequest::clear_fetchsystemupdates() {
  _impl_.fetchsystemupdates_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool AndroidCheckinRequest::_internal_fetchsystemupdates() const {
  return _impl_.fetchsystemupdates_;
}
inline bool AndroidCheckinRequest::fetchsystemupdates() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinRequest.fetchSystemUpdates)
  return _internal_fetchsystemupdates();
}
inline void AndroidCheckinRequest::_internal_set_fetchsystemupdates(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.fetchsystemupdates_ = value;
}
inline void AndroidCheckinRequest::set_fetchsystemupdates(bool value) {
  _internal_set_fetchsystemupdates(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinRequest.fetchSystemUpdates)
}

// -------------------------------------------------------------------

// AndroidCheckinResponse

// optional bool statsOk = 1;
inline bool AndroidCheckinResponse::_internal_has_statsok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_statsok() const {
  return _internal_has_statsok();
}
inline void AndroidCheckinResponse::clear_statsok() {
  _impl_.statsok_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool AndroidCheckinResponse::_internal_statsok() const {
  return _impl_.statsok_;
}
inline bool AndroidCheckinResponse::statsok() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.statsOk)
  return _internal_statsok();
}
inline void AndroidCheckinResponse::_internal_set_statsok(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.statsok_ = value;
}
inline void AndroidCheckinResponse::set_statsok(bool value) {
  _internal_set_statsok(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.statsOk)
}

// repeated .playapi.proto.gsf.AndroidIntentProto intent = 2;
inline int AndroidCheckinResponse::_internal_intent_size() const {
  return _impl_.intent_.size();
}
inline int AndroidCheckinResponse::intent_size() const {
  return _internal_intent_size();
}
inline void AndroidCheckinResponse::clear_intent() {
  _impl_.intent_.Clear();
}
inline ::playapi::proto::gsf::AndroidIntentProto* AndroidCheckinResponse::mutable_intent(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinResponse.intent)
  return _impl_.intent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto >*
AndroidCheckinResponse::mutable_intent() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinResponse.intent)
  return &_impl_.intent_;
}
inline const ::playapi::proto::gsf::AndroidIntentProto& AndroidCheckinResponse::_internal_intent(int index) const {
  return _impl_.intent_.Get(index);
}
inline const ::playapi::proto::gsf::AndroidIntentProto& AndroidCheckinResponse::intent(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.intent)
  return _internal_intent(index);
}
inline ::playapi::proto::gsf::AndroidIntentProto* AndroidCheckinResponse::_internal_add_intent() {
  return _impl_.intent_.Add();
}
inline ::playapi::proto::gsf::AndroidIntentProto* AndroidCheckinResponse::add_intent() {
  ::playapi::proto::gsf::AndroidIntentProto* _add = _internal_add_intent();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinResponse.intent)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto >&
AndroidCheckinResponse::intent() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinResponse.intent)
  return _impl_.intent_;
}

// optional int64 timeMsec = 3;
inline bool AndroidCheckinResponse::_internal_has_timemsec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_timemsec() const {
  return _internal_has_timemsec();
}
inline void AndroidCheckinResponse::clear_timemsec() {
  _impl_.timemsec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AndroidCheckinResponse::_internal_timemsec() const {
  return _impl_.timemsec_;
}
inline int64_t AndroidCheckinResponse::timemsec() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.timeMsec)
  return _internal_timemsec();
}
inline void AndroidCheckinResponse::_internal_set_timemsec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timemsec_ = value;
}
inline void AndroidCheckinResponse::set_timemsec(int64_t value) {
  _internal_set_timemsec(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.timeMsec)
}

// optional string digest = 4;
inline bool AndroidCheckinResponse::_internal_has_digest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_digest() const {
  return _internal_has_digest();
}
inline void AndroidCheckinResponse::clear_digest() {
  _impl_.digest_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinResponse::digest() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinResponse::set_digest(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.digest_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.digest)
}
inline std::string* AndroidCheckinResponse::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinResponse.digest)
  return _s;
}
inline const std::string& AndroidCheckinResponse::_internal_digest() const {
  return _impl_.digest_.Get();
}
inline void AndroidCheckinResponse::_internal_set_digest(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.digest_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinResponse::_internal_mutable_digest() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.digest_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinResponse::release_digest() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinResponse.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinResponse::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinResponse.digest)
}

// repeated .playapi.proto.gsf.GservicesSetting setting = 5;
inline int AndroidCheckinResponse::_internal_setting_size() const {
  return _impl_.setting_.size();
}
inline int AndroidCheckinResponse::setting_size() const {
  return _internal_setting_size();
}
inline void AndroidCheckinResponse::clear_setting() {
  _impl_.setting_.Clear();
}
inline ::playapi::proto::gsf::GservicesSetting* AndroidCheckinResponse::mutable_setting(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinResponse.setting)
  return _impl_.setting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::GservicesSetting >*
AndroidCheckinResponse::mutable_setting() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinResponse.setting)
  return &_impl_.setting_;
}
inline const ::playapi::proto::gsf::GservicesSetting& AndroidCheckinResponse::_internal_setting(int index) const {
  return _impl_.setting_.Get(index);
}
inline const ::playapi::proto::gsf::GservicesSetting& AndroidCheckinResponse::setting(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.setting)
  return _internal_setting(index);
}
inline ::playapi::proto::gsf::GservicesSetting* AndroidCheckinResponse::_internal_add_setting() {
  return _impl_.setting_.Add();
}
inline ::playapi::proto::gsf::GservicesSetting* AndroidCheckinResponse::add_setting() {
  ::playapi::proto::gsf::GservicesSetting* _add = _internal_add_setting();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinResponse.setting)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::GservicesSetting >&
AndroidCheckinResponse::setting() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinResponse.setting)
  return _impl_.setting_;
}

// optional bool marketOk = 6;
inline bool AndroidCheckinResponse::_internal_has_marketok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_marketok() const {
  return _internal_has_marketok();
}
inline void AndroidCheckinResponse::clear_marketok() {
  _impl_.marketok_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool AndroidCheckinResponse::_internal_marketok() const {
  return _impl_.marketok_;
}
inline bool AndroidCheckinResponse::marketok() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.marketOk)
  return _internal_marketok();
}
inline void AndroidCheckinResponse::_internal_set_marketok(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.marketok_ = value;
}
inline void AndroidCheckinResponse::set_marketok(bool value) {
  _internal_set_marketok(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.marketOk)
}

// optional fixed64 androidId = 7;
inline bool AndroidCheckinResponse::_internal_has_androidid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_androidid() const {
  return _internal_has_androidid();
}
inline void AndroidCheckinResponse::clear_androidid() {
  _impl_.androidid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t AndroidCheckinResponse::_internal_androidid() const {
  return _impl_.androidid_;
}
inline uint64_t AndroidCheckinResponse::androidid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.androidId)
  return _internal_androidid();
}
inline void AndroidCheckinResponse::_internal_set_androidid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.androidid_ = value;
}
inline void AndroidCheckinResponse::set_androidid(uint64_t value) {
  _internal_set_androidid(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.androidId)
}

// optional fixed64 securityToken = 8;
inline bool AndroidCheckinResponse::_internal_has_securitytoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_securitytoken() const {
  return _internal_has_securitytoken();
}
inline void AndroidCheckinResponse::clear_securitytoken() {
  _impl_.securitytoken_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t AndroidCheckinResponse::_internal_securitytoken() const {
  return _impl_.securitytoken_;
}
inline uint64_t AndroidCheckinResponse::securitytoken() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.securityToken)
  return _internal_securitytoken();
}
inline void AndroidCheckinResponse::_internal_set_securitytoken(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.securitytoken_ = value;
}
inline void AndroidCheckinResponse::set_securitytoken(uint64_t value) {
  _internal_set_securitytoken(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.securityToken)
}

// optional bool settingsDiff = 9;
inline bool AndroidCheckinResponse::_internal_has_settingsdiff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_settingsdiff() const {
  return _internal_has_settingsdiff();
}
inline void AndroidCheckinResponse::clear_settingsdiff() {
  _impl_.settingsdiff_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool AndroidCheckinResponse::_internal_settingsdiff() const {
  return _impl_.settingsdiff_;
}
inline bool AndroidCheckinResponse::settingsdiff() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.settingsDiff)
  return _internal_settingsdiff();
}
inline void AndroidCheckinResponse::_internal_set_settingsdiff(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.settingsdiff_ = value;
}
inline void AndroidCheckinResponse::set_settingsdiff(bool value) {
  _internal_set_settingsdiff(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.settingsDiff)
}

// repeated string deleteSetting = 10;
inline int AndroidCheckinResponse::_internal_deletesetting_size() const {
  return _impl_.deletesetting_.size();
}
inline int AndroidCheckinResponse::deletesetting_size() const {
  return _internal_deletesetting_size();
}
inline void AndroidCheckinResponse::clear_deletesetting() {
  _impl_.deletesetting_.Clear();
}
inline std::string* AndroidCheckinResponse::add_deletesetting() {
  std::string* _s = _internal_add_deletesetting();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
  return _s;
}
inline const std::string& AndroidCheckinResponse::_internal_deletesetting(int index) const {
  return _impl_.deletesetting_.Get(index);
}
inline const std::string& AndroidCheckinResponse::deletesetting(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
  return _internal_deletesetting(index);
}
inline std::string* AndroidCheckinResponse::mutable_deletesetting(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
  return _impl_.deletesetting_.Mutable(index);
}
inline void AndroidCheckinResponse::set_deletesetting(int index, const std::string& value) {
  _impl_.deletesetting_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline void AndroidCheckinResponse::set_deletesetting(int index, std::string&& value) {
  _impl_.deletesetting_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline void AndroidCheckinResponse::set_deletesetting(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.deletesetting_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline void AndroidCheckinResponse::set_deletesetting(int index, const char* value, size_t size) {
  _impl_.deletesetting_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline std::string* AndroidCheckinResponse::_internal_add_deletesetting() {
  return _impl_.deletesetting_.Add();
}
inline void AndroidCheckinResponse::add_deletesetting(const std::string& value) {
  _impl_.deletesetting_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline void AndroidCheckinResponse::add_deletesetting(std::string&& value) {
  _impl_.deletesetting_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline void AndroidCheckinResponse::add_deletesetting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.deletesetting_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline void AndroidCheckinResponse::add_deletesetting(const char* value, size_t size) {
  _impl_.deletesetting_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinResponse::deletesetting() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
  return _impl_.deletesetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinResponse::mutable_deletesetting() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinResponse.deleteSetting)
  return &_impl_.deletesetting_;
}

// optional string deviceDataVersionInfo = 12;
inline bool AndroidCheckinResponse::_internal_has_devicedataversioninfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinResponse::has_devicedataversioninfo() const {
  return _internal_has_devicedataversioninfo();
}
inline void AndroidCheckinResponse::clear_devicedataversioninfo() {
  _impl_.devicedataversioninfo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinResponse::devicedataversioninfo() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo)
  return _internal_devicedataversioninfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinResponse::set_devicedataversioninfo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.devicedataversioninfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo)
}
inline std::string* AndroidCheckinResponse::mutable_devicedataversioninfo() {
  std::string* _s = _internal_mutable_devicedataversioninfo();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo)
  return _s;
}
inline const std::string& AndroidCheckinResponse::_internal_devicedataversioninfo() const {
  return _impl_.devicedataversioninfo_.Get();
}
inline void AndroidCheckinResponse::_internal_set_devicedataversioninfo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicedataversioninfo_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinResponse::_internal_mutable_devicedataversioninfo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.devicedataversioninfo_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinResponse::release_devicedataversioninfo() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo)
  if (!_internal_has_devicedataversioninfo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.devicedataversioninfo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicedataversioninfo_.IsDefault()) {
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinResponse::set_allocated_devicedataversioninfo(std::string* devicedataversioninfo) {
  if (devicedataversioninfo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.devicedataversioninfo_.SetAllocated(devicedataversioninfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicedataversioninfo_.IsDefault()) {
    _impl_.devicedataversioninfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinResponse.deviceDataVersionInfo)
}

// -------------------------------------------------------------------

// GservicesSetting

// optional bytes name = 1;
inline bool GservicesSetting::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GservicesSetting::has_name() const {
  return _internal_has_name();
}
inline void GservicesSetting::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GservicesSetting::name() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.GservicesSetting.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GservicesSetting::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.GservicesSetting.name)
}
inline std::string* GservicesSetting::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.GservicesSetting.name)
  return _s;
}
inline const std::string& GservicesSetting::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GservicesSetting::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GservicesSetting::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GservicesSetting::release_name() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.GservicesSetting.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GservicesSetting::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.GservicesSetting.name)
}

// optional bytes value = 2;
inline bool GservicesSetting::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GservicesSetting::has_value() const {
  return _internal_has_value();
}
inline void GservicesSetting::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GservicesSetting::value() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.GservicesSetting.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GservicesSetting::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.GservicesSetting.value)
}
inline std::string* GservicesSetting::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.GservicesSetting.value)
  return _s;
}
inline const std::string& GservicesSetting::_internal_value() const {
  return _impl_.value_.Get();
}
inline void GservicesSetting::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* GservicesSetting::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* GservicesSetting::release_value() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.GservicesSetting.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GservicesSetting::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.GservicesSetting.value)
}

// -------------------------------------------------------------------

// DeviceConfigurationProto_FeatureWithGLVersion

// optional string name = 1;
inline bool DeviceConfigurationProto_FeatureWithGLVersion::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceConfigurationProto_FeatureWithGLVersion::has_name() const {
  return _internal_has_name();
}
inline void DeviceConfigurationProto_FeatureWithGLVersion::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceConfigurationProto_FeatureWithGLVersion::name() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceConfigurationProto_FeatureWithGLVersion::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name)
}
inline std::string* DeviceConfigurationProto_FeatureWithGLVersion::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name)
  return _s;
}
inline const std::string& DeviceConfigurationProto_FeatureWithGLVersion::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeviceConfigurationProto_FeatureWithGLVersion::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceConfigurationProto_FeatureWithGLVersion::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceConfigurationProto_FeatureWithGLVersion::release_name() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeviceConfigurationProto_FeatureWithGLVersion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.name)
}

// optional int32 glEsVersion = 2;
inline bool DeviceConfigurationProto_FeatureWithGLVersion::_internal_has_glesversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceConfigurationProto_FeatureWithGLVersion::has_glesversion() const {
  return _internal_has_glesversion();
}
inline void DeviceConfigurationProto_FeatureWithGLVersion::clear_glesversion() {
  _impl_.glesversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeviceConfigurationProto_FeatureWithGLVersion::_internal_glesversion() const {
  return _impl_.glesversion_;
}
inline int32_t DeviceConfigurationProto_FeatureWithGLVersion::glesversion() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.glEsVersion)
  return _internal_glesversion();
}
inline void DeviceConfigurationProto_FeatureWithGLVersion::_internal_set_glesversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.glesversion_ = value;
}
inline void DeviceConfigurationProto_FeatureWithGLVersion::set_glesversion(int32_t value) {
  _internal_set_glesversion(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion.glEsVersion)
}

// -------------------------------------------------------------------

// DeviceConfigurationProto

// optional int32 touchScreen = 1;
inline bool DeviceConfigurationProto::_internal_has_touchscreen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_touchscreen() const {
  return _internal_has_touchscreen();
}
inline void DeviceConfigurationProto::clear_touchscreen() {
  _impl_.touchscreen_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t DeviceConfigurationProto::_internal_touchscreen() const {
  return _impl_.touchscreen_;
}
inline int32_t DeviceConfigurationProto::touchscreen() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.touchScreen)
  return _internal_touchscreen();
}
inline void DeviceConfigurationProto::_internal_set_touchscreen(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.touchscreen_ = value;
}
inline void DeviceConfigurationProto::set_touchscreen(int32_t value) {
  _internal_set_touchscreen(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.touchScreen)
}

// optional int32 keyboard = 2;
inline bool DeviceConfigurationProto::_internal_has_keyboard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_keyboard() const {
  return _internal_has_keyboard();
}
inline void DeviceConfigurationProto::clear_keyboard() {
  _impl_.keyboard_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeviceConfigurationProto::_internal_keyboard() const {
  return _impl_.keyboard_;
}
inline int32_t DeviceConfigurationProto::keyboard() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.keyboard)
  return _internal_keyboard();
}
inline void DeviceConfigurationProto::_internal_set_keyboard(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.keyboard_ = value;
}
inline void DeviceConfigurationProto::set_keyboard(int32_t value) {
  _internal_set_keyboard(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.keyboard)
}

// optional int32 navigation = 3;
inline bool DeviceConfigurationProto::_internal_has_navigation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_navigation() const {
  return _internal_has_navigation();
}
inline void DeviceConfigurationProto::clear_navigation() {
  _impl_.navigation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DeviceConfigurationProto::_internal_navigation() const {
  return _impl_.navigation_;
}
inline int32_t DeviceConfigurationProto::navigation() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.navigation)
  return _internal_navigation();
}
inline void DeviceConfigurationProto::_internal_set_navigation(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.navigation_ = value;
}
inline void DeviceConfigurationProto::set_navigation(int32_t value) {
  _internal_set_navigation(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.navigation)
}

// optional int32 screenLayout = 4;
inline bool DeviceConfigurationProto::_internal_has_screenlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_screenlayout() const {
  return _internal_has_screenlayout();
}
inline void DeviceConfigurationProto::clear_screenlayout() {
  _impl_.screenlayout_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DeviceConfigurationProto::_internal_screenlayout() const {
  return _impl_.screenlayout_;
}
inline int32_t DeviceConfigurationProto::screenlayout() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.screenLayout)
  return _internal_screenlayout();
}
inline void DeviceConfigurationProto::_internal_set_screenlayout(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.screenlayout_ = value;
}
inline void DeviceConfigurationProto::set_screenlayout(int32_t value) {
  _internal_set_screenlayout(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.screenLayout)
}

// optional bool hasHardKeyboard = 5;
inline bool DeviceConfigurationProto::_internal_has_hashardkeyboard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_hashardkeyboard() const {
  return _internal_has_hashardkeyboard();
}
inline void DeviceConfigurationProto::clear_hashardkeyboard() {
  _impl_.hashardkeyboard_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool DeviceConfigurationProto::_internal_hashardkeyboard() const {
  return _impl_.hashardkeyboard_;
}
inline bool DeviceConfigurationProto::hashardkeyboard() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.hasHardKeyboard)
  return _internal_hashardkeyboard();
}
inline void DeviceConfigurationProto::_internal_set_hashardkeyboard(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.hashardkeyboard_ = value;
}
inline void DeviceConfigurationProto::set_hashardkeyboard(bool value) {
  _internal_set_hashardkeyboard(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.hasHardKeyboard)
}

// optional bool hasFiveWayNavigation = 6;
inline bool DeviceConfigurationProto::_internal_has_hasfivewaynavigation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_hasfivewaynavigation() const {
  return _internal_has_hasfivewaynavigation();
}
inline void DeviceConfigurationProto::clear_hasfivewaynavigation() {
  _impl_.hasfivewaynavigation_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool DeviceConfigurationProto::_internal_hasfivewaynavigation() const {
  return _impl_.hasfivewaynavigation_;
}
inline bool DeviceConfigurationProto::hasfivewaynavigation() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.hasFiveWayNavigation)
  return _internal_hasfivewaynavigation();
}
inline void DeviceConfigurationProto::_internal_set_hasfivewaynavigation(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.hasfivewaynavigation_ = value;
}
inline void DeviceConfigurationProto::set_hasfivewaynavigation(bool value) {
  _internal_set_hasfivewaynavigation(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.hasFiveWayNavigation)
}

// optional int32 screenDensity = 7;
inline bool DeviceConfigurationProto::_internal_has_screendensity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_screendensity() const {
  return _internal_has_screendensity();
}
inline void DeviceConfigurationProto::clear_screendensity() {
  _impl_.screendensity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DeviceConfigurationProto::_internal_screendensity() const {
  return _impl_.screendensity_;
}
inline int32_t DeviceConfigurationProto::screendensity() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.screenDensity)
  return _internal_screendensity();
}
inline void DeviceConfigurationProto::_internal_set_screendensity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.screendensity_ = value;
}
inline void DeviceConfigurationProto::set_screendensity(int32_t value) {
  _internal_set_screendensity(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.screenDensity)
}

// optional int32 glEsVersion = 8;
inline bool DeviceConfigurationProto::_internal_has_glesversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_glesversion() const {
  return _internal_has_glesversion();
}
inline void DeviceConfigurationProto::clear_glesversion() {
  _impl_.glesversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DeviceConfigurationProto::_internal_glesversion() const {
  return _impl_.glesversion_;
}
inline int32_t DeviceConfigurationProto::glesversion() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.glEsVersion)
  return _internal_glesversion();
}
inline void DeviceConfigurationProto::_internal_set_glesversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.glesversion_ = value;
}
inline void DeviceConfigurationProto::set_glesversion(int32_t value) {
  _internal_set_glesversion(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.glEsVersion)
}

// repeated string systemSharedLibrary = 9;
inline int DeviceConfigurationProto::_internal_systemsharedlibrary_size() const {
  return _impl_.systemsharedlibrary_.size();
}
inline int DeviceConfigurationProto::systemsharedlibrary_size() const {
  return _internal_systemsharedlibrary_size();
}
inline void DeviceConfigurationProto::clear_systemsharedlibrary() {
  _impl_.systemsharedlibrary_.Clear();
}
inline std::string* DeviceConfigurationProto::add_systemsharedlibrary() {
  std::string* _s = _internal_add_systemsharedlibrary();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
  return _s;
}
inline const std::string& DeviceConfigurationProto::_internal_systemsharedlibrary(int index) const {
  return _impl_.systemsharedlibrary_.Get(index);
}
inline const std::string& DeviceConfigurationProto::systemsharedlibrary(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
  return _internal_systemsharedlibrary(index);
}
inline std::string* DeviceConfigurationProto::mutable_systemsharedlibrary(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
  return _impl_.systemsharedlibrary_.Mutable(index);
}
inline void DeviceConfigurationProto::set_systemsharedlibrary(int index, const std::string& value) {
  _impl_.systemsharedlibrary_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline void DeviceConfigurationProto::set_systemsharedlibrary(int index, std::string&& value) {
  _impl_.systemsharedlibrary_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline void DeviceConfigurationProto::set_systemsharedlibrary(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.systemsharedlibrary_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline void DeviceConfigurationProto::set_systemsharedlibrary(int index, const char* value, size_t size) {
  _impl_.systemsharedlibrary_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline std::string* DeviceConfigurationProto::_internal_add_systemsharedlibrary() {
  return _impl_.systemsharedlibrary_.Add();
}
inline void DeviceConfigurationProto::add_systemsharedlibrary(const std::string& value) {
  _impl_.systemsharedlibrary_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline void DeviceConfigurationProto::add_systemsharedlibrary(std::string&& value) {
  _impl_.systemsharedlibrary_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline void DeviceConfigurationProto::add_systemsharedlibrary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.systemsharedlibrary_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline void DeviceConfigurationProto::add_systemsharedlibrary(const char* value, size_t size) {
  _impl_.systemsharedlibrary_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceConfigurationProto::systemsharedlibrary() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
  return _impl_.systemsharedlibrary_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceConfigurationProto::mutable_systemsharedlibrary() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.DeviceConfigurationProto.systemSharedLibrary)
  return &_impl_.systemsharedlibrary_;
}

// repeated string systemAvailableFeature = 10;
inline int DeviceConfigurationProto::_internal_systemavailablefeature_size() const {
  return _impl_.systemavailablefeature_.size();
}
inline int DeviceConfigurationProto::systemavailablefeature_size() const {
  return _internal_systemavailablefeature_size();
}
inline void DeviceConfigurationProto::clear_systemavailablefeature() {
  _impl_.systemavailablefeature_.Clear();
}
inline std::string* DeviceConfigurationProto::add_systemavailablefeature() {
  std::string* _s = _internal_add_systemavailablefeature();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
  return _s;
}
inline const std::string& DeviceConfigurationProto::_internal_systemavailablefeature(int index) const {
  return _impl_.systemavailablefeature_.Get(index);
}
inline const std::string& DeviceConfigurationProto::systemavailablefeature(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
  return _internal_systemavailablefeature(index);
}
inline std::string* DeviceConfigurationProto::mutable_systemavailablefeature(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
  return _impl_.systemavailablefeature_.Mutable(index);
}
inline void DeviceConfigurationProto::set_systemavailablefeature(int index, const std::string& value) {
  _impl_.systemavailablefeature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline void DeviceConfigurationProto::set_systemavailablefeature(int index, std::string&& value) {
  _impl_.systemavailablefeature_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline void DeviceConfigurationProto::set_systemavailablefeature(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.systemavailablefeature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline void DeviceConfigurationProto::set_systemavailablefeature(int index, const char* value, size_t size) {
  _impl_.systemavailablefeature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline std::string* DeviceConfigurationProto::_internal_add_systemavailablefeature() {
  return _impl_.systemavailablefeature_.Add();
}
inline void DeviceConfigurationProto::add_systemavailablefeature(const std::string& value) {
  _impl_.systemavailablefeature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline void DeviceConfigurationProto::add_systemavailablefeature(std::string&& value) {
  _impl_.systemavailablefeature_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline void DeviceConfigurationProto::add_systemavailablefeature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.systemavailablefeature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline void DeviceConfigurationProto::add_systemavailablefeature(const char* value, size_t size) {
  _impl_.systemavailablefeature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceConfigurationProto::systemavailablefeature() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
  return _impl_.systemavailablefeature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceConfigurationProto::mutable_systemavailablefeature() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.DeviceConfigurationProto.systemAvailableFeature)
  return &_impl_.systemavailablefeature_;
}

// repeated string nativePlatform = 11;
inline int DeviceConfigurationProto::_internal_nativeplatform_size() const {
  return _impl_.nativeplatform_.size();
}
inline int DeviceConfigurationProto::nativeplatform_size() const {
  return _internal_nativeplatform_size();
}
inline void DeviceConfigurationProto::clear_nativeplatform() {
  _impl_.nativeplatform_.Clear();
}
inline std::string* DeviceConfigurationProto::add_nativeplatform() {
  std::string* _s = _internal_add_nativeplatform();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
  return _s;
}
inline const std::string& DeviceConfigurationProto::_internal_nativeplatform(int index) const {
  return _impl_.nativeplatform_.Get(index);
}
inline const std::string& DeviceConfigurationProto::nativeplatform(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
  return _internal_nativeplatform(index);
}
inline std::string* DeviceConfigurationProto::mutable_nativeplatform(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
  return _impl_.nativeplatform_.Mutable(index);
}
inline void DeviceConfigurationProto::set_nativeplatform(int index, const std::string& value) {
  _impl_.nativeplatform_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline void DeviceConfigurationProto::set_nativeplatform(int index, std::string&& value) {
  _impl_.nativeplatform_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline void DeviceConfigurationProto::set_nativeplatform(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nativeplatform_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline void DeviceConfigurationProto::set_nativeplatform(int index, const char* value, size_t size) {
  _impl_.nativeplatform_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline std::string* DeviceConfigurationProto::_internal_add_nativeplatform() {
  return _impl_.nativeplatform_.Add();
}
inline void DeviceConfigurationProto::add_nativeplatform(const std::string& value) {
  _impl_.nativeplatform_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline void DeviceConfigurationProto::add_nativeplatform(std::string&& value) {
  _impl_.nativeplatform_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline void DeviceConfigurationProto::add_nativeplatform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nativeplatform_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline void DeviceConfigurationProto::add_nativeplatform(const char* value, size_t size) {
  _impl_.nativeplatform_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceConfigurationProto::nativeplatform() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
  return _impl_.nativeplatform_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceConfigurationProto::mutable_nativeplatform() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.DeviceConfigurationProto.nativePlatform)
  return &_impl_.nativeplatform_;
}

// optional int32 screenWidth = 12;
inline bool DeviceConfigurationProto::_internal_has_screenwidth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_screenwidth() const {
  return _internal_has_screenwidth();
}
inline void DeviceConfigurationProto::clear_screenwidth() {
  _impl_.screenwidth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DeviceConfigurationProto::_internal_screenwidth() const {
  return _impl_.screenwidth_;
}
inline int32_t DeviceConfigurationProto::screenwidth() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.screenWidth)
  return _internal_screenwidth();
}
inline void DeviceConfigurationProto::_internal_set_screenwidth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.screenwidth_ = value;
}
inline void DeviceConfigurationProto::set_screenwidth(int32_t value) {
  _internal_set_screenwidth(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.screenWidth)
}

// optional int32 screenHeight = 13;
inline bool DeviceConfigurationProto::_internal_has_screenheight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_screenheight() const {
  return _internal_has_screenheight();
}
inline void DeviceConfigurationProto::clear_screenheight() {
  _impl_.screenheight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t DeviceConfigurationProto::_internal_screenheight() const {
  return _impl_.screenheight_;
}
inline int32_t DeviceConfigurationProto::screenheight() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.screenHeight)
  return _internal_screenheight();
}
inline void DeviceConfigurationProto::_internal_set_screenheight(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.screenheight_ = value;
}
inline void DeviceConfigurationProto::set_screenheight(int32_t value) {
  _internal_set_screenheight(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.screenHeight)
}

// repeated string systemSupportedLocale = 14;
inline int DeviceConfigurationProto::_internal_systemsupportedlocale_size() const {
  return _impl_.systemsupportedlocale_.size();
}
inline int DeviceConfigurationProto::systemsupportedlocale_size() const {
  return _internal_systemsupportedlocale_size();
}
inline void DeviceConfigurationProto::clear_systemsupportedlocale() {
  _impl_.systemsupportedlocale_.Clear();
}
inline std::string* DeviceConfigurationProto::add_systemsupportedlocale() {
  std::string* _s = _internal_add_systemsupportedlocale();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
  return _s;
}
inline const std::string& DeviceConfigurationProto::_internal_systemsupportedlocale(int index) const {
  return _impl_.systemsupportedlocale_.Get(index);
}
inline const std::string& DeviceConfigurationProto::systemsupportedlocale(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
  return _internal_systemsupportedlocale(index);
}
inline std::string* DeviceConfigurationProto::mutable_systemsupportedlocale(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
  return _impl_.systemsupportedlocale_.Mutable(index);
}
inline void DeviceConfigurationProto::set_systemsupportedlocale(int index, const std::string& value) {
  _impl_.systemsupportedlocale_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline void DeviceConfigurationProto::set_systemsupportedlocale(int index, std::string&& value) {
  _impl_.systemsupportedlocale_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline void DeviceConfigurationProto::set_systemsupportedlocale(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.systemsupportedlocale_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline void DeviceConfigurationProto::set_systemsupportedlocale(int index, const char* value, size_t size) {
  _impl_.systemsupportedlocale_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline std::string* DeviceConfigurationProto::_internal_add_systemsupportedlocale() {
  return _impl_.systemsupportedlocale_.Add();
}
inline void DeviceConfigurationProto::add_systemsupportedlocale(const std::string& value) {
  _impl_.systemsupportedlocale_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline void DeviceConfigurationProto::add_systemsupportedlocale(std::string&& value) {
  _impl_.systemsupportedlocale_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline void DeviceConfigurationProto::add_systemsupportedlocale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.systemsupportedlocale_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline void DeviceConfigurationProto::add_systemsupportedlocale(const char* value, size_t size) {
  _impl_.systemsupportedlocale_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceConfigurationProto::systemsupportedlocale() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
  return _impl_.systemsupportedlocale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceConfigurationProto::mutable_systemsupportedlocale() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.DeviceConfigurationProto.systemSupportedLocale)
  return &_impl_.systemsupportedlocale_;
}

// repeated string glExtension = 15;
inline int DeviceConfigurationProto::_internal_glextension_size() const {
  return _impl_.glextension_.size();
}
inline int DeviceConfigurationProto::glextension_size() const {
  return _internal_glextension_size();
}
inline void DeviceConfigurationProto::clear_glextension() {
  _impl_.glextension_.Clear();
}
inline std::string* DeviceConfigurationProto::add_glextension() {
  std::string* _s = _internal_add_glextension();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
  return _s;
}
inline const std::string& DeviceConfigurationProto::_internal_glextension(int index) const {
  return _impl_.glextension_.Get(index);
}
inline const std::string& DeviceConfigurationProto::glextension(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
  return _internal_glextension(index);
}
inline std::string* DeviceConfigurationProto::mutable_glextension(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
  return _impl_.glextension_.Mutable(index);
}
inline void DeviceConfigurationProto::set_glextension(int index, const std::string& value) {
  _impl_.glextension_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline void DeviceConfigurationProto::set_glextension(int index, std::string&& value) {
  _impl_.glextension_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline void DeviceConfigurationProto::set_glextension(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.glextension_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline void DeviceConfigurationProto::set_glextension(int index, const char* value, size_t size) {
  _impl_.glextension_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline std::string* DeviceConfigurationProto::_internal_add_glextension() {
  return _impl_.glextension_.Add();
}
inline void DeviceConfigurationProto::add_glextension(const std::string& value) {
  _impl_.glextension_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline void DeviceConfigurationProto::add_glextension(std::string&& value) {
  _impl_.glextension_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline void DeviceConfigurationProto::add_glextension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.glextension_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline void DeviceConfigurationProto::add_glextension(const char* value, size_t size) {
  _impl_.glextension_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceConfigurationProto::glextension() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
  return _impl_.glextension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceConfigurationProto::mutable_glextension() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.DeviceConfigurationProto.glExtension)
  return &_impl_.glextension_;
}

// optional int32 maxApkDownloadSizeMb = 17;
inline bool DeviceConfigurationProto::_internal_has_maxapkdownloadsizemb() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_maxapkdownloadsizemb() const {
  return _internal_has_maxapkdownloadsizemb();
}
inline void DeviceConfigurationProto::clear_maxapkdownloadsizemb() {
  _impl_.maxapkdownloadsizemb_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t DeviceConfigurationProto::_internal_maxapkdownloadsizemb() const {
  return _impl_.maxapkdownloadsizemb_;
}
inline int32_t DeviceConfigurationProto::maxapkdownloadsizemb() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.maxApkDownloadSizeMb)
  return _internal_maxapkdownloadsizemb();
}
inline void DeviceConfigurationProto::_internal_set_maxapkdownloadsizemb(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.maxapkdownloadsizemb_ = value;
}
inline void DeviceConfigurationProto::set_maxapkdownloadsizemb(int32_t value) {
  _internal_set_maxapkdownloadsizemb(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.maxApkDownloadSizeMb)
}

// optional int32 smallestScreenWidthDp = 18;
inline bool DeviceConfigurationProto::_internal_has_smallestscreenwidthdp() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_smallestscreenwidthdp() const {
  return _internal_has_smallestscreenwidthdp();
}
inline void DeviceConfigurationProto::clear_smallestscreenwidthdp() {
  _impl_.smallestscreenwidthdp_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t DeviceConfigurationProto::_internal_smallestscreenwidthdp() const {
  return _impl_.smallestscreenwidthdp_;
}
inline int32_t DeviceConfigurationProto::smallestscreenwidthdp() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.smallestScreenWidthDp)
  return _internal_smallestscreenwidthdp();
}
inline void DeviceConfigurationProto::_internal_set_smallestscreenwidthdp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.smallestscreenwidthdp_ = value;
}
inline void DeviceConfigurationProto::set_smallestscreenwidthdp(int32_t value) {
  _internal_set_smallestscreenwidthdp(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.smallestScreenWidthDp)
}

// optional bool lowRamDevice = 19;
inline bool DeviceConfigurationProto::_internal_has_lowramdevice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_lowramdevice() const {
  return _internal_has_lowramdevice();
}
inline void DeviceConfigurationProto::clear_lowramdevice() {
  _impl_.lowramdevice_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool DeviceConfigurationProto::_internal_lowramdevice() const {
  return _impl_.lowramdevice_;
}
inline bool DeviceConfigurationProto::lowramdevice() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.lowRamDevice)
  return _internal_lowramdevice();
}
inline void DeviceConfigurationProto::_internal_set_lowramdevice(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lowramdevice_ = value;
}
inline void DeviceConfigurationProto::set_lowramdevice(bool value) {
  _internal_set_lowramdevice(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.lowRamDevice)
}

// optional int64 totalMemoryBytes = 20;
inline bool DeviceConfigurationProto::_internal_has_totalmemorybytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_totalmemorybytes() const {
  return _internal_has_totalmemorybytes();
}
inline void DeviceConfigurationProto::clear_totalmemorybytes() {
  _impl_.totalmemorybytes_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int64_t DeviceConfigurationProto::_internal_totalmemorybytes() const {
  return _impl_.totalmemorybytes_;
}
inline int64_t DeviceConfigurationProto::totalmemorybytes() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.totalMemoryBytes)
  return _internal_totalmemorybytes();
}
inline void DeviceConfigurationProto::_internal_set_totalmemorybytes(int64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.totalmemorybytes_ = value;
}
inline void DeviceConfigurationProto::set_totalmemorybytes(int64_t value) {
  _internal_set_totalmemorybytes(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.totalMemoryBytes)
}

// optional int32 maxNumOfCpuCores = 21;
inline bool DeviceConfigurationProto::_internal_has_maxnumofcpucores() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_maxnumofcpucores() const {
  return _internal_has_maxnumofcpucores();
}
inline void DeviceConfigurationProto::clear_maxnumofcpucores() {
  _impl_.maxnumofcpucores_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t DeviceConfigurationProto::_internal_maxnumofcpucores() const {
  return _impl_.maxnumofcpucores_;
}
inline int32_t DeviceConfigurationProto::maxnumofcpucores() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.maxNumOfCpuCores)
  return _internal_maxnumofcpucores();
}
inline void DeviceConfigurationProto::_internal_set_maxnumofcpucores(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.maxnumofcpucores_ = value;
}
inline void DeviceConfigurationProto::set_maxnumofcpucores(int32_t value) {
  _internal_set_maxnumofcpucores(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.maxNumOfCpuCores)
}

// repeated .playapi.proto.gsf.DeviceConfigurationProto.FeatureWithGLVersion newSystemAvailableFeature = 26;
inline int DeviceConfigurationProto::_internal_newsystemavailablefeature_size() const {
  return _impl_.newsystemavailablefeature_.size();
}
inline int DeviceConfigurationProto::newsystemavailablefeature_size() const {
  return _internal_newsystemavailablefeature_size();
}
inline void DeviceConfigurationProto::clear_newsystemavailablefeature() {
  _impl_.newsystemavailablefeature_.Clear();
}
inline ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* DeviceConfigurationProto::mutable_newsystemavailablefeature(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.DeviceConfigurationProto.newSystemAvailableFeature)
  return _impl_.newsystemavailablefeature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion >*
DeviceConfigurationProto::mutable_newsystemavailablefeature() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.DeviceConfigurationProto.newSystemAvailableFeature)
  return &_impl_.newsystemavailablefeature_;
}
inline const ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion& DeviceConfigurationProto::_internal_newsystemavailablefeature(int index) const {
  return _impl_.newsystemavailablefeature_.Get(index);
}
inline const ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion& DeviceConfigurationProto::newsystemavailablefeature(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.newSystemAvailableFeature)
  return _internal_newsystemavailablefeature(index);
}
inline ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* DeviceConfigurationProto::_internal_add_newsystemavailablefeature() {
  return _impl_.newsystemavailablefeature_.Add();
}
inline ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* DeviceConfigurationProto::add_newsystemavailablefeature() {
  ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion* _add = _internal_add_newsystemavailablefeature();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.DeviceConfigurationProto.newSystemAvailableFeature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::DeviceConfigurationProto_FeatureWithGLVersion >&
DeviceConfigurationProto::newsystemavailablefeature() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.DeviceConfigurationProto.newSystemAvailableFeature)
  return _impl_.newsystemavailablefeature_;
}

// optional int32 screenLayout2 = 27;
inline bool DeviceConfigurationProto::_internal_has_screenlayout2() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_screenlayout2() const {
  return _internal_has_screenlayout2();
}
inline void DeviceConfigurationProto::clear_screenlayout2() {
  _impl_.screenlayout2_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t DeviceConfigurationProto::_internal_screenlayout2() const {
  return _impl_.screenlayout2_;
}
inline int32_t DeviceConfigurationProto::screenlayout2() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.screenLayout2)
  return _internal_screenlayout2();
}
inline void DeviceConfigurationProto::_internal_set_screenlayout2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.screenlayout2_ = value;
}
inline void DeviceConfigurationProto::set_screenlayout2(int32_t value) {
  _internal_set_screenlayout2(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.screenLayout2)
}

// optional bool keyguardDeviceSecure = 28;
inline bool DeviceConfigurationProto::_internal_has_keyguarddevicesecure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DeviceConfigurationProto::has_keyguarddevicesecure() const {
  return _internal_has_keyguarddevicesecure();
}
inline void DeviceConfigurationProto::clear_keyguarddevicesecure() {
  _impl_.keyguarddevicesecure_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool DeviceConfigurationProto::_internal_keyguarddevicesecure() const {
  return _impl_.keyguarddevicesecure_;
}
inline bool DeviceConfigurationProto::keyguarddevicesecure() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.DeviceConfigurationProto.keyguardDeviceSecure)
  return _internal_keyguarddevicesecure();
}
inline void DeviceConfigurationProto::_internal_set_keyguarddevicesecure(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.keyguarddevicesecure_ = value;
}
inline void DeviceConfigurationProto::set_keyguarddevicesecure(bool value) {
  _internal_set_keyguarddevicesecure(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.DeviceConfigurationProto.keyguardDeviceSecure)
}

// -------------------------------------------------------------------

// AndroidBuildProto_PackageVersion

// optional int32 version = 1;
inline bool AndroidBuildProto_PackageVersion::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidBuildProto_PackageVersion::has_version() const {
  return _internal_has_version();
}
inline void AndroidBuildProto_PackageVersion::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t AndroidBuildProto_PackageVersion::_internal_version() const {
  return _impl_.version_;
}
inline int32_t AndroidBuildProto_PackageVersion::version() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.PackageVersion.version)
  return _internal_version();
}
inline void AndroidBuildProto_PackageVersion::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}
inline void AndroidBuildProto_PackageVersion::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.PackageVersion.version)
}

// optional string name = 2;
inline bool AndroidBuildProto_PackageVersion::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidBuildProto_PackageVersion::has_name() const {
  return _internal_has_name();
}
inline void AndroidBuildProto_PackageVersion::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidBuildProto_PackageVersion::name() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.PackageVersion.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto_PackageVersion::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.PackageVersion.name)
}
inline std::string* AndroidBuildProto_PackageVersion::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.PackageVersion.name)
  return _s;
}
inline const std::string& AndroidBuildProto_PackageVersion::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AndroidBuildProto_PackageVersion::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto_PackageVersion::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto_PackageVersion::release_name() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.PackageVersion.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto_PackageVersion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.PackageVersion.name)
}

// -------------------------------------------------------------------

// AndroidBuildProto

// optional string id = 1;
inline bool AndroidBuildProto::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_id() const {
  return _internal_has_id();
}
inline void AndroidBuildProto::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidBuildProto::id() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.id)
}
inline std::string* AndroidBuildProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.id)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AndroidBuildProto::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_id() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.id)
}

// optional string product = 2;
inline bool AndroidBuildProto::_internal_has_product() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_product() const {
  return _internal_has_product();
}
inline void AndroidBuildProto::clear_product() {
  _impl_.product_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidBuildProto::product() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_product(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.product_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.product)
}
inline std::string* AndroidBuildProto::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.product)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_product() const {
  return _impl_.product_.Get();
}
inline void AndroidBuildProto::_internal_set_product(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.product_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_product() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.product_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_product() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.product)
  if (!_internal_has_product()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.product_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_.IsDefault()) {
    _impl_.product_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.product_.SetAllocated(product, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_.IsDefault()) {
    _impl_.product_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.product)
}

// optional string carrier = 3;
inline bool AndroidBuildProto::_internal_has_carrier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_carrier() const {
  return _internal_has_carrier();
}
inline void AndroidBuildProto::clear_carrier() {
  _impl_.carrier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidBuildProto::carrier() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.carrier)
  return _internal_carrier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_carrier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.carrier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.carrier)
}
inline std::string* AndroidBuildProto::mutable_carrier() {
  std::string* _s = _internal_mutable_carrier();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.carrier)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_carrier() const {
  return _impl_.carrier_.Get();
}
inline void AndroidBuildProto::_internal_set_carrier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.carrier_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_carrier() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.carrier_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_carrier() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.carrier)
  if (!_internal_has_carrier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.carrier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.carrier_.IsDefault()) {
    _impl_.carrier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_carrier(std::string* carrier) {
  if (carrier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.carrier_.SetAllocated(carrier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.carrier_.IsDefault()) {
    _impl_.carrier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.carrier)
}

// optional string radio = 4;
inline bool AndroidBuildProto::_internal_has_radio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_radio() const {
  return _internal_has_radio();
}
inline void AndroidBuildProto::clear_radio() {
  _impl_.radio_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AndroidBuildProto::radio() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.radio)
  return _internal_radio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_radio(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.radio_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.radio)
}
inline std::string* AndroidBuildProto::mutable_radio() {
  std::string* _s = _internal_mutable_radio();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.radio)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_radio() const {
  return _impl_.radio_.Get();
}
inline void AndroidBuildProto::_internal_set_radio(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.radio_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_radio() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.radio_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_radio() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.radio)
  if (!_internal_has_radio()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.radio_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radio_.IsDefault()) {
    _impl_.radio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_radio(std::string* radio) {
  if (radio != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.radio_.SetAllocated(radio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radio_.IsDefault()) {
    _impl_.radio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.radio)
}

// optional string bootloader = 5;
inline bool AndroidBuildProto::_internal_has_bootloader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_bootloader() const {
  return _internal_has_bootloader();
}
inline void AndroidBuildProto::clear_bootloader() {
  _impl_.bootloader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AndroidBuildProto::bootloader() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.bootloader)
  return _internal_bootloader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_bootloader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.bootloader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.bootloader)
}
inline std::string* AndroidBuildProto::mutable_bootloader() {
  std::string* _s = _internal_mutable_bootloader();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.bootloader)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_bootloader() const {
  return _impl_.bootloader_.Get();
}
inline void AndroidBuildProto::_internal_set_bootloader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bootloader_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_bootloader() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.bootloader_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_bootloader() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.bootloader)
  if (!_internal_has_bootloader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.bootloader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bootloader_.IsDefault()) {
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_bootloader(std::string* bootloader) {
  if (bootloader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bootloader_.SetAllocated(bootloader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bootloader_.IsDefault()) {
    _impl_.bootloader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.bootloader)
}

// optional string client = 6;
inline bool AndroidBuildProto::_internal_has_client() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_client() const {
  return _internal_has_client();
}
inline void AndroidBuildProto::clear_client() {
  _impl_.client_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AndroidBuildProto::client() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.client)
  return _internal_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_client(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.client_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.client)
}
inline std::string* AndroidBuildProto::mutable_client() {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.client)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_client() const {
  return _impl_.client_.Get();
}
inline void AndroidBuildProto::_internal_set_client(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.client_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_client() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.client_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_client() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.client)
  if (!_internal_has_client()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.client_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_client(std::string* client) {
  if (client != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.client_.SetAllocated(client, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.client)
}

// optional int64 timestamp = 7;
inline bool AndroidBuildProto::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void AndroidBuildProto::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int64_t AndroidBuildProto::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t AndroidBuildProto::timestamp() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.timestamp)
  return _internal_timestamp();
}
inline void AndroidBuildProto::_internal_set_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.timestamp_ = value;
}
inline void AndroidBuildProto::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.timestamp)
}

// optional int32 googleServices = 8;
inline bool AndroidBuildProto::_internal_has_googleservices() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_googleservices() const {
  return _internal_has_googleservices();
}
inline void AndroidBuildProto::clear_googleservices() {
  _impl_.googleservices_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t AndroidBuildProto::_internal_googleservices() const {
  return _impl_.googleservices_;
}
inline int32_t AndroidBuildProto::googleservices() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.googleServices)
  return _internal_googleservices();
}
inline void AndroidBuildProto::_internal_set_googleservices(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.googleservices_ = value;
}
inline void AndroidBuildProto::set_googleservices(int32_t value) {
  _internal_set_googleservices(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.googleServices)
}

// optional string device = 9;
inline bool AndroidBuildProto::_internal_has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_device() const {
  return _internal_has_device();
}
inline void AndroidBuildProto::clear_device() {
  _impl_.device_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AndroidBuildProto::device() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.device)
  return _internal_device();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_device(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.device_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.device)
}
inline std::string* AndroidBuildProto::mutable_device() {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.device)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_device() const {
  return _impl_.device_.Get();
}
inline void AndroidBuildProto::_internal_set_device(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.device_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_device() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.device_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_device() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.device)
  if (!_internal_has_device()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.device_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_.IsDefault()) {
    _impl_.device_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.device_.SetAllocated(device, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_.IsDefault()) {
    _impl_.device_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.device)
}

// optional int32 sdkVersion = 10;
inline bool AndroidBuildProto::_internal_has_sdkversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_sdkversion() const {
  return _internal_has_sdkversion();
}
inline void AndroidBuildProto::clear_sdkversion() {
  _impl_.sdkversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t AndroidBuildProto::_internal_sdkversion() const {
  return _impl_.sdkversion_;
}
inline int32_t AndroidBuildProto::sdkversion() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.sdkVersion)
  return _internal_sdkversion();
}
inline void AndroidBuildProto::_internal_set_sdkversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.sdkversion_ = value;
}
inline void AndroidBuildProto::set_sdkversion(int32_t value) {
  _internal_set_sdkversion(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.sdkVersion)
}

// optional string model = 11;
inline bool AndroidBuildProto::_internal_has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_model() const {
  return _internal_has_model();
}
inline void AndroidBuildProto::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AndroidBuildProto::model() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_model(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.model)
}
inline std::string* AndroidBuildProto::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.model)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_model() const {
  return _impl_.model_.Get();
}
inline void AndroidBuildProto::_internal_set_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_model() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_model() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.model)
}

// optional string manufacturer = 12;
inline bool AndroidBuildProto::_internal_has_manufacturer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_manufacturer() const {
  return _internal_has_manufacturer();
}
inline void AndroidBuildProto::clear_manufacturer() {
  _impl_.manufacturer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& AndroidBuildProto::manufacturer() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.manufacturer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.manufacturer)
}
inline std::string* AndroidBuildProto::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.manufacturer)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_manufacturer() const {
  return _impl_.manufacturer_.Get();
}
inline void AndroidBuildProto::_internal_set_manufacturer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_manufacturer() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.manufacturer_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_manufacturer() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.manufacturer)
  if (!_internal_has_manufacturer()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.manufacturer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manufacturer_.IsDefault()) {
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.manufacturer_.SetAllocated(manufacturer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manufacturer_.IsDefault()) {
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.manufacturer)
}

// optional string buildProduct = 13;
inline bool AndroidBuildProto::_internal_has_buildproduct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_buildproduct() const {
  return _internal_has_buildproduct();
}
inline void AndroidBuildProto::clear_buildproduct() {
  _impl_.buildproduct_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& AndroidBuildProto::buildproduct() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.buildProduct)
  return _internal_buildproduct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_buildproduct(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.buildproduct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.buildProduct)
}
inline std::string* AndroidBuildProto::mutable_buildproduct() {
  std::string* _s = _internal_mutable_buildproduct();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.buildProduct)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_buildproduct() const {
  return _impl_.buildproduct_.Get();
}
inline void AndroidBuildProto::_internal_set_buildproduct(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.buildproduct_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_buildproduct() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.buildproduct_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_buildproduct() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.buildProduct)
  if (!_internal_has_buildproduct()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.buildproduct_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buildproduct_.IsDefault()) {
    _impl_.buildproduct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_buildproduct(std::string* buildproduct) {
  if (buildproduct != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.buildproduct_.SetAllocated(buildproduct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buildproduct_.IsDefault()) {
    _impl_.buildproduct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.buildProduct)
}

// optional bool otaInstalled = 14;
inline bool AndroidBuildProto::_internal_has_otainstalled() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_otainstalled() const {
  return _internal_has_otainstalled();
}
inline void AndroidBuildProto::clear_otainstalled() {
  _impl_.otainstalled_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool AndroidBuildProto::_internal_otainstalled() const {
  return _impl_.otainstalled_;
}
inline bool AndroidBuildProto::otainstalled() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.otaInstalled)
  return _internal_otainstalled();
}
inline void AndroidBuildProto::_internal_set_otainstalled(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.otainstalled_ = value;
}
inline void AndroidBuildProto::set_otainstalled(bool value) {
  _internal_set_otainstalled(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.otaInstalled)
}

// repeated .playapi.proto.gsf.AndroidBuildProto.PackageVersion googlePackage = 15;
inline int AndroidBuildProto::_internal_googlepackage_size() const {
  return _impl_.googlepackage_.size();
}
inline int AndroidBuildProto::googlepackage_size() const {
  return _internal_googlepackage_size();
}
inline void AndroidBuildProto::clear_googlepackage() {
  _impl_.googlepackage_.Clear();
}
inline ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* AndroidBuildProto::mutable_googlepackage(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.googlePackage)
  return _impl_.googlepackage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion >*
AndroidBuildProto::mutable_googlepackage() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidBuildProto.googlePackage)
  return &_impl_.googlepackage_;
}
inline const ::playapi::proto::gsf::AndroidBuildProto_PackageVersion& AndroidBuildProto::_internal_googlepackage(int index) const {
  return _impl_.googlepackage_.Get(index);
}
inline const ::playapi::proto::gsf::AndroidBuildProto_PackageVersion& AndroidBuildProto::googlepackage(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.googlePackage)
  return _internal_googlepackage(index);
}
inline ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* AndroidBuildProto::_internal_add_googlepackage() {
  return _impl_.googlepackage_.Add();
}
inline ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* AndroidBuildProto::add_googlepackage() {
  ::playapi::proto::gsf::AndroidBuildProto_PackageVersion* _add = _internal_add_googlepackage();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidBuildProto.googlePackage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidBuildProto_PackageVersion >&
AndroidBuildProto::googlepackage() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidBuildProto.googlePackage)
  return _impl_.googlepackage_;
}

// optional string securityPatch = 19;
inline bool AndroidBuildProto::_internal_has_securitypatch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AndroidBuildProto::has_securitypatch() const {
  return _internal_has_securitypatch();
}
inline void AndroidBuildProto::clear_securitypatch() {
  _impl_.securitypatch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& AndroidBuildProto::securitypatch() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidBuildProto.securityPatch)
  return _internal_securitypatch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidBuildProto::set_securitypatch(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000400u;
 _impl_.securitypatch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidBuildProto.securityPatch)
}
inline std::string* AndroidBuildProto::mutable_securitypatch() {
  std::string* _s = _internal_mutable_securitypatch();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidBuildProto.securityPatch)
  return _s;
}
inline const std::string& AndroidBuildProto::_internal_securitypatch() const {
  return _impl_.securitypatch_.Get();
}
inline void AndroidBuildProto::_internal_set_securitypatch(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.securitypatch_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::_internal_mutable_securitypatch() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.securitypatch_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidBuildProto::release_securitypatch() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidBuildProto.securityPatch)
  if (!_internal_has_securitypatch()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* p = _impl_.securitypatch_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitypatch_.IsDefault()) {
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidBuildProto::set_allocated_securitypatch(std::string* securitypatch) {
  if (securitypatch != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.securitypatch_.SetAllocated(securitypatch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitypatch_.IsDefault()) {
    _impl_.securitypatch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidBuildProto.securityPatch)
}

// -------------------------------------------------------------------

// AndroidCheckinReasonProto

// optional int32 reasonType = 1;
inline bool AndroidCheckinReasonProto::_internal_has_reasontype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinReasonProto::has_reasontype() const {
  return _internal_has_reasontype();
}
inline void AndroidCheckinReasonProto::clear_reasontype() {
  _impl_.reasontype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AndroidCheckinReasonProto::_internal_reasontype() const {
  return _impl_.reasontype_;
}
inline int32_t AndroidCheckinReasonProto::reasontype() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinReasonProto.reasonType)
  return _internal_reasontype();
}
inline void AndroidCheckinReasonProto::_internal_set_reasontype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reasontype_ = value;
}
inline void AndroidCheckinReasonProto::set_reasontype(int32_t value) {
  _internal_set_reasontype(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinReasonProto.reasonType)
}

// optional int32 attemptCount = 2;
inline bool AndroidCheckinReasonProto::_internal_has_attemptcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidCheckinReasonProto::has_attemptcount() const {
  return _internal_has_attemptcount();
}
inline void AndroidCheckinReasonProto::clear_attemptcount() {
  _impl_.attemptcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t AndroidCheckinReasonProto::_internal_attemptcount() const {
  return _impl_.attemptcount_;
}
inline int32_t AndroidCheckinReasonProto::attemptcount() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinReasonProto.attemptCount)
  return _internal_attemptcount();
}
inline void AndroidCheckinReasonProto::_internal_set_attemptcount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.attemptcount_ = value;
}
inline void AndroidCheckinReasonProto::set_attemptcount(int32_t value) {
  _internal_set_attemptcount(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinReasonProto.attemptCount)
}

// optional string sourcePackage = 3;
inline bool AndroidCheckinReasonProto::_internal_has_sourcepackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinReasonProto::has_sourcepackage() const {
  return _internal_has_sourcepackage();
}
inline void AndroidCheckinReasonProto::clear_sourcepackage() {
  _impl_.sourcepackage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinReasonProto::sourcepackage() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage)
  return _internal_sourcepackage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinReasonProto::set_sourcepackage(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sourcepackage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage)
}
inline std::string* AndroidCheckinReasonProto::mutable_sourcepackage() {
  std::string* _s = _internal_mutable_sourcepackage();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage)
  return _s;
}
inline const std::string& AndroidCheckinReasonProto::_internal_sourcepackage() const {
  return _impl_.sourcepackage_.Get();
}
inline void AndroidCheckinReasonProto::_internal_set_sourcepackage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sourcepackage_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinReasonProto::_internal_mutable_sourcepackage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sourcepackage_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinReasonProto::release_sourcepackage() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage)
  if (!_internal_has_sourcepackage()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sourcepackage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourcepackage_.IsDefault()) {
    _impl_.sourcepackage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinReasonProto::set_allocated_sourcepackage(std::string* sourcepackage) {
  if (sourcepackage != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sourcepackage_.SetAllocated(sourcepackage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourcepackage_.IsDefault()) {
    _impl_.sourcepackage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinReasonProto.sourcePackage)
}

// optional string sourceClass = 4;
inline bool AndroidCheckinReasonProto::_internal_has_sourceclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinReasonProto::has_sourceclass() const {
  return _internal_has_sourceclass();
}
inline void AndroidCheckinReasonProto::clear_sourceclass() {
  _impl_.sourceclass_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinReasonProto::sourceclass() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass)
  return _internal_sourceclass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinReasonProto::set_sourceclass(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sourceclass_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass)
}
inline std::string* AndroidCheckinReasonProto::mutable_sourceclass() {
  std::string* _s = _internal_mutable_sourceclass();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass)
  return _s;
}
inline const std::string& AndroidCheckinReasonProto::_internal_sourceclass() const {
  return _impl_.sourceclass_.Get();
}
inline void AndroidCheckinReasonProto::_internal_set_sourceclass(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sourceclass_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinReasonProto::_internal_mutable_sourceclass() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sourceclass_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinReasonProto::release_sourceclass() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass)
  if (!_internal_has_sourceclass()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sourceclass_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourceclass_.IsDefault()) {
    _impl_.sourceclass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinReasonProto::set_allocated_sourceclass(std::string* sourceclass) {
  if (sourceclass != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sourceclass_.SetAllocated(sourceclass, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourceclass_.IsDefault()) {
    _impl_.sourceclass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinReasonProto.sourceClass)
}

// optional bool sourceForce = 5;
inline bool AndroidCheckinReasonProto::_internal_has_sourceforce() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidCheckinReasonProto::has_sourceforce() const {
  return _internal_has_sourceforce();
}
inline void AndroidCheckinReasonProto::clear_sourceforce() {
  _impl_.sourceforce_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool AndroidCheckinReasonProto::_internal_sourceforce() const {
  return _impl_.sourceforce_;
}
inline bool AndroidCheckinReasonProto::sourceforce() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinReasonProto.sourceForce)
  return _internal_sourceforce();
}
inline void AndroidCheckinReasonProto::_internal_set_sourceforce(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sourceforce_ = value;
}
inline void AndroidCheckinReasonProto::set_sourceforce(bool value) {
  _internal_set_sourceforce(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinReasonProto.sourceForce)
}

// -------------------------------------------------------------------

// AndroidCheckinProto

// optional .playapi.proto.gsf.AndroidBuildProto build = 1;
inline bool AndroidCheckinProto::_internal_has_build() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.build_ != nullptr);
  return value;
}
inline bool AndroidCheckinProto::has_build() const {
  return _internal_has_build();
}
inline void AndroidCheckinProto::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::playapi::proto::gsf::AndroidBuildProto& AndroidCheckinProto::_internal_build() const {
  const ::playapi::proto::gsf::AndroidBuildProto* p = _impl_.build_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::gsf::AndroidBuildProto&>(
      ::playapi::proto::gsf::_AndroidBuildProto_default_instance_);
}
inline const ::playapi::proto::gsf::AndroidBuildProto& AndroidCheckinProto::build() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.build)
  return _internal_build();
}
inline void AndroidCheckinProto::unsafe_arena_set_allocated_build(
    ::playapi::proto::gsf::AndroidBuildProto* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  _impl_.build_ = build;
  if (build) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.gsf.AndroidCheckinProto.build)
}
inline ::playapi::proto::gsf::AndroidBuildProto* AndroidCheckinProto::release_build() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::gsf::AndroidBuildProto* temp = _impl_.build_;
  _impl_.build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::gsf::AndroidBuildProto* AndroidCheckinProto::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinProto.build)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::gsf::AndroidBuildProto* temp = _impl_.build_;
  _impl_.build_ = nullptr;
  return temp;
}
inline ::playapi::proto::gsf::AndroidBuildProto* AndroidCheckinProto::_internal_mutable_build() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.build_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::gsf::AndroidBuildProto>(GetArenaForAllocation());
    _impl_.build_ = p;
  }
  return _impl_.build_;
}
inline ::playapi::proto::gsf::AndroidBuildProto* AndroidCheckinProto::mutable_build() {
  ::playapi::proto::gsf::AndroidBuildProto* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.build)
  return _msg;
}
inline void AndroidCheckinProto::set_allocated_build(::playapi::proto::gsf::AndroidBuildProto* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.build_;
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(build);
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.build_ = build;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinProto.build)
}

// optional int64 lastCheckinMsec = 2;
inline bool AndroidCheckinProto::_internal_has_lastcheckinmsec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_lastcheckinmsec() const {
  return _internal_has_lastcheckinmsec();
}
inline void AndroidCheckinProto::clear_lastcheckinmsec() {
  _impl_.lastcheckinmsec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t AndroidCheckinProto::_internal_lastcheckinmsec() const {
  return _impl_.lastcheckinmsec_;
}
inline int64_t AndroidCheckinProto::lastcheckinmsec() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.lastCheckinMsec)
  return _internal_lastcheckinmsec();
}
inline void AndroidCheckinProto::_internal_set_lastcheckinmsec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lastcheckinmsec_ = value;
}
inline void AndroidCheckinProto::set_lastcheckinmsec(int64_t value) {
  _internal_set_lastcheckinmsec(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.lastCheckinMsec)
}

// repeated .playapi.proto.gsf.AndroidEventProto event = 3;
inline int AndroidCheckinProto::_internal_event_size() const {
  return _impl_.event_.size();
}
inline int AndroidCheckinProto::event_size() const {
  return _internal_event_size();
}
inline void AndroidCheckinProto::clear_event() {
  _impl_.event_.Clear();
}
inline ::playapi::proto::gsf::AndroidEventProto* AndroidCheckinProto::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.event)
  return _impl_.event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidEventProto >*
AndroidCheckinProto::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinProto.event)
  return &_impl_.event_;
}
inline const ::playapi::proto::gsf::AndroidEventProto& AndroidCheckinProto::_internal_event(int index) const {
  return _impl_.event_.Get(index);
}
inline const ::playapi::proto::gsf::AndroidEventProto& AndroidCheckinProto::event(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.event)
  return _internal_event(index);
}
inline ::playapi::proto::gsf::AndroidEventProto* AndroidCheckinProto::_internal_add_event() {
  return _impl_.event_.Add();
}
inline ::playapi::proto::gsf::AndroidEventProto* AndroidCheckinProto::add_event() {
  ::playapi::proto::gsf::AndroidEventProto* _add = _internal_add_event();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinProto.event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidEventProto >&
AndroidCheckinProto::event() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinProto.event)
  return _impl_.event_;
}

// repeated .playapi.proto.gsf.AndroidStatisticProto stat = 4;
inline int AndroidCheckinProto::_internal_stat_size() const {
  return _impl_.stat_.size();
}
inline int AndroidCheckinProto::stat_size() const {
  return _internal_stat_size();
}
inline void AndroidCheckinProto::clear_stat() {
  _impl_.stat_.Clear();
}
inline ::playapi::proto::gsf::AndroidStatisticProto* AndroidCheckinProto::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.stat)
  return _impl_.stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidStatisticProto >*
AndroidCheckinProto::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinProto.stat)
  return &_impl_.stat_;
}
inline const ::playapi::proto::gsf::AndroidStatisticProto& AndroidCheckinProto::_internal_stat(int index) const {
  return _impl_.stat_.Get(index);
}
inline const ::playapi::proto::gsf::AndroidStatisticProto& AndroidCheckinProto::stat(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.stat)
  return _internal_stat(index);
}
inline ::playapi::proto::gsf::AndroidStatisticProto* AndroidCheckinProto::_internal_add_stat() {
  return _impl_.stat_.Add();
}
inline ::playapi::proto::gsf::AndroidStatisticProto* AndroidCheckinProto::add_stat() {
  ::playapi::proto::gsf::AndroidStatisticProto* _add = _internal_add_stat();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinProto.stat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidStatisticProto >&
AndroidCheckinProto::stat() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinProto.stat)
  return _impl_.stat_;
}

// repeated string requestedGroup = 5;
inline int AndroidCheckinProto::_internal_requestedgroup_size() const {
  return _impl_.requestedgroup_.size();
}
inline int AndroidCheckinProto::requestedgroup_size() const {
  return _internal_requestedgroup_size();
}
inline void AndroidCheckinProto::clear_requestedgroup() {
  _impl_.requestedgroup_.Clear();
}
inline std::string* AndroidCheckinProto::add_requestedgroup() {
  std::string* _s = _internal_add_requestedgroup();
  // @@protoc_insertion_point(field_add_mutable:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
  return _s;
}
inline const std::string& AndroidCheckinProto::_internal_requestedgroup(int index) const {
  return _impl_.requestedgroup_.Get(index);
}
inline const std::string& AndroidCheckinProto::requestedgroup(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
  return _internal_requestedgroup(index);
}
inline std::string* AndroidCheckinProto::mutable_requestedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
  return _impl_.requestedgroup_.Mutable(index);
}
inline void AndroidCheckinProto::set_requestedgroup(int index, const std::string& value) {
  _impl_.requestedgroup_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline void AndroidCheckinProto::set_requestedgroup(int index, std::string&& value) {
  _impl_.requestedgroup_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline void AndroidCheckinProto::set_requestedgroup(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.requestedgroup_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline void AndroidCheckinProto::set_requestedgroup(int index, const char* value, size_t size) {
  _impl_.requestedgroup_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline std::string* AndroidCheckinProto::_internal_add_requestedgroup() {
  return _impl_.requestedgroup_.Add();
}
inline void AndroidCheckinProto::add_requestedgroup(const std::string& value) {
  _impl_.requestedgroup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline void AndroidCheckinProto::add_requestedgroup(std::string&& value) {
  _impl_.requestedgroup_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline void AndroidCheckinProto::add_requestedgroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.requestedgroup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline void AndroidCheckinProto::add_requestedgroup(const char* value, size_t size) {
  _impl_.requestedgroup_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidCheckinProto::requestedgroup() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
  return _impl_.requestedgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidCheckinProto::mutable_requestedgroup() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidCheckinProto.requestedGroup)
  return &_impl_.requestedgroup_;
}

// optional string cellOperator = 6;
inline bool AndroidCheckinProto::_internal_has_celloperator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_celloperator() const {
  return _internal_has_celloperator();
}
inline void AndroidCheckinProto::clear_celloperator() {
  _impl_.celloperator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinProto::celloperator() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.cellOperator)
  return _internal_celloperator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinProto::set_celloperator(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.celloperator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.cellOperator)
}
inline std::string* AndroidCheckinProto::mutable_celloperator() {
  std::string* _s = _internal_mutable_celloperator();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.cellOperator)
  return _s;
}
inline const std::string& AndroidCheckinProto::_internal_celloperator() const {
  return _impl_.celloperator_.Get();
}
inline void AndroidCheckinProto::_internal_set_celloperator(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.celloperator_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinProto::_internal_mutable_celloperator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.celloperator_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinProto::release_celloperator() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinProto.cellOperator)
  if (!_internal_has_celloperator()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.celloperator_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.celloperator_.IsDefault()) {
    _impl_.celloperator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinProto::set_allocated_celloperator(std::string* celloperator) {
  if (celloperator != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.celloperator_.SetAllocated(celloperator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.celloperator_.IsDefault()) {
    _impl_.celloperator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinProto.cellOperator)
}

// optional string simOperator = 7;
inline bool AndroidCheckinProto::_internal_has_simoperator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_simoperator() const {
  return _internal_has_simoperator();
}
inline void AndroidCheckinProto::clear_simoperator() {
  _impl_.simoperator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinProto::simoperator() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.simOperator)
  return _internal_simoperator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinProto::set_simoperator(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.simoperator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.simOperator)
}
inline std::string* AndroidCheckinProto::mutable_simoperator() {
  std::string* _s = _internal_mutable_simoperator();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.simOperator)
  return _s;
}
inline const std::string& AndroidCheckinProto::_internal_simoperator() const {
  return _impl_.simoperator_.Get();
}
inline void AndroidCheckinProto::_internal_set_simoperator(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.simoperator_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinProto::_internal_mutable_simoperator() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.simoperator_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinProto::release_simoperator() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinProto.simOperator)
  if (!_internal_has_simoperator()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.simoperator_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.simoperator_.IsDefault()) {
    _impl_.simoperator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinProto::set_allocated_simoperator(std::string* simoperator) {
  if (simoperator != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.simoperator_.SetAllocated(simoperator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.simoperator_.IsDefault()) {
    _impl_.simoperator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinProto.simOperator)
}

// optional string roaming = 8;
inline bool AndroidCheckinProto::_internal_has_roaming() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_roaming() const {
  return _internal_has_roaming();
}
inline void AndroidCheckinProto::clear_roaming() {
  _impl_.roaming_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidCheckinProto::roaming() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.roaming)
  return _internal_roaming();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidCheckinProto::set_roaming(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.roaming_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.roaming)
}
inline std::string* AndroidCheckinProto::mutable_roaming() {
  std::string* _s = _internal_mutable_roaming();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.roaming)
  return _s;
}
inline const std::string& AndroidCheckinProto::_internal_roaming() const {
  return _impl_.roaming_.Get();
}
inline void AndroidCheckinProto::_internal_set_roaming(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.roaming_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidCheckinProto::_internal_mutable_roaming() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.roaming_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidCheckinProto::release_roaming() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinProto.roaming)
  if (!_internal_has_roaming()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.roaming_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roaming_.IsDefault()) {
    _impl_.roaming_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidCheckinProto::set_allocated_roaming(std::string* roaming) {
  if (roaming != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.roaming_.SetAllocated(roaming, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roaming_.IsDefault()) {
    _impl_.roaming_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinProto.roaming)
}

// optional int32 userNumber = 9;
inline bool AndroidCheckinProto::_internal_has_usernumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_usernumber() const {
  return _internal_has_usernumber();
}
inline void AndroidCheckinProto::clear_usernumber() {
  _impl_.usernumber_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t AndroidCheckinProto::_internal_usernumber() const {
  return _impl_.usernumber_;
}
inline int32_t AndroidCheckinProto::usernumber() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.userNumber)
  return _internal_usernumber();
}
inline void AndroidCheckinProto::_internal_set_usernumber(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.usernumber_ = value;
}
inline void AndroidCheckinProto::set_usernumber(int32_t value) {
  _internal_set_usernumber(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.userNumber)
}

// optional int32 deviceType = 14;
inline bool AndroidCheckinProto::_internal_has_devicetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_devicetype() const {
  return _internal_has_devicetype();
}
inline void AndroidCheckinProto::clear_devicetype() {
  _impl_.devicetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t AndroidCheckinProto::_internal_devicetype() const {
  return _impl_.devicetype_;
}
inline int32_t AndroidCheckinProto::devicetype() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.deviceType)
  return _internal_devicetype();
}
inline void AndroidCheckinProto::_internal_set_devicetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.devicetype_ = value;
}
inline void AndroidCheckinProto::set_devicetype(int32_t value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.deviceType)
}

// optional .playapi.proto.gsf.AndroidCheckinReasonProto reason = 15;
inline bool AndroidCheckinProto::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reason_ != nullptr);
  return value;
}
inline bool AndroidCheckinProto::has_reason() const {
  return _internal_has_reason();
}
inline void AndroidCheckinProto::clear_reason() {
  if (_impl_.reason_ != nullptr) _impl_.reason_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::playapi::proto::gsf::AndroidCheckinReasonProto& AndroidCheckinProto::_internal_reason() const {
  const ::playapi::proto::gsf::AndroidCheckinReasonProto* p = _impl_.reason_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::gsf::AndroidCheckinReasonProto&>(
      ::playapi::proto::gsf::_AndroidCheckinReasonProto_default_instance_);
}
inline const ::playapi::proto::gsf::AndroidCheckinReasonProto& AndroidCheckinProto::reason() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.reason)
  return _internal_reason();
}
inline void AndroidCheckinProto::unsafe_arena_set_allocated_reason(
    ::playapi::proto::gsf::AndroidCheckinReasonProto* reason) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reason_);
  }
  _impl_.reason_ = reason;
  if (reason) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.gsf.AndroidCheckinProto.reason)
}
inline ::playapi::proto::gsf::AndroidCheckinReasonProto* AndroidCheckinProto::release_reason() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::gsf::AndroidCheckinReasonProto* temp = _impl_.reason_;
  _impl_.reason_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::gsf::AndroidCheckinReasonProto* AndroidCheckinProto::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidCheckinProto.reason)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::gsf::AndroidCheckinReasonProto* temp = _impl_.reason_;
  _impl_.reason_ = nullptr;
  return temp;
}
inline ::playapi::proto::gsf::AndroidCheckinReasonProto* AndroidCheckinProto::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.reason_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::gsf::AndroidCheckinReasonProto>(GetArenaForAllocation());
    _impl_.reason_ = p;
  }
  return _impl_.reason_;
}
inline ::playapi::proto::gsf::AndroidCheckinReasonProto* AndroidCheckinProto::mutable_reason() {
  ::playapi::proto::gsf::AndroidCheckinReasonProto* _msg = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidCheckinProto.reason)
  return _msg;
}
inline void AndroidCheckinProto::set_allocated_reason(::playapi::proto::gsf::AndroidCheckinReasonProto* reason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reason_;
  }
  if (reason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reason);
    if (message_arena != submessage_arena) {
      reason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reason, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.reason_ = reason;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidCheckinProto.reason)
}

// optional bool voiceCapable = 18;
inline bool AndroidCheckinProto::_internal_has_voicecapable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AndroidCheckinProto::has_voicecapable() const {
  return _internal_has_voicecapable();
}
inline void AndroidCheckinProto::clear_voicecapable() {
  _impl_.voicecapable_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool AndroidCheckinProto::_internal_voicecapable() const {
  return _impl_.voicecapable_;
}
inline bool AndroidCheckinProto::voicecapable() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidCheckinProto.voiceCapable)
  return _internal_voicecapable();
}
inline void AndroidCheckinProto::_internal_set_voicecapable(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.voicecapable_ = value;
}
inline void AndroidCheckinProto::set_voicecapable(bool value) {
  _internal_set_voicecapable(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidCheckinProto.voiceCapable)
}

// -------------------------------------------------------------------

// AndroidEventProto

// optional string tag = 1;
inline bool AndroidEventProto::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidEventProto::has_tag() const {
  return _internal_has_tag();
}
inline void AndroidEventProto::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidEventProto::tag() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidEventProto.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidEventProto::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidEventProto.tag)
}
inline std::string* AndroidEventProto::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidEventProto.tag)
  return _s;
}
inline const std::string& AndroidEventProto::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void AndroidEventProto::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidEventProto::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidEventProto::release_tag() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidEventProto.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidEventProto::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidEventProto.tag)
}

// optional string value = 2;
inline bool AndroidEventProto::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidEventProto::has_value() const {
  return _internal_has_value();
}
inline void AndroidEventProto::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidEventProto::value() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidEventProto.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidEventProto::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidEventProto.value)
}
inline std::string* AndroidEventProto::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidEventProto.value)
  return _s;
}
inline const std::string& AndroidEventProto::_internal_value() const {
  return _impl_.value_.Get();
}
inline void AndroidEventProto::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidEventProto::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidEventProto::release_value() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidEventProto.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidEventProto::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidEventProto.value)
}

// optional int64 timeMsec = 3;
inline bool AndroidEventProto::_internal_has_timemsec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidEventProto::has_timemsec() const {
  return _internal_has_timemsec();
}
inline void AndroidEventProto::clear_timemsec() {
  _impl_.timemsec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AndroidEventProto::_internal_timemsec() const {
  return _impl_.timemsec_;
}
inline int64_t AndroidEventProto::timemsec() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidEventProto.timeMsec)
  return _internal_timemsec();
}
inline void AndroidEventProto::_internal_set_timemsec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timemsec_ = value;
}
inline void AndroidEventProto::set_timemsec(int64_t value) {
  _internal_set_timemsec(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidEventProto.timeMsec)
}

// -------------------------------------------------------------------

// AndroidIntentProto_Extra

// optional string name = 6;
inline bool AndroidIntentProto_Extra::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidIntentProto_Extra::has_name() const {
  return _internal_has_name();
}
inline void AndroidIntentProto_Extra::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidIntentProto_Extra::name() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.Extra.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidIntentProto_Extra::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidIntentProto.Extra.name)
}
inline std::string* AndroidIntentProto_Extra::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.Extra.name)
  return _s;
}
inline const std::string& AndroidIntentProto_Extra::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AndroidIntentProto_Extra::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidIntentProto_Extra::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidIntentProto_Extra::release_name() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidIntentProto.Extra.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidIntentProto_Extra::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidIntentProto.Extra.name)
}

// optional string value = 7;
inline bool AndroidIntentProto_Extra::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidIntentProto_Extra::has_value() const {
  return _internal_has_value();
}
inline void AndroidIntentProto_Extra::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidIntentProto_Extra::value() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.Extra.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidIntentProto_Extra::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidIntentProto.Extra.value)
}
inline std::string* AndroidIntentProto_Extra::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.Extra.value)
  return _s;
}
inline const std::string& AndroidIntentProto_Extra::_internal_value() const {
  return _impl_.value_.Get();
}
inline void AndroidIntentProto_Extra::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidIntentProto_Extra::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidIntentProto_Extra::release_value() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidIntentProto.Extra.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidIntentProto_Extra::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidIntentProto.Extra.value)
}

// -------------------------------------------------------------------

// AndroidIntentProto

// optional string action = 1;
inline bool AndroidIntentProto::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidIntentProto::has_action() const {
  return _internal_has_action();
}
inline void AndroidIntentProto::clear_action() {
  _impl_.action_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidIntentProto::action() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidIntentProto::set_action(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidIntentProto.action)
}
inline std::string* AndroidIntentProto::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.action)
  return _s;
}
inline const std::string& AndroidIntentProto::_internal_action() const {
  return _impl_.action_.Get();
}
inline void AndroidIntentProto::_internal_set_action(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::_internal_mutable_action() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::release_action() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidIntentProto.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.action_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidIntentProto::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidIntentProto.action)
}

// optional string dataUri = 2;
inline bool AndroidIntentProto::_internal_has_datauri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidIntentProto::has_datauri() const {
  return _internal_has_datauri();
}
inline void AndroidIntentProto::clear_datauri() {
  _impl_.datauri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidIntentProto::datauri() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.dataUri)
  return _internal_datauri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidIntentProto::set_datauri(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.datauri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidIntentProto.dataUri)
}
inline std::string* AndroidIntentProto::mutable_datauri() {
  std::string* _s = _internal_mutable_datauri();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.dataUri)
  return _s;
}
inline const std::string& AndroidIntentProto::_internal_datauri() const {
  return _impl_.datauri_.Get();
}
inline void AndroidIntentProto::_internal_set_datauri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.datauri_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::_internal_mutable_datauri() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.datauri_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::release_datauri() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidIntentProto.dataUri)
  if (!_internal_has_datauri()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.datauri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datauri_.IsDefault()) {
    _impl_.datauri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidIntentProto::set_allocated_datauri(std::string* datauri) {
  if (datauri != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.datauri_.SetAllocated(datauri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datauri_.IsDefault()) {
    _impl_.datauri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidIntentProto.dataUri)
}

// optional string mimeType = 3;
inline bool AndroidIntentProto::_internal_has_mimetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidIntentProto::has_mimetype() const {
  return _internal_has_mimetype();
}
inline void AndroidIntentProto::clear_mimetype() {
  _impl_.mimetype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidIntentProto::mimetype() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.mimeType)
  return _internal_mimetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidIntentProto::set_mimetype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.mimetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidIntentProto.mimeType)
}
inline std::string* AndroidIntentProto::mutable_mimetype() {
  std::string* _s = _internal_mutable_mimetype();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.mimeType)
  return _s;
}
inline const std::string& AndroidIntentProto::_internal_mimetype() const {
  return _impl_.mimetype_.Get();
}
inline void AndroidIntentProto::_internal_set_mimetype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mimetype_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::_internal_mutable_mimetype() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.mimetype_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::release_mimetype() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidIntentProto.mimeType)
  if (!_internal_has_mimetype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.mimetype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mimetype_.IsDefault()) {
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidIntentProto::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mimetype_.SetAllocated(mimetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mimetype_.IsDefault()) {
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidIntentProto.mimeType)
}

// optional string javaClass = 4;
inline bool AndroidIntentProto::_internal_has_javaclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidIntentProto::has_javaclass() const {
  return _internal_has_javaclass();
}
inline void AndroidIntentProto::clear_javaclass() {
  _impl_.javaclass_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AndroidIntentProto::javaclass() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.javaClass)
  return _internal_javaclass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidIntentProto::set_javaclass(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.javaclass_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidIntentProto.javaClass)
}
inline std::string* AndroidIntentProto::mutable_javaclass() {
  std::string* _s = _internal_mutable_javaclass();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.javaClass)
  return _s;
}
inline const std::string& AndroidIntentProto::_internal_javaclass() const {
  return _impl_.javaclass_.Get();
}
inline void AndroidIntentProto::_internal_set_javaclass(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.javaclass_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::_internal_mutable_javaclass() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.javaclass_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidIntentProto::release_javaclass() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidIntentProto.javaClass)
  if (!_internal_has_javaclass()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.javaclass_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.javaclass_.IsDefault()) {
    _impl_.javaclass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidIntentProto::set_allocated_javaclass(std::string* javaclass) {
  if (javaclass != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.javaclass_.SetAllocated(javaclass, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.javaclass_.IsDefault()) {
    _impl_.javaclass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidIntentProto.javaClass)
}

// repeated group Extra = 5 { ... };
inline int AndroidIntentProto::_internal_extra_size() const {
  return _impl_.extra_.size();
}
inline int AndroidIntentProto::extra_size() const {
  return _internal_extra_size();
}
inline void AndroidIntentProto::clear_extra() {
  _impl_.extra_.Clear();
}
inline ::playapi::proto::gsf::AndroidIntentProto_Extra* AndroidIntentProto::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidIntentProto.extra)
  return _impl_.extra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto_Extra >*
AndroidIntentProto::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.gsf.AndroidIntentProto.extra)
  return &_impl_.extra_;
}
inline const ::playapi::proto::gsf::AndroidIntentProto_Extra& AndroidIntentProto::_internal_extra(int index) const {
  return _impl_.extra_.Get(index);
}
inline const ::playapi::proto::gsf::AndroidIntentProto_Extra& AndroidIntentProto::extra(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidIntentProto.extra)
  return _internal_extra(index);
}
inline ::playapi::proto::gsf::AndroidIntentProto_Extra* AndroidIntentProto::_internal_add_extra() {
  return _impl_.extra_.Add();
}
inline ::playapi::proto::gsf::AndroidIntentProto_Extra* AndroidIntentProto::add_extra() {
  ::playapi::proto::gsf::AndroidIntentProto_Extra* _add = _internal_add_extra();
  // @@protoc_insertion_point(field_add:playapi.proto.gsf.AndroidIntentProto.extra)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::gsf::AndroidIntentProto_Extra >&
AndroidIntentProto::extra() const {
  // @@protoc_insertion_point(field_list:playapi.proto.gsf.AndroidIntentProto.extra)
  return _impl_.extra_;
}

// -------------------------------------------------------------------

// AndroidStatisticProto

// optional string tag = 1;
inline bool AndroidStatisticProto::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidStatisticProto::has_tag() const {
  return _internal_has_tag();
}
inline void AndroidStatisticProto::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidStatisticProto::tag() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidStatisticProto.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidStatisticProto::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidStatisticProto.tag)
}
inline std::string* AndroidStatisticProto::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:playapi.proto.gsf.AndroidStatisticProto.tag)
  return _s;
}
inline const std::string& AndroidStatisticProto::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void AndroidStatisticProto::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidStatisticProto::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidStatisticProto::release_tag() {
  // @@protoc_insertion_point(field_release:playapi.proto.gsf.AndroidStatisticProto.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidStatisticProto::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.gsf.AndroidStatisticProto.tag)
}

// optional int32 count = 2;
inline bool AndroidStatisticProto::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidStatisticProto::has_count() const {
  return _internal_has_count();
}
inline void AndroidStatisticProto::clear_count() {
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t AndroidStatisticProto::_internal_count() const {
  return _impl_.count_;
}
inline int32_t AndroidStatisticProto::count() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidStatisticProto.count)
  return _internal_count();
}
inline void AndroidStatisticProto::_internal_set_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.count_ = value;
}
inline void AndroidStatisticProto::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidStatisticProto.count)
}

// optional float sum = 3;
inline bool AndroidStatisticProto::_internal_has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidStatisticProto::has_sum() const {
  return _internal_has_sum();
}
inline void AndroidStatisticProto::clear_sum() {
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float AndroidStatisticProto::_internal_sum() const {
  return _impl_.sum_;
}
inline float AndroidStatisticProto::sum() const {
  // @@protoc_insertion_point(field_get:playapi.proto.gsf.AndroidStatisticProto.sum)
  return _internal_sum();
}
inline void AndroidStatisticProto::_internal_set_sum(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sum_ = value;
}
inline void AndroidStatisticProto::set_sum(float value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:playapi.proto.gsf.AndroidStatisticProto.sum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gsf
}  // namespace proto
}  // namespace playapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gsf_2eproto
