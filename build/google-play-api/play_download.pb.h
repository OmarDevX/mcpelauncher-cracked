// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_download.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_5fdownload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_5fdownload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "play_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_5fdownload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_5fdownload_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_5fdownload_2eproto;
namespace playapi {
namespace proto {
namespace finsky {
namespace download {
class AndroidAppDeliveryData;
struct AndroidAppDeliveryDataDefaultTypeInternal;
extern AndroidAppDeliveryDataDefaultTypeInternal _AndroidAppDeliveryData_default_instance_;
class AndroidAppPatchData;
struct AndroidAppPatchDataDefaultTypeInternal;
extern AndroidAppPatchDataDefaultTypeInternal _AndroidAppPatchData_default_instance_;
class AppFileMetadata;
struct AppFileMetadataDefaultTypeInternal;
extern AppFileMetadataDefaultTypeInternal _AppFileMetadata_default_instance_;
class DeliveryResponse;
struct DeliveryResponseDefaultTypeInternal;
extern DeliveryResponseDefaultTypeInternal _DeliveryResponse_default_instance_;
class Dependency;
struct DependencyDefaultTypeInternal;
extern DependencyDefaultTypeInternal _Dependency_default_instance_;
class EncryptionParams;
struct EncryptionParamsDefaultTypeInternal;
extern EncryptionParamsDefaultTypeInternal _EncryptionParams_default_instance_;
class FileMetadata;
struct FileMetadataDefaultTypeInternal;
extern FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
class Install;
struct InstallDefaultTypeInternal;
extern InstallDefaultTypeInternal _Install_default_instance_;
class InstallDetails;
struct InstallDetailsDefaultTypeInternal;
extern InstallDetailsDefaultTypeInternal _InstallDetails_default_instance_;
class PatchDetails;
struct PatchDetailsDefaultTypeInternal;
extern PatchDetailsDefaultTypeInternal _PatchDetails_default_instance_;
class SplitDeliveryData;
struct SplitDeliveryDataDefaultTypeInternal;
extern SplitDeliveryDataDefaultTypeInternal _SplitDeliveryData_default_instance_;
}  // namespace download
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> ::playapi::proto::finsky::download::AndroidAppDeliveryData* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::AndroidAppDeliveryData>(Arena*);
template<> ::playapi::proto::finsky::download::AndroidAppPatchData* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::AndroidAppPatchData>(Arena*);
template<> ::playapi::proto::finsky::download::AppFileMetadata* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::AppFileMetadata>(Arena*);
template<> ::playapi::proto::finsky::download::DeliveryResponse* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::DeliveryResponse>(Arena*);
template<> ::playapi::proto::finsky::download::Dependency* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::Dependency>(Arena*);
template<> ::playapi::proto::finsky::download::EncryptionParams* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::EncryptionParams>(Arena*);
template<> ::playapi::proto::finsky::download::FileMetadata* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::FileMetadata>(Arena*);
template<> ::playapi::proto::finsky::download::Install* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::Install>(Arena*);
template<> ::playapi::proto::finsky::download::InstallDetails* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::InstallDetails>(Arena*);
template<> ::playapi::proto::finsky::download::PatchDetails* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::PatchDetails>(Arena*);
template<> ::playapi::proto::finsky::download::SplitDeliveryData* Arena::CreateMaybeMessage<::playapi::proto::finsky::download::SplitDeliveryData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playapi {
namespace proto {
namespace finsky {
namespace download {

// ===================================================================

class Install final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.Install) */ {
 public:
  inline Install() : Install(nullptr) {}
  ~Install() override;
  explicit PROTOBUF_CONSTEXPR Install(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Install(const Install& from);
  Install(Install&& from) noexcept
    : Install() {
    *this = ::std::move(from);
  }

  inline Install& operator=(const Install& from) {
    CopyFrom(from);
    return *this;
  }
  inline Install& operator=(Install&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Install& default_instance() {
    return *internal_default_instance();
  }
  static inline const Install* internal_default_instance() {
    return reinterpret_cast<const Install*>(
               &_Install_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Install& a, Install& b) {
    a.Swap(&b);
  }
  inline void Swap(Install* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Install* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Install* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Install>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Install& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Install& from) {
    Install::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Install* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.Install";
  }
  protected:
  explicit Install(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAndroidIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kBundledFieldNumber = 3,
    kPendingFieldNumber = 4,
    kLastUpdateTimestampMillisFieldNumber = 5,
  };
  // optional fixed64 androidId = 1;
  bool has_androidid() const;
  private:
  bool _internal_has_androidid() const;
  public:
  void clear_androidid();
  uint64_t androidid() const;
  void set_androidid(uint64_t value);
  private:
  uint64_t _internal_androidid() const;
  void _internal_set_androidid(uint64_t value);
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional bool bundled = 3;
  bool has_bundled() const;
  private:
  bool _internal_has_bundled() const;
  public:
  void clear_bundled();
  bool bundled() const;
  void set_bundled(bool value);
  private:
  bool _internal_bundled() const;
  void _internal_set_bundled(bool value);
  public:

  // optional bool pending = 4;
  bool has_pending() const;
  private:
  bool _internal_has_pending() const;
  public:
  void clear_pending();
  bool pending() const;
  void set_pending(bool value);
  private:
  bool _internal_pending() const;
  void _internal_set_pending(bool value);
  public:

  // optional int64 lastUpdateTimestampMillis = 5;
  bool has_lastupdatetimestampmillis() const;
  private:
  bool _internal_has_lastupdatetimestampmillis() const;
  public:
  void clear_lastupdatetimestampmillis();
  int64_t lastupdatetimestampmillis() const;
  void set_lastupdatetimestampmillis(int64_t value);
  private:
  int64_t _internal_lastupdatetimestampmillis() const;
  void _internal_set_lastupdatetimestampmillis(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.Install)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t androidid_;
    int32_t version_;
    bool bundled_;
    bool pending_;
    int64_t lastupdatetimestampmillis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class Dependency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.Dependency) */ {
 public:
  inline Dependency() : Dependency(nullptr) {}
  ~Dependency() override;
  explicit PROTOBUF_CONSTEXPR Dependency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dependency(const Dependency& from);
  Dependency(Dependency&& from) noexcept
    : Dependency() {
    *this = ::std::move(from);
  }

  inline Dependency& operator=(const Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dependency& operator=(Dependency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dependency& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dependency* internal_default_instance() {
    return reinterpret_cast<const Dependency*>(
               &_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Dependency& a, Dependency& b) {
    a.Swap(&b);
  }
  inline void Swap(Dependency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dependency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dependency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dependency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dependency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dependency& from) {
    Dependency::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dependency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.Dependency";
  }
  protected:
  explicit Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kMinVersionCodeFieldNumber = 2,
    kVersionCodeMaskFieldNumber = 3,
    kSkipPermissionsFieldNumber = 4,
  };
  // optional string packageName = 1;
  bool has_packagename() const;
  private:
  bool _internal_has_packagename() const;
  public:
  void clear_packagename();
  const std::string& packagename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packagename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packagename();
  PROTOBUF_NODISCARD std::string* release_packagename();
  void set_allocated_packagename(std::string* packagename);
  private:
  const std::string& _internal_packagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packagename(const std::string& value);
  std::string* _internal_mutable_packagename();
  public:

  // optional int32 minVersionCode = 2;
  bool has_minversioncode() const;
  private:
  bool _internal_has_minversioncode() const;
  public:
  void clear_minversioncode();
  int32_t minversioncode() const;
  void set_minversioncode(int32_t value);
  private:
  int32_t _internal_minversioncode() const;
  void _internal_set_minversioncode(int32_t value);
  public:

  // optional int32 versionCodeMask = 3;
  bool has_versioncodemask() const;
  private:
  bool _internal_has_versioncodemask() const;
  public:
  void clear_versioncodemask();
  int32_t versioncodemask() const;
  void set_versioncodemask(int32_t value);
  private:
  int32_t _internal_versioncodemask() const;
  void _internal_set_versioncodemask(int32_t value);
  public:

  // optional bool skipPermissions = 4;
  bool has_skippermissions() const;
  private:
  bool _internal_has_skippermissions() const;
  public:
  void clear_skippermissions();
  bool skippermissions() const;
  void set_skippermissions(bool value);
  private:
  bool _internal_skippermissions() const;
  void _internal_set_skippermissions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.Dependency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagename_;
    int32_t minversioncode_;
    int32_t versioncodemask_;
    bool skippermissions_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class InstallDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.InstallDetails) */ {
 public:
  inline InstallDetails() : InstallDetails(nullptr) {}
  ~InstallDetails() override;
  explicit PROTOBUF_CONSTEXPR InstallDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallDetails(const InstallDetails& from);
  InstallDetails(InstallDetails&& from) noexcept
    : InstallDetails() {
    *this = ::std::move(from);
  }

  inline InstallDetails& operator=(const InstallDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallDetails& operator=(InstallDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallDetails* internal_default_instance() {
    return reinterpret_cast<const InstallDetails*>(
               &_InstallDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InstallDetails& a, InstallDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallDetails& from) {
    InstallDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.InstallDetails";
  }
  protected:
  explicit InstallDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyFieldNumber = 3,
    kSizeFieldNumber = 2,
    kInstallLocationFieldNumber = 1,
    kTargetSdkVersionFieldNumber = 4,
  };
  // repeated .playapi.proto.finsky.download.Dependency dependency = 3;
  int dependency_size() const;
  private:
  int _internal_dependency_size() const;
  public:
  void clear_dependency();
  ::playapi::proto::finsky::download::Dependency* mutable_dependency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::Dependency >*
      mutable_dependency();
  private:
  const ::playapi::proto::finsky::download::Dependency& _internal_dependency(int index) const;
  ::playapi::proto::finsky::download::Dependency* _internal_add_dependency();
  public:
  const ::playapi::proto::finsky::download::Dependency& dependency(int index) const;
  ::playapi::proto::finsky::download::Dependency* add_dependency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::Dependency >&
      dependency() const;

  // optional int64 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // optional int32 installLocation = 1;
  bool has_installlocation() const;
  private:
  bool _internal_has_installlocation() const;
  public:
  void clear_installlocation();
  int32_t installlocation() const;
  void set_installlocation(int32_t value);
  private:
  int32_t _internal_installlocation() const;
  void _internal_set_installlocation(int32_t value);
  public:

  // optional int32 targetSdkVersion = 4;
  bool has_targetsdkversion() const;
  private:
  bool _internal_has_targetsdkversion() const;
  public:
  void clear_targetsdkversion();
  int32_t targetsdkversion() const;
  void set_targetsdkversion(int32_t value);
  private:
  int32_t _internal_targetsdkversion() const;
  void _internal_set_targetsdkversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.InstallDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::Dependency > dependency_;
    int64_t size_;
    int32_t installlocation_;
    int32_t targetsdkversion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class PatchDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.PatchDetails) */ {
 public:
  inline PatchDetails() : PatchDetails(nullptr) {}
  ~PatchDetails() override;
  explicit PROTOBUF_CONSTEXPR PatchDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchDetails(const PatchDetails& from);
  PatchDetails(PatchDetails&& from) noexcept
    : PatchDetails() {
    *this = ::std::move(from);
  }

  inline PatchDetails& operator=(const PatchDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchDetails& operator=(PatchDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchDetails* internal_default_instance() {
    return reinterpret_cast<const PatchDetails*>(
               &_PatchDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PatchDetails& a, PatchDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PatchDetails& from) {
    PatchDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.PatchDetails";
  }
  protected:
  explicit PatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kBaseVersionCodeFieldNumber = 1,
  };
  // optional int64 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // optional int32 baseVersionCode = 1;
  bool has_baseversioncode() const;
  private:
  bool _internal_has_baseversioncode() const;
  public:
  void clear_baseversioncode();
  int32_t baseversioncode() const;
  void set_baseversioncode(int32_t value);
  private:
  int32_t _internal_baseversioncode() const;
  void _internal_set_baseversioncode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.PatchDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t size_;
    int32_t baseversioncode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class FileMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.FileMetadata) */ {
 public:
  inline FileMetadata() : FileMetadata(nullptr) {}
  ~FileMetadata() override;
  explicit PROTOBUF_CONSTEXPR FileMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileMetadata(const FileMetadata& from);
  FileMetadata(FileMetadata&& from) noexcept
    : FileMetadata() {
    *this = ::std::move(from);
  }

  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMetadata& operator=(FileMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMetadata* internal_default_instance() {
    return reinterpret_cast<const FileMetadata*>(
               &_FileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileMetadata& a, FileMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileMetadata& from) {
    FileMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.FileMetadata";
  }
  protected:
  explicit FileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatchDetailsFieldNumber = 6,
    kSplitIdFieldNumber = 4,
    kFileTypeFieldNumber = 1,
    kVersionCodeFieldNumber = 2,
    kSizeFieldNumber = 3,
    kCompressedSizeFieldNumber = 5,
  };
  // repeated .playapi.proto.finsky.download.PatchDetails patchDetails = 6;
  int patchdetails_size() const;
  private:
  int _internal_patchdetails_size() const;
  public:
  void clear_patchdetails();
  ::playapi::proto::finsky::download::PatchDetails* mutable_patchdetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::PatchDetails >*
      mutable_patchdetails();
  private:
  const ::playapi::proto::finsky::download::PatchDetails& _internal_patchdetails(int index) const;
  ::playapi::proto::finsky::download::PatchDetails* _internal_add_patchdetails();
  public:
  const ::playapi::proto::finsky::download::PatchDetails& patchdetails(int index) const;
  ::playapi::proto::finsky::download::PatchDetails* add_patchdetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::PatchDetails >&
      patchdetails() const;

  // optional string splitId = 4;
  bool has_splitid() const;
  private:
  bool _internal_has_splitid() const;
  public:
  void clear_splitid();
  const std::string& splitid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_splitid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_splitid();
  PROTOBUF_NODISCARD std::string* release_splitid();
  void set_allocated_splitid(std::string* splitid);
  private:
  const std::string& _internal_splitid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_splitid(const std::string& value);
  std::string* _internal_mutable_splitid();
  public:

  // optional int32 fileType = 1;
  bool has_filetype() const;
  private:
  bool _internal_has_filetype() const;
  public:
  void clear_filetype();
  int32_t filetype() const;
  void set_filetype(int32_t value);
  private:
  int32_t _internal_filetype() const;
  void _internal_set_filetype(int32_t value);
  public:

  // optional int32 versionCode = 2;
  bool has_versioncode() const;
  private:
  bool _internal_has_versioncode() const;
  public:
  void clear_versioncode();
  int32_t versioncode() const;
  void set_versioncode(int32_t value);
  private:
  int32_t _internal_versioncode() const;
  void _internal_set_versioncode(int32_t value);
  public:

  // optional int64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // optional int64 compressedSize = 5;
  bool has_compressedsize() const;
  private:
  bool _internal_has_compressedsize() const;
  public:
  void clear_compressedsize();
  int64_t compressedsize() const;
  void set_compressedsize(int64_t value);
  private:
  int64_t _internal_compressedsize() const;
  void _internal_set_compressedsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.FileMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::PatchDetails > patchdetails_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splitid_;
    int32_t filetype_;
    int32_t versioncode_;
    int64_t size_;
    int64_t compressedsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class AndroidAppPatchData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.AndroidAppPatchData) */ {
 public:
  inline AndroidAppPatchData() : AndroidAppPatchData(nullptr) {}
  ~AndroidAppPatchData() override;
  explicit PROTOBUF_CONSTEXPR AndroidAppPatchData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidAppPatchData(const AndroidAppPatchData& from);
  AndroidAppPatchData(AndroidAppPatchData&& from) noexcept
    : AndroidAppPatchData() {
    *this = ::std::move(from);
  }

  inline AndroidAppPatchData& operator=(const AndroidAppPatchData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidAppPatchData& operator=(AndroidAppPatchData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidAppPatchData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidAppPatchData* internal_default_instance() {
    return reinterpret_cast<const AndroidAppPatchData*>(
               &_AndroidAppPatchData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AndroidAppPatchData& a, AndroidAppPatchData& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidAppPatchData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidAppPatchData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidAppPatchData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidAppPatchData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidAppPatchData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidAppPatchData& from) {
    AndroidAppPatchData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidAppPatchData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.AndroidAppPatchData";
  }
  protected:
  explicit AndroidAppPatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseSignatureFieldNumber = 2,
    kDownloadUrlFieldNumber = 3,
    kBaseVersionCodeFieldNumber = 1,
    kPatchFormatFieldNumber = 4,
    kMaxPatchSizeFieldNumber = 5,
  };
  // optional string baseSignature = 2;
  bool has_basesignature() const;
  private:
  bool _internal_has_basesignature() const;
  public:
  void clear_basesignature();
  const std::string& basesignature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_basesignature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_basesignature();
  PROTOBUF_NODISCARD std::string* release_basesignature();
  void set_allocated_basesignature(std::string* basesignature);
  private:
  const std::string& _internal_basesignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basesignature(const std::string& value);
  std::string* _internal_mutable_basesignature();
  public:

  // optional string downloadUrl = 3;
  bool has_downloadurl() const;
  private:
  bool _internal_has_downloadurl() const;
  public:
  void clear_downloadurl();
  const std::string& downloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadurl();
  PROTOBUF_NODISCARD std::string* release_downloadurl();
  void set_allocated_downloadurl(std::string* downloadurl);
  private:
  const std::string& _internal_downloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadurl(const std::string& value);
  std::string* _internal_mutable_downloadurl();
  public:

  // optional int32 baseVersionCode = 1;
  bool has_baseversioncode() const;
  private:
  bool _internal_has_baseversioncode() const;
  public:
  void clear_baseversioncode();
  int32_t baseversioncode() const;
  void set_baseversioncode(int32_t value);
  private:
  int32_t _internal_baseversioncode() const;
  void _internal_set_baseversioncode(int32_t value);
  public:

  // optional int32 patchFormat = 4;
  bool has_patchformat() const;
  private:
  bool _internal_has_patchformat() const;
  public:
  void clear_patchformat();
  int32_t patchformat() const;
  void set_patchformat(int32_t value);
  private:
  int32_t _internal_patchformat() const;
  void _internal_set_patchformat(int32_t value);
  public:

  // optional int64 maxPatchSize = 5;
  bool has_maxpatchsize() const;
  private:
  bool _internal_has_maxpatchsize() const;
  public:
  void clear_maxpatchsize();
  int64_t maxpatchsize() const;
  void set_maxpatchsize(int64_t value);
  private:
  int64_t _internal_maxpatchsize() const;
  void _internal_set_maxpatchsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.AndroidAppPatchData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basesignature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadurl_;
    int32_t baseversioncode_;
    int32_t patchformat_;
    int64_t maxpatchsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class AppFileMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.AppFileMetadata) */ {
 public:
  inline AppFileMetadata() : AppFileMetadata(nullptr) {}
  ~AppFileMetadata() override;
  explicit PROTOBUF_CONSTEXPR AppFileMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppFileMetadata(const AppFileMetadata& from);
  AppFileMetadata(AppFileMetadata&& from) noexcept
    : AppFileMetadata() {
    *this = ::std::move(from);
  }

  inline AppFileMetadata& operator=(const AppFileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppFileMetadata& operator=(AppFileMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppFileMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppFileMetadata* internal_default_instance() {
    return reinterpret_cast<const AppFileMetadata*>(
               &_AppFileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AppFileMetadata& a, AppFileMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(AppFileMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppFileMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppFileMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppFileMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppFileMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppFileMetadata& from) {
    AppFileMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppFileMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.AppFileMetadata";
  }
  protected:
  explicit AppFileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadUrlFieldNumber = 4,
    kCompressedDownloadUrlFieldNumber = 7,
    kSignatureFieldNumber = 8,
    kPatchDataFieldNumber = 5,
    kFileTypeFieldNumber = 1,
    kVersionCodeFieldNumber = 2,
    kSizeFieldNumber = 3,
    kCompressedSizeFieldNumber = 6,
  };
  // optional string downloadUrl = 4;
  bool has_downloadurl() const;
  private:
  bool _internal_has_downloadurl() const;
  public:
  void clear_downloadurl();
  const std::string& downloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadurl();
  PROTOBUF_NODISCARD std::string* release_downloadurl();
  void set_allocated_downloadurl(std::string* downloadurl);
  private:
  const std::string& _internal_downloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadurl(const std::string& value);
  std::string* _internal_mutable_downloadurl();
  public:

  // optional string compressedDownloadUrl = 7;
  bool has_compresseddownloadurl() const;
  private:
  bool _internal_has_compresseddownloadurl() const;
  public:
  void clear_compresseddownloadurl();
  const std::string& compresseddownloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compresseddownloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compresseddownloadurl();
  PROTOBUF_NODISCARD std::string* release_compresseddownloadurl();
  void set_allocated_compresseddownloadurl(std::string* compresseddownloadurl);
  private:
  const std::string& _internal_compresseddownloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compresseddownloadurl(const std::string& value);
  std::string* _internal_mutable_compresseddownloadurl();
  public:

  // optional string signature = 8;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 5;
  bool has_patchdata() const;
  private:
  bool _internal_has_patchdata() const;
  public:
  void clear_patchdata();
  const ::playapi::proto::finsky::download::AndroidAppPatchData& patchdata() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::download::AndroidAppPatchData* release_patchdata();
  ::playapi::proto::finsky::download::AndroidAppPatchData* mutable_patchdata();
  void set_allocated_patchdata(::playapi::proto::finsky::download::AndroidAppPatchData* patchdata);
  private:
  const ::playapi::proto::finsky::download::AndroidAppPatchData& _internal_patchdata() const;
  ::playapi::proto::finsky::download::AndroidAppPatchData* _internal_mutable_patchdata();
  public:
  void unsafe_arena_set_allocated_patchdata(
      ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata);
  ::playapi::proto::finsky::download::AndroidAppPatchData* unsafe_arena_release_patchdata();

  // optional int32 fileType = 1;
  bool has_filetype() const;
  private:
  bool _internal_has_filetype() const;
  public:
  void clear_filetype();
  int32_t filetype() const;
  void set_filetype(int32_t value);
  private:
  int32_t _internal_filetype() const;
  void _internal_set_filetype(int32_t value);
  public:

  // optional int32 versionCode = 2;
  bool has_versioncode() const;
  private:
  bool _internal_has_versioncode() const;
  public:
  void clear_versioncode();
  int32_t versioncode() const;
  void set_versioncode(int32_t value);
  private:
  int32_t _internal_versioncode() const;
  void _internal_set_versioncode(int32_t value);
  public:

  // optional int64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // optional int64 compressedSize = 6;
  bool has_compressedsize() const;
  private:
  bool _internal_has_compressedsize() const;
  public:
  void clear_compressedsize();
  int64_t compressedsize() const;
  void set_compressedsize(int64_t value);
  private:
  int64_t _internal_compressedsize() const;
  void _internal_set_compressedsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.AppFileMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compresseddownloadurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata_;
    int32_t filetype_;
    int32_t versioncode_;
    int64_t size_;
    int64_t compressedsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class EncryptionParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.EncryptionParams) */ {
 public:
  inline EncryptionParams() : EncryptionParams(nullptr) {}
  ~EncryptionParams() override;
  explicit PROTOBUF_CONSTEXPR EncryptionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptionParams(const EncryptionParams& from);
  EncryptionParams(EncryptionParams&& from) noexcept
    : EncryptionParams() {
    *this = ::std::move(from);
  }

  inline EncryptionParams& operator=(const EncryptionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionParams& operator=(EncryptionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptionParams* internal_default_instance() {
    return reinterpret_cast<const EncryptionParams*>(
               &_EncryptionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EncryptionParams& a, EncryptionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptionParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptionParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncryptionParams& from) {
    EncryptionParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.EncryptionParams";
  }
  protected:
  explicit EncryptionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 2,
    kHmacKeyFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // optional string encryptionKey = 2;
  bool has_encryptionkey() const;
  private:
  bool _internal_has_encryptionkey() const;
  public:
  void clear_encryptionkey();
  const std::string& encryptionkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryptionkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryptionkey();
  PROTOBUF_NODISCARD std::string* release_encryptionkey();
  void set_allocated_encryptionkey(std::string* encryptionkey);
  private:
  const std::string& _internal_encryptionkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryptionkey(const std::string& value);
  std::string* _internal_mutable_encryptionkey();
  public:

  // optional string hmacKey = 3;
  bool has_hmackey() const;
  private:
  bool _internal_has_hmackey() const;
  public:
  void clear_hmackey();
  const std::string& hmackey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hmackey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hmackey();
  PROTOBUF_NODISCARD std::string* release_hmackey();
  void set_allocated_hmackey(std::string* hmackey);
  private:
  const std::string& _internal_hmackey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hmackey(const std::string& value);
  std::string* _internal_mutable_hmackey();
  public:

  // optional int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.EncryptionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptionkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hmackey_;
    int32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class SplitDeliveryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.SplitDeliveryData) */ {
 public:
  inline SplitDeliveryData() : SplitDeliveryData(nullptr) {}
  ~SplitDeliveryData() override;
  explicit PROTOBUF_CONSTEXPR SplitDeliveryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitDeliveryData(const SplitDeliveryData& from);
  SplitDeliveryData(SplitDeliveryData&& from) noexcept
    : SplitDeliveryData() {
    *this = ::std::move(from);
  }

  inline SplitDeliveryData& operator=(const SplitDeliveryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitDeliveryData& operator=(SplitDeliveryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitDeliveryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitDeliveryData* internal_default_instance() {
    return reinterpret_cast<const SplitDeliveryData*>(
               &_SplitDeliveryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SplitDeliveryData& a, SplitDeliveryData& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitDeliveryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitDeliveryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitDeliveryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitDeliveryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitDeliveryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SplitDeliveryData& from) {
    SplitDeliveryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitDeliveryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.SplitDeliveryData";
  }
  protected:
  explicit SplitDeliveryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignatureFieldNumber = 4,
    kDownloadUrlFieldNumber = 5,
    kGzippedDownloadUrlFieldNumber = 6,
    kPatchDataFieldNumber = 7,
    kDownloadSizeFieldNumber = 2,
    kGzippedDownloadSizeFieldNumber = 3,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string signature = 4;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional string downloadUrl = 5;
  bool has_downloadurl() const;
  private:
  bool _internal_has_downloadurl() const;
  public:
  void clear_downloadurl();
  const std::string& downloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadurl();
  PROTOBUF_NODISCARD std::string* release_downloadurl();
  void set_allocated_downloadurl(std::string* downloadurl);
  private:
  const std::string& _internal_downloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadurl(const std::string& value);
  std::string* _internal_mutable_downloadurl();
  public:

  // optional string gzippedDownloadUrl = 6;
  bool has_gzippeddownloadurl() const;
  private:
  bool _internal_has_gzippeddownloadurl() const;
  public:
  void clear_gzippeddownloadurl();
  const std::string& gzippeddownloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gzippeddownloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gzippeddownloadurl();
  PROTOBUF_NODISCARD std::string* release_gzippeddownloadurl();
  void set_allocated_gzippeddownloadurl(std::string* gzippeddownloadurl);
  private:
  const std::string& _internal_gzippeddownloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gzippeddownloadurl(const std::string& value);
  std::string* _internal_mutable_gzippeddownloadurl();
  public:

  // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 7;
  bool has_patchdata() const;
  private:
  bool _internal_has_patchdata() const;
  public:
  void clear_patchdata();
  const ::playapi::proto::finsky::download::AndroidAppPatchData& patchdata() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::download::AndroidAppPatchData* release_patchdata();
  ::playapi::proto::finsky::download::AndroidAppPatchData* mutable_patchdata();
  void set_allocated_patchdata(::playapi::proto::finsky::download::AndroidAppPatchData* patchdata);
  private:
  const ::playapi::proto::finsky::download::AndroidAppPatchData& _internal_patchdata() const;
  ::playapi::proto::finsky::download::AndroidAppPatchData* _internal_mutable_patchdata();
  public:
  void unsafe_arena_set_allocated_patchdata(
      ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata);
  ::playapi::proto::finsky::download::AndroidAppPatchData* unsafe_arena_release_patchdata();

  // optional int64 downloadSize = 2;
  bool has_downloadsize() const;
  private:
  bool _internal_has_downloadsize() const;
  public:
  void clear_downloadsize();
  int64_t downloadsize() const;
  void set_downloadsize(int64_t value);
  private:
  int64_t _internal_downloadsize() const;
  void _internal_set_downloadsize(int64_t value);
  public:

  // optional int64 gzippedDownloadSize = 3;
  bool has_gzippeddownloadsize() const;
  private:
  bool _internal_has_gzippeddownloadsize() const;
  public:
  void clear_gzippeddownloadsize();
  int64_t gzippeddownloadsize() const;
  void set_gzippeddownloadsize(int64_t value);
  private:
  int64_t _internal_gzippeddownloadsize() const;
  void _internal_set_gzippeddownloadsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.SplitDeliveryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gzippeddownloadurl_;
    ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata_;
    int64_t downloadsize_;
    int64_t gzippeddownloadsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class AndroidAppDeliveryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.AndroidAppDeliveryData) */ {
 public:
  inline AndroidAppDeliveryData() : AndroidAppDeliveryData(nullptr) {}
  ~AndroidAppDeliveryData() override;
  explicit PROTOBUF_CONSTEXPR AndroidAppDeliveryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidAppDeliveryData(const AndroidAppDeliveryData& from);
  AndroidAppDeliveryData(AndroidAppDeliveryData&& from) noexcept
    : AndroidAppDeliveryData() {
    *this = ::std::move(from);
  }

  inline AndroidAppDeliveryData& operator=(const AndroidAppDeliveryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidAppDeliveryData& operator=(AndroidAppDeliveryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidAppDeliveryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidAppDeliveryData* internal_default_instance() {
    return reinterpret_cast<const AndroidAppDeliveryData*>(
               &_AndroidAppDeliveryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AndroidAppDeliveryData& a, AndroidAppDeliveryData& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidAppDeliveryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidAppDeliveryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidAppDeliveryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidAppDeliveryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidAppDeliveryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidAppDeliveryData& from) {
    AndroidAppDeliveryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidAppDeliveryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.AndroidAppDeliveryData";
  }
  protected:
  explicit AndroidAppDeliveryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalFileFieldNumber = 4,
    kDownloadAuthCookieFieldNumber = 5,
    kSplitDeliveryDataFieldNumber = 15,
    kSignatureFieldNumber = 2,
    kDownloadUrlFieldNumber = 3,
    kGzippedDownloadUrlFieldNumber = 13,
    kPatchDataFieldNumber = 11,
    kEncryptionParamsFieldNumber = 12,
    kDownloadSizeFieldNumber = 1,
    kRefundTimeoutFieldNumber = 7,
    kPostInstallRefundWindowMillisFieldNumber = 9,
    kForwardLockedFieldNumber = 6,
    kServerInitiatedFieldNumber = 8,
    kImmediateStartNeededFieldNumber = 10,
    kEverExternallyHostedFieldNumber = 17,
    kInstallLocationFieldNumber = 16,
    kGzippedDownloadSizeFieldNumber = 14,
  };
  // repeated .playapi.proto.finsky.download.AppFileMetadata additionalFile = 4;
  int additionalfile_size() const;
  private:
  int _internal_additionalfile_size() const;
  public:
  void clear_additionalfile();
  ::playapi::proto::finsky::download::AppFileMetadata* mutable_additionalfile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::AppFileMetadata >*
      mutable_additionalfile();
  private:
  const ::playapi::proto::finsky::download::AppFileMetadata& _internal_additionalfile(int index) const;
  ::playapi::proto::finsky::download::AppFileMetadata* _internal_add_additionalfile();
  public:
  const ::playapi::proto::finsky::download::AppFileMetadata& additionalfile(int index) const;
  ::playapi::proto::finsky::download::AppFileMetadata* add_additionalfile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::AppFileMetadata >&
      additionalfile() const;

  // repeated .playapi.proto.finsky.HttpCookie downloadAuthCookie = 5;
  int downloadauthcookie_size() const;
  private:
  int _internal_downloadauthcookie_size() const;
  public:
  void clear_downloadauthcookie();
  ::playapi::proto::finsky::HttpCookie* mutable_downloadauthcookie(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::HttpCookie >*
      mutable_downloadauthcookie();
  private:
  const ::playapi::proto::finsky::HttpCookie& _internal_downloadauthcookie(int index) const;
  ::playapi::proto::finsky::HttpCookie* _internal_add_downloadauthcookie();
  public:
  const ::playapi::proto::finsky::HttpCookie& downloadauthcookie(int index) const;
  ::playapi::proto::finsky::HttpCookie* add_downloadauthcookie();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::HttpCookie >&
      downloadauthcookie() const;

  // repeated .playapi.proto.finsky.download.SplitDeliveryData splitDeliveryData = 15;
  int splitdeliverydata_size() const;
  private:
  int _internal_splitdeliverydata_size() const;
  public:
  void clear_splitdeliverydata();
  ::playapi::proto::finsky::download::SplitDeliveryData* mutable_splitdeliverydata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::SplitDeliveryData >*
      mutable_splitdeliverydata();
  private:
  const ::playapi::proto::finsky::download::SplitDeliveryData& _internal_splitdeliverydata(int index) const;
  ::playapi::proto::finsky::download::SplitDeliveryData* _internal_add_splitdeliverydata();
  public:
  const ::playapi::proto::finsky::download::SplitDeliveryData& splitdeliverydata(int index) const;
  ::playapi::proto::finsky::download::SplitDeliveryData* add_splitdeliverydata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::SplitDeliveryData >&
      splitdeliverydata() const;

  // optional string signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional string downloadUrl = 3;
  bool has_downloadurl() const;
  private:
  bool _internal_has_downloadurl() const;
  public:
  void clear_downloadurl();
  const std::string& downloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadurl();
  PROTOBUF_NODISCARD std::string* release_downloadurl();
  void set_allocated_downloadurl(std::string* downloadurl);
  private:
  const std::string& _internal_downloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadurl(const std::string& value);
  std::string* _internal_mutable_downloadurl();
  public:

  // optional string gzippedDownloadUrl = 13;
  bool has_gzippeddownloadurl() const;
  private:
  bool _internal_has_gzippeddownloadurl() const;
  public:
  void clear_gzippeddownloadurl();
  const std::string& gzippeddownloadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gzippeddownloadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gzippeddownloadurl();
  PROTOBUF_NODISCARD std::string* release_gzippeddownloadurl();
  void set_allocated_gzippeddownloadurl(std::string* gzippeddownloadurl);
  private:
  const std::string& _internal_gzippeddownloadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gzippeddownloadurl(const std::string& value);
  std::string* _internal_mutable_gzippeddownloadurl();
  public:

  // optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 11;
  bool has_patchdata() const;
  private:
  bool _internal_has_patchdata() const;
  public:
  void clear_patchdata();
  const ::playapi::proto::finsky::download::AndroidAppPatchData& patchdata() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::download::AndroidAppPatchData* release_patchdata();
  ::playapi::proto::finsky::download::AndroidAppPatchData* mutable_patchdata();
  void set_allocated_patchdata(::playapi::proto::finsky::download::AndroidAppPatchData* patchdata);
  private:
  const ::playapi::proto::finsky::download::AndroidAppPatchData& _internal_patchdata() const;
  ::playapi::proto::finsky::download::AndroidAppPatchData* _internal_mutable_patchdata();
  public:
  void unsafe_arena_set_allocated_patchdata(
      ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata);
  ::playapi::proto::finsky::download::AndroidAppPatchData* unsafe_arena_release_patchdata();

  // optional .playapi.proto.finsky.download.EncryptionParams encryptionParams = 12;
  bool has_encryptionparams() const;
  private:
  bool _internal_has_encryptionparams() const;
  public:
  void clear_encryptionparams();
  const ::playapi::proto::finsky::download::EncryptionParams& encryptionparams() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::download::EncryptionParams* release_encryptionparams();
  ::playapi::proto::finsky::download::EncryptionParams* mutable_encryptionparams();
  void set_allocated_encryptionparams(::playapi::proto::finsky::download::EncryptionParams* encryptionparams);
  private:
  const ::playapi::proto::finsky::download::EncryptionParams& _internal_encryptionparams() const;
  ::playapi::proto::finsky::download::EncryptionParams* _internal_mutable_encryptionparams();
  public:
  void unsafe_arena_set_allocated_encryptionparams(
      ::playapi::proto::finsky::download::EncryptionParams* encryptionparams);
  ::playapi::proto::finsky::download::EncryptionParams* unsafe_arena_release_encryptionparams();

  // optional int64 downloadSize = 1;
  bool has_downloadsize() const;
  private:
  bool _internal_has_downloadsize() const;
  public:
  void clear_downloadsize();
  int64_t downloadsize() const;
  void set_downloadsize(int64_t value);
  private:
  int64_t _internal_downloadsize() const;
  void _internal_set_downloadsize(int64_t value);
  public:

  // optional int64 refundTimeout = 7;
  bool has_refundtimeout() const;
  private:
  bool _internal_has_refundtimeout() const;
  public:
  void clear_refundtimeout();
  int64_t refundtimeout() const;
  void set_refundtimeout(int64_t value);
  private:
  int64_t _internal_refundtimeout() const;
  void _internal_set_refundtimeout(int64_t value);
  public:

  // optional int64 postInstallRefundWindowMillis = 9;
  bool has_postinstallrefundwindowmillis() const;
  private:
  bool _internal_has_postinstallrefundwindowmillis() const;
  public:
  void clear_postinstallrefundwindowmillis();
  int64_t postinstallrefundwindowmillis() const;
  void set_postinstallrefundwindowmillis(int64_t value);
  private:
  int64_t _internal_postinstallrefundwindowmillis() const;
  void _internal_set_postinstallrefundwindowmillis(int64_t value);
  public:

  // optional bool forwardLocked = 6;
  bool has_forwardlocked() const;
  private:
  bool _internal_has_forwardlocked() const;
  public:
  void clear_forwardlocked();
  bool forwardlocked() const;
  void set_forwardlocked(bool value);
  private:
  bool _internal_forwardlocked() const;
  void _internal_set_forwardlocked(bool value);
  public:

  // optional bool serverInitiated = 8;
  bool has_serverinitiated() const;
  private:
  bool _internal_has_serverinitiated() const;
  public:
  void clear_serverinitiated();
  bool serverinitiated() const;
  void set_serverinitiated(bool value);
  private:
  bool _internal_serverinitiated() const;
  void _internal_set_serverinitiated(bool value);
  public:

  // optional bool immediateStartNeeded = 10;
  bool has_immediatestartneeded() const;
  private:
  bool _internal_has_immediatestartneeded() const;
  public:
  void clear_immediatestartneeded();
  bool immediatestartneeded() const;
  void set_immediatestartneeded(bool value);
  private:
  bool _internal_immediatestartneeded() const;
  void _internal_set_immediatestartneeded(bool value);
  public:

  // optional bool everExternallyHosted = 17;
  bool has_everexternallyhosted() const;
  private:
  bool _internal_has_everexternallyhosted() const;
  public:
  void clear_everexternallyhosted();
  bool everexternallyhosted() const;
  void set_everexternallyhosted(bool value);
  private:
  bool _internal_everexternallyhosted() const;
  void _internal_set_everexternallyhosted(bool value);
  public:

  // optional int32 installLocation = 16;
  bool has_installlocation() const;
  private:
  bool _internal_has_installlocation() const;
  public:
  void clear_installlocation();
  int32_t installlocation() const;
  void set_installlocation(int32_t value);
  private:
  int32_t _internal_installlocation() const;
  void _internal_set_installlocation(int32_t value);
  public:

  // optional int64 gzippedDownloadSize = 14;
  bool has_gzippeddownloadsize() const;
  private:
  bool _internal_has_gzippeddownloadsize() const;
  public:
  void clear_gzippeddownloadsize();
  int64_t gzippeddownloadsize() const;
  void set_gzippeddownloadsize(int64_t value);
  private:
  int64_t _internal_gzippeddownloadsize() const;
  void _internal_set_gzippeddownloadsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.AndroidAppDeliveryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::AppFileMetadata > additionalfile_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::HttpCookie > downloadauthcookie_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::SplitDeliveryData > splitdeliverydata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gzippeddownloadurl_;
    ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata_;
    ::playapi::proto::finsky::download::EncryptionParams* encryptionparams_;
    int64_t downloadsize_;
    int64_t refundtimeout_;
    int64_t postinstallrefundwindowmillis_;
    bool forwardlocked_;
    bool serverinitiated_;
    bool immediatestartneeded_;
    bool everexternallyhosted_;
    int32_t installlocation_;
    int64_t gzippeddownloadsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// -------------------------------------------------------------------

class DeliveryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.download.DeliveryResponse) */ {
 public:
  inline DeliveryResponse() : DeliveryResponse(nullptr) {}
  ~DeliveryResponse() override;
  explicit PROTOBUF_CONSTEXPR DeliveryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeliveryResponse(const DeliveryResponse& from);
  DeliveryResponse(DeliveryResponse&& from) noexcept
    : DeliveryResponse() {
    *this = ::std::move(from);
  }

  inline DeliveryResponse& operator=(const DeliveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeliveryResponse& operator=(DeliveryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeliveryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeliveryResponse* internal_default_instance() {
    return reinterpret_cast<const DeliveryResponse*>(
               &_DeliveryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeliveryResponse& a, DeliveryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeliveryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeliveryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeliveryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeliveryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeliveryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeliveryResponse& from) {
    DeliveryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeliveryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.download.DeliveryResponse";
  }
  protected:
  explicit DeliveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDeliveryDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 2;
  bool has_appdeliverydata() const;
  private:
  bool _internal_has_appdeliverydata() const;
  public:
  void clear_appdeliverydata();
  const ::playapi::proto::finsky::download::AndroidAppDeliveryData& appdeliverydata() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::download::AndroidAppDeliveryData* release_appdeliverydata();
  ::playapi::proto::finsky::download::AndroidAppDeliveryData* mutable_appdeliverydata();
  void set_allocated_appdeliverydata(::playapi::proto::finsky::download::AndroidAppDeliveryData* appdeliverydata);
  private:
  const ::playapi::proto::finsky::download::AndroidAppDeliveryData& _internal_appdeliverydata() const;
  ::playapi::proto::finsky::download::AndroidAppDeliveryData* _internal_mutable_appdeliverydata();
  public:
  void unsafe_arena_set_allocated_appdeliverydata(
      ::playapi::proto::finsky::download::AndroidAppDeliveryData* appdeliverydata);
  ::playapi::proto::finsky::download::AndroidAppDeliveryData* unsafe_arena_release_appdeliverydata();

  // optional int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.download.DeliveryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::playapi::proto::finsky::download::AndroidAppDeliveryData* appdeliverydata_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fdownload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Install

// optional fixed64 androidId = 1;
inline bool Install::_internal_has_androidid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Install::has_androidid() const {
  return _internal_has_androidid();
}
inline void Install::clear_androidid() {
  _impl_.androidid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Install::_internal_androidid() const {
  return _impl_.androidid_;
}
inline uint64_t Install::androidid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Install.androidId)
  return _internal_androidid();
}
inline void Install::_internal_set_androidid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.androidid_ = value;
}
inline void Install::set_androidid(uint64_t value) {
  _internal_set_androidid(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Install.androidId)
}

// optional int32 version = 2;
inline bool Install::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Install::has_version() const {
  return _internal_has_version();
}
inline void Install::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Install::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Install::version() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Install.version)
  return _internal_version();
}
inline void Install::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}
inline void Install::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Install.version)
}

// optional bool bundled = 3;
inline bool Install::_internal_has_bundled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Install::has_bundled() const {
  return _internal_has_bundled();
}
inline void Install::clear_bundled() {
  _impl_.bundled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Install::_internal_bundled() const {
  return _impl_.bundled_;
}
inline bool Install::bundled() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Install.bundled)
  return _internal_bundled();
}
inline void Install::_internal_set_bundled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bundled_ = value;
}
inline void Install::set_bundled(bool value) {
  _internal_set_bundled(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Install.bundled)
}

// optional bool pending = 4;
inline bool Install::_internal_has_pending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Install::has_pending() const {
  return _internal_has_pending();
}
inline void Install::clear_pending() {
  _impl_.pending_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Install::_internal_pending() const {
  return _impl_.pending_;
}
inline bool Install::pending() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Install.pending)
  return _internal_pending();
}
inline void Install::_internal_set_pending(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pending_ = value;
}
inline void Install::set_pending(bool value) {
  _internal_set_pending(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Install.pending)
}

// optional int64 lastUpdateTimestampMillis = 5;
inline bool Install::_internal_has_lastupdatetimestampmillis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Install::has_lastupdatetimestampmillis() const {
  return _internal_has_lastupdatetimestampmillis();
}
inline void Install::clear_lastupdatetimestampmillis() {
  _impl_.lastupdatetimestampmillis_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t Install::_internal_lastupdatetimestampmillis() const {
  return _impl_.lastupdatetimestampmillis_;
}
inline int64_t Install::lastupdatetimestampmillis() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Install.lastUpdateTimestampMillis)
  return _internal_lastupdatetimestampmillis();
}
inline void Install::_internal_set_lastupdatetimestampmillis(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lastupdatetimestampmillis_ = value;
}
inline void Install::set_lastupdatetimestampmillis(int64_t value) {
  _internal_set_lastupdatetimestampmillis(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Install.lastUpdateTimestampMillis)
}

// -------------------------------------------------------------------

// Dependency

// optional string packageName = 1;
inline bool Dependency::_internal_has_packagename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dependency::has_packagename() const {
  return _internal_has_packagename();
}
inline void Dependency::clear_packagename() {
  _impl_.packagename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dependency::packagename() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Dependency.packageName)
  return _internal_packagename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dependency::set_packagename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.packagename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Dependency.packageName)
}
inline std::string* Dependency::mutable_packagename() {
  std::string* _s = _internal_mutable_packagename();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.Dependency.packageName)
  return _s;
}
inline const std::string& Dependency::_internal_packagename() const {
  return _impl_.packagename_.Get();
}
inline void Dependency::_internal_set_packagename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packagename_.Set(value, GetArenaForAllocation());
}
inline std::string* Dependency::_internal_mutable_packagename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.packagename_.Mutable(GetArenaForAllocation());
}
inline std::string* Dependency::release_packagename() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.Dependency.packageName)
  if (!_internal_has_packagename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.packagename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packagename_.IsDefault()) {
    _impl_.packagename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dependency::set_allocated_packagename(std::string* packagename) {
  if (packagename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packagename_.SetAllocated(packagename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packagename_.IsDefault()) {
    _impl_.packagename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.Dependency.packageName)
}

// optional int32 minVersionCode = 2;
inline bool Dependency::_internal_has_minversioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dependency::has_minversioncode() const {
  return _internal_has_minversioncode();
}
inline void Dependency::clear_minversioncode() {
  _impl_.minversioncode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Dependency::_internal_minversioncode() const {
  return _impl_.minversioncode_;
}
inline int32_t Dependency::minversioncode() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Dependency.minVersionCode)
  return _internal_minversioncode();
}
inline void Dependency::_internal_set_minversioncode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.minversioncode_ = value;
}
inline void Dependency::set_minversioncode(int32_t value) {
  _internal_set_minversioncode(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Dependency.minVersionCode)
}

// optional int32 versionCodeMask = 3;
inline bool Dependency::_internal_has_versioncodemask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dependency::has_versioncodemask() const {
  return _internal_has_versioncodemask();
}
inline void Dependency::clear_versioncodemask() {
  _impl_.versioncodemask_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Dependency::_internal_versioncodemask() const {
  return _impl_.versioncodemask_;
}
inline int32_t Dependency::versioncodemask() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Dependency.versionCodeMask)
  return _internal_versioncodemask();
}
inline void Dependency::_internal_set_versioncodemask(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.versioncodemask_ = value;
}
inline void Dependency::set_versioncodemask(int32_t value) {
  _internal_set_versioncodemask(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Dependency.versionCodeMask)
}

// optional bool skipPermissions = 4;
inline bool Dependency::_internal_has_skippermissions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dependency::has_skippermissions() const {
  return _internal_has_skippermissions();
}
inline void Dependency::clear_skippermissions() {
  _impl_.skippermissions_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Dependency::_internal_skippermissions() const {
  return _impl_.skippermissions_;
}
inline bool Dependency::skippermissions() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.Dependency.skipPermissions)
  return _internal_skippermissions();
}
inline void Dependency::_internal_set_skippermissions(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skippermissions_ = value;
}
inline void Dependency::set_skippermissions(bool value) {
  _internal_set_skippermissions(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.Dependency.skipPermissions)
}

// -------------------------------------------------------------------

// InstallDetails

// optional int32 installLocation = 1;
inline bool InstallDetails::_internal_has_installlocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstallDetails::has_installlocation() const {
  return _internal_has_installlocation();
}
inline void InstallDetails::clear_installlocation() {
  _impl_.installlocation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t InstallDetails::_internal_installlocation() const {
  return _impl_.installlocation_;
}
inline int32_t InstallDetails::installlocation() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.InstallDetails.installLocation)
  return _internal_installlocation();
}
inline void InstallDetails::_internal_set_installlocation(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.installlocation_ = value;
}
inline void InstallDetails::set_installlocation(int32_t value) {
  _internal_set_installlocation(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.InstallDetails.installLocation)
}

// optional int64 size = 2;
inline bool InstallDetails::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstallDetails::has_size() const {
  return _internal_has_size();
}
inline void InstallDetails::clear_size() {
  _impl_.size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t InstallDetails::_internal_size() const {
  return _impl_.size_;
}
inline int64_t InstallDetails::size() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.InstallDetails.size)
  return _internal_size();
}
inline void InstallDetails::_internal_set_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.size_ = value;
}
inline void InstallDetails::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.InstallDetails.size)
}

// repeated .playapi.proto.finsky.download.Dependency dependency = 3;
inline int InstallDetails::_internal_dependency_size() const {
  return _impl_.dependency_.size();
}
inline int InstallDetails::dependency_size() const {
  return _internal_dependency_size();
}
inline void InstallDetails::clear_dependency() {
  _impl_.dependency_.Clear();
}
inline ::playapi::proto::finsky::download::Dependency* InstallDetails::mutable_dependency(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.InstallDetails.dependency)
  return _impl_.dependency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::Dependency >*
InstallDetails::mutable_dependency() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.download.InstallDetails.dependency)
  return &_impl_.dependency_;
}
inline const ::playapi::proto::finsky::download::Dependency& InstallDetails::_internal_dependency(int index) const {
  return _impl_.dependency_.Get(index);
}
inline const ::playapi::proto::finsky::download::Dependency& InstallDetails::dependency(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.InstallDetails.dependency)
  return _internal_dependency(index);
}
inline ::playapi::proto::finsky::download::Dependency* InstallDetails::_internal_add_dependency() {
  return _impl_.dependency_.Add();
}
inline ::playapi::proto::finsky::download::Dependency* InstallDetails::add_dependency() {
  ::playapi::proto::finsky::download::Dependency* _add = _internal_add_dependency();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.download.InstallDetails.dependency)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::Dependency >&
InstallDetails::dependency() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.download.InstallDetails.dependency)
  return _impl_.dependency_;
}

// optional int32 targetSdkVersion = 4;
inline bool InstallDetails::_internal_has_targetsdkversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InstallDetails::has_targetsdkversion() const {
  return _internal_has_targetsdkversion();
}
inline void InstallDetails::clear_targetsdkversion() {
  _impl_.targetsdkversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t InstallDetails::_internal_targetsdkversion() const {
  return _impl_.targetsdkversion_;
}
inline int32_t InstallDetails::targetsdkversion() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.InstallDetails.targetSdkVersion)
  return _internal_targetsdkversion();
}
inline void InstallDetails::_internal_set_targetsdkversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.targetsdkversion_ = value;
}
inline void InstallDetails::set_targetsdkversion(int32_t value) {
  _internal_set_targetsdkversion(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.InstallDetails.targetSdkVersion)
}

// -------------------------------------------------------------------

// PatchDetails

// optional int32 baseVersionCode = 1;
inline bool PatchDetails::_internal_has_baseversioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PatchDetails::has_baseversioncode() const {
  return _internal_has_baseversioncode();
}
inline void PatchDetails::clear_baseversioncode() {
  _impl_.baseversioncode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PatchDetails::_internal_baseversioncode() const {
  return _impl_.baseversioncode_;
}
inline int32_t PatchDetails::baseversioncode() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.PatchDetails.baseVersionCode)
  return _internal_baseversioncode();
}
inline void PatchDetails::_internal_set_baseversioncode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.baseversioncode_ = value;
}
inline void PatchDetails::set_baseversioncode(int32_t value) {
  _internal_set_baseversioncode(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.PatchDetails.baseVersionCode)
}

// optional int64 size = 2;
inline bool PatchDetails::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PatchDetails::has_size() const {
  return _internal_has_size();
}
inline void PatchDetails::clear_size() {
  _impl_.size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t PatchDetails::_internal_size() const {
  return _impl_.size_;
}
inline int64_t PatchDetails::size() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.PatchDetails.size)
  return _internal_size();
}
inline void PatchDetails::_internal_set_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.size_ = value;
}
inline void PatchDetails::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.PatchDetails.size)
}

// -------------------------------------------------------------------

// FileMetadata

// optional int32 fileType = 1;
inline bool FileMetadata::_internal_has_filetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileMetadata::has_filetype() const {
  return _internal_has_filetype();
}
inline void FileMetadata::clear_filetype() {
  _impl_.filetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FileMetadata::_internal_filetype() const {
  return _impl_.filetype_;
}
inline int32_t FileMetadata::filetype() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.FileMetadata.fileType)
  return _internal_filetype();
}
inline void FileMetadata::_internal_set_filetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filetype_ = value;
}
inline void FileMetadata::set_filetype(int32_t value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.FileMetadata.fileType)
}

// optional int32 versionCode = 2;
inline bool FileMetadata::_internal_has_versioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileMetadata::has_versioncode() const {
  return _internal_has_versioncode();
}
inline void FileMetadata::clear_versioncode() {
  _impl_.versioncode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FileMetadata::_internal_versioncode() const {
  return _impl_.versioncode_;
}
inline int32_t FileMetadata::versioncode() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.FileMetadata.versionCode)
  return _internal_versioncode();
}
inline void FileMetadata::_internal_set_versioncode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.versioncode_ = value;
}
inline void FileMetadata::set_versioncode(int32_t value) {
  _internal_set_versioncode(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.FileMetadata.versionCode)
}

// optional int64 size = 3;
inline bool FileMetadata::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileMetadata::has_size() const {
  return _internal_has_size();
}
inline void FileMetadata::clear_size() {
  _impl_.size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t FileMetadata::_internal_size() const {
  return _impl_.size_;
}
inline int64_t FileMetadata::size() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.FileMetadata.size)
  return _internal_size();
}
inline void FileMetadata::_internal_set_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}
inline void FileMetadata::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.FileMetadata.size)
}

// optional string splitId = 4;
inline bool FileMetadata::_internal_has_splitid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileMetadata::has_splitid() const {
  return _internal_has_splitid();
}
inline void FileMetadata::clear_splitid() {
  _impl_.splitid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileMetadata::splitid() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.FileMetadata.splitId)
  return _internal_splitid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMetadata::set_splitid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.splitid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.FileMetadata.splitId)
}
inline std::string* FileMetadata::mutable_splitid() {
  std::string* _s = _internal_mutable_splitid();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.FileMetadata.splitId)
  return _s;
}
inline const std::string& FileMetadata::_internal_splitid() const {
  return _impl_.splitid_.Get();
}
inline void FileMetadata::_internal_set_splitid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.splitid_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMetadata::_internal_mutable_splitid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.splitid_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMetadata::release_splitid() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.FileMetadata.splitId)
  if (!_internal_has_splitid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.splitid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.splitid_.IsDefault()) {
    _impl_.splitid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileMetadata::set_allocated_splitid(std::string* splitid) {
  if (splitid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.splitid_.SetAllocated(splitid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.splitid_.IsDefault()) {
    _impl_.splitid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.FileMetadata.splitId)
}

// optional int64 compressedSize = 5;
inline bool FileMetadata::_internal_has_compressedsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileMetadata::has_compressedsize() const {
  return _internal_has_compressedsize();
}
inline void FileMetadata::clear_compressedsize() {
  _impl_.compressedsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t FileMetadata::_internal_compressedsize() const {
  return _impl_.compressedsize_;
}
inline int64_t FileMetadata::compressedsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.FileMetadata.compressedSize)
  return _internal_compressedsize();
}
inline void FileMetadata::_internal_set_compressedsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.compressedsize_ = value;
}
inline void FileMetadata::set_compressedsize(int64_t value) {
  _internal_set_compressedsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.FileMetadata.compressedSize)
}

// repeated .playapi.proto.finsky.download.PatchDetails patchDetails = 6;
inline int FileMetadata::_internal_patchdetails_size() const {
  return _impl_.patchdetails_.size();
}
inline int FileMetadata::patchdetails_size() const {
  return _internal_patchdetails_size();
}
inline void FileMetadata::clear_patchdetails() {
  _impl_.patchdetails_.Clear();
}
inline ::playapi::proto::finsky::download::PatchDetails* FileMetadata::mutable_patchdetails(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.FileMetadata.patchDetails)
  return _impl_.patchdetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::PatchDetails >*
FileMetadata::mutable_patchdetails() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.download.FileMetadata.patchDetails)
  return &_impl_.patchdetails_;
}
inline const ::playapi::proto::finsky::download::PatchDetails& FileMetadata::_internal_patchdetails(int index) const {
  return _impl_.patchdetails_.Get(index);
}
inline const ::playapi::proto::finsky::download::PatchDetails& FileMetadata::patchdetails(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.FileMetadata.patchDetails)
  return _internal_patchdetails(index);
}
inline ::playapi::proto::finsky::download::PatchDetails* FileMetadata::_internal_add_patchdetails() {
  return _impl_.patchdetails_.Add();
}
inline ::playapi::proto::finsky::download::PatchDetails* FileMetadata::add_patchdetails() {
  ::playapi::proto::finsky::download::PatchDetails* _add = _internal_add_patchdetails();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.download.FileMetadata.patchDetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::PatchDetails >&
FileMetadata::patchdetails() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.download.FileMetadata.patchDetails)
  return _impl_.patchdetails_;
}

// -------------------------------------------------------------------

// AndroidAppPatchData

// optional int32 baseVersionCode = 1;
inline bool AndroidAppPatchData::_internal_has_baseversioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidAppPatchData::has_baseversioncode() const {
  return _internal_has_baseversioncode();
}
inline void AndroidAppPatchData::clear_baseversioncode() {
  _impl_.baseversioncode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AndroidAppPatchData::_internal_baseversioncode() const {
  return _impl_.baseversioncode_;
}
inline int32_t AndroidAppPatchData::baseversioncode() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppPatchData.baseVersionCode)
  return _internal_baseversioncode();
}
inline void AndroidAppPatchData::_internal_set_baseversioncode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.baseversioncode_ = value;
}
inline void AndroidAppPatchData::set_baseversioncode(int32_t value) {
  _internal_set_baseversioncode(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppPatchData.baseVersionCode)
}

// optional string baseSignature = 2;
inline bool AndroidAppPatchData::_internal_has_basesignature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidAppPatchData::has_basesignature() const {
  return _internal_has_basesignature();
}
inline void AndroidAppPatchData::clear_basesignature() {
  _impl_.basesignature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidAppPatchData::basesignature() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppPatchData.baseSignature)
  return _internal_basesignature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidAppPatchData::set_basesignature(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.basesignature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppPatchData.baseSignature)
}
inline std::string* AndroidAppPatchData::mutable_basesignature() {
  std::string* _s = _internal_mutable_basesignature();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppPatchData.baseSignature)
  return _s;
}
inline const std::string& AndroidAppPatchData::_internal_basesignature() const {
  return _impl_.basesignature_.Get();
}
inline void AndroidAppPatchData::_internal_set_basesignature(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.basesignature_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidAppPatchData::_internal_mutable_basesignature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.basesignature_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidAppPatchData::release_basesignature() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppPatchData.baseSignature)
  if (!_internal_has_basesignature()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.basesignature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.basesignature_.IsDefault()) {
    _impl_.basesignature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidAppPatchData::set_allocated_basesignature(std::string* basesignature) {
  if (basesignature != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.basesignature_.SetAllocated(basesignature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.basesignature_.IsDefault()) {
    _impl_.basesignature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppPatchData.baseSignature)
}

// optional string downloadUrl = 3;
inline bool AndroidAppPatchData::_internal_has_downloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidAppPatchData::has_downloadurl() const {
  return _internal_has_downloadurl();
}
inline void AndroidAppPatchData::clear_downloadurl() {
  _impl_.downloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidAppPatchData::downloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl)
  return _internal_downloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidAppPatchData::set_downloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.downloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl)
}
inline std::string* AndroidAppPatchData::mutable_downloadurl() {
  std::string* _s = _internal_mutable_downloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl)
  return _s;
}
inline const std::string& AndroidAppPatchData::_internal_downloadurl() const {
  return _impl_.downloadurl_.Get();
}
inline void AndroidAppPatchData::_internal_set_downloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.downloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidAppPatchData::_internal_mutable_downloadurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.downloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidAppPatchData::release_downloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl)
  if (!_internal_has_downloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.downloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidAppPatchData::set_allocated_downloadurl(std::string* downloadurl) {
  if (downloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.downloadurl_.SetAllocated(downloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppPatchData.downloadUrl)
}

// optional int32 patchFormat = 4;
inline bool AndroidAppPatchData::_internal_has_patchformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidAppPatchData::has_patchformat() const {
  return _internal_has_patchformat();
}
inline void AndroidAppPatchData::clear_patchformat() {
  _impl_.patchformat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t AndroidAppPatchData::_internal_patchformat() const {
  return _impl_.patchformat_;
}
inline int32_t AndroidAppPatchData::patchformat() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppPatchData.patchFormat)
  return _internal_patchformat();
}
inline void AndroidAppPatchData::_internal_set_patchformat(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.patchformat_ = value;
}
inline void AndroidAppPatchData::set_patchformat(int32_t value) {
  _internal_set_patchformat(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppPatchData.patchFormat)
}

// optional int64 maxPatchSize = 5;
inline bool AndroidAppPatchData::_internal_has_maxpatchsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidAppPatchData::has_maxpatchsize() const {
  return _internal_has_maxpatchsize();
}
inline void AndroidAppPatchData::clear_maxpatchsize() {
  _impl_.maxpatchsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t AndroidAppPatchData::_internal_maxpatchsize() const {
  return _impl_.maxpatchsize_;
}
inline int64_t AndroidAppPatchData::maxpatchsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppPatchData.maxPatchSize)
  return _internal_maxpatchsize();
}
inline void AndroidAppPatchData::_internal_set_maxpatchsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.maxpatchsize_ = value;
}
inline void AndroidAppPatchData::set_maxpatchsize(int64_t value) {
  _internal_set_maxpatchsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppPatchData.maxPatchSize)
}

// -------------------------------------------------------------------

// AppFileMetadata

// optional int32 fileType = 1;
inline bool AppFileMetadata::_internal_has_filetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppFileMetadata::has_filetype() const {
  return _internal_has_filetype();
}
inline void AppFileMetadata::clear_filetype() {
  _impl_.filetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t AppFileMetadata::_internal_filetype() const {
  return _impl_.filetype_;
}
inline int32_t AppFileMetadata::filetype() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.fileType)
  return _internal_filetype();
}
inline void AppFileMetadata::_internal_set_filetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.filetype_ = value;
}
inline void AppFileMetadata::set_filetype(int32_t value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.fileType)
}

// optional int32 versionCode = 2;
inline bool AppFileMetadata::_internal_has_versioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppFileMetadata::has_versioncode() const {
  return _internal_has_versioncode();
}
inline void AppFileMetadata::clear_versioncode() {
  _impl_.versioncode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t AppFileMetadata::_internal_versioncode() const {
  return _impl_.versioncode_;
}
inline int32_t AppFileMetadata::versioncode() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.versionCode)
  return _internal_versioncode();
}
inline void AppFileMetadata::_internal_set_versioncode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.versioncode_ = value;
}
inline void AppFileMetadata::set_versioncode(int32_t value) {
  _internal_set_versioncode(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.versionCode)
}

// optional int64 size = 3;
inline bool AppFileMetadata::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppFileMetadata::has_size() const {
  return _internal_has_size();
}
inline void AppFileMetadata::clear_size() {
  _impl_.size_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t AppFileMetadata::_internal_size() const {
  return _impl_.size_;
}
inline int64_t AppFileMetadata::size() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.size)
  return _internal_size();
}
inline void AppFileMetadata::_internal_set_size(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.size_ = value;
}
inline void AppFileMetadata::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.size)
}

// optional string downloadUrl = 4;
inline bool AppFileMetadata::_internal_has_downloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppFileMetadata::has_downloadurl() const {
  return _internal_has_downloadurl();
}
inline void AppFileMetadata::clear_downloadurl() {
  _impl_.downloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppFileMetadata::downloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.downloadUrl)
  return _internal_downloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppFileMetadata::set_downloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.downloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.downloadUrl)
}
inline std::string* AppFileMetadata::mutable_downloadurl() {
  std::string* _s = _internal_mutable_downloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AppFileMetadata.downloadUrl)
  return _s;
}
inline const std::string& AppFileMetadata::_internal_downloadurl() const {
  return _impl_.downloadurl_.Get();
}
inline void AppFileMetadata::_internal_set_downloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.downloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* AppFileMetadata::_internal_mutable_downloadurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.downloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* AppFileMetadata::release_downloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AppFileMetadata.downloadUrl)
  if (!_internal_has_downloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.downloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppFileMetadata::set_allocated_downloadurl(std::string* downloadurl) {
  if (downloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.downloadurl_.SetAllocated(downloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AppFileMetadata.downloadUrl)
}

// optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 5;
inline bool AppFileMetadata::_internal_has_patchdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.patchdata_ != nullptr);
  return value;
}
inline bool AppFileMetadata::has_patchdata() const {
  return _internal_has_patchdata();
}
inline void AppFileMetadata::clear_patchdata() {
  if (_impl_.patchdata_ != nullptr) _impl_.patchdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::playapi::proto::finsky::download::AndroidAppPatchData& AppFileMetadata::_internal_patchdata() const {
  const ::playapi::proto::finsky::download::AndroidAppPatchData* p = _impl_.patchdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::download::AndroidAppPatchData&>(
      ::playapi::proto::finsky::download::_AndroidAppPatchData_default_instance_);
}
inline const ::playapi::proto::finsky::download::AndroidAppPatchData& AppFileMetadata::patchdata() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.patchData)
  return _internal_patchdata();
}
inline void AppFileMetadata::unsafe_arena_set_allocated_patchdata(
    ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.patchdata_);
  }
  _impl_.patchdata_ = patchdata;
  if (patchdata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.download.AppFileMetadata.patchData)
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AppFileMetadata::release_patchdata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::download::AndroidAppPatchData* temp = _impl_.patchdata_;
  _impl_.patchdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AppFileMetadata::unsafe_arena_release_patchdata() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AppFileMetadata.patchData)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::download::AndroidAppPatchData* temp = _impl_.patchdata_;
  _impl_.patchdata_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AppFileMetadata::_internal_mutable_patchdata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.patchdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::download::AndroidAppPatchData>(GetArenaForAllocation());
    _impl_.patchdata_ = p;
  }
  return _impl_.patchdata_;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AppFileMetadata::mutable_patchdata() {
  ::playapi::proto::finsky::download::AndroidAppPatchData* _msg = _internal_mutable_patchdata();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AppFileMetadata.patchData)
  return _msg;
}
inline void AppFileMetadata::set_allocated_patchdata(::playapi::proto::finsky::download::AndroidAppPatchData* patchdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.patchdata_;
  }
  if (patchdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(patchdata);
    if (message_arena != submessage_arena) {
      patchdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patchdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.patchdata_ = patchdata;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AppFileMetadata.patchData)
}

// optional int64 compressedSize = 6;
inline bool AppFileMetadata::_internal_has_compressedsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppFileMetadata::has_compressedsize() const {
  return _internal_has_compressedsize();
}
inline void AppFileMetadata::clear_compressedsize() {
  _impl_.compressedsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t AppFileMetadata::_internal_compressedsize() const {
  return _impl_.compressedsize_;
}
inline int64_t AppFileMetadata::compressedsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.compressedSize)
  return _internal_compressedsize();
}
inline void AppFileMetadata::_internal_set_compressedsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.compressedsize_ = value;
}
inline void AppFileMetadata::set_compressedsize(int64_t value) {
  _internal_set_compressedsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.compressedSize)
}

// optional string compressedDownloadUrl = 7;
inline bool AppFileMetadata::_internal_has_compresseddownloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppFileMetadata::has_compresseddownloadurl() const {
  return _internal_has_compresseddownloadurl();
}
inline void AppFileMetadata::clear_compresseddownloadurl() {
  _impl_.compresseddownloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppFileMetadata::compresseddownloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl)
  return _internal_compresseddownloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppFileMetadata::set_compresseddownloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.compresseddownloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl)
}
inline std::string* AppFileMetadata::mutable_compresseddownloadurl() {
  std::string* _s = _internal_mutable_compresseddownloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl)
  return _s;
}
inline const std::string& AppFileMetadata::_internal_compresseddownloadurl() const {
  return _impl_.compresseddownloadurl_.Get();
}
inline void AppFileMetadata::_internal_set_compresseddownloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.compresseddownloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* AppFileMetadata::_internal_mutable_compresseddownloadurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.compresseddownloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* AppFileMetadata::release_compresseddownloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl)
  if (!_internal_has_compresseddownloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.compresseddownloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compresseddownloadurl_.IsDefault()) {
    _impl_.compresseddownloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppFileMetadata::set_allocated_compresseddownloadurl(std::string* compresseddownloadurl) {
  if (compresseddownloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.compresseddownloadurl_.SetAllocated(compresseddownloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compresseddownloadurl_.IsDefault()) {
    _impl_.compresseddownloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AppFileMetadata.compressedDownloadUrl)
}

// optional string signature = 8;
inline bool AppFileMetadata::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppFileMetadata::has_signature() const {
  return _internal_has_signature();
}
inline void AppFileMetadata::clear_signature() {
  _impl_.signature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppFileMetadata::signature() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AppFileMetadata.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppFileMetadata::set_signature(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AppFileMetadata.signature)
}
inline std::string* AppFileMetadata::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AppFileMetadata.signature)
  return _s;
}
inline const std::string& AppFileMetadata::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void AppFileMetadata::_internal_set_signature(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* AppFileMetadata::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* AppFileMetadata::release_signature() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AppFileMetadata.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppFileMetadata::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AppFileMetadata.signature)
}

// -------------------------------------------------------------------

// EncryptionParams

// optional int32 version = 1;
inline bool EncryptionParams::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EncryptionParams::has_version() const {
  return _internal_has_version();
}
inline void EncryptionParams::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t EncryptionParams::_internal_version() const {
  return _impl_.version_;
}
inline int32_t EncryptionParams::version() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.EncryptionParams.version)
  return _internal_version();
}
inline void EncryptionParams::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_ = value;
}
inline void EncryptionParams::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.EncryptionParams.version)
}

// optional string encryptionKey = 2;
inline bool EncryptionParams::_internal_has_encryptionkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptionParams::has_encryptionkey() const {
  return _internal_has_encryptionkey();
}
inline void EncryptionParams::clear_encryptionkey() {
  _impl_.encryptionkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptionParams::encryptionkey() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.EncryptionParams.encryptionKey)
  return _internal_encryptionkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionParams::set_encryptionkey(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.encryptionkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.EncryptionParams.encryptionKey)
}
inline std::string* EncryptionParams::mutable_encryptionkey() {
  std::string* _s = _internal_mutable_encryptionkey();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.EncryptionParams.encryptionKey)
  return _s;
}
inline const std::string& EncryptionParams::_internal_encryptionkey() const {
  return _impl_.encryptionkey_.Get();
}
inline void EncryptionParams::_internal_set_encryptionkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.encryptionkey_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionParams::_internal_mutable_encryptionkey() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.encryptionkey_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionParams::release_encryptionkey() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.EncryptionParams.encryptionKey)
  if (!_internal_has_encryptionkey()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.encryptionkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryptionkey_.IsDefault()) {
    _impl_.encryptionkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionParams::set_allocated_encryptionkey(std::string* encryptionkey) {
  if (encryptionkey != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.encryptionkey_.SetAllocated(encryptionkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryptionkey_.IsDefault()) {
    _impl_.encryptionkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.EncryptionParams.encryptionKey)
}

// optional string hmacKey = 3;
inline bool EncryptionParams::_internal_has_hmackey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EncryptionParams::has_hmackey() const {
  return _internal_has_hmackey();
}
inline void EncryptionParams::clear_hmackey() {
  _impl_.hmackey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EncryptionParams::hmackey() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.EncryptionParams.hmacKey)
  return _internal_hmackey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionParams::set_hmackey(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.hmackey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.EncryptionParams.hmacKey)
}
inline std::string* EncryptionParams::mutable_hmackey() {
  std::string* _s = _internal_mutable_hmackey();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.EncryptionParams.hmacKey)
  return _s;
}
inline const std::string& EncryptionParams::_internal_hmackey() const {
  return _impl_.hmackey_.Get();
}
inline void EncryptionParams::_internal_set_hmackey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hmackey_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionParams::_internal_mutable_hmackey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hmackey_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionParams::release_hmackey() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.EncryptionParams.hmacKey)
  if (!_internal_has_hmackey()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.hmackey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hmackey_.IsDefault()) {
    _impl_.hmackey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionParams::set_allocated_hmackey(std::string* hmackey) {
  if (hmackey != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hmackey_.SetAllocated(hmackey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hmackey_.IsDefault()) {
    _impl_.hmackey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.EncryptionParams.hmacKey)
}

// -------------------------------------------------------------------

// SplitDeliveryData

// optional string id = 1;
inline bool SplitDeliveryData::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SplitDeliveryData::has_id() const {
  return _internal_has_id();
}
inline void SplitDeliveryData::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SplitDeliveryData::id() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitDeliveryData::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.SplitDeliveryData.id)
}
inline std::string* SplitDeliveryData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.SplitDeliveryData.id)
  return _s;
}
inline const std::string& SplitDeliveryData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SplitDeliveryData::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::release_id() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.SplitDeliveryData.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SplitDeliveryData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.SplitDeliveryData.id)
}

// optional int64 downloadSize = 2;
inline bool SplitDeliveryData::_internal_has_downloadsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SplitDeliveryData::has_downloadsize() const {
  return _internal_has_downloadsize();
}
inline void SplitDeliveryData::clear_downloadsize() {
  _impl_.downloadsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t SplitDeliveryData::_internal_downloadsize() const {
  return _impl_.downloadsize_;
}
inline int64_t SplitDeliveryData::downloadsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.downloadSize)
  return _internal_downloadsize();
}
inline void SplitDeliveryData::_internal_set_downloadsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.downloadsize_ = value;
}
inline void SplitDeliveryData::set_downloadsize(int64_t value) {
  _internal_set_downloadsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.SplitDeliveryData.downloadSize)
}

// optional int64 gzippedDownloadSize = 3;
inline bool SplitDeliveryData::_internal_has_gzippeddownloadsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SplitDeliveryData::has_gzippeddownloadsize() const {
  return _internal_has_gzippeddownloadsize();
}
inline void SplitDeliveryData::clear_gzippeddownloadsize() {
  _impl_.gzippeddownloadsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t SplitDeliveryData::_internal_gzippeddownloadsize() const {
  return _impl_.gzippeddownloadsize_;
}
inline int64_t SplitDeliveryData::gzippeddownloadsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadSize)
  return _internal_gzippeddownloadsize();
}
inline void SplitDeliveryData::_internal_set_gzippeddownloadsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gzippeddownloadsize_ = value;
}
inline void SplitDeliveryData::set_gzippeddownloadsize(int64_t value) {
  _internal_set_gzippeddownloadsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadSize)
}

// optional string signature = 4;
inline bool SplitDeliveryData::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SplitDeliveryData::has_signature() const {
  return _internal_has_signature();
}
inline void SplitDeliveryData::clear_signature() {
  _impl_.signature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SplitDeliveryData::signature() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitDeliveryData::set_signature(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.SplitDeliveryData.signature)
}
inline std::string* SplitDeliveryData::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.SplitDeliveryData.signature)
  return _s;
}
inline const std::string& SplitDeliveryData::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SplitDeliveryData::_internal_set_signature(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::release_signature() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.SplitDeliveryData.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SplitDeliveryData::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.SplitDeliveryData.signature)
}

// optional string downloadUrl = 5;
inline bool SplitDeliveryData::_internal_has_downloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SplitDeliveryData::has_downloadurl() const {
  return _internal_has_downloadurl();
}
inline void SplitDeliveryData::clear_downloadurl() {
  _impl_.downloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SplitDeliveryData::downloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.downloadUrl)
  return _internal_downloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitDeliveryData::set_downloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.downloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.SplitDeliveryData.downloadUrl)
}
inline std::string* SplitDeliveryData::mutable_downloadurl() {
  std::string* _s = _internal_mutable_downloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.SplitDeliveryData.downloadUrl)
  return _s;
}
inline const std::string& SplitDeliveryData::_internal_downloadurl() const {
  return _impl_.downloadurl_.Get();
}
inline void SplitDeliveryData::_internal_set_downloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.downloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::_internal_mutable_downloadurl() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.downloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::release_downloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.SplitDeliveryData.downloadUrl)
  if (!_internal_has_downloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.downloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SplitDeliveryData::set_allocated_downloadurl(std::string* downloadurl) {
  if (downloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.downloadurl_.SetAllocated(downloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.SplitDeliveryData.downloadUrl)
}

// optional string gzippedDownloadUrl = 6;
inline bool SplitDeliveryData::_internal_has_gzippeddownloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SplitDeliveryData::has_gzippeddownloadurl() const {
  return _internal_has_gzippeddownloadurl();
}
inline void SplitDeliveryData::clear_gzippeddownloadurl() {
  _impl_.gzippeddownloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SplitDeliveryData::gzippeddownloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl)
  return _internal_gzippeddownloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitDeliveryData::set_gzippeddownloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.gzippeddownloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl)
}
inline std::string* SplitDeliveryData::mutable_gzippeddownloadurl() {
  std::string* _s = _internal_mutable_gzippeddownloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl)
  return _s;
}
inline const std::string& SplitDeliveryData::_internal_gzippeddownloadurl() const {
  return _impl_.gzippeddownloadurl_.Get();
}
inline void SplitDeliveryData::_internal_set_gzippeddownloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gzippeddownloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::_internal_mutable_gzippeddownloadurl() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.gzippeddownloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* SplitDeliveryData::release_gzippeddownloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl)
  if (!_internal_has_gzippeddownloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.gzippeddownloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gzippeddownloadurl_.IsDefault()) {
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SplitDeliveryData::set_allocated_gzippeddownloadurl(std::string* gzippeddownloadurl) {
  if (gzippeddownloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.gzippeddownloadurl_.SetAllocated(gzippeddownloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gzippeddownloadurl_.IsDefault()) {
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.SplitDeliveryData.gzippedDownloadUrl)
}

// optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 7;
inline bool SplitDeliveryData::_internal_has_patchdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.patchdata_ != nullptr);
  return value;
}
inline bool SplitDeliveryData::has_patchdata() const {
  return _internal_has_patchdata();
}
inline void SplitDeliveryData::clear_patchdata() {
  if (_impl_.patchdata_ != nullptr) _impl_.patchdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::playapi::proto::finsky::download::AndroidAppPatchData& SplitDeliveryData::_internal_patchdata() const {
  const ::playapi::proto::finsky::download::AndroidAppPatchData* p = _impl_.patchdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::download::AndroidAppPatchData&>(
      ::playapi::proto::finsky::download::_AndroidAppPatchData_default_instance_);
}
inline const ::playapi::proto::finsky::download::AndroidAppPatchData& SplitDeliveryData::patchdata() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.SplitDeliveryData.patchData)
  return _internal_patchdata();
}
inline void SplitDeliveryData::unsafe_arena_set_allocated_patchdata(
    ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.patchdata_);
  }
  _impl_.patchdata_ = patchdata;
  if (patchdata) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.download.SplitDeliveryData.patchData)
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* SplitDeliveryData::release_patchdata() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::finsky::download::AndroidAppPatchData* temp = _impl_.patchdata_;
  _impl_.patchdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* SplitDeliveryData::unsafe_arena_release_patchdata() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.SplitDeliveryData.patchData)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::finsky::download::AndroidAppPatchData* temp = _impl_.patchdata_;
  _impl_.patchdata_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* SplitDeliveryData::_internal_mutable_patchdata() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.patchdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::download::AndroidAppPatchData>(GetArenaForAllocation());
    _impl_.patchdata_ = p;
  }
  return _impl_.patchdata_;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* SplitDeliveryData::mutable_patchdata() {
  ::playapi::proto::finsky::download::AndroidAppPatchData* _msg = _internal_mutable_patchdata();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.SplitDeliveryData.patchData)
  return _msg;
}
inline void SplitDeliveryData::set_allocated_patchdata(::playapi::proto::finsky::download::AndroidAppPatchData* patchdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.patchdata_;
  }
  if (patchdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(patchdata);
    if (message_arena != submessage_arena) {
      patchdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patchdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.patchdata_ = patchdata;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.SplitDeliveryData.patchData)
}

// -------------------------------------------------------------------

// AndroidAppDeliveryData

// optional int64 downloadSize = 1;
inline bool AndroidAppDeliveryData::_internal_has_downloadsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_downloadsize() const {
  return _internal_has_downloadsize();
}
inline void AndroidAppDeliveryData::clear_downloadsize() {
  _impl_.downloadsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t AndroidAppDeliveryData::_internal_downloadsize() const {
  return _impl_.downloadsize_;
}
inline int64_t AndroidAppDeliveryData::downloadsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadSize)
  return _internal_downloadsize();
}
inline void AndroidAppDeliveryData::_internal_set_downloadsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.downloadsize_ = value;
}
inline void AndroidAppDeliveryData::set_downloadsize(int64_t value) {
  _internal_set_downloadsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadSize)
}

// optional string signature = 2;
inline bool AndroidAppDeliveryData::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_signature() const {
  return _internal_has_signature();
}
inline void AndroidAppDeliveryData::clear_signature() {
  _impl_.signature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidAppDeliveryData::signature() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidAppDeliveryData::set_signature(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.signature)
}
inline std::string* AndroidAppDeliveryData::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.signature)
  return _s;
}
inline const std::string& AndroidAppDeliveryData::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void AndroidAppDeliveryData::_internal_set_signature(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidAppDeliveryData::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidAppDeliveryData::release_signature() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppDeliveryData.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidAppDeliveryData::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.signature)
}

// optional string downloadUrl = 3;
inline bool AndroidAppDeliveryData::_internal_has_downloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_downloadurl() const {
  return _internal_has_downloadurl();
}
inline void AndroidAppDeliveryData::clear_downloadurl() {
  _impl_.downloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidAppDeliveryData::downloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl)
  return _internal_downloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidAppDeliveryData::set_downloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.downloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl)
}
inline std::string* AndroidAppDeliveryData::mutable_downloadurl() {
  std::string* _s = _internal_mutable_downloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl)
  return _s;
}
inline const std::string& AndroidAppDeliveryData::_internal_downloadurl() const {
  return _impl_.downloadurl_.Get();
}
inline void AndroidAppDeliveryData::_internal_set_downloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.downloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidAppDeliveryData::_internal_mutable_downloadurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.downloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidAppDeliveryData::release_downloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl)
  if (!_internal_has_downloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.downloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidAppDeliveryData::set_allocated_downloadurl(std::string* downloadurl) {
  if (downloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.downloadurl_.SetAllocated(downloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadurl_.IsDefault()) {
    _impl_.downloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadUrl)
}

// repeated .playapi.proto.finsky.download.AppFileMetadata additionalFile = 4;
inline int AndroidAppDeliveryData::_internal_additionalfile_size() const {
  return _impl_.additionalfile_.size();
}
inline int AndroidAppDeliveryData::additionalfile_size() const {
  return _internal_additionalfile_size();
}
inline void AndroidAppDeliveryData::clear_additionalfile() {
  _impl_.additionalfile_.Clear();
}
inline ::playapi::proto::finsky::download::AppFileMetadata* AndroidAppDeliveryData::mutable_additionalfile(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.additionalFile)
  return _impl_.additionalfile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::AppFileMetadata >*
AndroidAppDeliveryData::mutable_additionalfile() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.download.AndroidAppDeliveryData.additionalFile)
  return &_impl_.additionalfile_;
}
inline const ::playapi::proto::finsky::download::AppFileMetadata& AndroidAppDeliveryData::_internal_additionalfile(int index) const {
  return _impl_.additionalfile_.Get(index);
}
inline const ::playapi::proto::finsky::download::AppFileMetadata& AndroidAppDeliveryData::additionalfile(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.additionalFile)
  return _internal_additionalfile(index);
}
inline ::playapi::proto::finsky::download::AppFileMetadata* AndroidAppDeliveryData::_internal_add_additionalfile() {
  return _impl_.additionalfile_.Add();
}
inline ::playapi::proto::finsky::download::AppFileMetadata* AndroidAppDeliveryData::add_additionalfile() {
  ::playapi::proto::finsky::download::AppFileMetadata* _add = _internal_add_additionalfile();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.download.AndroidAppDeliveryData.additionalFile)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::AppFileMetadata >&
AndroidAppDeliveryData::additionalfile() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.download.AndroidAppDeliveryData.additionalFile)
  return _impl_.additionalfile_;
}

// repeated .playapi.proto.finsky.HttpCookie downloadAuthCookie = 5;
inline int AndroidAppDeliveryData::_internal_downloadauthcookie_size() const {
  return _impl_.downloadauthcookie_.size();
}
inline int AndroidAppDeliveryData::downloadauthcookie_size() const {
  return _internal_downloadauthcookie_size();
}
inline ::playapi::proto::finsky::HttpCookie* AndroidAppDeliveryData::mutable_downloadauthcookie(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadAuthCookie)
  return _impl_.downloadauthcookie_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::HttpCookie >*
AndroidAppDeliveryData::mutable_downloadauthcookie() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadAuthCookie)
  return &_impl_.downloadauthcookie_;
}
inline const ::playapi::proto::finsky::HttpCookie& AndroidAppDeliveryData::_internal_downloadauthcookie(int index) const {
  return _impl_.downloadauthcookie_.Get(index);
}
inline const ::playapi::proto::finsky::HttpCookie& AndroidAppDeliveryData::downloadauthcookie(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadAuthCookie)
  return _internal_downloadauthcookie(index);
}
inline ::playapi::proto::finsky::HttpCookie* AndroidAppDeliveryData::_internal_add_downloadauthcookie() {
  return _impl_.downloadauthcookie_.Add();
}
inline ::playapi::proto::finsky::HttpCookie* AndroidAppDeliveryData::add_downloadauthcookie() {
  ::playapi::proto::finsky::HttpCookie* _add = _internal_add_downloadauthcookie();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadAuthCookie)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::HttpCookie >&
AndroidAppDeliveryData::downloadauthcookie() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.download.AndroidAppDeliveryData.downloadAuthCookie)
  return _impl_.downloadauthcookie_;
}

// optional bool forwardLocked = 6;
inline bool AndroidAppDeliveryData::_internal_has_forwardlocked() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_forwardlocked() const {
  return _internal_has_forwardlocked();
}
inline void AndroidAppDeliveryData::clear_forwardlocked() {
  _impl_.forwardlocked_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool AndroidAppDeliveryData::_internal_forwardlocked() const {
  return _impl_.forwardlocked_;
}
inline bool AndroidAppDeliveryData::forwardlocked() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.forwardLocked)
  return _internal_forwardlocked();
}
inline void AndroidAppDeliveryData::_internal_set_forwardlocked(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.forwardlocked_ = value;
}
inline void AndroidAppDeliveryData::set_forwardlocked(bool value) {
  _internal_set_forwardlocked(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.forwardLocked)
}

// optional int64 refundTimeout = 7;
inline bool AndroidAppDeliveryData::_internal_has_refundtimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_refundtimeout() const {
  return _internal_has_refundtimeout();
}
inline void AndroidAppDeliveryData::clear_refundtimeout() {
  _impl_.refundtimeout_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t AndroidAppDeliveryData::_internal_refundtimeout() const {
  return _impl_.refundtimeout_;
}
inline int64_t AndroidAppDeliveryData::refundtimeout() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.refundTimeout)
  return _internal_refundtimeout();
}
inline void AndroidAppDeliveryData::_internal_set_refundtimeout(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.refundtimeout_ = value;
}
inline void AndroidAppDeliveryData::set_refundtimeout(int64_t value) {
  _internal_set_refundtimeout(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.refundTimeout)
}

// optional bool serverInitiated = 8;
inline bool AndroidAppDeliveryData::_internal_has_serverinitiated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_serverinitiated() const {
  return _internal_has_serverinitiated();
}
inline void AndroidAppDeliveryData::clear_serverinitiated() {
  _impl_.serverinitiated_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool AndroidAppDeliveryData::_internal_serverinitiated() const {
  return _impl_.serverinitiated_;
}
inline bool AndroidAppDeliveryData::serverinitiated() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.serverInitiated)
  return _internal_serverinitiated();
}
inline void AndroidAppDeliveryData::_internal_set_serverinitiated(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.serverinitiated_ = value;
}
inline void AndroidAppDeliveryData::set_serverinitiated(bool value) {
  _internal_set_serverinitiated(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.serverInitiated)
}

// optional int64 postInstallRefundWindowMillis = 9;
inline bool AndroidAppDeliveryData::_internal_has_postinstallrefundwindowmillis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_postinstallrefundwindowmillis() const {
  return _internal_has_postinstallrefundwindowmillis();
}
inline void AndroidAppDeliveryData::clear_postinstallrefundwindowmillis() {
  _impl_.postinstallrefundwindowmillis_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t AndroidAppDeliveryData::_internal_postinstallrefundwindowmillis() const {
  return _impl_.postinstallrefundwindowmillis_;
}
inline int64_t AndroidAppDeliveryData::postinstallrefundwindowmillis() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.postInstallRefundWindowMillis)
  return _internal_postinstallrefundwindowmillis();
}
inline void AndroidAppDeliveryData::_internal_set_postinstallrefundwindowmillis(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.postinstallrefundwindowmillis_ = value;
}
inline void AndroidAppDeliveryData::set_postinstallrefundwindowmillis(int64_t value) {
  _internal_set_postinstallrefundwindowmillis(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.postInstallRefundWindowMillis)
}

// optional bool immediateStartNeeded = 10;
inline bool AndroidAppDeliveryData::_internal_has_immediatestartneeded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_immediatestartneeded() const {
  return _internal_has_immediatestartneeded();
}
inline void AndroidAppDeliveryData::clear_immediatestartneeded() {
  _impl_.immediatestartneeded_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool AndroidAppDeliveryData::_internal_immediatestartneeded() const {
  return _impl_.immediatestartneeded_;
}
inline bool AndroidAppDeliveryData::immediatestartneeded() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.immediateStartNeeded)
  return _internal_immediatestartneeded();
}
inline void AndroidAppDeliveryData::_internal_set_immediatestartneeded(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.immediatestartneeded_ = value;
}
inline void AndroidAppDeliveryData::set_immediatestartneeded(bool value) {
  _internal_set_immediatestartneeded(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.immediateStartNeeded)
}

// optional .playapi.proto.finsky.download.AndroidAppPatchData patchData = 11;
inline bool AndroidAppDeliveryData::_internal_has_patchdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.patchdata_ != nullptr);
  return value;
}
inline bool AndroidAppDeliveryData::has_patchdata() const {
  return _internal_has_patchdata();
}
inline void AndroidAppDeliveryData::clear_patchdata() {
  if (_impl_.patchdata_ != nullptr) _impl_.patchdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::playapi::proto::finsky::download::AndroidAppPatchData& AndroidAppDeliveryData::_internal_patchdata() const {
  const ::playapi::proto::finsky::download::AndroidAppPatchData* p = _impl_.patchdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::download::AndroidAppPatchData&>(
      ::playapi::proto::finsky::download::_AndroidAppPatchData_default_instance_);
}
inline const ::playapi::proto::finsky::download::AndroidAppPatchData& AndroidAppDeliveryData::patchdata() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.patchData)
  return _internal_patchdata();
}
inline void AndroidAppDeliveryData::unsafe_arena_set_allocated_patchdata(
    ::playapi::proto::finsky::download::AndroidAppPatchData* patchdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.patchdata_);
  }
  _impl_.patchdata_ = patchdata;
  if (patchdata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.patchData)
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AndroidAppDeliveryData::release_patchdata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::download::AndroidAppPatchData* temp = _impl_.patchdata_;
  _impl_.patchdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AndroidAppDeliveryData::unsafe_arena_release_patchdata() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppDeliveryData.patchData)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::download::AndroidAppPatchData* temp = _impl_.patchdata_;
  _impl_.patchdata_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AndroidAppDeliveryData::_internal_mutable_patchdata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.patchdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::download::AndroidAppPatchData>(GetArenaForAllocation());
    _impl_.patchdata_ = p;
  }
  return _impl_.patchdata_;
}
inline ::playapi::proto::finsky::download::AndroidAppPatchData* AndroidAppDeliveryData::mutable_patchdata() {
  ::playapi::proto::finsky::download::AndroidAppPatchData* _msg = _internal_mutable_patchdata();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.patchData)
  return _msg;
}
inline void AndroidAppDeliveryData::set_allocated_patchdata(::playapi::proto::finsky::download::AndroidAppPatchData* patchdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.patchdata_;
  }
  if (patchdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(patchdata);
    if (message_arena != submessage_arena) {
      patchdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patchdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.patchdata_ = patchdata;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.patchData)
}

// optional .playapi.proto.finsky.download.EncryptionParams encryptionParams = 12;
inline bool AndroidAppDeliveryData::_internal_has_encryptionparams() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.encryptionparams_ != nullptr);
  return value;
}
inline bool AndroidAppDeliveryData::has_encryptionparams() const {
  return _internal_has_encryptionparams();
}
inline void AndroidAppDeliveryData::clear_encryptionparams() {
  if (_impl_.encryptionparams_ != nullptr) _impl_.encryptionparams_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::playapi::proto::finsky::download::EncryptionParams& AndroidAppDeliveryData::_internal_encryptionparams() const {
  const ::playapi::proto::finsky::download::EncryptionParams* p = _impl_.encryptionparams_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::download::EncryptionParams&>(
      ::playapi::proto::finsky::download::_EncryptionParams_default_instance_);
}
inline const ::playapi::proto::finsky::download::EncryptionParams& AndroidAppDeliveryData::encryptionparams() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.encryptionParams)
  return _internal_encryptionparams();
}
inline void AndroidAppDeliveryData::unsafe_arena_set_allocated_encryptionparams(
    ::playapi::proto::finsky::download::EncryptionParams* encryptionparams) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.encryptionparams_);
  }
  _impl_.encryptionparams_ = encryptionparams;
  if (encryptionparams) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.encryptionParams)
}
inline ::playapi::proto::finsky::download::EncryptionParams* AndroidAppDeliveryData::release_encryptionparams() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::finsky::download::EncryptionParams* temp = _impl_.encryptionparams_;
  _impl_.encryptionparams_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::download::EncryptionParams* AndroidAppDeliveryData::unsafe_arena_release_encryptionparams() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppDeliveryData.encryptionParams)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::playapi::proto::finsky::download::EncryptionParams* temp = _impl_.encryptionparams_;
  _impl_.encryptionparams_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::download::EncryptionParams* AndroidAppDeliveryData::_internal_mutable_encryptionparams() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.encryptionparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::download::EncryptionParams>(GetArenaForAllocation());
    _impl_.encryptionparams_ = p;
  }
  return _impl_.encryptionparams_;
}
inline ::playapi::proto::finsky::download::EncryptionParams* AndroidAppDeliveryData::mutable_encryptionparams() {
  ::playapi::proto::finsky::download::EncryptionParams* _msg = _internal_mutable_encryptionparams();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.encryptionParams)
  return _msg;
}
inline void AndroidAppDeliveryData::set_allocated_encryptionparams(::playapi::proto::finsky::download::EncryptionParams* encryptionparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.encryptionparams_;
  }
  if (encryptionparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encryptionparams);
    if (message_arena != submessage_arena) {
      encryptionparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryptionparams, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.encryptionparams_ = encryptionparams;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.encryptionParams)
}

// optional string gzippedDownloadUrl = 13;
inline bool AndroidAppDeliveryData::_internal_has_gzippeddownloadurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_gzippeddownloadurl() const {
  return _internal_has_gzippeddownloadurl();
}
inline void AndroidAppDeliveryData::clear_gzippeddownloadurl() {
  _impl_.gzippeddownloadurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidAppDeliveryData::gzippeddownloadurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl)
  return _internal_gzippeddownloadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidAppDeliveryData::set_gzippeddownloadurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.gzippeddownloadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl)
}
inline std::string* AndroidAppDeliveryData::mutable_gzippeddownloadurl() {
  std::string* _s = _internal_mutable_gzippeddownloadurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl)
  return _s;
}
inline const std::string& AndroidAppDeliveryData::_internal_gzippeddownloadurl() const {
  return _impl_.gzippeddownloadurl_.Get();
}
inline void AndroidAppDeliveryData::_internal_set_gzippeddownloadurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gzippeddownloadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidAppDeliveryData::_internal_mutable_gzippeddownloadurl() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.gzippeddownloadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidAppDeliveryData::release_gzippeddownloadurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl)
  if (!_internal_has_gzippeddownloadurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.gzippeddownloadurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gzippeddownloadurl_.IsDefault()) {
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AndroidAppDeliveryData::set_allocated_gzippeddownloadurl(std::string* gzippeddownloadurl) {
  if (gzippeddownloadurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.gzippeddownloadurl_.SetAllocated(gzippeddownloadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gzippeddownloadurl_.IsDefault()) {
    _impl_.gzippeddownloadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadUrl)
}

// optional int64 gzippedDownloadSize = 14;
inline bool AndroidAppDeliveryData::_internal_has_gzippeddownloadsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_gzippeddownloadsize() const {
  return _internal_has_gzippeddownloadsize();
}
inline void AndroidAppDeliveryData::clear_gzippeddownloadsize() {
  _impl_.gzippeddownloadsize_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int64_t AndroidAppDeliveryData::_internal_gzippeddownloadsize() const {
  return _impl_.gzippeddownloadsize_;
}
inline int64_t AndroidAppDeliveryData::gzippeddownloadsize() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadSize)
  return _internal_gzippeddownloadsize();
}
inline void AndroidAppDeliveryData::_internal_set_gzippeddownloadsize(int64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.gzippeddownloadsize_ = value;
}
inline void AndroidAppDeliveryData::set_gzippeddownloadsize(int64_t value) {
  _internal_set_gzippeddownloadsize(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.gzippedDownloadSize)
}

// repeated .playapi.proto.finsky.download.SplitDeliveryData splitDeliveryData = 15;
inline int AndroidAppDeliveryData::_internal_splitdeliverydata_size() const {
  return _impl_.splitdeliverydata_.size();
}
inline int AndroidAppDeliveryData::splitdeliverydata_size() const {
  return _internal_splitdeliverydata_size();
}
inline void AndroidAppDeliveryData::clear_splitdeliverydata() {
  _impl_.splitdeliverydata_.Clear();
}
inline ::playapi::proto::finsky::download::SplitDeliveryData* AndroidAppDeliveryData::mutable_splitdeliverydata(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.AndroidAppDeliveryData.splitDeliveryData)
  return _impl_.splitdeliverydata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::SplitDeliveryData >*
AndroidAppDeliveryData::mutable_splitdeliverydata() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.download.AndroidAppDeliveryData.splitDeliveryData)
  return &_impl_.splitdeliverydata_;
}
inline const ::playapi::proto::finsky::download::SplitDeliveryData& AndroidAppDeliveryData::_internal_splitdeliverydata(int index) const {
  return _impl_.splitdeliverydata_.Get(index);
}
inline const ::playapi::proto::finsky::download::SplitDeliveryData& AndroidAppDeliveryData::splitdeliverydata(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.splitDeliveryData)
  return _internal_splitdeliverydata(index);
}
inline ::playapi::proto::finsky::download::SplitDeliveryData* AndroidAppDeliveryData::_internal_add_splitdeliverydata() {
  return _impl_.splitdeliverydata_.Add();
}
inline ::playapi::proto::finsky::download::SplitDeliveryData* AndroidAppDeliveryData::add_splitdeliverydata() {
  ::playapi::proto::finsky::download::SplitDeliveryData* _add = _internal_add_splitdeliverydata();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.download.AndroidAppDeliveryData.splitDeliveryData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::download::SplitDeliveryData >&
AndroidAppDeliveryData::splitdeliverydata() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.download.AndroidAppDeliveryData.splitDeliveryData)
  return _impl_.splitdeliverydata_;
}

// optional int32 installLocation = 16;
inline bool AndroidAppDeliveryData::_internal_has_installlocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_installlocation() const {
  return _internal_has_installlocation();
}
inline void AndroidAppDeliveryData::clear_installlocation() {
  _impl_.installlocation_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t AndroidAppDeliveryData::_internal_installlocation() const {
  return _impl_.installlocation_;
}
inline int32_t AndroidAppDeliveryData::installlocation() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.installLocation)
  return _internal_installlocation();
}
inline void AndroidAppDeliveryData::_internal_set_installlocation(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.installlocation_ = value;
}
inline void AndroidAppDeliveryData::set_installlocation(int32_t value) {
  _internal_set_installlocation(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.installLocation)
}

// optional bool everExternallyHosted = 17;
inline bool AndroidAppDeliveryData::_internal_has_everexternallyhosted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AndroidAppDeliveryData::has_everexternallyhosted() const {
  return _internal_has_everexternallyhosted();
}
inline void AndroidAppDeliveryData::clear_everexternallyhosted() {
  _impl_.everexternallyhosted_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool AndroidAppDeliveryData::_internal_everexternallyhosted() const {
  return _impl_.everexternallyhosted_;
}
inline bool AndroidAppDeliveryData::everexternallyhosted() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.AndroidAppDeliveryData.everExternallyHosted)
  return _internal_everexternallyhosted();
}
inline void AndroidAppDeliveryData::_internal_set_everexternallyhosted(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.everexternallyhosted_ = value;
}
inline void AndroidAppDeliveryData::set_everexternallyhosted(bool value) {
  _internal_set_everexternallyhosted(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.AndroidAppDeliveryData.everExternallyHosted)
}

// -------------------------------------------------------------------

// DeliveryResponse

// optional int32 status = 1;
inline bool DeliveryResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeliveryResponse::has_status() const {
  return _internal_has_status();
}
inline void DeliveryResponse::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeliveryResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t DeliveryResponse::status() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.DeliveryResponse.status)
  return _internal_status();
}
inline void DeliveryResponse::_internal_set_status(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}
inline void DeliveryResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.download.DeliveryResponse.status)
}

// optional .playapi.proto.finsky.download.AndroidAppDeliveryData appDeliveryData = 2;
inline bool DeliveryResponse::_internal_has_appdeliverydata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.appdeliverydata_ != nullptr);
  return value;
}
inline bool DeliveryResponse::has_appdeliverydata() const {
  return _internal_has_appdeliverydata();
}
inline void DeliveryResponse::clear_appdeliverydata() {
  if (_impl_.appdeliverydata_ != nullptr) _impl_.appdeliverydata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::playapi::proto::finsky::download::AndroidAppDeliveryData& DeliveryResponse::_internal_appdeliverydata() const {
  const ::playapi::proto::finsky::download::AndroidAppDeliveryData* p = _impl_.appdeliverydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::download::AndroidAppDeliveryData&>(
      ::playapi::proto::finsky::download::_AndroidAppDeliveryData_default_instance_);
}
inline const ::playapi::proto::finsky::download::AndroidAppDeliveryData& DeliveryResponse::appdeliverydata() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.download.DeliveryResponse.appDeliveryData)
  return _internal_appdeliverydata();
}
inline void DeliveryResponse::unsafe_arena_set_allocated_appdeliverydata(
    ::playapi::proto::finsky::download::AndroidAppDeliveryData* appdeliverydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appdeliverydata_);
  }
  _impl_.appdeliverydata_ = appdeliverydata;
  if (appdeliverydata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.download.DeliveryResponse.appDeliveryData)
}
inline ::playapi::proto::finsky::download::AndroidAppDeliveryData* DeliveryResponse::release_appdeliverydata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::download::AndroidAppDeliveryData* temp = _impl_.appdeliverydata_;
  _impl_.appdeliverydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppDeliveryData* DeliveryResponse::unsafe_arena_release_appdeliverydata() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.download.DeliveryResponse.appDeliveryData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::playapi::proto::finsky::download::AndroidAppDeliveryData* temp = _impl_.appdeliverydata_;
  _impl_.appdeliverydata_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::download::AndroidAppDeliveryData* DeliveryResponse::_internal_mutable_appdeliverydata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.appdeliverydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::download::AndroidAppDeliveryData>(GetArenaForAllocation());
    _impl_.appdeliverydata_ = p;
  }
  return _impl_.appdeliverydata_;
}
inline ::playapi::proto::finsky::download::AndroidAppDeliveryData* DeliveryResponse::mutable_appdeliverydata() {
  ::playapi::proto::finsky::download::AndroidAppDeliveryData* _msg = _internal_mutable_appdeliverydata();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.download.DeliveryResponse.appDeliveryData)
  return _msg;
}
inline void DeliveryResponse::set_allocated_appdeliverydata(::playapi::proto::finsky::download::AndroidAppDeliveryData* appdeliverydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.appdeliverydata_;
  }
  if (appdeliverydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(appdeliverydata);
    if (message_arena != submessage_arena) {
      appdeliverydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appdeliverydata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.appdeliverydata_ = appdeliverydata;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.download.DeliveryResponse.appDeliveryData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace download
}  // namespace finsky
}  // namespace proto
}  // namespace playapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_5fdownload_2eproto
