// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_search.proto

#include "play_search.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace playapi {
namespace proto {
namespace finsky {
namespace search {
PROTOBUF_CONSTEXPR SearchResponse::SearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.doc_)*/{}
  , /*decltype(_impl_.relatedsearch_)*/{}
  , /*decltype(_impl_.originalquery_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suggestedquery_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aggregatequery_)*/false
  , /*decltype(_impl_.fullpagereplaced_)*/false
  , /*decltype(_impl_.containssnow_)*/false} {}
struct SearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResponseDefaultTypeInternal() {}
  union {
    SearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
PROTOBUF_CONSTEXPR RelatedSearch::RelatedSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.searchurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backendid_)*/0
  , /*decltype(_impl_.doctype_)*/0
  , /*decltype(_impl_.current_)*/false} {}
struct RelatedSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelatedSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelatedSearchDefaultTypeInternal() {}
  union {
    RelatedSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelatedSearchDefaultTypeInternal _RelatedSearch_default_instance_;
PROTOBUF_CONSTEXPR SearchSuggestResponse::SearchSuggestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.suggestion_)*/{}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SearchSuggestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchSuggestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchSuggestResponseDefaultTypeInternal() {}
  union {
    SearchSuggestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchSuggestResponseDefaultTypeInternal _SearchSuggestResponse_default_instance_;
PROTOBUF_CONSTEXPR Suggestion::Suggestion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.suggestedquery_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverlogscookie_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.navsuggestion_)*/nullptr
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.link_)*/nullptr
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.searchbackend_)*/0} {}
struct SuggestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestionDefaultTypeInternal() {}
  union {
    Suggestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestionDefaultTypeInternal _Suggestion_default_instance_;
PROTOBUF_CONSTEXPR NavSuggestion::NavSuggestion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.docid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imageblob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_)*/nullptr} {}
struct NavSuggestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavSuggestionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavSuggestionDefaultTypeInternal() {}
  union {
    NavSuggestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavSuggestionDefaultTypeInternal _NavSuggestion_default_instance_;
}  // namespace search
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
static ::_pb::Metadata file_level_metadata_play_5fsearch_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_play_5fsearch_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_play_5fsearch_2eproto = nullptr;

const uint32_t TableStruct_play_5fsearch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.originalquery_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.suggestedquery_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.aggregatequery_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.doc_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.relatedsearch_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.fullpagereplaced_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchResponse, _impl_.containssnow_),
  0,
  1,
  3,
  ~0u,
  ~0u,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _impl_.searchurl_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _impl_.backendid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _impl_.doctype_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::RelatedSearch, _impl_.current_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchSuggestResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchSuggestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchSuggestResponse, _impl_.suggestion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::SearchSuggestResponse, _impl_.serverlogscookie_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.suggestedquery_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.navsuggestion_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.serverlogscookie_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.link_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::Suggestion, _impl_.searchbackend_),
  7,
  0,
  3,
  1,
  4,
  2,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::NavSuggestion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::NavSuggestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::NavSuggestion, _impl_.docid_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::NavSuggestion, _impl_.imageblob_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::NavSuggestion, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::playapi::proto::finsky::search::NavSuggestion, _impl_.description_),
  0,
  1,
  3,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::playapi::proto::finsky::search::SearchResponse)},
  { 22, 33, -1, sizeof(::playapi::proto::finsky::search::RelatedSearch)},
  { 38, 46, -1, sizeof(::playapi::proto::finsky::search::SearchSuggestResponse)},
  { 48, 63, -1, sizeof(::playapi::proto::finsky::search::Suggestion)},
  { 72, 82, -1, sizeof(::playapi::proto::finsky::search::NavSuggestion)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::playapi::proto::finsky::search::_SearchResponse_default_instance_._instance,
  &::playapi::proto::finsky::search::_RelatedSearch_default_instance_._instance,
  &::playapi::proto::finsky::search::_SearchSuggestResponse_default_instance_._instance,
  &::playapi::proto::finsky::search::_Suggestion_default_instance_._instance,
  &::playapi::proto::finsky::search::_NavSuggestion_default_instance_._instance,
};

const char descriptor_table_protodef_play_5fsearch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021play_search.proto\022\033playapi.proto.finsk"
  "y.search\032\021play_common.proto\032\023play_docume"
  "nt.proto\032\017play_link.proto\"\227\002\n\016SearchResp"
  "onse\022\025\n\roriginalQuery\030\001 \001(\t\022\026\n\016suggested"
  "Query\030\002 \001(\t\022\026\n\016aggregateQuery\030\003 \001(\010\0221\n\003d"
  "oc\030\005 \003(\0132$.playapi.proto.finsky.document"
  ".DocV2\022A\n\rrelatedSearch\030\006 \003(\0132*.playapi."
  "proto.finsky.search.RelatedSearch\022\030\n\020ser"
  "verLogsCookie\030\007 \001(\014\022\030\n\020fullPageReplaced\030"
  "\010 \001(\010\022\024\n\014containsSnow\030\t \001(\010\"g\n\rRelatedSe"
  "arch\022\021\n\tsearchUrl\030\001 \001(\t\022\016\n\006header\030\002 \001(\t\022"
  "\021\n\tbackendId\030\003 \001(\005\022\017\n\007docType\030\004 \001(\005\022\017\n\007c"
  "urrent\030\005 \001(\010\"n\n\025SearchSuggestResponse\022;\n"
  "\nsuggestion\030\001 \003(\0132\'.playapi.proto.finsky"
  ".search.Suggestion\022\030\n\020serverLogsCookie\030\002"
  " \001(\014\"\316\002\n\nSuggestion\022\014\n\004type\030\001 \001(\005\022\026\n\016sug"
  "gestedQuery\030\002 \001(\t\022A\n\rnavSuggestion\030\003 \001(\013"
  "2*.playapi.proto.finsky.search.NavSugges"
  "tion\022\030\n\020serverLogsCookie\030\004 \001(\014\022*\n\005image\030"
  "\005 \001(\0132\033.playapi.proto.finsky.Image\022\023\n\013di"
  "splayText\030\006 \001(\t\022-\n\004link\030\007 \001(\0132\037.playapi."
  "proto.finsky.link.Link\0226\n\010document\030\010 \001(\013"
  "2$.playapi.proto.finsky.document.DocV2\022\025"
  "\n\rsearchBackend\030\t \001(\005\"r\n\rNavSuggestion\022\r"
  "\n\005docId\030\001 \001(\t\022\021\n\timageBlob\030\002 \001(\014\022*\n\005imag"
  "e\030\003 \001(\0132\033.playapi.proto.finsky.Image\022\023\n\013"
  "description\030\004 \001(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_play_5fsearch_2eproto_deps[3] = {
  &::descriptor_table_play_5fcommon_2eproto,
  &::descriptor_table_play_5fdocument_2eproto,
  &::descriptor_table_play_5flink_2eproto,
};
static ::_pbi::once_flag descriptor_table_play_5fsearch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_play_5fsearch_2eproto = {
    false, false, 1057, descriptor_table_protodef_play_5fsearch_2eproto,
    "play_search.proto",
    &descriptor_table_play_5fsearch_2eproto_once, descriptor_table_play_5fsearch_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_play_5fsearch_2eproto::offsets,
    file_level_metadata_play_5fsearch_2eproto, file_level_enum_descriptors_play_5fsearch_2eproto,
    file_level_service_descriptors_play_5fsearch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_play_5fsearch_2eproto_getter() {
  return &descriptor_table_play_5fsearch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_play_5fsearch_2eproto(&descriptor_table_play_5fsearch_2eproto);
namespace playapi {
namespace proto {
namespace finsky {
namespace search {

// ===================================================================

class SearchResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchResponse>()._impl_._has_bits_);
  static void set_has_originalquery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suggestedquery(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aggregatequery(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fullpagereplaced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_containssnow(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

void SearchResponse::clear_doc() {
  _impl_.doc_.Clear();
}
SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.search.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.doc_){from._impl_.doc_}
    , decltype(_impl_.relatedsearch_){from._impl_.relatedsearch_}
    , decltype(_impl_.originalquery_){}
    , decltype(_impl_.suggestedquery_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.aggregatequery_){}
    , decltype(_impl_.fullpagereplaced_){}
    , decltype(_impl_.containssnow_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.originalquery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalquery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originalquery()) {
    _this->_impl_.originalquery_.Set(from._internal_originalquery(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suggestedquery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggestedquery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suggestedquery()) {
    _this->_impl_.suggestedquery_.Set(from._internal_suggestedquery(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.aggregatequery_, &from._impl_.aggregatequery_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.containssnow_) -
    reinterpret_cast<char*>(&_impl_.aggregatequery_)) + sizeof(_impl_.containssnow_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.search.SearchResponse)
}

inline void SearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.doc_){arena}
    , decltype(_impl_.relatedsearch_){arena}
    , decltype(_impl_.originalquery_){}
    , decltype(_impl_.suggestedquery_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.aggregatequery_){false}
    , decltype(_impl_.fullpagereplaced_){false}
    , decltype(_impl_.containssnow_){false}
  };
  _impl_.originalquery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalquery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suggestedquery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggestedquery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.search.SearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.doc_.~RepeatedPtrField();
  _impl_.relatedsearch_.~RepeatedPtrField();
  _impl_.originalquery_.Destroy();
  _impl_.suggestedquery_.Destroy();
  _impl_.serverlogscookie_.Destroy();
}

void SearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.search.SearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.doc_.Clear();
  _impl_.relatedsearch_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.originalquery_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.suggestedquery_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.aggregatequery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.containssnow_) -
      reinterpret_cast<char*>(&_impl_.aggregatequery_)) + sizeof(_impl_.containssnow_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string originalQuery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_originalquery();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.SearchResponse.originalQuery");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string suggestedQuery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_suggestedquery();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.SearchResponse.suggestedQuery");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool aggregateQuery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_aggregatequery(&has_bits);
          _impl_.aggregatequery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.document.DocV2 doc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_doc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .playapi.proto.finsky.search.RelatedSearch relatedSearch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relatedsearch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fullPageReplaced = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fullpagereplaced(&has_bits);
          _impl_.fullpagereplaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool containsSnow = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_containssnow(&has_bits);
          _impl_.containssnow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.search.SearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string originalQuery = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_originalquery().data(), static_cast<int>(this->_internal_originalquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.SearchResponse.originalQuery");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_originalquery(), target);
  }

  // optional string suggestedQuery = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suggestedquery().data(), static_cast<int>(this->_internal_suggestedquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.SearchResponse.suggestedQuery");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suggestedquery(), target);
  }

  // optional bool aggregateQuery = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_aggregatequery(), target);
  }

  // repeated .playapi.proto.finsky.document.DocV2 doc = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_doc_size()); i < n; i++) {
    const auto& repfield = this->_internal_doc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .playapi.proto.finsky.search.RelatedSearch relatedSearch = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relatedsearch_size()); i < n; i++) {
    const auto& repfield = this->_internal_relatedsearch(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes serverLogsCookie = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_serverlogscookie(), target);
  }

  // optional bool fullPageReplaced = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_fullpagereplaced(), target);
  }

  // optional bool containsSnow = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_containssnow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.search.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.search.SearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.document.DocV2 doc = 5;
  total_size += 1UL * this->_internal_doc_size();
  for (const auto& msg : this->_impl_.doc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .playapi.proto.finsky.search.RelatedSearch relatedSearch = 6;
  total_size += 1UL * this->_internal_relatedsearch_size();
  for (const auto& msg : this->_impl_.relatedsearch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string originalQuery = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originalquery());
    }

    // optional string suggestedQuery = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggestedquery());
    }

    // optional bytes serverLogsCookie = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional bool aggregateQuery = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool fullPageReplaced = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool containsSnow = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResponse::GetClassData() const { return &_class_data_; }


void SearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResponse*>(&to_msg);
  auto& from = static_cast<const SearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.search.SearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.doc_.MergeFrom(from._impl_.doc_);
  _this->_impl_.relatedsearch_.MergeFrom(from._impl_.relatedsearch_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_originalquery(from._internal_originalquery());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_suggestedquery(from._internal_suggestedquery());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.aggregatequery_ = from._impl_.aggregatequery_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fullpagereplaced_ = from._impl_.fullpagereplaced_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.containssnow_ = from._impl_.containssnow_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.search.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.doc_.InternalSwap(&other->_impl_.doc_);
  _impl_.relatedsearch_.InternalSwap(&other->_impl_.relatedsearch_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalquery_, lhs_arena,
      &other->_impl_.originalquery_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suggestedquery_, lhs_arena,
      &other->_impl_.suggestedquery_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResponse, _impl_.containssnow_)
      + sizeof(SearchResponse::_impl_.containssnow_)
      - PROTOBUF_FIELD_OFFSET(SearchResponse, _impl_.aggregatequery_)>(
          reinterpret_cast<char*>(&_impl_.aggregatequery_),
          reinterpret_cast<char*>(&other->_impl_.aggregatequery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsearch_2eproto_getter, &descriptor_table_play_5fsearch_2eproto_once,
      file_level_metadata_play_5fsearch_2eproto[0]);
}

// ===================================================================

class RelatedSearch::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedSearch>()._impl_._has_bits_);
  static void set_has_searchurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backendid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_doctype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_current(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RelatedSearch::RelatedSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.search.RelatedSearch)
}
RelatedSearch::RelatedSearch(const RelatedSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelatedSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.searchurl_){}
    , decltype(_impl_.header_){}
    , decltype(_impl_.backendid_){}
    , decltype(_impl_.doctype_){}
    , decltype(_impl_.current_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.searchurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.searchurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_searchurl()) {
    _this->_impl_.searchurl_.Set(from._internal_searchurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_header()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.backendid_, &from._impl_.backendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_) -
    reinterpret_cast<char*>(&_impl_.backendid_)) + sizeof(_impl_.current_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.search.RelatedSearch)
}

inline void RelatedSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.searchurl_){}
    , decltype(_impl_.header_){}
    , decltype(_impl_.backendid_){0}
    , decltype(_impl_.doctype_){0}
    , decltype(_impl_.current_){false}
  };
  _impl_.searchurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.searchurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelatedSearch::~RelatedSearch() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.search.RelatedSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelatedSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searchurl_.Destroy();
  _impl_.header_.Destroy();
}

void RelatedSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelatedSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.search.RelatedSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.searchurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.header_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.backendid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.current_) -
        reinterpret_cast<char*>(&_impl_.backendid_)) + sizeof(_impl_.current_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string searchUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_searchurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.RelatedSearch.searchUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.RelatedSearch.header");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 backendId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_backendid(&has_bits);
          _impl_.backendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 docType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_doctype(&has_bits);
          _impl_.doctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool current = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_current(&has_bits);
          _impl_.current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelatedSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.search.RelatedSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string searchUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_searchurl().data(), static_cast<int>(this->_internal_searchurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.RelatedSearch.searchUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_searchurl(), target);
  }

  // optional string header = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.RelatedSearch.header");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_header(), target);
  }

  // optional int32 backendId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_backendid(), target);
  }

  // optional int32 docType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_doctype(), target);
  }

  // optional bool current = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.search.RelatedSearch)
  return target;
}

size_t RelatedSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.search.RelatedSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string searchUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_searchurl());
    }

    // optional string header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header());
    }

    // optional int32 backendId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_backendid());
    }

    // optional int32 docType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_doctype());
    }

    // optional bool current = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelatedSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelatedSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelatedSearch::GetClassData() const { return &_class_data_; }


void RelatedSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelatedSearch*>(&to_msg);
  auto& from = static_cast<const RelatedSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.search.RelatedSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_searchurl(from._internal_searchurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.backendid_ = from._impl_.backendid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.doctype_ = from._impl_.doctype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.current_ = from._impl_.current_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelatedSearch::CopyFrom(const RelatedSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.search.RelatedSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedSearch::IsInitialized() const {
  return true;
}

void RelatedSearch::InternalSwap(RelatedSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.searchurl_, lhs_arena,
      &other->_impl_.searchurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelatedSearch, _impl_.current_)
      + sizeof(RelatedSearch::_impl_.current_)
      - PROTOBUF_FIELD_OFFSET(RelatedSearch, _impl_.backendid_)>(
          reinterpret_cast<char*>(&_impl_.backendid_),
          reinterpret_cast<char*>(&other->_impl_.backendid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsearch_2eproto_getter, &descriptor_table_play_5fsearch_2eproto_once,
      file_level_metadata_play_5fsearch_2eproto[1]);
}

// ===================================================================

class SearchSuggestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchSuggestResponse>()._impl_._has_bits_);
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SearchSuggestResponse::SearchSuggestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.search.SearchSuggestResponse)
}
SearchSuggestResponse::SearchSuggestResponse(const SearchSuggestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchSuggestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.suggestion_){from._impl_.suggestion_}
    , decltype(_impl_.serverlogscookie_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.search.SearchSuggestResponse)
}

inline void SearchSuggestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.suggestion_){arena}
    , decltype(_impl_.serverlogscookie_){}
  };
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchSuggestResponse::~SearchSuggestResponse() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.search.SearchSuggestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchSuggestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.suggestion_.~RepeatedPtrField();
  _impl_.serverlogscookie_.Destroy();
}

void SearchSuggestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchSuggestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.search.SearchSuggestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.suggestion_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchSuggestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .playapi.proto.finsky.search.Suggestion suggestion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suggestion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchSuggestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.search.SearchSuggestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.search.Suggestion suggestion = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_suggestion_size()); i < n; i++) {
    const auto& repfield = this->_internal_suggestion(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes serverLogsCookie = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serverlogscookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.search.SearchSuggestResponse)
  return target;
}

size_t SearchSuggestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.search.SearchSuggestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .playapi.proto.finsky.search.Suggestion suggestion = 1;
  total_size += 1UL * this->_internal_suggestion_size();
  for (const auto& msg : this->_impl_.suggestion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes serverLogsCookie = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serverlogscookie());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchSuggestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchSuggestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchSuggestResponse::GetClassData() const { return &_class_data_; }


void SearchSuggestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchSuggestResponse*>(&to_msg);
  auto& from = static_cast<const SearchSuggestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.search.SearchSuggestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.suggestion_.MergeFrom(from._impl_.suggestion_);
  if (from._internal_has_serverlogscookie()) {
    _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchSuggestResponse::CopyFrom(const SearchSuggestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.search.SearchSuggestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchSuggestResponse::IsInitialized() const {
  return true;
}

void SearchSuggestResponse::InternalSwap(SearchSuggestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.suggestion_.InternalSwap(&other->_impl_.suggestion_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchSuggestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsearch_2eproto_getter, &descriptor_table_play_5fsearch_2eproto_once,
      file_level_metadata_play_5fsearch_2eproto[2]);
}

// ===================================================================

class Suggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<Suggestion>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_suggestedquery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::playapi::proto::finsky::search::NavSuggestion& navsuggestion(const Suggestion* msg);
  static void set_has_navsuggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serverlogscookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::Image& image(const Suggestion* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::playapi::proto::finsky::link::Link& link(const Suggestion* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::playapi::proto::finsky::document::DocV2& document(const Suggestion* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_searchbackend(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::playapi::proto::finsky::search::NavSuggestion&
Suggestion::_Internal::navsuggestion(const Suggestion* msg) {
  return *msg->_impl_.navsuggestion_;
}
const ::playapi::proto::finsky::Image&
Suggestion::_Internal::image(const Suggestion* msg) {
  return *msg->_impl_.image_;
}
const ::playapi::proto::finsky::link::Link&
Suggestion::_Internal::link(const Suggestion* msg) {
  return *msg->_impl_.link_;
}
const ::playapi::proto::finsky::document::DocV2&
Suggestion::_Internal::document(const Suggestion* msg) {
  return *msg->_impl_.document_;
}
void Suggestion::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Suggestion::clear_link() {
  if (_impl_.link_ != nullptr) _impl_.link_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Suggestion::clear_document() {
  if (_impl_.document_ != nullptr) _impl_.document_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
Suggestion::Suggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.search.Suggestion)
}
Suggestion::Suggestion(const Suggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Suggestion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.suggestedquery_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.navsuggestion_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.link_){nullptr}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.searchbackend_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.suggestedquery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggestedquery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suggestedquery()) {
    _this->_impl_.suggestedquery_.Set(from._internal_suggestedquery(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverlogscookie()) {
    _this->_impl_.serverlogscookie_.Set(from._internal_serverlogscookie(), 
      _this->GetArenaForAllocation());
  }
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_navsuggestion()) {
    _this->_impl_.navsuggestion_ = new ::playapi::proto::finsky::search::NavSuggestion(*from._impl_.navsuggestion_);
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::playapi::proto::finsky::Image(*from._impl_.image_);
  }
  if (from._internal_has_link()) {
    _this->_impl_.link_ = new ::playapi::proto::finsky::link::Link(*from._impl_.link_);
  }
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::playapi::proto::finsky::document::DocV2(*from._impl_.document_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.searchbackend_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.searchbackend_));
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.search.Suggestion)
}

inline void Suggestion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.suggestedquery_){}
    , decltype(_impl_.serverlogscookie_){}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.navsuggestion_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.link_){nullptr}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.searchbackend_){0}
  };
  _impl_.suggestedquery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggestedquery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverlogscookie_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Suggestion::~Suggestion() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.search.Suggestion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Suggestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.suggestedquery_.Destroy();
  _impl_.serverlogscookie_.Destroy();
  _impl_.displaytext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.navsuggestion_;
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.link_;
  if (this != internal_default_instance()) delete _impl_.document_;
}

void Suggestion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Suggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.search.Suggestion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.suggestedquery_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serverlogscookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.navsuggestion_ != nullptr);
      _impl_.navsuggestion_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.link_ != nullptr);
      _impl_.link_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.document_ != nullptr);
      _impl_.document_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_.searchbackend_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Suggestion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string suggestedQuery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_suggestedquery();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.Suggestion.suggestedQuery");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.search.NavSuggestion navSuggestion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_navsuggestion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverLogsCookie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serverlogscookie();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string displayText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.Suggestion.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.link.Link link = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.document.DocV2 document = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 searchBackend = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_searchbackend(&has_bits);
          _impl_.searchbackend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Suggestion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.search.Suggestion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string suggestedQuery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suggestedquery().data(), static_cast<int>(this->_internal_suggestedquery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.Suggestion.suggestedQuery");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suggestedquery(), target);
  }

  // optional .playapi.proto.finsky.search.NavSuggestion navSuggestion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::navsuggestion(this),
        _Internal::navsuggestion(this).GetCachedSize(), target, stream);
  }

  // optional bytes serverLogsCookie = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serverlogscookie(), target);
  }

  // optional .playapi.proto.finsky.Image image = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // optional string displayText = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.Suggestion.displayText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_displaytext(), target);
  }

  // optional .playapi.proto.finsky.link.Link link = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  // optional .playapi.proto.finsky.document.DocV2 document = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  // optional int32 searchBackend = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_searchbackend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.search.Suggestion)
  return target;
}

size_t Suggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.search.Suggestion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string suggestedQuery = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggestedquery());
    }

    // optional bytes serverLogsCookie = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serverlogscookie());
    }

    // optional string displayText = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional .playapi.proto.finsky.search.NavSuggestion navSuggestion = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navsuggestion_);
    }

    // optional .playapi.proto.finsky.Image image = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

    // optional .playapi.proto.finsky.link.Link link = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_);
    }

    // optional .playapi.proto.finsky.document.DocV2 document = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.document_);
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

  }
  // optional int32 searchBackend = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_searchbackend());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Suggestion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Suggestion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Suggestion::GetClassData() const { return &_class_data_; }


void Suggestion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Suggestion*>(&to_msg);
  auto& from = static_cast<const Suggestion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.search.Suggestion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_suggestedquery(from._internal_suggestedquery());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serverlogscookie(from._internal_serverlogscookie());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_navsuggestion()->::playapi::proto::finsky::search::NavSuggestion::MergeFrom(
          from._internal_navsuggestion());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_image()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_image());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_link()->::playapi::proto::finsky::link::Link::MergeFrom(
          from._internal_link());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_document()->::playapi::proto::finsky::document::DocV2::MergeFrom(
          from._internal_document());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_searchbackend(from._internal_searchbackend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Suggestion::CopyFrom(const Suggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.search.Suggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Suggestion::IsInitialized() const {
  return true;
}

void Suggestion::InternalSwap(Suggestion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suggestedquery_, lhs_arena,
      &other->_impl_.suggestedquery_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverlogscookie_, lhs_arena,
      &other->_impl_.serverlogscookie_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Suggestion, _impl_.searchbackend_)
      + sizeof(Suggestion::_impl_.searchbackend_)
      - PROTOBUF_FIELD_OFFSET(Suggestion, _impl_.navsuggestion_)>(
          reinterpret_cast<char*>(&_impl_.navsuggestion_),
          reinterpret_cast<char*>(&other->_impl_.navsuggestion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Suggestion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsearch_2eproto_getter, &descriptor_table_play_5fsearch_2eproto_once,
      file_level_metadata_play_5fsearch_2eproto[3]);
}

// ===================================================================

class NavSuggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<NavSuggestion>()._impl_._has_bits_);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imageblob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::playapi::proto::finsky::Image& image(const NavSuggestion* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::playapi::proto::finsky::Image&
NavSuggestion::_Internal::image(const NavSuggestion* msg) {
  return *msg->_impl_.image_;
}
void NavSuggestion::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
NavSuggestion::NavSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:playapi.proto.finsky.search.NavSuggestion)
}
NavSuggestion::NavSuggestion(const NavSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NavSuggestion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.imageblob_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.image_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docid()) {
    _this->_impl_.docid_.Set(from._internal_docid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imageblob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imageblob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imageblob()) {
    _this->_impl_.imageblob_.Set(from._internal_imageblob(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::playapi::proto::finsky::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:playapi.proto.finsky.search.NavSuggestion)
}

inline void NavSuggestion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.docid_){}
    , decltype(_impl_.imageblob_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.image_){nullptr}
  };
  _impl_.docid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imageblob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imageblob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NavSuggestion::~NavSuggestion() {
  // @@protoc_insertion_point(destructor:playapi.proto.finsky.search.NavSuggestion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavSuggestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.docid_.Destroy();
  _impl_.imageblob_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.image_;
}

void NavSuggestion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NavSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:playapi.proto.finsky.search.NavSuggestion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.docid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.imageblob_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavSuggestion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string docId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_docid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.NavSuggestion.docId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes imageBlob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_imageblob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .playapi.proto.finsky.Image image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "playapi.proto.finsky.search.NavSuggestion.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavSuggestion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:playapi.proto.finsky.search.NavSuggestion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string docId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docid().data(), static_cast<int>(this->_internal_docid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.NavSuggestion.docId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docid(), target);
  }

  // optional bytes imageBlob = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imageblob(), target);
  }

  // optional .playapi.proto.finsky.Image image = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "playapi.proto.finsky.search.NavSuggestion.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playapi.proto.finsky.search.NavSuggestion)
  return target;
}

size_t NavSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:playapi.proto.finsky.search.NavSuggestion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string docId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docid());
    }

    // optional bytes imageBlob = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_imageblob());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .playapi.proto.finsky.Image image = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavSuggestion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NavSuggestion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavSuggestion::GetClassData() const { return &_class_data_; }


void NavSuggestion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NavSuggestion*>(&to_msg);
  auto& from = static_cast<const NavSuggestion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:playapi.proto.finsky.search.NavSuggestion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_docid(from._internal_docid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_imageblob(from._internal_imageblob());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_image()->::playapi::proto::finsky::Image::MergeFrom(
          from._internal_image());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavSuggestion::CopyFrom(const NavSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:playapi.proto.finsky.search.NavSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSuggestion::IsInitialized() const {
  return true;
}

void NavSuggestion::InternalSwap(NavSuggestion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docid_, lhs_arena,
      &other->_impl_.docid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imageblob_, lhs_arena,
      &other->_impl_.imageblob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavSuggestion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_play_5fsearch_2eproto_getter, &descriptor_table_play_5fsearch_2eproto_once,
      file_level_metadata_play_5fsearch_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace search
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::search::SearchResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::search::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::search::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::search::RelatedSearch*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::search::RelatedSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::search::RelatedSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::search::SearchSuggestResponse*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::search::SearchSuggestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::search::SearchSuggestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::search::Suggestion*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::search::Suggestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::search::Suggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::playapi::proto::finsky::search::NavSuggestion*
Arena::CreateMaybeMessage< ::playapi::proto::finsky::search::NavSuggestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::playapi::proto::finsky::search::NavSuggestion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
