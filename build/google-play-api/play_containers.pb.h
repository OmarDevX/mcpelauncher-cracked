// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_containers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_5fcontainers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_5fcontainers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "play_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_5fcontainers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_5fcontainers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_5fcontainers_2eproto;
namespace playapi {
namespace proto {
namespace finsky {
namespace containers {
class ContainerMetadata;
struct ContainerMetadataDefaultTypeInternal;
extern ContainerMetadataDefaultTypeInternal _ContainerMetadata_default_instance_;
class ContainerView;
struct ContainerViewDefaultTypeInternal;
extern ContainerViewDefaultTypeInternal _ContainerView_default_instance_;
}  // namespace containers
}  // namespace finsky
}  // namespace proto
}  // namespace playapi
PROTOBUF_NAMESPACE_OPEN
template<> ::playapi::proto::finsky::containers::ContainerMetadata* Arena::CreateMaybeMessage<::playapi::proto::finsky::containers::ContainerMetadata>(Arena*);
template<> ::playapi::proto::finsky::containers::ContainerView* Arena::CreateMaybeMessage<::playapi::proto::finsky::containers::ContainerView>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playapi {
namespace proto {
namespace finsky {
namespace containers {

// ===================================================================

class ContainerMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.containers.ContainerMetadata) */ {
 public:
  inline ContainerMetadata() : ContainerMetadata(nullptr) {}
  ~ContainerMetadata() override;
  explicit PROTOBUF_CONSTEXPR ContainerMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerMetadata(const ContainerMetadata& from);
  ContainerMetadata(ContainerMetadata&& from) noexcept
    : ContainerMetadata() {
    *this = ::std::move(from);
  }

  inline ContainerMetadata& operator=(const ContainerMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerMetadata& operator=(ContainerMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerMetadata* internal_default_instance() {
    return reinterpret_cast<const ContainerMetadata*>(
               &_ContainerMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContainerMetadata& a, ContainerMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContainerMetadata& from) {
    ContainerMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.containers.ContainerMetadata";
  }
  protected:
  explicit ContainerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerViewFieldNumber = 7,
    kBrowseUrlFieldNumber = 1,
    kNextPageUrlFieldNumber = 2,
    kAnalyticsCookieFieldNumber = 5,
    kLeftIconFieldNumber = 8,
    kRelevanceFieldNumber = 3,
    kEstimatedResultsFieldNumber = 4,
    kOrderedFieldNumber = 6,
  };
  // repeated .playapi.proto.finsky.containers.ContainerView containerView = 7;
  int containerview_size() const;
  private:
  int _internal_containerview_size() const;
  public:
  void clear_containerview();
  ::playapi::proto::finsky::containers::ContainerView* mutable_containerview(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::containers::ContainerView >*
      mutable_containerview();
  private:
  const ::playapi::proto::finsky::containers::ContainerView& _internal_containerview(int index) const;
  ::playapi::proto::finsky::containers::ContainerView* _internal_add_containerview();
  public:
  const ::playapi::proto::finsky::containers::ContainerView& containerview(int index) const;
  ::playapi::proto::finsky::containers::ContainerView* add_containerview();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::containers::ContainerView >&
      containerview() const;

  // optional string browseUrl = 1;
  bool has_browseurl() const;
  private:
  bool _internal_has_browseurl() const;
  public:
  void clear_browseurl();
  const std::string& browseurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browseurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browseurl();
  PROTOBUF_NODISCARD std::string* release_browseurl();
  void set_allocated_browseurl(std::string* browseurl);
  private:
  const std::string& _internal_browseurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browseurl(const std::string& value);
  std::string* _internal_mutable_browseurl();
  public:

  // optional string nextPageUrl = 2;
  bool has_nextpageurl() const;
  private:
  bool _internal_has_nextpageurl() const;
  public:
  void clear_nextpageurl();
  const std::string& nextpageurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nextpageurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nextpageurl();
  PROTOBUF_NODISCARD std::string* release_nextpageurl();
  void set_allocated_nextpageurl(std::string* nextpageurl);
  private:
  const std::string& _internal_nextpageurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nextpageurl(const std::string& value);
  std::string* _internal_mutable_nextpageurl();
  public:

  // optional string analyticsCookie = 5;
  bool has_analyticscookie() const;
  private:
  bool _internal_has_analyticscookie() const;
  public:
  void clear_analyticscookie();
  const std::string& analyticscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analyticscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analyticscookie();
  PROTOBUF_NODISCARD std::string* release_analyticscookie();
  void set_allocated_analyticscookie(std::string* analyticscookie);
  private:
  const std::string& _internal_analyticscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analyticscookie(const std::string& value);
  std::string* _internal_mutable_analyticscookie();
  public:

  // optional .playapi.proto.finsky.Image leftIcon = 8;
  bool has_lefticon() const;
  private:
  bool _internal_has_lefticon() const;
  public:
  void clear_lefticon();
  const ::playapi::proto::finsky::Image& lefticon() const;
  PROTOBUF_NODISCARD ::playapi::proto::finsky::Image* release_lefticon();
  ::playapi::proto::finsky::Image* mutable_lefticon();
  void set_allocated_lefticon(::playapi::proto::finsky::Image* lefticon);
  private:
  const ::playapi::proto::finsky::Image& _internal_lefticon() const;
  ::playapi::proto::finsky::Image* _internal_mutable_lefticon();
  public:
  void unsafe_arena_set_allocated_lefticon(
      ::playapi::proto::finsky::Image* lefticon);
  ::playapi::proto::finsky::Image* unsafe_arena_release_lefticon();

  // optional double relevance = 3;
  bool has_relevance() const;
  private:
  bool _internal_has_relevance() const;
  public:
  void clear_relevance();
  double relevance() const;
  void set_relevance(double value);
  private:
  double _internal_relevance() const;
  void _internal_set_relevance(double value);
  public:

  // optional int64 estimatedResults = 4;
  bool has_estimatedresults() const;
  private:
  bool _internal_has_estimatedresults() const;
  public:
  void clear_estimatedresults();
  int64_t estimatedresults() const;
  void set_estimatedresults(int64_t value);
  private:
  int64_t _internal_estimatedresults() const;
  void _internal_set_estimatedresults(int64_t value);
  public:

  // optional bool ordered = 6;
  bool has_ordered() const;
  private:
  bool _internal_has_ordered() const;
  public:
  void clear_ordered();
  bool ordered() const;
  void set_ordered(bool value);
  private:
  bool _internal_ordered() const;
  void _internal_set_ordered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.containers.ContainerMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::containers::ContainerView > containerview_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browseurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nextpageurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analyticscookie_;
    ::playapi::proto::finsky::Image* lefticon_;
    double relevance_;
    int64_t estimatedresults_;
    bool ordered_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fcontainers_2eproto;
};
// -------------------------------------------------------------------

class ContainerView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playapi.proto.finsky.containers.ContainerView) */ {
 public:
  inline ContainerView() : ContainerView(nullptr) {}
  ~ContainerView() override;
  explicit PROTOBUF_CONSTEXPR ContainerView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerView(const ContainerView& from);
  ContainerView(ContainerView&& from) noexcept
    : ContainerView() {
    *this = ::std::move(from);
  }

  inline ContainerView& operator=(const ContainerView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerView& operator=(ContainerView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerView& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerView* internal_default_instance() {
    return reinterpret_cast<const ContainerView*>(
               &_ContainerView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContainerView& a, ContainerView& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContainerView& from) {
    ContainerView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playapi.proto.finsky.containers.ContainerView";
  }
  protected:
  explicit ContainerView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kListUrlFieldNumber = 3,
    kServerLogsCookieFieldNumber = 4,
    kSelectedFieldNumber = 1,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string listUrl = 3;
  bool has_listurl() const;
  private:
  bool _internal_has_listurl() const;
  public:
  void clear_listurl();
  const std::string& listurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listurl();
  PROTOBUF_NODISCARD std::string* release_listurl();
  void set_allocated_listurl(std::string* listurl);
  private:
  const std::string& _internal_listurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listurl(const std::string& value);
  std::string* _internal_mutable_listurl();
  public:

  // optional bytes serverLogsCookie = 4;
  bool has_serverlogscookie() const;
  private:
  bool _internal_has_serverlogscookie() const;
  public:
  void clear_serverlogscookie();
  const std::string& serverlogscookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverlogscookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverlogscookie();
  PROTOBUF_NODISCARD std::string* release_serverlogscookie();
  void set_allocated_serverlogscookie(std::string* serverlogscookie);
  private:
  const std::string& _internal_serverlogscookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverlogscookie(const std::string& value);
  std::string* _internal_mutable_serverlogscookie();
  public:

  // optional bool selected = 1;
  bool has_selected() const;
  private:
  bool _internal_has_selected() const;
  public:
  void clear_selected();
  bool selected() const;
  void set_selected(bool value);
  private:
  bool _internal_selected() const;
  void _internal_set_selected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:playapi.proto.finsky.containers.ContainerView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverlogscookie_;
    bool selected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_play_5fcontainers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContainerMetadata

// optional string browseUrl = 1;
inline bool ContainerMetadata::_internal_has_browseurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContainerMetadata::has_browseurl() const {
  return _internal_has_browseurl();
}
inline void ContainerMetadata::clear_browseurl() {
  _impl_.browseurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContainerMetadata::browseurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.browseUrl)
  return _internal_browseurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerMetadata::set_browseurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.browseurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerMetadata.browseUrl)
}
inline std::string* ContainerMetadata::mutable_browseurl() {
  std::string* _s = _internal_mutable_browseurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerMetadata.browseUrl)
  return _s;
}
inline const std::string& ContainerMetadata::_internal_browseurl() const {
  return _impl_.browseurl_.Get();
}
inline void ContainerMetadata::_internal_set_browseurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.browseurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerMetadata::_internal_mutable_browseurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.browseurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerMetadata::release_browseurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerMetadata.browseUrl)
  if (!_internal_has_browseurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.browseurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browseurl_.IsDefault()) {
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerMetadata::set_allocated_browseurl(std::string* browseurl) {
  if (browseurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.browseurl_.SetAllocated(browseurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browseurl_.IsDefault()) {
    _impl_.browseurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerMetadata.browseUrl)
}

// optional string nextPageUrl = 2;
inline bool ContainerMetadata::_internal_has_nextpageurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContainerMetadata::has_nextpageurl() const {
  return _internal_has_nextpageurl();
}
inline void ContainerMetadata::clear_nextpageurl() {
  _impl_.nextpageurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContainerMetadata::nextpageurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl)
  return _internal_nextpageurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerMetadata::set_nextpageurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.nextpageurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl)
}
inline std::string* ContainerMetadata::mutable_nextpageurl() {
  std::string* _s = _internal_mutable_nextpageurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl)
  return _s;
}
inline const std::string& ContainerMetadata::_internal_nextpageurl() const {
  return _impl_.nextpageurl_.Get();
}
inline void ContainerMetadata::_internal_set_nextpageurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nextpageurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerMetadata::_internal_mutable_nextpageurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.nextpageurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerMetadata::release_nextpageurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl)
  if (!_internal_has_nextpageurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.nextpageurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nextpageurl_.IsDefault()) {
    _impl_.nextpageurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerMetadata::set_allocated_nextpageurl(std::string* nextpageurl) {
  if (nextpageurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nextpageurl_.SetAllocated(nextpageurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nextpageurl_.IsDefault()) {
    _impl_.nextpageurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerMetadata.nextPageUrl)
}

// optional double relevance = 3;
inline bool ContainerMetadata::_internal_has_relevance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContainerMetadata::has_relevance() const {
  return _internal_has_relevance();
}
inline void ContainerMetadata::clear_relevance() {
  _impl_.relevance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ContainerMetadata::_internal_relevance() const {
  return _impl_.relevance_;
}
inline double ContainerMetadata::relevance() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.relevance)
  return _internal_relevance();
}
inline void ContainerMetadata::_internal_set_relevance(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.relevance_ = value;
}
inline void ContainerMetadata::set_relevance(double value) {
  _internal_set_relevance(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerMetadata.relevance)
}

// optional int64 estimatedResults = 4;
inline bool ContainerMetadata::_internal_has_estimatedresults() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContainerMetadata::has_estimatedresults() const {
  return _internal_has_estimatedresults();
}
inline void ContainerMetadata::clear_estimatedresults() {
  _impl_.estimatedresults_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t ContainerMetadata::_internal_estimatedresults() const {
  return _impl_.estimatedresults_;
}
inline int64_t ContainerMetadata::estimatedresults() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.estimatedResults)
  return _internal_estimatedresults();
}
inline void ContainerMetadata::_internal_set_estimatedresults(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.estimatedresults_ = value;
}
inline void ContainerMetadata::set_estimatedresults(int64_t value) {
  _internal_set_estimatedresults(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerMetadata.estimatedResults)
}

// optional string analyticsCookie = 5;
inline bool ContainerMetadata::_internal_has_analyticscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContainerMetadata::has_analyticscookie() const {
  return _internal_has_analyticscookie();
}
inline void ContainerMetadata::clear_analyticscookie() {
  _impl_.analyticscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContainerMetadata::analyticscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie)
  return _internal_analyticscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerMetadata::set_analyticscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.analyticscookie_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie)
}
inline std::string* ContainerMetadata::mutable_analyticscookie() {
  std::string* _s = _internal_mutable_analyticscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie)
  return _s;
}
inline const std::string& ContainerMetadata::_internal_analyticscookie() const {
  return _impl_.analyticscookie_.Get();
}
inline void ContainerMetadata::_internal_set_analyticscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.analyticscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerMetadata::_internal_mutable_analyticscookie() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.analyticscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerMetadata::release_analyticscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie)
  if (!_internal_has_analyticscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.analyticscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analyticscookie_.IsDefault()) {
    _impl_.analyticscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerMetadata::set_allocated_analyticscookie(std::string* analyticscookie) {
  if (analyticscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.analyticscookie_.SetAllocated(analyticscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analyticscookie_.IsDefault()) {
    _impl_.analyticscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerMetadata.analyticsCookie)
}

// optional bool ordered = 6;
inline bool ContainerMetadata::_internal_has_ordered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ContainerMetadata::has_ordered() const {
  return _internal_has_ordered();
}
inline void ContainerMetadata::clear_ordered() {
  _impl_.ordered_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ContainerMetadata::_internal_ordered() const {
  return _impl_.ordered_;
}
inline bool ContainerMetadata::ordered() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.ordered)
  return _internal_ordered();
}
inline void ContainerMetadata::_internal_set_ordered(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ordered_ = value;
}
inline void ContainerMetadata::set_ordered(bool value) {
  _internal_set_ordered(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerMetadata.ordered)
}

// repeated .playapi.proto.finsky.containers.ContainerView containerView = 7;
inline int ContainerMetadata::_internal_containerview_size() const {
  return _impl_.containerview_.size();
}
inline int ContainerMetadata::containerview_size() const {
  return _internal_containerview_size();
}
inline void ContainerMetadata::clear_containerview() {
  _impl_.containerview_.Clear();
}
inline ::playapi::proto::finsky::containers::ContainerView* ContainerMetadata::mutable_containerview(int index) {
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerMetadata.containerView)
  return _impl_.containerview_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::containers::ContainerView >*
ContainerMetadata::mutable_containerview() {
  // @@protoc_insertion_point(field_mutable_list:playapi.proto.finsky.containers.ContainerMetadata.containerView)
  return &_impl_.containerview_;
}
inline const ::playapi::proto::finsky::containers::ContainerView& ContainerMetadata::_internal_containerview(int index) const {
  return _impl_.containerview_.Get(index);
}
inline const ::playapi::proto::finsky::containers::ContainerView& ContainerMetadata::containerview(int index) const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.containerView)
  return _internal_containerview(index);
}
inline ::playapi::proto::finsky::containers::ContainerView* ContainerMetadata::_internal_add_containerview() {
  return _impl_.containerview_.Add();
}
inline ::playapi::proto::finsky::containers::ContainerView* ContainerMetadata::add_containerview() {
  ::playapi::proto::finsky::containers::ContainerView* _add = _internal_add_containerview();
  // @@protoc_insertion_point(field_add:playapi.proto.finsky.containers.ContainerMetadata.containerView)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playapi::proto::finsky::containers::ContainerView >&
ContainerMetadata::containerview() const {
  // @@protoc_insertion_point(field_list:playapi.proto.finsky.containers.ContainerMetadata.containerView)
  return _impl_.containerview_;
}

// optional .playapi.proto.finsky.Image leftIcon = 8;
inline bool ContainerMetadata::_internal_has_lefticon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lefticon_ != nullptr);
  return value;
}
inline bool ContainerMetadata::has_lefticon() const {
  return _internal_has_lefticon();
}
inline const ::playapi::proto::finsky::Image& ContainerMetadata::_internal_lefticon() const {
  const ::playapi::proto::finsky::Image* p = _impl_.lefticon_;
  return p != nullptr ? *p : reinterpret_cast<const ::playapi::proto::finsky::Image&>(
      ::playapi::proto::finsky::_Image_default_instance_);
}
inline const ::playapi::proto::finsky::Image& ContainerMetadata::lefticon() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerMetadata.leftIcon)
  return _internal_lefticon();
}
inline void ContainerMetadata::unsafe_arena_set_allocated_lefticon(
    ::playapi::proto::finsky::Image* lefticon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lefticon_);
  }
  _impl_.lefticon_ = lefticon;
  if (lefticon) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:playapi.proto.finsky.containers.ContainerMetadata.leftIcon)
}
inline ::playapi::proto::finsky::Image* ContainerMetadata::release_lefticon() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::Image* temp = _impl_.lefticon_;
  _impl_.lefticon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::playapi::proto::finsky::Image* ContainerMetadata::unsafe_arena_release_lefticon() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerMetadata.leftIcon)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::playapi::proto::finsky::Image* temp = _impl_.lefticon_;
  _impl_.lefticon_ = nullptr;
  return temp;
}
inline ::playapi::proto::finsky::Image* ContainerMetadata::_internal_mutable_lefticon() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.lefticon_ == nullptr) {
    auto* p = CreateMaybeMessage<::playapi::proto::finsky::Image>(GetArenaForAllocation());
    _impl_.lefticon_ = p;
  }
  return _impl_.lefticon_;
}
inline ::playapi::proto::finsky::Image* ContainerMetadata::mutable_lefticon() {
  ::playapi::proto::finsky::Image* _msg = _internal_mutable_lefticon();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerMetadata.leftIcon)
  return _msg;
}
inline void ContainerMetadata::set_allocated_lefticon(::playapi::proto::finsky::Image* lefticon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lefticon_);
  }
  if (lefticon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefticon));
    if (message_arena != submessage_arena) {
      lefticon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefticon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.lefticon_ = lefticon;
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerMetadata.leftIcon)
}

// -------------------------------------------------------------------

// ContainerView

// optional bool selected = 1;
inline bool ContainerView::_internal_has_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContainerView::has_selected() const {
  return _internal_has_selected();
}
inline void ContainerView::clear_selected() {
  _impl_.selected_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ContainerView::_internal_selected() const {
  return _impl_.selected_;
}
inline bool ContainerView::selected() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerView.selected)
  return _internal_selected();
}
inline void ContainerView::_internal_set_selected(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.selected_ = value;
}
inline void ContainerView::set_selected(bool value) {
  _internal_set_selected(value);
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerView.selected)
}

// optional string title = 2;
inline bool ContainerView::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContainerView::has_title() const {
  return _internal_has_title();
}
inline void ContainerView::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContainerView::title() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerView.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerView::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerView.title)
}
inline std::string* ContainerView::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerView.title)
  return _s;
}
inline const std::string& ContainerView::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ContainerView::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerView::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerView::release_title() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerView.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerView::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerView.title)
}

// optional string listUrl = 3;
inline bool ContainerView::_internal_has_listurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContainerView::has_listurl() const {
  return _internal_has_listurl();
}
inline void ContainerView::clear_listurl() {
  _impl_.listurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContainerView::listurl() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerView.listUrl)
  return _internal_listurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerView::set_listurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.listurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerView.listUrl)
}
inline std::string* ContainerView::mutable_listurl() {
  std::string* _s = _internal_mutable_listurl();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerView.listUrl)
  return _s;
}
inline const std::string& ContainerView::_internal_listurl() const {
  return _impl_.listurl_.Get();
}
inline void ContainerView::_internal_set_listurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.listurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerView::_internal_mutable_listurl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.listurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerView::release_listurl() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerView.listUrl)
  if (!_internal_has_listurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.listurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listurl_.IsDefault()) {
    _impl_.listurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerView::set_allocated_listurl(std::string* listurl) {
  if (listurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.listurl_.SetAllocated(listurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listurl_.IsDefault()) {
    _impl_.listurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerView.listUrl)
}

// optional bytes serverLogsCookie = 4;
inline bool ContainerView::_internal_has_serverlogscookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContainerView::has_serverlogscookie() const {
  return _internal_has_serverlogscookie();
}
inline void ContainerView::clear_serverlogscookie() {
  _impl_.serverlogscookie_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContainerView::serverlogscookie() const {
  // @@protoc_insertion_point(field_get:playapi.proto.finsky.containers.ContainerView.serverLogsCookie)
  return _internal_serverlogscookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerView::set_serverlogscookie(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.serverlogscookie_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playapi.proto.finsky.containers.ContainerView.serverLogsCookie)
}
inline std::string* ContainerView::mutable_serverlogscookie() {
  std::string* _s = _internal_mutable_serverlogscookie();
  // @@protoc_insertion_point(field_mutable:playapi.proto.finsky.containers.ContainerView.serverLogsCookie)
  return _s;
}
inline const std::string& ContainerView::_internal_serverlogscookie() const {
  return _impl_.serverlogscookie_.Get();
}
inline void ContainerView::_internal_set_serverlogscookie(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.serverlogscookie_.Set(value, GetArenaForAllocation());
}
inline std::string* ContainerView::_internal_mutable_serverlogscookie() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.serverlogscookie_.Mutable(GetArenaForAllocation());
}
inline std::string* ContainerView::release_serverlogscookie() {
  // @@protoc_insertion_point(field_release:playapi.proto.finsky.containers.ContainerView.serverLogsCookie)
  if (!_internal_has_serverlogscookie()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.serverlogscookie_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContainerView::set_allocated_serverlogscookie(std::string* serverlogscookie) {
  if (serverlogscookie != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.serverlogscookie_.SetAllocated(serverlogscookie, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverlogscookie_.IsDefault()) {
    _impl_.serverlogscookie_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playapi.proto.finsky.containers.ContainerView.serverLogsCookie)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace containers
}  // namespace finsky
}  // namespace proto
}  // namespace playapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_5fcontainers_2eproto
